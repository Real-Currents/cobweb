/* -*- Mode: JavaScript; coding: utf-8; tab-width: 3; indent-tabs-mode: tab; c-basic-offset: 3 -*-
 *******************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Copyright create3000, Scheffelstra√üe 31a, Leipzig, Germany 2011.
 *
 * All rights reserved. Holger Seelig <holger.seelig@yahoo.de>.
 *
 * The copyright notice above does not evidence any actual of intended
 * publication of such source code, and is an unpublished work by create3000.
 * This material contains CONFIDENTIAL INFORMATION that is the property of
 * create3000.
 *
 * No permission is granted to copy, distribute, or create derivative works from
 * the contents of this software, in whole or in part, without the prior written
 * permission of create3000.
 *
 * NON-MILITARY USE ONLY
 *
 * All create3000 software are effectively free software with a non-military use
 * restriction. It is free. Well commented source is provided. You may reuse the
 * source in any way you please with the exception anything that uses it must be
 * marked to indicate is contains 'non-military use only' components.
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Copyright 2015, 2016 Holger Seelig <holger.seelig@yahoo.de>.
 *
 * This file is part of the Cobweb Project.
 *
 * Cobweb is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License version 3 only, as published by the
 * Free Software Foundation.
 *
 * Cobweb is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU General Public License version 3 for more
 * details (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version 3
 * along with Cobweb.  If not, see <http://www.gnu.org/licenses/gpl.html> for a
 * copy of the GPLv3 License.
 *
 * For Silvio, Joy and Adi.
 *
 ******************************************************************************/


/** vim: et:ts=4:sw=4:sts=4
 * @license RequireJS 2.1.4 Copyright (c) 2010-2012, The Dojo Foundation All Rights Reserved.
 * Available via the MIT or new BSD license.
 * see: http://github.com/jrburke/requirejs for details
 */
//Not using strict: uneven strict support in browsers, #392, and causes
//problems with requirejs.exec()/transpiler plugins that may not be strict.
/*jslint regexp: true, nomen: true, sloppy: true */
/*global window, navigator, document, importScripts, setTimeout, opera */

var requirejs, require, define;
(function (global) {
    var req, s, head, baseElement, dataMain, src,
        interactiveScript, currentlyAddingScript, mainScript, subPath,
        version = '2.1.4',
        commentRegExp = /(\/\*([\s\S]*?)\*\/|([^:]|^)\/\/(.*)$)/mg,
        cjsRequireRegExp = /[^.]\s*require\s*\(\s*["']([^'"\s]+)["']\s*\)/g,
        jsSuffixRegExp = /\.js$/,
        currDirRegExp = /^\.\//,
        op = Object.prototype,
        ostring = op.toString,
        hasOwn = op.hasOwnProperty,
        ap = Array.prototype,
        apsp = ap.splice,
        isBrowser = !!(typeof window !== 'undefined' && navigator && document),
        isWebWorker = !isBrowser && typeof importScripts !== 'undefined',
        //PS3 indicates loaded and complete, but need to wait for complete
        //specifically. Sequence is 'loading', 'loaded', execution,
        // then 'complete'. The UA check is unfortunate, but not sure how
        //to feature test w/o causing perf issues.
        readyRegExp = isBrowser && navigator.platform === 'PLAYSTATION 3' ?
                      /^complete$/ : /^(complete|loaded)$/,
        defContextName = '_',
        //Oh the tragedy, detecting opera. See the usage of isOpera for reason.
        isOpera = typeof opera !== 'undefined' && opera.toString() === '[object Opera]',
        contexts = {},
        cfg = {},
        globalDefQueue = [],
        useInteractive = false;

    function isFunction(it) {
        return ostring.call(it) === '[object Function]';
    }

    function isArray(it) {
        return ostring.call(it) === '[object Array]';
    }

    /**
     * Helper function for iterating over an array. If the func returns
     * a true value, it will break out of the loop.
     */
    function each(ary, func) {
        if (ary) {
            var i;
            for (i = 0; i < ary.length; i += 1) {
                if (ary[i] && func(ary[i], i, ary)) {
                    break;
                }
            }
        }
    }

    /**
     * Helper function for iterating over an array backwards. If the func
     * returns a true value, it will break out of the loop.
     */
    function eachReverse(ary, func) {
        if (ary) {
            var i;
            for (i = ary.length - 1; i > -1; i -= 1) {
                if (ary[i] && func(ary[i], i, ary)) {
                    break;
                }
            }
        }
    }

    function hasProp(obj, prop) {
        return hasOwn.call(obj, prop);
    }

    function getOwn(obj, prop) {
        return hasProp(obj, prop) && obj[prop];
    }

    /**
     * Cycles over properties in an object and calls a function for each
     * property value. If the function returns a truthy value, then the
     * iteration is stopped.
     */
    function eachProp(obj, func) {
        var prop;
        for (prop in obj) {
            if (hasProp(obj, prop)) {
                if (func(obj[prop], prop)) {
                    break;
                }
            }
        }
    }

    /**
     * Simple function to mix in properties from source into target,
     * but only if target does not already have a property of the same name.
     */
    function mixin(target, source, force, deepStringMixin) {
        if (source) {
            eachProp(source, function (value, prop) {
                if (force || !hasProp(target, prop)) {
                    if (deepStringMixin && typeof value !== 'string') {
                        if (!target[prop]) {
                            target[prop] = {};
                        }
                        mixin(target[prop], value, force, deepStringMixin);
                    } else {
                        target[prop] = value;
                    }
                }
            });
        }
        return target;
    }

    //Similar to Function.prototype.bind, but the 'this' object is specified
    //first, since it is easier to read/figure out what 'this' will be.
    function bind(obj, fn) {
        return function () {
            return fn.apply(obj, arguments);
        };
    }

    function scripts() {
        return document.getElementsByTagName('script');
    }

    //Allow getting a global that expressed in
    //dot notation, like 'a.b.c'.
    function getGlobal(value) {
        if (!value) {
            return value;
        }
        var g = global;
        each(value.split('.'), function (part) {
            g = g[part];
        });
        return g;
    }

    /**
     * Constructs an error with a pointer to an URL with more information.
     * @param {String} id the error ID that maps to an ID on a web page.
     * @param {String} message human readable error.
     * @param {Error} [err] the original error, if there is one.
     *
     * @returns {Error}
     */
    function makeError(id, msg, err, requireModules) {
        var e = new Error(msg + '\nhttp://requirejs.org/docs/errors.html#' + id);
        e.requireType = id;
        e.requireModules = requireModules;
        if (err) {
            e.originalError = err;
        }
        return e;
    }

    if (typeof define !== 'undefined') {
        //If a define is already in play via another AMD loader,
        //do not overwrite.
        return;
    }

    if (typeof requirejs !== 'undefined') {
        if (isFunction(requirejs)) {
            //Do not overwrite and existing requirejs instance.
            return;
        }
        cfg = requirejs;
        requirejs = undefined;
    }

    //Allow for a require config object
    if (typeof require !== 'undefined' && !isFunction(require)) {
        //assume it is a config object.
        cfg = require;
        require = undefined;
    }

    function newContext(contextName) {
        var inCheckLoaded, Module, context, handlers,
            checkLoadedTimeoutId,
            config = {
                waitSeconds: 7,
                baseUrl: './',
                paths: {},
                pkgs: {},
                shim: {},
                map: {},
                config: {}
            },
            registry = {},
            undefEvents = {},
            defQueue = [],
            defined = {},
            urlFetched = {},
            requireCounter = 1,
            unnormalizedCounter = 1;

        /**
         * Trims the . and .. from an array of path segments.
         * It will keep a leading path segment if a .. will become
         * the first path segment, to help with module name lookups,
         * which act like paths, but can be remapped. But the end result,
         * all paths that use this function should look normalized.
         * NOTE: this method MODIFIES the input array.
         * @param {Array} ary the array of path segments.
         */
        function trimDots(ary) {
            var i, part;
            for (i = 0; ary[i]; i += 1) {
                part = ary[i];
                if (part === '.') {
                    ary.splice(i, 1);
                    i -= 1;
                } else if (part === '..') {
                    if (i === 1 && (ary[2] === '..' || ary[0] === '..')) {
                        //End of the line. Keep at least one non-dot
                        //path segment at the front so it can be mapped
                        //correctly to disk. Otherwise, there is likely
                        //no path mapping for a path starting with '..'.
                        //This can still fail, but catches the most reasonable
                        //uses of ..
                        break;
                    } else if (i > 0) {
                        ary.splice(i - 1, 2);
                        i -= 2;
                    }
                }
            }
        }

        /**
         * Given a relative module name, like ./something, normalize it to
         * a real name that can be mapped to a path.
         * @param {String} name the relative name
         * @param {String} baseName a real name that the name arg is relative
         * to.
         * @param {Boolean} applyMap apply the map config to the value. Should
         * only be done if this normalization is for a dependency ID.
         * @returns {String} normalized name
         */
        function normalize(name, baseName, applyMap) {
            var pkgName, pkgConfig, mapValue, nameParts, i, j, nameSegment,
                foundMap, foundI, foundStarMap, starI,
                baseParts = baseName && baseName.split('/'),
                normalizedBaseParts = baseParts,
                map = config.map,
                starMap = map && map['*'];

            //Adjust any relative paths.
            if (name && name.charAt(0) === '.') {
                //If have a base name, try to normalize against it,
                //otherwise, assume it is a top-level require that will
                //be relative to baseUrl in the end.
                if (baseName) {
                    if (getOwn(config.pkgs, baseName)) {
                        //If the baseName is a package name, then just treat it as one
                        //name to concat the name with.
                        normalizedBaseParts = baseParts = [baseName];
                    } else {
                        //Convert baseName to array, and lop off the last part,
                        //so that . matches that 'directory' and not name of the baseName's
                        //module. For instance, baseName of 'one/two/three', maps to
                        //'one/two/three.js', but we want the directory, 'one/two' for
                        //this normalization.
                        normalizedBaseParts = baseParts.slice(0, baseParts.length - 1);
                    }

                    name = normalizedBaseParts.concat(name.split('/'));
                    trimDots(name);

                    //Some use of packages may use a . path to reference the
                    //'main' module name, so normalize for that.
                    pkgConfig = getOwn(config.pkgs, (pkgName = name[0]));
                    name = name.join('/');
                    if (pkgConfig && name === pkgName + '/' + pkgConfig.main) {
                        name = pkgName;
                    }
                } else if (name.indexOf('./') === 0) {
                    // No baseName, so this is ID is resolved relative
                    // to baseUrl, pull off the leading dot.
                    name = name.substring(2);
                }
            }

            //Apply map config if available.
            if (applyMap && (baseParts || starMap) && map) {
                nameParts = name.split('/');

                for (i = nameParts.length; i > 0; i -= 1) {
                    nameSegment = nameParts.slice(0, i).join('/');

                    if (baseParts) {
                        //Find the longest baseName segment match in the config.
                        //So, do joins on the biggest to smallest lengths of baseParts.
                        for (j = baseParts.length; j > 0; j -= 1) {
                            mapValue = getOwn(map, baseParts.slice(0, j).join('/'));

                            //baseName segment has config, find if it has one for
                            //this name.
                            if (mapValue) {
                                mapValue = getOwn(mapValue, nameSegment);
                                if (mapValue) {
                                    //Match, update name to the new value.
                                    foundMap = mapValue;
                                    foundI = i;
                                    break;
                                }
                            }
                        }
                    }

                    if (foundMap) {
                        break;
                    }

                    //Check for a star map match, but just hold on to it,
                    //if there is a shorter segment match later in a matching
                    //config, then favor over this star map.
                    if (!foundStarMap && starMap && getOwn(starMap, nameSegment)) {
                        foundStarMap = getOwn(starMap, nameSegment);
                        starI = i;
                    }
                }

                if (!foundMap && foundStarMap) {
                    foundMap = foundStarMap;
                    foundI = starI;
                }

                if (foundMap) {
                    nameParts.splice(0, foundI, foundMap);
                    name = nameParts.join('/');
                }
            }

            return name;
        }

        function removeScript(name) {
            if (isBrowser) {
                each(scripts(), function (scriptNode) {
                    if (scriptNode.getAttribute('data-requiremodule') === name &&
                            scriptNode.getAttribute('data-requirecontext') === context.contextName) {
                        scriptNode.parentNode.removeChild(scriptNode);
                        return true;
                    }
                });
            }
        }

        function hasPathFallback(id) {
            var pathConfig = getOwn(config.paths, id);
            if (pathConfig && isArray(pathConfig) && pathConfig.length > 1) {
                removeScript(id);
                //Pop off the first array value, since it failed, and
                //retry
                pathConfig.shift();
                context.require.undef(id);
                context.require([id]);
                return true;
            }
        }

        //Turns a plugin!resource to [plugin, resource]
        //with the plugin being undefined if the name
        //did not have a plugin prefix.
        function splitPrefix(name) {
            var prefix,
                index = name ? name.indexOf('!') : -1;
            if (index > -1) {
                prefix = name.substring(0, index);
                name = name.substring(index + 1, name.length);
            }
            return [prefix, name];
        }

        /**
         * Creates a module mapping that includes plugin prefix, module
         * name, and path. If parentModuleMap is provided it will
         * also normalize the name via require.normalize()
         *
         * @param {String} name the module name
         * @param {String} [parentModuleMap] parent module map
         * for the module name, used to resolve relative names.
         * @param {Boolean} isNormalized: is the ID already normalized.
         * This is true if this call is done for a define() module ID.
         * @param {Boolean} applyMap: apply the map config to the ID.
         * Should only be true if this map is for a dependency.
         *
         * @returns {Object}
         */
        function makeModuleMap(name, parentModuleMap, isNormalized, applyMap) {
            var url, pluginModule, suffix, nameParts,
                prefix = null,
                parentName = parentModuleMap ? parentModuleMap.name : null,
                originalName = name,
                isDefine = true,
                normalizedName = '';

            //If no name, then it means it is a require call, generate an
            //internal name.
            if (!name) {
                isDefine = false;
                name = '_@r' + (requireCounter += 1);
            }

            nameParts = splitPrefix(name);
            prefix = nameParts[0];
            name = nameParts[1];

            if (prefix) {
                prefix = normalize(prefix, parentName, applyMap);
                pluginModule = getOwn(defined, prefix);
            }

            //Account for relative paths if there is a base name.
            if (name) {
                if (prefix) {
                    if (pluginModule && pluginModule.normalize) {
                        //Plugin is loaded, use its normalize method.
                        normalizedName = pluginModule.normalize(name, function (name) {
                            return normalize(name, parentName, applyMap);
                        });
                    } else {
                        normalizedName = normalize(name, parentName, applyMap);
                    }
                } else {
                    //A regular module.
                    normalizedName = normalize(name, parentName, applyMap);

                    //Normalized name may be a plugin ID due to map config
                    //application in normalize. The map config values must
                    //already be normalized, so do not need to redo that part.
                    nameParts = splitPrefix(normalizedName);
                    prefix = nameParts[0];
                    normalizedName = nameParts[1];
                    isNormalized = true;

                    url = context.nameToUrl(normalizedName);
                }
            }

            //If the id is a plugin id that cannot be determined if it needs
            //normalization, stamp it with a unique ID so two matching relative
            //ids that may conflict can be separate.
            suffix = prefix && !pluginModule && !isNormalized ?
                     '_unnormalized' + (unnormalizedCounter += 1) :
                     '';

            return {
                prefix: prefix,
                name: normalizedName,
                parentMap: parentModuleMap,
                unnormalized: !!suffix,
                url: url,
                originalName: originalName,
                isDefine: isDefine,
                id: (prefix ?
                        prefix + '!' + normalizedName :
                        normalizedName) + suffix
            };
        }

        function getModule(depMap) {
            var id = depMap.id,
                mod = getOwn(registry, id);

            if (!mod) {
                mod = registry[id] = new context.Module(depMap);
            }

            return mod;
        }

        function on(depMap, name, fn) {
            var id = depMap.id,
                mod = getOwn(registry, id);

            if (hasProp(defined, id) &&
                    (!mod || mod.defineEmitComplete)) {
                if (name === 'defined') {
                    fn(defined[id]);
                }
            } else {
                getModule(depMap).on(name, fn);
            }
        }

        function onError(err, errback) {
            var ids = err.requireModules,
                notified = false;

            if (errback) {
                errback(err);
            } else {
                each(ids, function (id) {
                    var mod = getOwn(registry, id);
                    if (mod) {
                        //Set error on module, so it skips timeout checks.
                        mod.error = err;
                        if (mod.events.error) {
                            notified = true;
                            mod.emit('error', err);
                        }
                    }
                });

                if (!notified) {
                    req.onError(err);
                }
            }
        }

        /**
         * Internal method to transfer globalQueue items to this context's
         * defQueue.
         */
        function takeGlobalQueue() {
            //Push all the globalDefQueue items into the context's defQueue
            if (globalDefQueue.length) {
                //Array splice in the values since the context code has a
                //local var ref to defQueue, so cannot just reassign the one
                //on context.
                apsp.apply(defQueue,
                           [defQueue.length - 1, 0].concat(globalDefQueue));
                globalDefQueue = [];
            }
        }

        handlers = {
            'require': function (mod) {
                if (mod.require) {
                    return mod.require;
                } else {
                    return (mod.require = context.makeRequire(mod.map));
                }
            },
            'exports': function (mod) {
                mod.usingExports = true;
                if (mod.map.isDefine) {
                    if (mod.exports) {
                        return mod.exports;
                    } else {
                        return (mod.exports = defined[mod.map.id] = {});
                    }
                }
            },
            'module': function (mod) {
                if (mod.module) {
                    return mod.module;
                } else {
                    return (mod.module = {
                        id: mod.map.id,
                        uri: mod.map.url,
                        config: function () {
                            return (config.config && getOwn(config.config, mod.map.id)) || {};
                        },
                        exports: defined[mod.map.id]
                    });
                }
            }
        };

        function cleanRegistry(id) {
            //Clean up machinery used for waiting modules.
            delete registry[id];
        }

        function breakCycle(mod, traced, processed) {
            var id = mod.map.id;

            if (mod.error) {
                mod.emit('error', mod.error);
            } else {
                traced[id] = true;
                each(mod.depMaps, function (depMap, i) {
                    var depId = depMap.id,
                        dep = getOwn(registry, depId);

                    //Only force things that have not completed
                    //being defined, so still in the registry,
                    //and only if it has not been matched up
                    //in the module already.
                    if (dep && !mod.depMatched[i] && !processed[depId]) {
                        if (getOwn(traced, depId)) {
                            mod.defineDep(i, defined[depId]);
                            mod.check(); //pass false?
                        } else {
                            breakCycle(dep, traced, processed);
                        }
                    }
                });
                processed[id] = true;
            }
        }

        function checkLoaded() {
            var map, modId, err, usingPathFallback,
                waitInterval = config.waitSeconds * 1000,
                //It is possible to disable the wait interval by using waitSeconds of 0.
                expired = waitInterval && (context.startTime + waitInterval) < new Date().getTime(),
                noLoads = [],
                reqCalls = [],
                stillLoading = false,
                needCycleCheck = true;

            //Do not bother if this call was a result of a cycle break.
            if (inCheckLoaded) {
                return;
            }

            inCheckLoaded = true;

            //Figure out the state of all the modules.
            eachProp(registry, function (mod) {
                map = mod.map;
                modId = map.id;

                //Skip things that are not enabled or in error state.
                if (!mod.enabled) {
                    return;
                }

                if (!map.isDefine) {
                    reqCalls.push(mod);
                }

                if (!mod.error) {
                    //If the module should be executed, and it has not
                    //been inited and time is up, remember it.
                    if (!mod.inited && expired) {
                        if (hasPathFallback(modId)) {
                            usingPathFallback = true;
                            stillLoading = true;
                        } else {
                            noLoads.push(modId);
                            removeScript(modId);
                        }
                    } else if (!mod.inited && mod.fetched && map.isDefine) {
                        stillLoading = true;
                        if (!map.prefix) {
                            //No reason to keep looking for unfinished
                            //loading. If the only stillLoading is a
                            //plugin resource though, keep going,
                            //because it may be that a plugin resource
                            //is waiting on a non-plugin cycle.
                            return (needCycleCheck = false);
                        }
                    }
                }
            });

            if (expired && noLoads.length) {
                //If wait time expired, throw error of unloaded modules.
                err = makeError('timeout', 'Load timeout for modules: ' + noLoads, null, noLoads);
                err.contextName = context.contextName;
                return onError(err);
            }

            //Not expired, check for a cycle.
            if (needCycleCheck) {
                each(reqCalls, function (mod) {
                    breakCycle(mod, {}, {});
                });
            }

            //If still waiting on loads, and the waiting load is something
            //other than a plugin resource, or there are still outstanding
            //scripts, then just try back later.
            if ((!expired || usingPathFallback) && stillLoading) {
                //Something is still waiting to load. Wait for it, but only
                //if a timeout is not already in effect.
                if ((isBrowser || isWebWorker) && !checkLoadedTimeoutId) {
                    checkLoadedTimeoutId = setTimeout(function () {
                        checkLoadedTimeoutId = 0;
                        checkLoaded();
                    }, 50);
                }
            }

            inCheckLoaded = false;
        }

        Module = function (map) {
            this.events = getOwn(undefEvents, map.id) || {};
            this.map = map;
            this.shim = getOwn(config.shim, map.id);
            this.depExports = [];
            this.depMaps = [];
            this.depMatched = [];
            this.pluginMaps = {};
            this.depCount = 0;

            /* this.exports this.factory
               this.depMaps = [],
               this.enabled, this.fetched
            */
        };

        Module.prototype = {
            init: function (depMaps, factory, errback, options) {
                options = options || {};

                //Do not do more inits if already done. Can happen if there
                //are multiple define calls for the same module. That is not
                //a normal, common case, but it is also not unexpected.
                if (this.inited) {
                    return;
                }

                this.factory = factory;

                if (errback) {
                    //Register for errors on this module.
                    this.on('error', errback);
                } else if (this.events.error) {
                    //If no errback already, but there are error listeners
                    //on this module, set up an errback to pass to the deps.
                    errback = bind(this, function (err) {
                        this.emit('error', err);
                    });
                }

                //Do a copy of the dependency array, so that
                //source inputs are not modified. For example
                //"shim" deps are passed in here directly, and
                //doing a direct modification of the depMaps array
                //would affect that config.
                this.depMaps = depMaps && depMaps.slice(0);

                this.errback = errback;

                //Indicate this module has be initialized
                this.inited = true;

                this.ignore = options.ignore;

                //Could have option to init this module in enabled mode,
                //or could have been previously marked as enabled. However,
                //the dependencies are not known until init is called. So
                //if enabled previously, now trigger dependencies as enabled.
                if (options.enabled || this.enabled) {
                    //Enable this module and dependencies.
                    //Will call this.check()
                    this.enable();
                } else {
                    this.check();
                }
            },

            defineDep: function (i, depExports) {
                //Because of cycles, defined callback for a given
                //export can be called more than once.
                if (!this.depMatched[i]) {
                    this.depMatched[i] = true;
                    this.depCount -= 1;
                    this.depExports[i] = depExports;
                }
            },

            fetch: function () {
                if (this.fetched) {
                    return;
                }
                this.fetched = true;

                context.startTime = (new Date()).getTime();

                var map = this.map;

                //If the manager is for a plugin managed resource,
                //ask the plugin to load it now.
                if (this.shim) {
                    context.makeRequire(this.map, {
                        enableBuildCallback: true
                    })(this.shim.deps || [], bind(this, function () {
                        return map.prefix ? this.callPlugin() : this.load();
                    }));
                } else {
                    //Regular dependency.
                    return map.prefix ? this.callPlugin() : this.load();
                }
            },

            load: function () {
                var url = this.map.url;

                //Regular dependency.
                if (!urlFetched[url]) {
                    urlFetched[url] = true;
                    context.load(this.map.id, url);
                }
            },

            /**
             * Checks is the module is ready to define itself, and if so,
             * define it.
             */
            check: function () {
                if (!this.enabled || this.enabling) {
                    return;
                }

                var err, cjsModule,
                    id = this.map.id,
                    depExports = this.depExports,
                    exports = this.exports,
                    factory = this.factory;

                if (!this.inited) {
                    this.fetch();
                } else if (this.error) {
                    this.emit('error', this.error);
                } else if (!this.defining) {
                    //The factory could trigger another require call
                    //that would result in checking this module to
                    //define itself again. If already in the process
                    //of doing that, skip this work.
                    this.defining = true;

                    if (this.depCount < 1 && !this.defined) {
                        if (isFunction(factory)) {
                            //If there is an error listener, favor passing
                            //to that instead of throwing an error.
                            if (this.events.error) {
                                try {
                                    exports = context.execCb(id, factory, depExports, exports);
                                } catch (e) {
                                    err = e;
                                }
                            } else {
                                exports = context.execCb(id, factory, depExports, exports);
                            }

                            if (this.map.isDefine) {
                                //If setting exports via 'module' is in play,
                                //favor that over return value and exports. After that,
                                //favor a non-undefined return value over exports use.
                                cjsModule = this.module;
                                if (cjsModule &&
                                        cjsModule.exports !== undefined &&
                                        //Make sure it is not already the exports value
                                        cjsModule.exports !== this.exports) {
                                    exports = cjsModule.exports;
                                } else if (exports === undefined && this.usingExports) {
                                    //exports already set the defined value.
                                    exports = this.exports;
                                }
                            }

                            if (err) {
                                err.requireMap = this.map;
                                err.requireModules = [this.map.id];
                                err.requireType = 'define';
                                return onError((this.error = err));
                            }

                        } else {
                            //Just a literal value
                            exports = factory;
                        }

                        this.exports = exports;

                        if (this.map.isDefine && !this.ignore) {
                            defined[id] = exports;

                            if (req.onResourceLoad) {
                                req.onResourceLoad(context, this.map, this.depMaps);
                            }
                        }

                        //Clean up
                        delete registry[id];

                        this.defined = true;
                    }

                    //Finished the define stage. Allow calling check again
                    //to allow define notifications below in the case of a
                    //cycle.
                    this.defining = false;

                    if (this.defined && !this.defineEmitted) {
                        this.defineEmitted = true;
                        this.emit('defined', this.exports);
                        this.defineEmitComplete = true;
                    }

                }
            },

            callPlugin: function () {
                var map = this.map,
                    id = map.id,
                    //Map already normalized the prefix.
                    pluginMap = makeModuleMap(map.prefix);

                //Mark this as a dependency for this plugin, so it
                //can be traced for cycles.
                this.depMaps.push(pluginMap);

                on(pluginMap, 'defined', bind(this, function (plugin) {
                    var load, normalizedMap, normalizedMod,
                        name = this.map.name,
                        parentName = this.map.parentMap ? this.map.parentMap.name : null,
                        localRequire = context.makeRequire(map.parentMap, {
                            enableBuildCallback: true
                        });

                    //If current map is not normalized, wait for that
                    //normalized name to load instead of continuing.
                    if (this.map.unnormalized) {
                        //Normalize the ID if the plugin allows it.
                        if (plugin.normalize) {
                            name = plugin.normalize(name, function (name) {
                                return normalize(name, parentName, true);
                            }) || '';
                        }

                        //prefix and name should already be normalized, no need
                        //for applying map config again either.
                        normalizedMap = makeModuleMap(map.prefix + '!' + name,
                                                      this.map.parentMap);
                        on(normalizedMap,
                            'defined', bind(this, function (value) {
                                this.init([], function () { return value; }, null, {
                                    enabled: true,
                                    ignore: true
                                });
                            }));

                        normalizedMod = getOwn(registry, normalizedMap.id);
                        if (normalizedMod) {
                            //Mark this as a dependency for this plugin, so it
                            //can be traced for cycles.
                            this.depMaps.push(normalizedMap);

                            if (this.events.error) {
                                normalizedMod.on('error', bind(this, function (err) {
                                    this.emit('error', err);
                                }));
                            }
                            normalizedMod.enable();
                        }

                        return;
                    }

                    load = bind(this, function (value) {
                        this.init([], function () { return value; }, null, {
                            enabled: true
                        });
                    });

                    load.error = bind(this, function (err) {
                        this.inited = true;
                        this.error = err;
                        err.requireModules = [id];

                        //Remove temp unnormalized modules for this module,
                        //since they will never be resolved otherwise now.
                        eachProp(registry, function (mod) {
                            if (mod.map.id.indexOf(id + '_unnormalized') === 0) {
                                cleanRegistry(mod.map.id);
                            }
                        });

                        onError(err);
                    });

                    //Allow plugins to load other code without having to know the
                    //context or how to 'complete' the load.
                    load.fromText = bind(this, function (text, textAlt) {
                        /*jslint evil: true */
                        var moduleName = map.name,
                            moduleMap = makeModuleMap(moduleName),
                            hasInteractive = useInteractive;

                        //As of 2.1.0, support just passing the text, to reinforce
                        //fromText only being called once per resource. Still
                        //support old style of passing moduleName but discard
                        //that moduleName in favor of the internal ref.
                        if (textAlt) {
                            text = textAlt;
                        }

                        //Turn off interactive script matching for IE for any define
                        //calls in the text, then turn it back on at the end.
                        if (hasInteractive) {
                            useInteractive = false;
                        }

                        //Prime the system by creating a module instance for
                        //it.
                        getModule(moduleMap);

                        //Transfer any config to this other module.
                        if (hasProp(config.config, id)) {
                            config.config[moduleName] = config.config[id];
                        }

                        try {
                            req.exec(text);
                        } catch (e) {
                            return onError(makeError('fromtexteval',
                                             'fromText eval for ' + id +
                                            ' failed: ' + e,
                                             e,
                                             [id]));
                        }

                        if (hasInteractive) {
                            useInteractive = true;
                        }

                        //Mark this as a dependency for the plugin
                        //resource
                        this.depMaps.push(moduleMap);

                        //Support anonymous modules.
                        context.completeLoad(moduleName);

                        //Bind the value of that module to the value for this
                        //resource ID.
                        localRequire([moduleName], load);
                    });

                    //Use parentName here since the plugin's name is not reliable,
                    //could be some weird string with no path that actually wants to
                    //reference the parentName's path.
                    plugin.load(map.name, localRequire, load, config);
                }));

                context.enable(pluginMap, this);
                this.pluginMaps[pluginMap.id] = pluginMap;
            },

            enable: function () {
                this.enabled = true;

                //Set flag mentioning that the module is enabling,
                //so that immediate calls to the defined callbacks
                //for dependencies do not trigger inadvertent load
                //with the depCount still being zero.
                this.enabling = true;

                //Enable each dependency
                each(this.depMaps, bind(this, function (depMap, i) {
                    var id, mod, handler;

                    if (typeof depMap === 'string') {
                        //Dependency needs to be converted to a depMap
                        //and wired up to this module.
                        depMap = makeModuleMap(depMap,
                                               (this.map.isDefine ? this.map : this.map.parentMap),
                                               false,
                                               !this.skipMap);
                        this.depMaps[i] = depMap;

                        handler = getOwn(handlers, depMap.id);

                        if (handler) {
                            this.depExports[i] = handler(this);
                            return;
                        }

                        this.depCount += 1;

                        on(depMap, 'defined', bind(this, function (depExports) {
                            this.defineDep(i, depExports);
                            this.check();
                        }));

                        if (this.errback) {
                            on(depMap, 'error', this.errback);
                        }
                    }

                    id = depMap.id;
                    mod = registry[id];

                    //Skip special modules like 'require', 'exports', 'module'
                    //Also, don't call enable if it is already enabled,
                    //important in circular dependency cases.
                    if (!hasProp(handlers, id) && mod && !mod.enabled) {
                        context.enable(depMap, this);
                    }
                }));

                //Enable each plugin that is used in
                //a dependency
                eachProp(this.pluginMaps, bind(this, function (pluginMap) {
                    var mod = getOwn(registry, pluginMap.id);
                    if (mod && !mod.enabled) {
                        context.enable(pluginMap, this);
                    }
                }));

                this.enabling = false;

                this.check();
            },

            on: function (name, cb) {
                var cbs = this.events[name];
                if (!cbs) {
                    cbs = this.events[name] = [];
                }
                cbs.push(cb);
            },

            emit: function (name, evt) {
                each(this.events[name], function (cb) {
                    cb(evt);
                });
                if (name === 'error') {
                    //Now that the error handler was triggered, remove
                    //the listeners, since this broken Module instance
                    //can stay around for a while in the registry.
                    delete this.events[name];
                }
            }
        };

        function callGetModule(args) {
            //Skip modules already defined.
            if (!hasProp(defined, args[0])) {
                getModule(makeModuleMap(args[0], null, true)).init(args[1], args[2]);
            }
        }

        function removeListener(node, func, name, ieName) {
            //Favor detachEvent because of IE9
            //issue, see attachEvent/addEventListener comment elsewhere
            //in this file.
            if (node.detachEvent && !isOpera) {
                //Probably IE. If not it will throw an error, which will be
                //useful to know.
                if (ieName) {
                    node.detachEvent(ieName, func);
                }
            } else {
                node.removeEventListener(name, func, false);
            }
        }

        /**
         * Given an event from a script node, get the requirejs info from it,
         * and then removes the event listeners on the node.
         * @param {Event} evt
         * @returns {Object}
         */
        function getScriptData(evt) {
            //Using currentTarget instead of target for Firefox 2.0's sake. Not
            //all old browsers will be supported, but this one was easy enough
            //to support and still makes sense.
            var node = evt.currentTarget || evt.srcElement;

            //Remove the listeners once here.
            removeListener(node, context.onScriptLoad, 'load', 'onreadystatechange');
            removeListener(node, context.onScriptError, 'error');

            return {
                node: node,
                id: node && node.getAttribute('data-requiremodule')
            };
        }

        function intakeDefines() {
            var args;

            //Any defined modules in the global queue, intake them now.
            takeGlobalQueue();

            //Make sure any remaining defQueue items get properly processed.
            while (defQueue.length) {
                args = defQueue.shift();
                if (args[0] === null) {
                    return onError(makeError('mismatch', 'Mismatched anonymous define() module: ' + args[args.length - 1]));
                } else {
                    //args are id, deps, factory. Should be normalized by the
                    //define() function.
                    callGetModule(args);
                }
            }
        }

        context = {
            config: config,
            contextName: contextName,
            registry: registry,
            defined: defined,
            urlFetched: urlFetched,
            defQueue: defQueue,
            Module: Module,
            makeModuleMap: makeModuleMap,
            nextTick: req.nextTick,

            /**
             * Set a configuration for the context.
             * @param {Object} cfg config object to integrate.
             */
            configure: function (cfg) {
                //Make sure the baseUrl ends in a slash.
                if (cfg.baseUrl) {
                    if (cfg.baseUrl.charAt(cfg.baseUrl.length - 1) !== '/') {
                        cfg.baseUrl += '/';
                    }
                }

                //Save off the paths and packages since they require special processing,
                //they are additive.
                var pkgs = config.pkgs,
                    shim = config.shim,
                    objs = {
                        paths: true,
                        config: true,
                        map: true
                    };

                eachProp(cfg, function (value, prop) {
                    if (objs[prop]) {
                        if (prop === 'map') {
                            mixin(config[prop], value, true, true);
                        } else {
                            mixin(config[prop], value, true);
                        }
                    } else {
                        config[prop] = value;
                    }
                });

                //Merge shim
                if (cfg.shim) {
                    eachProp(cfg.shim, function (value, id) {
                        //Normalize the structure
                        if (isArray(value)) {
                            value = {
                                deps: value
                            };
                        }
                        if ((value.exports || value.init) && !value.exportsFn) {
                            value.exportsFn = context.makeShimExports(value);
                        }
                        shim[id] = value;
                    });
                    config.shim = shim;
                }

                //Adjust packages if necessary.
                if (cfg.packages) {
                    each(cfg.packages, function (pkgObj) {
                        var location;

                        pkgObj = typeof pkgObj === 'string' ? { name: pkgObj } : pkgObj;
                        location = pkgObj.location;

                        //Create a brand new object on pkgs, since currentPackages can
                        //be passed in again, and config.pkgs is the internal transformed
                        //state for all package configs.
                        pkgs[pkgObj.name] = {
                            name: pkgObj.name,
                            location: location || pkgObj.name,
                            //Remove leading dot in main, so main paths are normalized,
                            //and remove any trailing .js, since different package
                            //envs have different conventions: some use a module name,
                            //some use a file name.
                            main: (pkgObj.main || 'main')
                                  .replace(currDirRegExp, '')
                                  .replace(jsSuffixRegExp, '')
                        };
                    });

                    //Done with modifications, assing packages back to context config
                    config.pkgs = pkgs;
                }

                //If there are any "waiting to execute" modules in the registry,
                //update the maps for them, since their info, like URLs to load,
                //may have changed.
                eachProp(registry, function (mod, id) {
                    //If module already has init called, since it is too
                    //late to modify them, and ignore unnormalized ones
                    //since they are transient.
                    if (!mod.inited && !mod.map.unnormalized) {
                        mod.map = makeModuleMap(id);
                    }
                });

                //If a deps array or a config callback is specified, then call
                //require with those args. This is useful when require is defined as a
                //config object before require.js is loaded.
                if (cfg.deps || cfg.callback) {
                    context.require(cfg.deps || [], cfg.callback);
                }
            },

            makeShimExports: function (value) {
                function fn() {
                    var ret;
                    if (value.init) {
                        ret = value.init.apply(global, arguments);
                    }
                    return ret || (value.exports && getGlobal(value.exports));
                }
                return fn;
            },

            makeRequire: function (relMap, options) {
                options = options || {};

                function localRequire(deps, callback, errback) {
                    var id, map, requireMod;

                    if (options.enableBuildCallback && callback && isFunction(callback)) {
                        callback.__requireJsBuild = true;
                    }

                    if (typeof deps === 'string') {
                        if (isFunction(callback)) {
                            //Invalid call
                            return onError(makeError('requireargs', 'Invalid require call'), errback);
                        }

                        //If require|exports|module are requested, get the
                        //value for them from the special handlers. Caveat:
                        //this only works while module is being defined.
                        if (relMap && hasProp(handlers, deps)) {
                            return handlers[deps](registry[relMap.id]);
                        }

                        //Synchronous access to one module. If require.get is
                        //available (as in the Node adapter), prefer that.
                        if (req.get) {
                            return req.get(context, deps, relMap);
                        }

                        //Normalize module name, if it contains . or ..
                        map = makeModuleMap(deps, relMap, false, true);
                        id = map.id;

                        if (!hasProp(defined, id)) {
                            return onError(makeError('notloaded', 'Module name "' +
                                        id +
                                        '" has not been loaded yet for context: ' +
                                        contextName +
                                        (relMap ? '' : '. Use require([])')));
                        }
                        return defined[id];
                    }

                    //Grab defines waiting in the global queue.
                    intakeDefines();

                    //Mark all the dependencies as needing to be loaded.
                    context.nextTick(function () {
                        //Some defines could have been added since the
                        //require call, collect them.
                        intakeDefines();

                        requireMod = getModule(makeModuleMap(null, relMap));

                        //Store if map config should be applied to this require
                        //call for dependencies.
                        requireMod.skipMap = options.skipMap;

                        requireMod.init(deps, callback, errback, {
                            enabled: true
                        });

                        checkLoaded();
                    });

                    return localRequire;
                }

                mixin(localRequire, {
                    isBrowser: isBrowser,

                    /**
                     * Converts a module name + .extension into an URL path.
                     * *Requires* the use of a module name. It does not support using
                     * plain URLs like nameToUrl.
                     */
                    toUrl: function (moduleNamePlusExt) {
                        var ext, url,
                            index = moduleNamePlusExt.lastIndexOf('.'),
                            segment = moduleNamePlusExt.split('/')[0],
                            isRelative = segment === '.' || segment === '..';

                        //Have a file extension alias, and it is not the
                        //dots from a relative path.
                        if (index !== -1 && (!isRelative || index > 1)) {
                            ext = moduleNamePlusExt.substring(index, moduleNamePlusExt.length);
                            moduleNamePlusExt = moduleNamePlusExt.substring(0, index);
                        }

                        url = context.nameToUrl(normalize(moduleNamePlusExt,
                                                relMap && relMap.id, true), ext || '.fake');
                        return ext ? url : url.substring(0, url.length - 5);
                    },

                    defined: function (id) {
                        return hasProp(defined, makeModuleMap(id, relMap, false, true).id);
                    },

                    specified: function (id) {
                        id = makeModuleMap(id, relMap, false, true).id;
                        return hasProp(defined, id) || hasProp(registry, id);
                    }
                });

                //Only allow undef on top level require calls
                if (!relMap) {
                    localRequire.undef = function (id) {
                        //Bind any waiting define() calls to this context,
                        //fix for #408
                        takeGlobalQueue();

                        var map = makeModuleMap(id, relMap, true),
                            mod = getOwn(registry, id);

                        delete defined[id];
                        delete urlFetched[map.url];
                        delete undefEvents[id];

                        if (mod) {
                            //Hold on to listeners in case the
                            //module will be attempted to be reloaded
                            //using a different config.
                            if (mod.events.defined) {
                                undefEvents[id] = mod.events;
                            }

                            cleanRegistry(id);
                        }
                    };
                }

                return localRequire;
            },

            /**
             * Called to enable a module if it is still in the registry
             * awaiting enablement. A second arg, parent, the parent module,
             * is passed in for context, when this method is overriden by
             * the optimizer. Not shown here to keep code compact.
             */
            enable: function (depMap) {
                var mod = getOwn(registry, depMap.id);
                if (mod) {
                    getModule(depMap).enable();
                }
            },

            /**
             * Internal method used by environment adapters to complete a load event.
             * A load event could be a script load or just a load pass from a synchronous
             * load call.
             * @param {String} moduleName the name of the module to potentially complete.
             */
            completeLoad: function (moduleName) {
                var found, args, mod,
                    shim = getOwn(config.shim, moduleName) || {},
                    shExports = shim.exports;

                takeGlobalQueue();

                while (defQueue.length) {
                    args = defQueue.shift();
                    if (args[0] === null) {
                        args[0] = moduleName;
                        //If already found an anonymous module and bound it
                        //to this name, then this is some other anon module
                        //waiting for its completeLoad to fire.
                        if (found) {
                            break;
                        }
                        found = true;
                    } else if (args[0] === moduleName) {
                        //Found matching define call for this script!
                        found = true;
                    }

                    callGetModule(args);
                }

                //Do this after the cycle of callGetModule in case the result
                //of those calls/init calls changes the registry.
                mod = getOwn(registry, moduleName);

                if (!found && !hasProp(defined, moduleName) && mod && !mod.inited) {
                    if (config.enforceDefine && (!shExports || !getGlobal(shExports))) {
                        if (hasPathFallback(moduleName)) {
                            return;
                        } else {
                            return onError(makeError('nodefine',
                                             'No define call for ' + moduleName,
                                             null,
                                             [moduleName]));
                        }
                    } else {
                        //A script that does not call define(), so just simulate
                        //the call for it.
                        callGetModule([moduleName, (shim.deps || []), shim.exportsFn]);
                    }
                }

                checkLoaded();
            },

            /**
             * Converts a module name to a file path. Supports cases where
             * moduleName may actually be just an URL.
             * Note that it **does not** call normalize on the moduleName,
             * it is assumed to have already been normalized. This is an
             * internal API, not a public one. Use toUrl for the public API.
             */
            nameToUrl: function (moduleName, ext) {
                var paths, pkgs, pkg, pkgPath, syms, i, parentModule, url,
                    parentPath;

                //If a colon is in the URL, it indicates a protocol is used and it is just
                //an URL to a file, or if it starts with a slash, contains a query arg (i.e. ?)
                //or ends with .js, then assume the user meant to use an url and not a module id.
                //The slash is important for protocol-less URLs as well as full paths.
                if (req.jsExtRegExp.test(moduleName)) {
                    //Just a plain path, not module name lookup, so just return it.
                    //Add extension if it is included. This is a bit wonky, only non-.js things pass
                    //an extension, this method probably needs to be reworked.
                    url = moduleName + (ext || '');
                } else {
                    //A module that needs to be converted to a path.
                    paths = config.paths;
                    pkgs = config.pkgs;

                    syms = moduleName.split('/');
                    //For each module name segment, see if there is a path
                    //registered for it. Start with most specific name
                    //and work up from it.
                    for (i = syms.length; i > 0; i -= 1) {
                        parentModule = syms.slice(0, i).join('/');
                        pkg = getOwn(pkgs, parentModule);
                        parentPath = getOwn(paths, parentModule);
                        if (parentPath) {
                            //If an array, it means there are a few choices,
                            //Choose the one that is desired
                            if (isArray(parentPath)) {
                                parentPath = parentPath[0];
                            }
                            syms.splice(0, i, parentPath);
                            break;
                        } else if (pkg) {
                            //If module name is just the package name, then looking
                            //for the main module.
                            if (moduleName === pkg.name) {
                                pkgPath = pkg.location + '/' + pkg.main;
                            } else {
                                pkgPath = pkg.location;
                            }
                            syms.splice(0, i, pkgPath);
                            break;
                        }
                    }

                    //Join the path parts together, then figure out if baseUrl is needed.
                    url = syms.join('/');
                    url += (ext || (/\?/.test(url) ? '' : '.js'));
                    url = (url.charAt(0) === '/' || url.match(/^[\w\+\.\-]+:/) ? '' : config.baseUrl) + url;
                }

                return config.urlArgs ? url +
                                        ((url.indexOf('?') === -1 ? '?' : '&') +
                                         config.urlArgs) : url;
            },

            //Delegates to req.load. Broken out as a separate function to
            //allow overriding in the optimizer.
            load: function (id, url) {
                req.load(context, id, url);
            },

            /**
             * Executes a module callack function. Broken out as a separate function
             * solely to allow the build system to sequence the files in the built
             * layer in the right sequence.
             *
             * @private
             */
            execCb: function (name, callback, args, exports) {
                return callback.apply(exports, args);
            },

            /**
             * callback for script loads, used to check status of loading.
             *
             * @param {Event} evt the event from the browser for the script
             * that was loaded.
             */
            onScriptLoad: function (evt) {
                //Using currentTarget instead of target for Firefox 2.0's sake. Not
                //all old browsers will be supported, but this one was easy enough
                //to support and still makes sense.
                if (evt.type === 'load' ||
                        (readyRegExp.test((evt.currentTarget || evt.srcElement).readyState))) {
                    //Reset interactive script so a script node is not held onto for
                    //to long.
                    interactiveScript = null;

                    //Pull out the name of the module and the context.
                    var data = getScriptData(evt);
                    context.completeLoad(data.id);
                }
            },

            /**
             * Callback for script errors.
             */
            onScriptError: function (evt) {
                var data = getScriptData(evt);
                if (!hasPathFallback(data.id)) {
                    return onError(makeError('scripterror', 'Script error', evt, [data.id]));
                }
            }
        };

        context.require = context.makeRequire();
        return context;
    }

    /**
     * Main entry point.
     *
     * If the only argument to require is a string, then the module that
     * is represented by that string is fetched for the appropriate context.
     *
     * If the first argument is an array, then it will be treated as an array
     * of dependency string names to fetch. An optional function callback can
     * be specified to execute when all of those dependencies are available.
     *
     * Make a local req variable to help Caja compliance (it assumes things
     * on a require that are not standardized), and to give a short
     * name for minification/local scope use.
     */
    req = requirejs = function (deps, callback, errback, optional) {

        //Find the right context, use default
        var context, config,
            contextName = defContextName;

        // Determine if have config object in the call.
        if (!isArray(deps) && typeof deps !== 'string') {
            // deps is a config object
            config = deps;
            if (isArray(callback)) {
                // Adjust args if there are dependencies
                deps = callback;
                callback = errback;
                errback = optional;
            } else {
                deps = [];
            }
        }

        if (config && config.context) {
            contextName = config.context;
        }

        context = getOwn(contexts, contextName);
        if (!context) {
            context = contexts[contextName] = req.s.newContext(contextName);
        }

        if (config) {
            context.configure(config);
        }

        return context.require(deps, callback, errback);
    };

    /**
     * Support require.config() to make it easier to cooperate with other
     * AMD loaders on globally agreed names.
     */
    req.config = function (config) {
        return req(config);
    };

    /**
     * Execute something after the current tick
     * of the event loop. Override for other envs
     * that have a better solution than setTimeout.
     * @param  {Function} fn function to execute later.
     */
    req.nextTick = typeof setTimeout !== 'undefined' ? function (fn) {
        setTimeout(fn, 4);
    } : function (fn) { fn(); };

    /**
     * Export require as a global, but only if it does not already exist.
     */
    if (!require) {
        require = req;
    }

    req.version = version;

    //Used to filter out dependencies that are already paths.
    req.jsExtRegExp = /^\/|:|\?|\.js$/;
    req.isBrowser = isBrowser;
    s = req.s = {
        contexts: contexts,
        newContext: newContext
    };

    //Create default context.
    req({});

    //Exports some context-sensitive methods on global require.
    each([
        'toUrl',
        'undef',
        'defined',
        'specified'
    ], function (prop) {
        //Reference from contexts instead of early binding to default context,
        //so that during builds, the latest instance of the default context
        //with its config gets used.
        req[prop] = function () {
            var ctx = contexts[defContextName];
            return ctx.require[prop].apply(ctx, arguments);
        };
    });

    if (isBrowser) {
        head = s.head = document.getElementsByTagName('head')[0];
        //If BASE tag is in play, using appendChild is a problem for IE6.
        //When that browser dies, this can be removed. Details in this jQuery bug:
        //http://dev.jquery.com/ticket/2709
        baseElement = document.getElementsByTagName('base')[0];
        if (baseElement) {
            head = s.head = baseElement.parentNode;
        }
    }

    /**
     * Any errors that require explicitly generates will be passed to this
     * function. Intercept/override it if you want custom error handling.
     * @param {Error} err the error object.
     */
    req.onError = function (err) {
        throw err;
    };

    /**
     * Does the request to load a module for the browser case.
     * Make this a separate function to allow other environments
     * to override it.
     *
     * @param {Object} context the require context to find state.
     * @param {String} moduleName the name of the module.
     * @param {Object} url the URL to the module.
     */
    req.load = function (context, moduleName, url) {
        var config = (context && context.config) || {},
            node;
        if (isBrowser) {
            //In the browser so use a script tag
            node = config.xhtml ?
                    document.createElementNS('http://www.w3.org/1999/xhtml', 'html:script') :
                    document.createElement('script');
            node.type = config.scriptType || 'text/javascript';
            node.charset = 'utf-8';
            node.async = true;

            node.setAttribute('data-requirecontext', context.contextName);
            node.setAttribute('data-requiremodule', moduleName);

            //Set up load listener. Test attachEvent first because IE9 has
            //a subtle issue in its addEventListener and script onload firings
            //that do not match the behavior of all other browsers with
            //addEventListener support, which fire the onload event for a
            //script right after the script execution. See:
            //https://connect.microsoft.com/IE/feedback/details/648057/script-onload-event-is-not-fired-immediately-after-script-execution
            //UNFORTUNATELY Opera implements attachEvent but does not follow the script
            //script execution mode.
            if (node.attachEvent &&
                    //Check if node.attachEvent is artificially added by custom script or
                    //natively supported by browser
                    //read https://github.com/jrburke/requirejs/issues/187
                    //if we can NOT find [native code] then it must NOT natively supported.
                    //in IE8, node.attachEvent does not have toString()
                    //Note the test for "[native code" with no closing brace, see:
                    //https://github.com/jrburke/requirejs/issues/273
                    !(node.attachEvent.toString && node.attachEvent.toString().indexOf('[native code') < 0) &&
                    !isOpera) {
                //Probably IE. IE (at least 6-8) do not fire
                //script onload right after executing the script, so
                //we cannot tie the anonymous define call to a name.
                //However, IE reports the script as being in 'interactive'
                //readyState at the time of the define call.
                useInteractive = true;

                node.attachEvent('onreadystatechange', context.onScriptLoad);
                //It would be great to add an error handler here to catch
                //404s in IE9+. However, onreadystatechange will fire before
                //the error handler, so that does not help. If addEvenListener
                //is used, then IE will fire error before load, but we cannot
                //use that pathway given the connect.microsoft.com issue
                //mentioned above about not doing the 'script execute,
                //then fire the script load event listener before execute
                //next script' that other browsers do.
                //Best hope: IE10 fixes the issues,
                //and then destroys all installs of IE 6-9.
                //node.attachEvent('onerror', context.onScriptError);
            } else {
                node.addEventListener('load', context.onScriptLoad, false);
                node.addEventListener('error', context.onScriptError, false);
            }
            node.src = url;

            //For some cache cases in IE 6-8, the script executes before the end
            //of the appendChild execution, so to tie an anonymous define
            //call to the module name (which is stored on the node), hold on
            //to a reference to this node, but clear after the DOM insertion.
            currentlyAddingScript = node;
            if (baseElement) {
                head.insertBefore(node, baseElement);
            } else {
                head.appendChild(node);
            }
            currentlyAddingScript = null;

            return node;
        } else if (isWebWorker) {
            //In a web worker, use importScripts. This is not a very
            //efficient use of importScripts, importScripts will block until
            //its script is downloaded and evaluated. However, if web workers
            //are in play, the expectation that a build has been done so that
            //only one script needs to be loaded anyway. This may need to be
            //reevaluated if other use cases become common.
            importScripts(url);

            //Account for anonymous modules
            context.completeLoad(moduleName);
        }
    };

    function getInteractiveScript() {
        if (interactiveScript && interactiveScript.readyState === 'interactive') {
            return interactiveScript;
        }

        eachReverse(scripts(), function (script) {
            if (script.readyState === 'interactive') {
                return (interactiveScript = script);
            }
        });
        return interactiveScript;
    }

    //Look for a data-main script attribute, which could also adjust the baseUrl.
    if (isBrowser) {
        //Figure out baseUrl. Get it from the script tag with require.js in it.
        eachReverse(scripts(), function (script) {
            //Set the 'head' where we can append children by
            //using the script's parent.
            if (!head) {
                head = script.parentNode;
            }

            //Look for a data-main attribute to set main script for the page
            //to load. If it is there, the path to data main becomes the
            //baseUrl, if it is not already set.
            dataMain = script.getAttribute('data-main');
            if (dataMain) {
                //Set final baseUrl if there is not already an explicit one.
                if (!cfg.baseUrl) {
                    //Pull off the directory of data-main for use as the
                    //baseUrl.
                    src = dataMain.split('/');
                    mainScript = src.pop();
                    subPath = src.length ? src.join('/')  + '/' : './';

                    cfg.baseUrl = subPath;
                    dataMain = mainScript;
                }

                //Strip off any trailing .js since dataMain is now
                //like a module name.
                dataMain = dataMain.replace(jsSuffixRegExp, '');

                //Put the data-main script in the files to load.
                cfg.deps = cfg.deps ? cfg.deps.concat(dataMain) : [dataMain];

                return true;
            }
        });
    }

    /**
     * The function that handles definitions of modules. Differs from
     * require() in that a string for the module should be the first argument,
     * and the function to execute after dependencies are loaded should
     * return a value to define the module corresponding to the first argument's
     * name.
     */
    define = function (name, deps, callback) {
        var node, context;

        //Allow for anonymous modules
        if (typeof name !== 'string') {
            //Adjust args appropriately
            callback = deps;
            deps = name;
            name = null;
        }

        //This module may not have dependencies
        if (!isArray(deps)) {
            callback = deps;
            deps = [];
        }

        //If no name, and callback is a function, then figure out if it a
        //CommonJS thing with dependencies.
        if (!deps.length && isFunction(callback)) {
            //Remove comments from the callback string,
            //look for require calls, and pull them into the dependencies,
            //but only if there are function args.
            if (callback.length) {
                callback
                    .toString()
                    .replace(commentRegExp, '')
                    .replace(cjsRequireRegExp, function (match, dep) {
                        deps.push(dep);
                    });

                //May be a CommonJS thing even without require calls, but still
                //could use exports, and module. Avoid doing exports and module
                //work though if it just needs require.
                //REQUIRES the function to expect the CommonJS variables in the
                //order listed below.
                deps = (callback.length === 1 ? ['require'] : ['require', 'exports', 'module']).concat(deps);
            }
        }

        //If in IE 6-8 and hit an anonymous define() call, do the interactive
        //work.
        if (useInteractive) {
            node = currentlyAddingScript || getInteractiveScript();
            if (node) {
                if (!name) {
                    name = node.getAttribute('data-requiremodule');
                }
                context = contexts[node.getAttribute('data-requirecontext')];
            }
        }

        //Always save off evaluating the def call until the script onload handler.
        //This allows multiple modules to be in a file without prematurely
        //tracing dependencies, and allows for anonymous module support,
        //where the module name is not known until the script onload event
        //occurs. If no context, use the global queue, and get it processed
        //in the onscript load callback.
        (context ? context.defQueue : globalDefQueue).push([name, deps, callback]);
    };

    define.amd = {
        jQuery: true
    };


    /**
     * Executes the text. Normally just uses eval, but can be modified
     * to use a better, environment-specific call. Only used for transpiling
     * loader plugins, not for plain JS modules.
     * @param {String} text the text to execute/evaluate.
     */
    req.exec = function (text) {
        /*jslint evil: true */
        return eval(text);
    };

    //Set up with config info.
    req(cfg);
}(this));

define("requireLib", function(){});

var jam = {
    "packages": [
        {
            "name": "jquery",
            "location": "jam/jquery",
            "main": "dist/jquery.js"
        },
        {
            "name": "jquery-mousewheel",
            "location": "jam/jquery-mousewheel",
            "main": "jquery.mousewheel.js"
        },
        {
            "name": "require",
            "location": "jam/require",
            "main": "require.min.js"
        },
        {
            "name": "text",
            "location": "jam/text",
            "main": "text.js"
        },
        {
            "name": "poly2tri",
            "location": "jam/poly2tri.js",
            "main": "dist/poly2tri.js"
        },
        {
            "name": "jquery-resize",
            "location": "jam/jquery-resize",
            "main": "jquery.ba-resize.min.js"
        },
        {
            "name": "opentype",
            "location": "jam/opentype.js",
            "main": "dist/opentype.js"
        },
        {
            "name": "bezier",
            "location": "jam/bezierjs",
            "main": "bezier.js"
        },
        {
            "name": "earcut",
            "location": "jam/earcut",
            "main": "src/earcut.js"
        }
    ],
    "version": "0.2.17",
    "shim": {}
};

if (typeof require !== "undefined" && require.config) {
    require.config({
    "packages": [
        {
            "name": "jquery",
            "location": "jam/jquery",
            "main": "dist/jquery.js"
        },
        {
            "name": "jquery-mousewheel",
            "location": "jam/jquery-mousewheel",
            "main": "jquery.mousewheel.js"
        },
        {
            "name": "require",
            "location": "jam/require",
            "main": "require.min.js"
        },
        {
            "name": "text",
            "location": "jam/text",
            "main": "text.js"
        },
        {
            "name": "poly2tri",
            "location": "jam/poly2tri.js",
            "main": "dist/poly2tri.js"
        },
        {
            "name": "jquery-resize",
            "location": "jam/jquery-resize",
            "main": "jquery.ba-resize.min.js"
        },
        {
            "name": "bezier",
            "location": "jam/bezierjs",
            "main": "bezier.js"
        },
        {
            "name": "earcut",
            "location": "jam/earcut",
            "main": "src/earcut.js"
        }
    ],
    "shim": {}
});
}
else {
    var require = {
    "packages": [
        {
            "name": "jquery",
            "location": "jam/jquery",
            "main": "dist/jquery.js"
        },
        {
            "name": "jquery-mousewheel",
            "location": "jam/jquery-mousewheel",
            "main": "jquery.mousewheel.js"
        },
        {
            "name": "require",
            "location": "jam/require",
            "main": "require.min.js"
        },
        {
            "name": "text",
            "location": "jam/text",
            "main": "text.js"
        },
        {
            "name": "poly2tri",
            "location": "jam/poly2tri.js",
            "main": "dist/poly2tri.js"
        },
        {
            "name": "jquery-resize",
            "location": "jam/jquery-resize",
            "main": "jquery.ba-resize.min.js"
        },
        {
            "name": "bezier",
            "location": "jam/bezierjs",
            "main": "bezier.js"
        },
        {
            "name": "earcut",
            "location": "jam/earcut",
            "main": "src/earcut.js"
        }
    ],
    "shim": {}
};
}

if (typeof exports !== "undefined" && typeof module !== "undefined") {
    module.exports = jam;
};
define("jam/require.config", function(){});

/*!
 * jQuery JavaScript Library v2.0.0
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright 2005, 2013 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2013-04-20
 */
(function( window, undefined ) {

// Can't do this because several apps including ASP.NET trace
// the stack via arguments.caller.callee and Firefox dies if
// you try to trace through "use strict" call chains. (#13335)
// Support: Firefox 18+
//
var
	// A central reference to the root jQuery(document)
	rootjQuery,

	// The deferred used on DOM ready
	readyList,

	// Support: IE9
	// For `typeof xmlNode.method` instead of `xmlNode.method !== undefined`
	core_strundefined = typeof undefined,

	// Use the correct document accordingly with window argument (sandbox)
	location = window.location,
	document = window.document,
	docElem = document.documentElement,

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$,

	// [[Class]] -> type pairs
	class2type = {},

	// List of deleted data cache ids, so we can reuse them
	core_deletedIds = [],

	core_version = "2.0.0",

	// Save a reference to some core methods
	core_concat = core_deletedIds.concat,
	core_push = core_deletedIds.push,
	core_slice = core_deletedIds.slice,
	core_indexOf = core_deletedIds.indexOf,
	core_toString = class2type.toString,
	core_hasOwn = class2type.hasOwnProperty,
	core_trim = core_version.trim,

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {
		// The jQuery object is actually just the init constructor 'enhanced'
		return new jQuery.fn.init( selector, context, rootjQuery );
	},

	// Used for matching numbers
	core_pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,

	// Used for splitting on whitespace
	core_rnotwhite = /\S+/g,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	rquickExpr = /^(?:(<[\w\W]+>)[^>]*|#([\w-]*))$/,

	// Match a standalone tag
	rsingleTag = /^<(\w+)\s*\/?>(?:<\/\1>|)$/,

	// Matches dashed string for camelizing
	rmsPrefix = /^-ms-/,
	rdashAlpha = /-([\da-z])/gi,

	// Used by jQuery.camelCase as callback to replace()
	fcamelCase = function( all, letter ) {
		return letter.toUpperCase();
	},

	// The ready event handler and self cleanup method
	completed = function() {
		document.removeEventListener( "DOMContentLoaded", completed, false );
		window.removeEventListener( "load", completed, false );
		jQuery.ready();
	};

jQuery.fn = jQuery.prototype = {
	// The current version of jQuery being used
	jquery: core_version,

	constructor: jQuery,
	init: function( selector, context, rootjQuery ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector.charAt(0) === "<" && selector.charAt( selector.length - 1 ) === ">" && selector.length >= 3 ) {
				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && (match[1] || !context) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[1] ) {
					context = context instanceof jQuery ? context[0] : context;

					// scripts is true for back-compat
					jQuery.merge( this, jQuery.parseHTML(
						match[1],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[1] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {
							// Properties of context are called as methods if possible
							if ( jQuery.isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[2] );

					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document #6963
					if ( elem && elem.parentNode ) {
						// Inject the element directly into the jQuery object
						this.length = 1;
						this[0] = elem;
					}

					this.context = document;
					this.selector = selector;
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || rootjQuery ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this.context = this[0] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( jQuery.isFunction( selector ) ) {
			return rootjQuery.ready( selector );
		}

		if ( selector.selector !== undefined ) {
			this.selector = selector.selector;
			this.context = selector.context;
		}

		return jQuery.makeArray( selector, this );
	},

	// Start with an empty selector
	selector: "",

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return core_slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {
		return num == null ?

			// Return a 'clean' array
			this.toArray() :

			// Return just the object
			( num < 0 ? this[ this.length + num ] : this[ num ] );
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;
		ret.context = this.context;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	// (You can seed the arguments with an array of args, but this is
	// only used internally.)
	each: function( callback, args ) {
		return jQuery.each( this, callback, args );
	},

	ready: function( fn ) {
		// Add the callback
		jQuery.ready.promise().done( fn );

		return this;
	},

	slice: function() {
		return this.pushStack( core_slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[j] ] : [] );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map(this, function( elem, i ) {
			return callback.call( elem, i, elem );
		}));
	},

	end: function() {
		return this.prevObject || this.constructor(null);
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: core_push,
	sort: [].sort,
	splice: [].splice
};

// Give the init function the jQuery prototype for later instantiation
jQuery.fn.init.prototype = jQuery.fn;

jQuery.extend = jQuery.fn.extend = function() {
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[0] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;
		target = arguments[1] || {};
		// skip the boolean and the target
		i = 2;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !jQuery.isFunction(target) ) {
		target = {};
	}

	// extend jQuery itself if only one argument is passed
	if ( length === i ) {
		target = this;
		--i;
	}

	for ( ; i < length; i++ ) {
		// Only deal with non-null/undefined values
		if ( (options = arguments[ i ]) != null ) {
			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)) ) ) {
					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && jQuery.isArray(src) ? src : [];

					} else {
						clone = src && jQuery.isPlainObject(src) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend({
	// Unique for each copy of jQuery on the page
	expando: "jQuery" + ( core_version + Math.random() ).replace( /\D/g, "" ),

	noConflict: function( deep ) {
		if ( window.$ === jQuery ) {
			window.$ = _$;
		}

		if ( deep && window.jQuery === jQuery ) {
			window.jQuery = _jQuery;
		}

		return jQuery;
	},

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Hold (or release) the ready event
	holdReady: function( hold ) {
		if ( hold ) {
			jQuery.readyWait++;
		} else {
			jQuery.ready( true );
		}
	},

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );

		// Trigger any bound ready events
		if ( jQuery.fn.trigger ) {
			jQuery( document ).trigger("ready").off("ready");
		}
	},

	// See test/unit/core.js for details concerning isFunction.
	// Since version 1.3, DOM methods and functions like alert
	// aren't supported. They return false on IE (#2968).
	isFunction: function( obj ) {
		return jQuery.type(obj) === "function";
	},

	isArray: Array.isArray,

	isWindow: function( obj ) {
		return obj != null && obj === obj.window;
	},

	isNumeric: function( obj ) {
		return !isNaN( parseFloat(obj) ) && isFinite( obj );
	},

	type: function( obj ) {
		if ( obj == null ) {
			return String( obj );
		}
		// Support: Safari <= 5.1 (functionish RegExp)
		return typeof obj === "object" || typeof obj === "function" ?
			class2type[ core_toString.call(obj) ] || "object" :
			typeof obj;
	},

	isPlainObject: function( obj ) {
		// Not plain objects:
		// - Any object or value whose internal [[Class]] property is not "[object Object]"
		// - DOM nodes
		// - window
		if ( jQuery.type( obj ) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
			return false;
		}

		// Support: Firefox <20
		// The try/catch suppresses exceptions thrown when attempting to access
		// the "constructor" property of certain host objects, ie. |window.location|
		// https://bugzilla.mozilla.org/show_bug.cgi?id=814622
		try {
			if ( obj.constructor &&
					!core_hasOwn.call( obj.constructor.prototype, "isPrototypeOf" ) ) {
				return false;
			}
		} catch ( e ) {
			return false;
		}

		// If the function hasn't returned already, we're confident that
		// |obj| is a plain object, created by {} or constructed with new Object
		return true;
	},

	isEmptyObject: function( obj ) {
		var name;
		for ( name in obj ) {
			return false;
		}
		return true;
	},

	error: function( msg ) {
		throw new Error( msg );
	},

	// data: string of html
	// context (optional): If specified, the fragment will be created in this context, defaults to document
	// keepScripts (optional): If true, will include scripts passed in the html string
	parseHTML: function( data, context, keepScripts ) {
		if ( !data || typeof data !== "string" ) {
			return null;
		}
		if ( typeof context === "boolean" ) {
			keepScripts = context;
			context = false;
		}
		context = context || document;

		var parsed = rsingleTag.exec( data ),
			scripts = !keepScripts && [];

		// Single tag
		if ( parsed ) {
			return [ context.createElement( parsed[1] ) ];
		}

		parsed = jQuery.buildFragment( [ data ], context, scripts );

		if ( scripts ) {
			jQuery( scripts ).remove();
		}

		return jQuery.merge( [], parsed.childNodes );
	},

	parseJSON: JSON.parse,

	// Cross-browser xml parsing
	parseXML: function( data ) {
		var xml, tmp;
		if ( !data || typeof data !== "string" ) {
			return null;
		}

		// Support: IE9
		try {
			tmp = new DOMParser();
			xml = tmp.parseFromString( data , "text/xml" );
		} catch ( e ) {
			xml = undefined;
		}

		if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
			jQuery.error( "Invalid XML: " + data );
		}
		return xml;
	},

	noop: function() {},

	// Evaluates a script in a global context
	globalEval: function( code ) {
		var script,
				indirect = eval;

		code = jQuery.trim( code );

		if ( code ) {
			// If the code includes a valid, prologue position
			// strict mode pragma, execute code by injecting a
			// script tag into the document.
			if ( code.indexOf("use strict") === 1 ) {
				script = document.createElement("script");
				script.text = code;
				document.head.appendChild( script ).parentNode.removeChild( script );
			} else {
			// Otherwise, avoid the DOM node creation, insertion
			// and removal by using an indirect global eval
				indirect( code );
			}
		}
	},

	// Convert dashed to camelCase; used by the css and data modules
	// Microsoft forgot to hump their vendor prefix (#9572)
	camelCase: function( string ) {
		return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
	},

	nodeName: function( elem, name ) {
		return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
	},

	// args is for internal usage only
	each: function( obj, callback, args ) {
		var value,
			i = 0,
			length = obj.length,
			isArray = isArraylike( obj );

		if ( args ) {
			if ( isArray ) {
				for ( ; i < length; i++ ) {
					value = callback.apply( obj[ i ], args );

					if ( value === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					value = callback.apply( obj[ i ], args );

					if ( value === false ) {
						break;
					}
				}
			}

		// A special, fast, case for the most common use of each
		} else {
			if ( isArray ) {
				for ( ; i < length; i++ ) {
					value = callback.call( obj[ i ], i, obj[ i ] );

					if ( value === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					value = callback.call( obj[ i ], i, obj[ i ] );

					if ( value === false ) {
						break;
					}
				}
			}
		}

		return obj;
	},

	trim: function( text ) {
		return text == null ? "" : core_trim.call( text );
	},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArraylike( Object(arr) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
					[ arr ] : arr
				);
			} else {
				core_push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		return arr == null ? -1 : core_indexOf.call( arr, elem, i );
	},

	merge: function( first, second ) {
		var l = second.length,
			i = first.length,
			j = 0;

		if ( typeof l === "number" ) {
			for ( ; j < l; j++ ) {
				first[ i++ ] = second[ j ];
			}
		} else {
			while ( second[j] !== undefined ) {
				first[ i++ ] = second[ j++ ];
			}
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, inv ) {
		var retVal,
			ret = [],
			i = 0,
			length = elems.length;
		inv = !!inv;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			retVal = !!callback( elems[ i ], i );
			if ( inv !== retVal ) {
				ret.push( elems[ i ] );
			}
		}

		return ret;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var value,
			i = 0,
			length = elems.length,
			isArray = isArraylike( elems ),
			ret = [];

		// Go through the array, translating each of the items to their
		if ( isArray ) {
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret[ ret.length ] = value;
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret[ ret.length ] = value;
				}
			}
		}

		// Flatten any nested arrays
		return core_concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// Bind a function to a context, optionally partially applying any
	// arguments.
	proxy: function( fn, context ) {
		var tmp, args, proxy;

		if ( typeof context === "string" ) {
			tmp = fn[ context ];
			context = fn;
			fn = tmp;
		}

		// Quick check to determine if target is callable, in the spec
		// this throws a TypeError, but we will just return undefined.
		if ( !jQuery.isFunction( fn ) ) {
			return undefined;
		}

		// Simulated bind
		args = core_slice.call( arguments, 2 );
		proxy = function() {
			return fn.apply( context || this, args.concat( core_slice.call( arguments ) ) );
		};

		// Set the guid of unique handler to the same of original handler, so it can be removed
		proxy.guid = fn.guid = fn.guid || jQuery.guid++;

		return proxy;
	},

	// Multifunctional method to get and set values of a collection
	// The value/s can optionally be executed if it's a function
	access: function( elems, fn, key, value, chainable, emptyGet, raw ) {
		var i = 0,
			length = elems.length,
			bulk = key == null;

		// Sets many values
		if ( jQuery.type( key ) === "object" ) {
			chainable = true;
			for ( i in key ) {
				jQuery.access( elems, fn, i, key[i], true, emptyGet, raw );
			}

		// Sets one value
		} else if ( value !== undefined ) {
			chainable = true;

			if ( !jQuery.isFunction( value ) ) {
				raw = true;
			}

			if ( bulk ) {
				// Bulk operations run against the entire set
				if ( raw ) {
					fn.call( elems, value );
					fn = null;

				// ...except when executing function values
				} else {
					bulk = fn;
					fn = function( elem, key, value ) {
						return bulk.call( jQuery( elem ), value );
					};
				}
			}

			if ( fn ) {
				for ( ; i < length; i++ ) {
					fn( elems[i], key, raw ? value : value.call( elems[i], i, fn( elems[i], key ) ) );
				}
			}
		}

		return chainable ?
			elems :

			// Gets
			bulk ?
				fn.call( elems ) :
				length ? fn( elems[0], key ) : emptyGet;
	},

	now: Date.now,

	// A method for quickly swapping in/out CSS properties to get correct calculations.
	// Note: this method belongs to the css module but it's needed here for the support module.
	// If support gets modularized, this method should be moved back to the css module.
	swap: function( elem, options, callback, args ) {
		var ret, name,
			old = {};

		// Remember the old values, and insert the new ones
		for ( name in options ) {
			old[ name ] = elem.style[ name ];
			elem.style[ name ] = options[ name ];
		}

		ret = callback.apply( elem, args || [] );

		// Revert the old values
		for ( name in options ) {
			elem.style[ name ] = old[ name ];
		}

		return ret;
	}
});

jQuery.ready.promise = function( obj ) {
	if ( !readyList ) {

		readyList = jQuery.Deferred();

		// Catch cases where $(document).ready() is called after the browser event has already occurred.
		// we once tried to use readyState "interactive" here, but it caused issues like the one
		// discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15
		if ( document.readyState === "complete" ) {
			// Handle it asynchronously to allow scripts the opportunity to delay ready
			setTimeout( jQuery.ready );

		} else {

			// Use the handy event callback
			document.addEventListener( "DOMContentLoaded", completed, false );

			// A fallback to window.onload, that will always work
			window.addEventListener( "load", completed, false );
		}
	}
	return readyList.promise( obj );
};

// Populate the class2type map
jQuery.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function(i, name) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
});

function isArraylike( obj ) {
	var length = obj.length,
		type = jQuery.type( obj );

	if ( jQuery.isWindow( obj ) ) {
		return false;
	}

	if ( obj.nodeType === 1 && length ) {
		return true;
	}

	return type === "array" || type !== "function" &&
		( length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj );
}

// All jQuery objects should point back to these
rootjQuery = jQuery(document);
/*!
 * Sizzle CSS Selector Engine v1.9.2-pre
 * http://sizzlejs.com/
 *
 * Copyright 2013 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2013-04-16
 */
(function( window, undefined ) {

var i,
	cachedruns,
	Expr,
	getText,
	isXML,
	compile,
	outermostContext,
	sortInput,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + -(new Date()),
	preferredDoc = window.document,
	support = {},
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	hasDuplicate = false,
	sortOrder = function() { return 0; },

	// General-purpose constants
	strundefined = typeof undefined,
	MAX_NEGATIVE = 1 << 31,

	// Array methods
	arr = [],
	pop = arr.pop,
	push_native = arr.push,
	push = arr.push,
	slice = arr.slice,
	// Use a stripped-down indexOf if we can't use a native one
	indexOf = arr.indexOf || function( elem ) {
		var i = 0,
			len = this.length;
		for ( ; i < len; i++ ) {
			if ( this[i] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",
	// http://www.w3.org/TR/css3-syntax/#characters
	characterEncoding = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",

	// Loosely modeled on CSS identifier characters
	// An unquoted value should be a CSS identifier http://www.w3.org/TR/css3-selectors/#attribute-selectors
	// Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = characterEncoding.replace( "w", "w#" ),

	// Acceptable operators http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + characterEncoding + ")" + whitespace +
		"*(?:([*^$|!~]?=)" + whitespace + "*(?:(['\"])((?:\\\\.|[^\\\\])*?)\\3|(" + identifier + ")|)|)" + whitespace + "*\\]",

	// Prefer arguments quoted,
	//   then not containing pseudos/brackets,
	//   then attribute selectors/non-parenthetical expressions,
	//   then anything else
	// These preferences are here to reduce the number of selectors
	//   needing tokenize in the PSEUDO preFilter
	pseudos = ":(" + characterEncoding + ")(?:\\(((['\"])((?:\\\\.|[^\\\\])*?)\\3|((?:\\\\.|[^\\\\()[\\]]|" + attributes.replace( 3, 8 ) + ")*)|.*)\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

	rsibling = new RegExp( whitespace + "*[+~]" ),
	rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*)" + whitespace + "*\\]", "g" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + characterEncoding + ")" ),
		"CLASS": new RegExp( "^\\.(" + characterEncoding + ")" ),
		"TAG": new RegExp( "^(" + characterEncoding.replace( "w", "w*" ) + ")" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"boolean": new RegExp( "^(?:" + booleans + ")$", "i" ),
		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rescape = /'|\\/g,

	// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = /\\([\da-fA-F]{1,6}[\x20\t\r\n\f]?|.)/g,
	funescape = function( _, escaped ) {
		var high = "0x" + escaped - 0x10000;
		// NaN means non-codepoint
		return high !== high ?
			escaped :
			// BMP codepoint
			high < 0 ?
				String.fromCharCode( high + 0x10000 ) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	};

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		(arr = slice.call( preferredDoc.childNodes )),
		preferredDoc.childNodes
	);
	// Support: Android<4.0
	// Detect silently failing push.apply
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			push_native.apply( target, slice.call(els) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;
			// Can't trust NodeList.length
			while ( (target[j++] = els[i++]) ) {}
			target.length = j - 1;
		}
	};
}

/**
 * For feature detection
 * @param {Function} fn The function to test for native support
 */
function isNative( fn ) {
	return rnative.test( fn + "" );
}

/**
 * Create key-value caches of limited size
 * @returns {Function(string, Object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var cache,
		keys = [];

	return (cache = function( key, value ) {
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key += " " ) > Expr.cacheLength ) {
			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return (cache[ key ] = value);
	});
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created div and expects a boolean result
 */
function assert( fn ) {
	var div = document.createElement("div");

	try {
		return !!fn( div );
	} catch (e) {
		return false;
	} finally {
		if ( div.parentNode ) {
			div.parentNode.removeChild( div );
		}
		// release memory in IE
		div = null;
	}
}

function Sizzle( selector, context, results, seed ) {
	var match, elem, m, nodeType,
		// QSA vars
		i, groups, old, nid, newContext, newSelector;

	if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
		setDocument( context );
	}

	context = context || document;
	results = results || [];

	if ( !selector || typeof selector !== "string" ) {
		return results;
	}

	if ( (nodeType = context.nodeType) !== 1 && nodeType !== 9 ) {
		return [];
	}

	if ( documentIsHTML && !seed ) {

		// Shortcuts
		if ( (match = rquickExpr.exec( selector )) ) {
			// Speed-up: Sizzle("#ID")
			if ( (m = match[1]) ) {
				if ( nodeType === 9 ) {
					elem = context.getElementById( m );
					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document #6963
					if ( elem && elem.parentNode ) {
						// Handle the case where IE, Opera, and Webkit return items
						// by name instead of ID
						if ( elem.id === m ) {
							results.push( elem );
							return results;
						}
					} else {
						return results;
					}
				} else {
					// Context is not a document
					if ( context.ownerDocument && (elem = context.ownerDocument.getElementById( m )) &&
						contains( context, elem ) && elem.id === m ) {
						results.push( elem );
						return results;
					}
				}

			// Speed-up: Sizzle("TAG")
			} else if ( match[2] ) {
				push.apply( results, context.getElementsByTagName( selector ) );
				return results;

			// Speed-up: Sizzle(".CLASS")
			} else if ( (m = match[3]) && support.getElementsByClassName && context.getElementsByClassName ) {
				push.apply( results, context.getElementsByClassName( m ) );
				return results;
			}
		}

		// QSA path
		if ( support.qsa && (!rbuggyQSA || !rbuggyQSA.test( selector )) ) {
			nid = old = expando;
			newContext = context;
			newSelector = nodeType === 9 && selector;

			// qSA works strangely on Element-rooted queries
			// We can work around this by specifying an extra ID on the root
			// and working up from there (Thanks to Andrew Dupont for the technique)
			// IE 8 doesn't work on object elements
			if ( nodeType === 1 && context.nodeName.toLowerCase() !== "object" ) {
				groups = tokenize( selector );

				if ( (old = context.getAttribute("id")) ) {
					nid = old.replace( rescape, "\\$&" );
				} else {
					context.setAttribute( "id", nid );
				}
				nid = "[id='" + nid + "'] ";

				i = groups.length;
				while ( i-- ) {
					groups[i] = nid + toSelector( groups[i] );
				}
				newContext = rsibling.test( selector ) && context.parentNode || context;
				newSelector = groups.join(",");
			}

			if ( newSelector ) {
				try {
					push.apply( results,
						newContext.querySelectorAll( newSelector )
					);
					return results;
				} catch(qsaError) {
				} finally {
					if ( !old ) {
						context.removeAttribute("id");
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Detect xml
 * @param {Element|Object} elem An element or a document
 */
isXML = Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
	var documentElement = elem && (elem.ownerDocument || elem).documentElement;
	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var doc = node ? node.ownerDocument || node : preferredDoc;

	// If no document and documentElement is available, return
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Set our document
	document = doc;
	docElem = doc.documentElement;

	// Support tests
	documentIsHTML = !isXML( doc );

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert(function( div ) {
		div.appendChild( doc.createComment("") );
		return !div.getElementsByTagName("*").length;
	});

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties (excepting IE8 booleans)
	support.attributes = assert(function( div ) {
		div.className = "i";
		return !div.getAttribute("className");
	});

	// Check if getElementsByClassName can be trusted
	support.getElementsByClassName = assert(function( div ) {
		div.innerHTML = "<div class='a'></div><div class='a i'></div>";

		// Support: Safari<4
		// Catch class over-caching
		div.firstChild.className = "i";
		// Support: Opera<10
		// Catch gEBCN failure to find non-leading classes
		return div.getElementsByClassName("i").length === 2;
	});

	// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
	// Detached nodes confoundingly follow *each other*
	support.sortDetached = assert(function( div1 ) {
		// Should return 1, but returns 4 (following)
		return div1.compareDocumentPosition( document.createElement("div") ) & 1;
	});

	// Support: IE<10
	// Check if getElementById returns elements by name
	// Support: Windows 8 Native Apps
	// Assigning innerHTML with "name" attributes throws uncatchable exceptions
	// (http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx)
	// and the broken getElementById methods don't pick up programatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert(function( div ) {
		docElem.appendChild( div ).id = expando;
		return !doc.getElementsByName || !doc.getElementsByName( expando ).length;
	});

	// ID find and filter
	if ( support.getById ) {
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== strundefined && documentIsHTML ) {
				var m = context.getElementById( id );
				// Check parentNode to catch when Blackberry 4.6 returns
				// nodes that are no longer in the document #6963
				return m && m.parentNode ? [m] : [];
			}
		};
		Expr.filter["ID"] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute("id") === attrId;
			};
		};
	} else {
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== strundefined && documentIsHTML ) {
				var m = context.getElementById( id );

				return m ?
					m.id === id || typeof m.getAttributeNode !== strundefined && m.getAttributeNode("id").value === id ?
						[m] :
						undefined :
					[];
			}
		};
		Expr.filter["ID"] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== strundefined && elem.getAttributeNode("id");
				return node && node.value === attrId;
			};
		};
	}

	// Tag
	Expr.find["TAG"] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== strundefined ) {
				return context.getElementsByTagName( tag );
			}
		} :
		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( (elem = results[i++]) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== strundefined && documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See http://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( (support.qsa = isNative(doc.querySelectorAll)) ) {
		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( div ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// http://bugs.jquery.com/ticket/12359
			div.innerHTML = "<select><option selected=''></option></select>";

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !div.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}
		});

		assert(function( div ) {

			// Support: Opera 10-12/IE8
			// ^= $= *= and empty values
			// Should not select anything
			// Support: Windows 8 Native Apps
			// The type attribute is restricted during .innerHTML assignment
			var input = document.createElement("input");
			input.setAttribute( "type", "hidden" );
			div.appendChild( input ).setAttribute( "t", "" );

			if ( div.querySelectorAll("[t^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":enabled").length ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Opera 10-11 does not throw on post-comma invalid pseudos
			div.querySelectorAll("*,:x");
			rbuggyQSA.push(",.*:");
		});
	}

	if ( (support.matchesSelector = isNative( (matches = docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector) )) ) {

		assert(function( div ) {
			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( div, "div" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( div, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		});
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

	// Element contains another
	// Purposefully does not implement inclusive descendent
	// As in, an element does not contain itself
	contains = isNative(docElem.contains) || docElem.compareDocumentPosition ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			));
		} :
		function( a, b ) {
			if ( b ) {
				while ( (b = b.parentNode) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	// Document order sorting
	sortOrder = docElem.compareDocumentPosition ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var compare = b.compareDocumentPosition && a.compareDocumentPosition && a.compareDocumentPosition( b );

		if ( compare ) {
			// Disconnected nodes
			if ( compare & 1 ||
				(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

				// Choose the first element that is related to our preferred document
				if ( a === doc || contains(preferredDoc, a) ) {
					return -1;
				}
				if ( b === doc || contains(preferredDoc, b) ) {
					return 1;
				}

				// Maintain original order
				return sortInput ?
					( indexOf.call( sortInput, a ) - indexOf.call( sortInput, b ) ) :
					0;
			}

			return compare & 4 ? -1 : 1;
		}

		// Not directly comparable, sort on existence of method
		return a.compareDocumentPosition ? -1 : 1;
	} :
	function( a, b ) {
		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;

		// Parentless nodes are either documents or disconnected
		} else if ( !aup || !bup ) {
			return a === doc ? -1 :
				b === doc ? 1 :
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf.call( sortInput, a ) - indexOf.call( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( (cur = cur.parentNode) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( (cur = cur.parentNode) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[i] === bp[i] ) {
			i++;
		}

		return i ?
			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[i], bp[i] ) :

			// Otherwise nodes in our document sort first
			ap[i] === preferredDoc ? -1 :
			bp[i] === preferredDoc ? 1 :
			0;
	};

	return document;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	// Make sure that attribute selectors are quoted
	expr = expr.replace( rattributeQuotes, "='$1']" );

	// rbuggyQSA always contains :focus, so no need for an existence check
	if ( support.matchesSelector && documentIsHTML &&
		(!rbuggyMatches || !rbuggyMatches.test(expr)) &&
		(!rbuggyQSA     || !rbuggyQSA.test(expr)) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch(e) {}
	}

	return Sizzle( expr, document, null, [elem] ).length > 0;
};

Sizzle.contains = function( context, elem ) {
	// Set document vars if needed
	if ( ( context.ownerDocument || context ) !== document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],
		val = fn && fn( elem, name, !documentIsHTML );

	return val === undefined ?
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			(val = elem.getAttributeNode(name)) && val.specified ?
				val.value :
				null :
		val;
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

// Document sorting and removing duplicates
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( (elem = results[i++]) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	return results;
};

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns Returns -1 if a precedes b, 1 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && ( ~b.sourceIndex || MAX_NEGATIVE ) - ( ~a.sourceIndex || MAX_NEGATIVE );

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( (cur = cur.nextSibling) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

// Fetches boolean attributes by node
function boolHandler( elem, name, isXML ) {
	var val;
	return isXML ?
		undefined :
		(val = elem.getAttributeNode( name )) && val.specified ?
			val.value :
			elem[ name ] === true ? name.toLowerCase() : null;
}

// Fetches attributes without interpolation
// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
function interpolationHandler( elem, name, isXML ) {
	var val;
	return isXML ?
		undefined :
		(val = elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 ));
}

// Returns a function to use in pseudos for input types
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

// Returns a function to use in pseudos for buttons
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") && elem.type === type;
	};
}

// Returns a function to use in pseudos for positionals
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {
		// If no nodeType, this is expected to be an array
		for ( ; (node = elem[i]); i++ ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
		// Use textContent for elements
		// innerText usage removed for consistency of new lines (see #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {
			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}
	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[4] || match[5] || "" ).replace( runescape, funescape );

			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[1] = match[1].toLowerCase();

			if ( match[1].slice( 0, 3 ) === "nth" ) {
				// nth-* requires argument
				if ( !match[3] ) {
					Sizzle.error( match[0] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

			// other types prohibit arguments
			} else if ( match[3] ) {
				Sizzle.error( match[0] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[5] && match[2];

			if ( matchExpr["CHILD"].test( match[0] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[4] ) {
				match[2] = match[4];

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&
				// Get excess from tokenize (recursively)
				(excess = tokenize( unquoted, true )) &&
				// advance to the next closing parenthesis
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

				// excess is a negative index
				match[0] = match[0].slice( 0, excess );
				match[2] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() { return true; } :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== strundefined && elem.getAttribute("class") || "" );
				});
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},

		"CHILD": function( type, what, argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, context, xml ) {
					var cache, outerCache, node, diff, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( (node = node[ dir ]) ) {
									if ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) {
										return false;
									}
								}
								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {
							// Seek `elem` from a previously-cached index
							outerCache = parent[ expando ] || (parent[ expando ] = {});
							cache = outerCache[ type ] || [];
							nodeIndex = cache[0] === dirruns && cache[1];
							diff = cache[0] === dirruns && cache[2];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( (node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								(diff = nodeIndex = 0) || start.pop()) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									outerCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						// Use previously-cached element index if available
						} else if ( useCache && (cache = (elem[ expando ] || (elem[ expando ] = {}))[ type ]) && cache[0] === dirruns ) {
							diff = cache[1];

						// xml :nth-child(...) or :nth-last-child(...) or :nth(-last)?-of-type(...)
						} else {
							// Use the same loop as above to seek `elem` from the start
							while ( (node = ++nodeIndex && node && node[ dir ] ||
								(diff = nodeIndex = 0) || start.pop()) ) {

								if ( ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) && ++diff ) {
									// Cache the index of each encountered element
									if ( useCache ) {
										(node[ expando ] || (node[ expando ] = {}))[ type ] = [ dirruns, diff ];
									}

									if ( node === elem ) {
										break;
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf.call( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {
		// Potentially complex pseudos
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					return !results.pop();
				};
		}),

		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		}),

		"contains": markFunction(function( text ) {
			return function( elem ) {
				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
			};
		}),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {
			// lang value must be a valid identifier
			if ( !ridentifier.test(lang || "") ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( (elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
				return false;
			};
		}),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},

		// Boolean properties
		"enabled": function( elem ) {
			return elem.disabled === false;
		},

		"disabled": function( elem ) {
			return elem.disabled === true;
		},

		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
		},

		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is only affected by element nodes and content nodes(including text(3), cdata(4)),
			//   not comment, processing instructions, or others
			// Thanks to Diego Perini for the nodeName shortcut
			//   Greater than "@" means alpha characters (specifically not starting with "#" or "?")
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeName > "@" || elem.nodeType === 3 || elem.nodeType === 4 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos["empty"]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			// IE6 and 7 will map elem.type to 'text' for new HTML5 types (search, etc)
			// use getAttribute instead to test this case
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === elem.type );
		},

		// Position-in-collection
		"first": createPositionalPseudo(function() {
			return [ 0 ];
		}),

		"last": createPositionalPseudo(function( matchIndexes, length ) {
			return [ length - 1 ];
		}),

		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),

		"even": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"odd": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

function tokenize( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[0].length ) || soFar;
			}
			groups.push( tokens = [] );
		}

		matched = false;

		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			matched = match.shift();
			tokens.push( {
				value: matched,
				// Cast descendant combinators to space
				type: match[0].replace( rtrim, " " )
			} );
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {
				matched = match.shift();
				tokens.push( {
					value: matched,
					type: type,
					matches: match
				} );
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
}

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[i].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		checkNonElements = base && dir === "parentNode",
		doneName = done++;

	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var data, cache, outerCache,
				dirkey = dirruns + " " + doneName;

			// We can't set arbitrary data on XML nodes, so they don't benefit from dir caching
			if ( xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || (elem[ expando ] = {});
						if ( (cache = outerCache[ dir ]) && cache[0] === dirkey ) {
							if ( (data = cache[1]) === true || data === cachedruns ) {
								return data === true;
							}
						} else {
							cache = outerCache[ dir ] = [ dirkey ];
							cache[1] = matcher( elem, context, xml ) || cachedruns;
							if ( cache[1] === true ) {
								return true;
							}
						}
					}
				}
			}
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( (elem = temp[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
							temp.push( (matcherIn[i] = elem) );
						}
					}
					postFinder( null, (matcherOut = []), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf.call( seed, elem ) : preMap[i]) > -1 ) {

						seed[temp] = !(results[temp] = elem);
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf.call( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			return ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
		} ];

	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
		} else {
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector( tokens.slice( 0, i - 1 ) ).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	// A counter to specify which element is currently being matched
	var matcherCachedRuns = 0,
		bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, expandContext ) {
			var elem, j, matcher,
				setMatched = [],
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				outermost = expandContext != null,
				contextBackup = outermostContext,
				// We must always have either seed elements or context
				elems = seed || byElement && Expr.find["TAG"]( "*", expandContext && context.parentNode || context ),
				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1);

			if ( outermost ) {
				outermostContext = context !== document && context;
				cachedruns = matcherCachedRuns;
			}

			// Add elements passing elementMatchers directly to results
			// Keep `i` a string if there are no elements so `matchedCount` will be "00" below
			for ( ; (elem = elems[i]) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;
					while ( (matcher = elementMatchers[j++]) ) {
						if ( matcher( elem, context, xml ) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
						cachedruns = ++matcherCachedRuns;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// Apply set filters to unmatched elements
			matchedCount += i;
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( (matcher = setMatchers[j++]) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, group /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !group ) {
			group = tokenize( selector );
		}
		i = group.length;
		while ( i-- ) {
			cached = matcherFromTokens( group[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );
	}
	return cached;
};

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results );
	}
	return results;
}

function select( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		match = tokenize( selector );

	if ( !seed ) {
		// Try to minimize operations if there is only one group
		if ( match.length === 1 ) {

			// Take a shortcut and set the context if the root selector is an ID
			tokens = match[0] = match[0].slice( 0 );
			if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
					context.nodeType === 9 && documentIsHTML &&
					Expr.relative[ tokens[1].type ] ) {

				context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
				if ( !context ) {
					return results;
				}

				selector = selector.slice( tokens.shift().value.length );
			}

			// Fetch a seed set for right-to-left matching
			i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
			while ( i-- ) {
				token = tokens[i];

				// Abort if we hit a combinator
				if ( Expr.relative[ (type = token.type) ] ) {
					break;
				}
				if ( (find = Expr.find[ type ]) ) {
					// Search, expanding context for leading sibling combinators
					if ( (seed = find(
						token.matches[0].replace( runescape, funescape ),
						rsibling.test( tokens[0].type ) && context.parentNode || context
					)) ) {

						// If seed is empty or no tokens remain, we can return early
						tokens.splice( i, 1 );
						selector = seed.length && toSelector( tokens );
						if ( !selector ) {
							push.apply( results, seed );
							return results;
						}

						break;
					}
				}
			}
		}
	}

	// Compile and execute a filtering function
	// Provide `match` to avoid retokenization if we modified the selector above
	compile( selector, match )(
		seed,
		context,
		!documentIsHTML,
		results,
		rsibling.test( selector )
	);
	return results;
}

// Deprecated
Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

// One-time assignments

// Sort stability
support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

// Initialize against the default document
setDocument();

// Support: Chrome<<14
// Always assume duplicates if they aren't passed to the comparison function
[0, 0].sort( sortOrder );
support.detectDuplicates = hasDuplicate;

// Support: IE<8
// Prevent attribute/property "interpolation"
assert(function( div ) {
	div.innerHTML = "<a href='#'></a>";
	if ( div.firstChild.getAttribute("href") !== "#" ) {
		var attrs = "type|href|height|width".split("|"),
			i = attrs.length;
		while ( i-- ) {
			Expr.attrHandle[ attrs[i] ] = interpolationHandler;
		}
	}
});

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
assert(function( div ) {
	if ( div.getAttribute("disabled") != null ) {
		var attrs = booleans.split("|"),
			i = attrs.length;
		while ( i-- ) {
			Expr.attrHandle[ attrs[i] ] = boolHandler;
		}
	}
});

jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;
jQuery.expr[":"] = jQuery.expr.pseudos;
jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;


})( window );
// String to Object options format cache
var optionsCache = {};

// Convert String-formatted options into Object-formatted ones and store in cache
function createOptions( options ) {
	var object = optionsCache[ options ] = {};
	jQuery.each( options.match( core_rnotwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	});
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		( optionsCache[ options ] || createOptions( options ) ) :
		jQuery.extend( {}, options );

	var // Last fire value (for non-forgettable lists)
		memory,
		// Flag to know if list was already fired
		fired,
		// Flag to know if list is currently firing
		firing,
		// First callback to fire (used internally by add and fireWith)
		firingStart,
		// End of the loop when firing
		firingLength,
		// Index of currently firing callback (modified by remove if needed)
		firingIndex,
		// Actual callback list
		list = [],
		// Stack of fire calls for repeatable lists
		stack = !options.once && [],
		// Fire callbacks
		fire = function( data ) {
			memory = options.memory && data;
			fired = true;
			firingIndex = firingStart || 0;
			firingStart = 0;
			firingLength = list.length;
			firing = true;
			for ( ; list && firingIndex < firingLength; firingIndex++ ) {
				if ( list[ firingIndex ].apply( data[ 0 ], data[ 1 ] ) === false && options.stopOnFalse ) {
					memory = false; // To prevent further calls using add
					break;
				}
			}
			firing = false;
			if ( list ) {
				if ( stack ) {
					if ( stack.length ) {
						fire( stack.shift() );
					}
				} else if ( memory ) {
					list = [];
				} else {
					self.disable();
				}
			}
		},
		// Actual Callbacks object
		self = {
			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {
					// First, we save the current length
					var start = list.length;
					(function add( args ) {
						jQuery.each( args, function( _, arg ) {
							var type = jQuery.type( arg );
							if ( type === "function" ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && type !== "string" ) {
								// Inspect recursively
								add( arg );
							}
						});
					})( arguments );
					// Do we need to add the callbacks to the
					// current firing batch?
					if ( firing ) {
						firingLength = list.length;
					// With memory, if we're not firing then
					// we should call right away
					} else if ( memory ) {
						firingStart = start;
						fire( memory );
					}
				}
				return this;
			},
			// Remove a callback from the list
			remove: function() {
				if ( list ) {
					jQuery.each( arguments, function( _, arg ) {
						var index;
						while( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
							list.splice( index, 1 );
							// Handle firing indexes
							if ( firing ) {
								if ( index <= firingLength ) {
									firingLength--;
								}
								if ( index <= firingIndex ) {
									firingIndex--;
								}
							}
						}
					});
				}
				return this;
			},
			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ? jQuery.inArray( fn, list ) > -1 : !!( list && list.length );
			},
			// Remove all callbacks from the list
			empty: function() {
				list = [];
				firingLength = 0;
				return this;
			},
			// Have the list do nothing anymore
			disable: function() {
				list = stack = memory = undefined;
				return this;
			},
			// Is it disabled?
			disabled: function() {
				return !list;
			},
			// Lock the list in its current state
			lock: function() {
				stack = undefined;
				if ( !memory ) {
					self.disable();
				}
				return this;
			},
			// Is it locked?
			locked: function() {
				return !stack;
			},
			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				args = args || [];
				args = [ context, args.slice ? args.slice() : args ];
				if ( list && ( !fired || stack ) ) {
					if ( firing ) {
						stack.push( args );
					} else {
						fire( args );
					}
				}
				return this;
			},
			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},
			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};
jQuery.extend({

	Deferred: function( func ) {
		var tuples = [
				// action, add listener, listener list, final state
				[ "resolve", "done", jQuery.Callbacks("once memory"), "resolved" ],
				[ "reject", "fail", jQuery.Callbacks("once memory"), "rejected" ],
				[ "notify", "progress", jQuery.Callbacks("memory") ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				then: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;
					return jQuery.Deferred(function( newDefer ) {
						jQuery.each( tuples, function( i, tuple ) {
							var action = tuple[ 0 ],
								fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];
							// deferred[ done | fail | progress ] for forwarding actions to newDefer
							deferred[ tuple[1] ](function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && jQuery.isFunction( returned.promise ) ) {
									returned.promise()
										.done( newDefer.resolve )
										.fail( newDefer.reject )
										.progress( newDefer.notify );
								} else {
									newDefer[ action + "With" ]( this === promise ? newDefer.promise() : this, fn ? [ returned ] : arguments );
								}
							});
						});
						fns = null;
					}).promise();
				},
				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Keep pipe for back-compat
		promise.pipe = promise.then;

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 3 ];

			// promise[ done | fail | progress ] = list.add
			promise[ tuple[1] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(function() {
					// state = [ resolved | rejected ]
					state = stateString;

				// [ reject_list | resolve_list ].disable; progress_list.lock
				}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );
			}

			// deferred[ resolve | reject | notify ]
			deferred[ tuple[0] ] = function() {
				deferred[ tuple[0] + "With" ]( this === deferred ? promise : this, arguments );
				return this;
			};
			deferred[ tuple[0] + "With" ] = list.fireWith;
		});

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( subordinate /* , ..., subordinateN */ ) {
		var i = 0,
			resolveValues = core_slice.call( arguments ),
			length = resolveValues.length,

			// the count of uncompleted subordinates
			remaining = length !== 1 || ( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,

			// the master Deferred. If resolveValues consist of only a single Deferred, just use that.
			deferred = remaining === 1 ? subordinate : jQuery.Deferred(),

			// Update function for both resolve and progress values
			updateFunc = function( i, contexts, values ) {
				return function( value ) {
					contexts[ i ] = this;
					values[ i ] = arguments.length > 1 ? core_slice.call( arguments ) : value;
					if( values === progressValues ) {
						deferred.notifyWith( contexts, values );
					} else if ( !( --remaining ) ) {
						deferred.resolveWith( contexts, values );
					}
				};
			},

			progressValues, progressContexts, resolveContexts;

		// add listeners to Deferred subordinates; treat others as resolved
		if ( length > 1 ) {
			progressValues = new Array( length );
			progressContexts = new Array( length );
			resolveContexts = new Array( length );
			for ( ; i < length; i++ ) {
				if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {
					resolveValues[ i ].promise()
						.done( updateFunc( i, resolveContexts, resolveValues ) )
						.fail( deferred.reject )
						.progress( updateFunc( i, progressContexts, progressValues ) );
				} else {
					--remaining;
				}
			}
		}

		// if we're not waiting on anything, resolve the master
		if ( !remaining ) {
			deferred.resolveWith( resolveContexts, resolveValues );
		}

		return deferred.promise();
	}
});
jQuery.support = (function( support ) {
	var input = document.createElement("input"),
		fragment = document.createDocumentFragment(),
		div = document.createElement("div"),
		select = document.createElement("select"),
		opt = select.appendChild( document.createElement("option") );

	// Finish early in limited environments
	if ( !input.type ) {
		return support;
	}

	input.type = "checkbox";

	// Support: Safari 5.1, iOS 5.1, Android 4.x, Android 2.3
	// Check the default checkbox/radio value ("" on old WebKit; "on" elsewhere)
	support.checkOn = input.value !== "";

	// Must access the parent to make an option select properly
	// Support: IE9, IE10
	support.optSelected = opt.selected;

	// Will be defined later
	support.reliableMarginRight = true;
	support.boxSizingReliable = true;
	support.pixelPosition = false;

	// Make sure checked status is properly cloned
	// Support: IE9, IE10
	input.checked = true;
	support.noCloneChecked = input.cloneNode( true ).checked;

	// Make sure that the options inside disabled selects aren't marked as disabled
	// (WebKit marks them as disabled)
	select.disabled = true;
	support.optDisabled = !opt.disabled;

	// Check if an input maintains its value after becoming a radio
	// Support: IE9, IE10
	input = document.createElement("input");
	input.value = "t";
	input.type = "radio";
	support.radioValue = input.value === "t";

	// #11217 - WebKit loses check when the name is after the checked attribute
	input.setAttribute( "checked", "t" );
	input.setAttribute( "name", "t" );

	fragment.appendChild( input );

	// Support: Safari 5.1, Android 4.x, Android 2.3
	// old WebKit doesn't clone checked state correctly in fragments
	support.checkClone = fragment.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: Firefox, Chrome, Safari
	// Beware of CSP restrictions (https://developer.mozilla.org/en/Security/CSP)
	support.focusinBubbles = "onfocusin" in window;

	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	// Run tests that need a body at doc ready
	jQuery(function() {
		var container, marginDiv,
			// Support: Firefox, Android 2.3 (Prefixed box-sizing versions).
			divReset = "padding:0;margin:0;border:0;display:block;-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box",
			body = document.getElementsByTagName("body")[ 0 ];

		if ( !body ) {
			// Return for frameset docs that don't have a body
			return;
		}

		container = document.createElement("div");
		container.style.cssText = "border:0;width:0;height:0;position:absolute;top:0;left:-9999px;margin-top:1px";

		// Check box-sizing and margin behavior.
		body.appendChild( container ).appendChild( div );
		div.innerHTML = "";
		// Support: Firefox, Android 2.3 (Prefixed box-sizing versions).
		div.style.cssText = "-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;padding:1px;border:1px;display:block;width:4px;margin-top:1%;position:absolute;top:1%";

		// Workaround failing boxSizing test due to offsetWidth returning wrong value
		// with some non-1 values of body zoom, ticket #13543
		jQuery.swap( body, body.style.zoom != null ? { zoom: 1 } : {}, function() {
			support.boxSizing = div.offsetWidth === 4;
		});

		// Use window.getComputedStyle because jsdom on node.js will break without it.
		if ( window.getComputedStyle ) {
			support.pixelPosition = ( window.getComputedStyle( div, null ) || {} ).top !== "1%";
			support.boxSizingReliable = ( window.getComputedStyle( div, null ) || { width: "4px" } ).width === "4px";

			// Support: Android 2.3
			// Check if div with explicit width and no margin-right incorrectly
			// gets computed margin-right based on width of container. (#3333)
			// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
			marginDiv = div.appendChild( document.createElement("div") );
			marginDiv.style.cssText = div.style.cssText = divReset;
			marginDiv.style.marginRight = marginDiv.style.width = "0";
			div.style.width = "1px";

			support.reliableMarginRight =
				!parseFloat( ( window.getComputedStyle( marginDiv, null ) || {} ).marginRight );
		}

		body.removeChild( container );
	});

	return support;
})( {} );

/*
	Implementation Summary

	1. Enforce API surface and semantic compatibility with 1.9.x branch
	2. Improve the module's maintainability by reducing the storage
		paths to a single mechanism.
	3. Use the same single mechanism to support "private" and "user" data.
	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
	5. Avoid exposing implementation details on user objects (eg. expando properties)
	6. Provide a clear path for implementation upgrade to WeakMap in 2014
*/
var data_user, data_priv,
	rbrace = /(?:\{[\s\S]*\}|\[[\s\S]*\])$/,
	rmultiDash = /([A-Z])/g;

function Data() {
	// Support: Android < 4,
	// Old WebKit does not have Object.preventExtensions/freeze method,
	// return new empty object instead with no [[set]] accessor
	Object.defineProperty( this.cache = {}, 0, {
		get: function() {
			return {};
		}
	});

	this.expando = jQuery.expando + Math.random();
}

Data.uid = 1;

Data.accepts = function( owner ) {
	// Accepts only:
	//  - Node
	//    - Node.ELEMENT_NODE
	//    - Node.DOCUMENT_NODE
	//  - Object
	//    - Any
	return owner.nodeType ?
		owner.nodeType === 1 || owner.nodeType === 9 : true;
};

Data.prototype = {
	key: function( owner ) {
		// We can accept data for non-element nodes in modern browsers,
		// but we should not, see #8335.
		// Always return the key for a frozen object.
		if ( !Data.accepts( owner ) ) {
			return 0;
		}

		var descriptor = {},
			// Check if the owner object already has a cache key
			unlock = owner[ this.expando ];

		// If not, create one
		if ( !unlock ) {
			unlock = Data.uid++;

			// Secure it in a non-enumerable, non-writable property
			try {
				descriptor[ this.expando ] = { value: unlock };
				Object.defineProperties( owner, descriptor );

			// Support: Android < 4
			// Fallback to a less secure definition
			} catch ( e ) {
				descriptor[ this.expando ] = unlock;
				jQuery.extend( owner, descriptor );
			}
		}

		// Ensure the cache object
		if ( !this.cache[ unlock ] ) {
			this.cache[ unlock ] = {};
		}

		return unlock;
	},
	set: function( owner, data, value ) {
		var prop,
			// There may be an unlock assigned to this node,
			// if there is no entry for this "owner", create one inline
			// and set the unlock as though an owner entry had always existed
			unlock = this.key( owner ),
			cache = this.cache[ unlock ];

		// Handle: [ owner, key, value ] args
		if ( typeof data === "string" ) {
			cache[ data ] = value;

		// Handle: [ owner, { properties } ] args
		} else {
			// Support an expectation from the old data system where plain
			// objects used to initialize would be set to the cache by
			// reference, instead of having properties and values copied.
			// Note, this will kill the connection between
			// "this.cache[ unlock ]" and "cache"
			if ( jQuery.isEmptyObject( cache ) ) {
				this.cache[ unlock ] = data;
			// Otherwise, copy the properties one-by-one to the cache object
			} else {
				for ( prop in data ) {
					cache[ prop ] = data[ prop ];
				}
			}
		}
	},
	get: function( owner, key ) {
		// Either a valid cache is found, or will be created.
		// New caches will be created and the unlock returned,
		// allowing direct access to the newly created
		// empty data object. A valid owner object must be provided.
		var cache = this.cache[ this.key( owner ) ];

		return key === undefined ?
			cache : cache[ key ];
	},
	access: function( owner, key, value ) {
		// In cases where either:
		//
		//   1. No key was specified
		//   2. A string key was specified, but no value provided
		//
		// Take the "read" path and allow the get method to determine
		// which value to return, respectively either:
		//
		//   1. The entire cache object
		//   2. The data stored at the key
		//
		if ( key === undefined ||
				((key && typeof key === "string") && value === undefined) ) {
			return this.get( owner, key );
		}

		// [*]When the key is not a string, or both a key and value
		// are specified, set or extend (existing objects) with either:
		//
		//   1. An object of properties
		//   2. A key and value
		//
		this.set( owner, key, value );

		// Since the "set" path can have two possible entry points
		// return the expected data based on which path was taken[*]
		return value !== undefined ? value : key;
	},
	remove: function( owner, key ) {
		var i, name,
			unlock = this.key( owner ),
			cache = this.cache[ unlock ];

		if ( key === undefined ) {
			this.cache[ unlock ] = {};

		} else {
			// Support array or space separated string of keys
			if ( jQuery.isArray( key ) ) {
				// If "name" is an array of keys...
				// When data is initially created, via ("key", "val") signature,
				// keys will be converted to camelCase.
				// Since there is no way to tell _how_ a key was added, remove
				// both plain key and camelCase key. #12786
				// This will only penalize the array argument path.
				name = key.concat( key.map( jQuery.camelCase ) );
			} else {
				// Try the string as a key before any manipulation
				if ( key in cache ) {
					name = [ key ];
				} else {
					// If a key with the spaces exists, use it.
					// Otherwise, create an array by matching non-whitespace
					name = jQuery.camelCase( key );
					name = name in cache ?
						[ name ] : ( name.match( core_rnotwhite ) || [] );
				}
			}

			i = name.length;
			while ( i-- ) {
				delete cache[ name[ i ] ];
			}
		}
	},
	hasData: function( owner ) {
		return !jQuery.isEmptyObject(
			this.cache[ owner[ this.expando ] ] || {}
		);
	},
	discard: function( owner ) {
		delete this.cache[ this.key( owner ) ];
	}
};

// These may be used throughout the jQuery core codebase
data_user = new Data();
data_priv = new Data();


jQuery.extend({
	acceptData: Data.accepts,

	hasData: function( elem ) {
		return data_user.hasData( elem ) || data_priv.hasData( elem );
	},

	data: function( elem, name, data ) {
		return data_user.access( elem, name, data );
	},

	removeData: function( elem, name ) {
		data_user.remove( elem, name );
	},

	// TODO: Now that all calls to _data and _removeData have been replaced
	// with direct calls to data_priv methods, these can be deprecated.
	_data: function( elem, name, data ) {
		return data_priv.access( elem, name, data );
	},

	_removeData: function( elem, name ) {
		data_priv.remove( elem, name );
	}
});

jQuery.fn.extend({
	data: function( key, value ) {
		var attrs, name,
			elem = this[ 0 ],
			i = 0,
			data = null;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = data_user.get( elem );

				if ( elem.nodeType === 1 && !data_priv.get( elem, "hasDataAttrs" ) ) {
					attrs = elem.attributes;
					for ( ; i < attrs.length; i++ ) {
						name = attrs[ i ].name;

						if ( name.indexOf( "data-" ) === 0 ) {
							name = jQuery.camelCase( name.substring(5) );
							dataAttr( elem, name, data[ name ] );
						}
					}
					data_priv.set( elem, "hasDataAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each(function() {
				data_user.set( this, key );
			});
		}

		return jQuery.access( this, function( value ) {
			var data,
				camelKey = jQuery.camelCase( key );

			// The calling jQuery object (element matches) is not empty
			// (and therefore has an element appears at this[ 0 ]) and the
			// `value` parameter was not undefined. An empty jQuery object
			// will result in `undefined` for elem = this[ 0 ] which will
			// throw an exception if an attempt to read a data cache is made.
			if ( elem && value === undefined ) {
				// Attempt to get data from the cache
				// with the key as-is
				data = data_user.get( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to get data from the cache
				// with the key camelized
				data = data_user.get( elem, camelKey );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to "discover" the data in
				// HTML5 custom data-* attrs
				data = dataAttr( elem, camelKey, undefined );
				if ( data !== undefined ) {
					return data;
				}

				// We tried really hard, but the data doesn't exist.
				return;
			}

			// Set the data...
			this.each(function() {
				// First, attempt to store a copy or reference of any
				// data that might've been store with a camelCased key.
				var data = data_user.get( this, camelKey );

				// For HTML5 data-* attribute interop, we have to
				// store property names with dashes in a camelCase form.
				// This might not apply to all properties...*
				data_user.set( this, camelKey, value );

				// *... In the case of properties that might _actually_
				// have dashes, we need to also store a copy of that
				// unchanged property.
				if ( key.indexOf("-") !== -1 && data !== undefined ) {
					data_user.set( this, key, value );
				}
			});
		}, null, value, arguments.length > 1, null, true );
	},

	removeData: function( key ) {
		return this.each(function() {
			data_user.remove( this, key );
		});
	}
});

function dataAttr( elem, key, data ) {
	var name;

	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {
		name = "data-" + key.replace( rmultiDash, "-$1" ).toLowerCase();
		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = data === "true" ? true :
					data === "false" ? false :
					data === "null" ? null :
					// Only convert to a number if it doesn't change the string
					+data + "" === data ? +data :
					rbrace.test( data ) ? JSON.parse( data ) :
					data;
			} catch( e ) {}

			// Make sure we set the data so it isn't changed later
			data_user.set( elem, key, data );
		} else {
			data = undefined;
		}
	}
	return data;
}
jQuery.extend({
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = data_priv.get( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || jQuery.isArray( data ) ) {
					queue = data_priv.access( elem, type, jQuery.makeArray(data) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		hooks.cur = fn;
		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// not intended for public consumption - generates a queueHooks object, or returns the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return data_priv.get( elem, key ) || data_priv.access( elem, key, {
			empty: jQuery.Callbacks("once memory").add(function() {
				data_priv.remove( elem, [ type + "queue", key ] );
			})
		});
	}
});

jQuery.fn.extend({
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[0], type );
		}

		return data === undefined ?
			this :
			this.each(function() {
				var queue = jQuery.queue( this, type, data );

				// ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[0] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			});
	},
	dequeue: function( type ) {
		return this.each(function() {
			jQuery.dequeue( this, type );
		});
	},
	// Based off of the plugin by Clint Helfers, with permission.
	// http://blindsignals.com/index.php/2009/07/jquery-delay/
	delay: function( time, type ) {
		time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
		type = type || "fx";

		return this.queue( type, function( next, hooks ) {
			var timeout = setTimeout( next, time );
			hooks.stop = function() {
				clearTimeout( timeout );
			};
		});
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},
	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while( i-- ) {
			tmp = data_priv.get( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
});
var nodeHook, boolHook,
	rclass = /[\t\r\n]/g,
	rreturn = /\r/g,
	rfocusable = /^(?:input|select|textarea|button)$/i;

jQuery.fn.extend({
	attr: function( name, value ) {
		return jQuery.access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each(function() {
			jQuery.removeAttr( this, name );
		});
	},

	prop: function( name, value ) {
		return jQuery.access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		return this.each(function() {
			delete this[ jQuery.propFix[ name ] || name ];
		});
	},

	addClass: function( value ) {
		var classes, elem, cur, clazz, j,
			i = 0,
			len = this.length,
			proceed = typeof value === "string" && value;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).addClass( value.call( this, j, this.className ) );
			});
		}

		if ( proceed ) {
			// The disjunction here is for better compressibility (see removeClass)
			classes = ( value || "" ).match( core_rnotwhite ) || [];

			for ( ; i < len; i++ ) {
				elem = this[ i ];
				cur = elem.nodeType === 1 && ( elem.className ?
					( " " + elem.className + " " ).replace( rclass, " " ) :
					" "
				);

				if ( cur ) {
					j = 0;
					while ( (clazz = classes[j++]) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}
					elem.className = jQuery.trim( cur );

				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, clazz, j,
			i = 0,
			len = this.length,
			proceed = arguments.length === 0 || typeof value === "string" && value;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).removeClass( value.call( this, j, this.className ) );
			});
		}
		if ( proceed ) {
			classes = ( value || "" ).match( core_rnotwhite ) || [];

			for ( ; i < len; i++ ) {
				elem = this[ i ];
				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 && ( elem.className ?
					( " " + elem.className + " " ).replace( rclass, " " ) :
					""
				);

				if ( cur ) {
					j = 0;
					while ( (clazz = classes[j++]) ) {
						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) >= 0 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}
					elem.className = value ? jQuery.trim( cur ) : "";
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value,
			isBool = typeof stateVal === "boolean";

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( i ) {
				jQuery( this ).toggleClass( value.call(this, i, this.className, stateVal), stateVal );
			});
		}

		return this.each(function() {
			if ( type === "string" ) {
				// toggle individual class names
				var className,
					i = 0,
					self = jQuery( this ),
					state = stateVal,
					classNames = value.match( core_rnotwhite ) || [];

				while ( (className = classNames[ i++ ]) ) {
					// check each className given, space separated list
					state = isBool ? state : !self.hasClass( className );
					self[ state ? "addClass" : "removeClass" ]( className );
				}

			// Toggle whole class name
			} else if ( type === core_strundefined || type === "boolean" ) {
				if ( this.className ) {
					// store className if set
					data_priv.set( this, "__className__", this.className );
				}

				// If the element has a class name or if we're passed "false",
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				this.className = this.className || value === false ? "" : data_priv.get( this, "__className__" ) || "";
			}
		});
	},

	hasClass: function( selector ) {
		var className = " " + selector + " ",
			i = 0,
			l = this.length;
		for ( ; i < l; i++ ) {
			if ( this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf( className ) >= 0 ) {
				return true;
			}
		}

		return false;
	},

	val: function( value ) {
		var hooks, ret, isFunction,
			elem = this[0];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] || jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks && "get" in hooks && (ret = hooks.get( elem, "value" )) !== undefined ) {
					return ret;
				}

				ret = elem.value;

				return typeof ret === "string" ?
					// handle most common string cases
					ret.replace(rreturn, "") :
					// handle cases where value is null/undef or number
					ret == null ? "" : ret;
			}

			return;
		}

		isFunction = jQuery.isFunction( value );

		return this.each(function( i ) {
			var val,
				self = jQuery(this);

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( isFunction ) {
				val = value.call( this, i, self.val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";
			} else if ( typeof val === "number" ) {
				val += "";
			} else if ( jQuery.isArray( val ) ) {
				val = jQuery.map(val, function ( value ) {
					return value == null ? "" : value + "";
				});
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !("set" in hooks) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		});
	}
});

jQuery.extend({
	valHooks: {
		option: {
			get: function( elem ) {
				// attributes.value is undefined in Blackberry 4.7 but
				// uses .value. See #6932
				var val = elem.attributes.value;
				return !val || val.specified ? elem.value : elem.text;
			}
		},
		select: {
			get: function( elem ) {
				var value, option,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one" || index < 0,
					values = one ? null : [],
					max = one ? index + 1 : options.length,
					i = index < 0 ?
						max :
						one ? index : 0;

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// IE6-9 doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&
							// Don't return options that are disabled or in a disabled optgroup
							( jQuery.support.optDisabled ? !option.disabled : option.getAttribute("disabled") === null ) &&
							( !option.parentNode.disabled || !jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];
					if ( (option.selected = jQuery.inArray( jQuery(option).val(), values ) >= 0) ) {
						optionSet = true;
					}
				}

				// force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	},

	attr: function( elem, name, value ) {
		var hooks, ret,
			nType = elem.nodeType;

		// don't get/set attributes on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === core_strundefined ) {
			return jQuery.prop( elem, name, value );
		}

		// All attributes are lowercase
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			name = name.toLowerCase();
			hooks = jQuery.attrHooks[ name ] ||
				( jQuery.expr.match.boolean.test( name ) ? boolHook : nodeHook );
		}

		if ( value !== undefined ) {

			if ( value === null ) {
				jQuery.removeAttr( elem, name );

			} else if ( hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ) {
				return ret;

			} else {
				elem.setAttribute( name, value + "" );
				return value;
			}

		} else if ( hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ) {
			return ret;

		} else {
			ret = jQuery.find.attr( elem, name );

			// Non-existent attributes return null, we normalize to undefined
			return ret == null ?
				undefined :
				ret;
		}
	},

	removeAttr: function( elem, value ) {
		var name, propName,
			i = 0,
			attrNames = value && value.match( core_rnotwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( (name = attrNames[i++]) ) {
				propName = jQuery.propFix[ name ] || name;

				// Boolean attributes get special treatment (#10870)
				if ( jQuery.expr.match.boolean.test( name ) ) {
					// Set corresponding property to false
					elem[ propName ] = false;
				}

				elem.removeAttribute( name );
			}
		}
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !jQuery.support.radioValue && value === "radio" && jQuery.nodeName(elem, "input") ) {
					// Setting the type on a radio button after the value resets the value in IE6-9
					// Reset value to default in case type is set after value during creation
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	},

	propFix: {
		"for": "htmlFor",
		"class": "className"
	},

	prop: function( elem, name, value ) {
		var ret, hooks, notxml,
			nType = elem.nodeType;

		// don't get/set properties on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		notxml = nType !== 1 || !jQuery.isXMLDoc( elem );

		if ( notxml ) {
			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			return hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ?
				ret :
				( elem[ name ] = value );

		} else {
			return hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ?
				ret :
				elem[ name ];
		}
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {
				return elem.hasAttribute( "tabindex" ) || rfocusable.test( elem.nodeName ) || elem.href ?
					elem.tabIndex :
					-1;
			}
		}
	}
});

// Hooks for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {
			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else {
			elem.setAttribute( name, name );
		}
		return name;
	}
};
jQuery.each( jQuery.expr.match.boolean.source.match( /\w+/g ), function( i, name ) {
	var getter = jQuery.expr.attrHandle[ name ] || jQuery.find.attr;

	jQuery.expr.attrHandle[ name ] = function( elem, name, isXML ) {
		var fn = jQuery.expr.attrHandle[ name ],
			ret = isXML ?
				undefined :
				/* jshint eqeqeq: false */
				// Temporarily disable this handler to check existence
				(jQuery.expr.attrHandle[ name ] = undefined) !=
					getter( elem, name, isXML ) ?

					name.toLowerCase() :
					null;

		// Restore handler
		jQuery.expr.attrHandle[ name ] = fn;

		return ret;
	};
});

// Support: IE9+
// Selectedness for an option in an optgroup can be inaccurate
if ( !jQuery.support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {
			var parent = elem.parentNode;
			if ( parent && parent.parentNode ) {
				parent.parentNode.selectedIndex;
			}
			return null;
		}
	};
}

jQuery.each([
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
});

// Radios and checkboxes getter/setter
jQuery.each([ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( jQuery.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery(elem).val(), value ) >= 0 );
			}
		}
	};
	if ( !jQuery.support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			// Support: Webkit
			// "" is returned instead of "on" if a value isn't specified
			return elem.getAttribute("value") === null ? "on" : elem.value;
		};
	}
});
var rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|contextmenu)|click/,
	rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	rtypenamespace = /^([^.]*)(?:\.(.+)|)$/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {

		var handleObjIn, eventHandle, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = data_priv.get( elem );

		// Don't attach events to noData or text/comment nodes (but allow plain objects)
		if ( !elemData ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !(events = elemData.events) ) {
			events = elemData.events = {};
		}
		if ( !(eventHandle = elemData.handle) ) {
			eventHandle = elemData.handle = function( e ) {
				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== core_strundefined && (!e || jQuery.event.triggered !== e.type) ?
					jQuery.event.dispatch.apply( eventHandle.elem, arguments ) :
					undefined;
			};
			// Add elem as a property of the handle fn to prevent a memory leak with IE non-native events
			eventHandle.elem = elem;
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( core_rnotwhite ) || [""];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[t] ) || [];
			type = origType = tmp[1];
			namespaces = ( tmp[2] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend({
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join(".")
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !(handlers = events[ type ]) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener if the special events handler returns false
				if ( !special.setup || special.setup.call( elem, data, namespaces, eventHandle ) === false ) {
					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle, false );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

		// Nullify elem to prevent memory leaks in IE
		elem = null;
	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {

		var j, origCount, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = data_priv.hasData( elem ) && data_priv.get( elem );

		if ( !elemData || !(events = elemData.events) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( core_rnotwhite ) || [""];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[t] ) || [];
			type = origType = tmp[1];
			namespaces = ( tmp[2] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[2] && new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector || selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown || special.teardown.call( elem, namespaces, elemData.handle ) === false ) {
					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			delete elemData.handle;
			data_priv.remove( elem, "events" );
		}
	},

	trigger: function( event, data, elem, onlyHandlers ) {

		var i, cur, tmp, bubbleType, ontype, handle, special,
			eventPath = [ elem || document ],
			type = core_hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = core_hasOwn.call( event, "namespace" ) ? event.namespace.split(".") : [];

		cur = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf(".") >= 0 ) {
			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split(".");
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf(":") < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join(".");
		event.namespace_re = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === (elem.ownerDocument || document) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( (cur = eventPath[i++]) && !event.isPropagationStopped() ) {

			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( data_priv.get( cur, "events" ) || {} )[ event.type ] && data_priv.get( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && jQuery.acceptData( cur ) && handle.apply && handle.apply( cur, data ) === false ) {
				event.preventDefault();
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( (!special._default || special._default.apply( eventPath.pop(), data ) === false) &&
				jQuery.acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name name as the event.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && jQuery.isFunction( elem[ type ] ) && !jQuery.isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;
					elem[ type ]();
					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	dispatch: function( event ) {

		// Make a writable jQuery.Event from the native event object
		event = jQuery.event.fix( event );

		var i, j, ret, matched, handleObj,
			handlerQueue = [],
			args = core_slice.call( arguments ),
			handlers = ( data_priv.get( this, "events" ) || {} )[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[0] = event;
		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( (matched = handlerQueue[ i++ ]) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( (handleObj = matched.handlers[ j++ ]) && !event.isImmediatePropagationStopped() ) {

				// Triggered event must either 1) have no namespace, or
				// 2) have namespace(s) a subset or equal to those in the bound event (both can have no namespace).
				if ( !event.namespace_re || event.namespace_re.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( (jQuery.event.special[ handleObj.origType ] || {}).handle || handleObj.handler )
							.apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( (event.result = ret) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var i, matches, sel, handleObj,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Find delegate handlers
		// Black-hole SVG <use> instance trees (#13180)
		// Avoid non-left-click bubbling in Firefox (#3861)
		if ( delegateCount && cur.nodeType && (!event.button || event.type !== "click") ) {

			for ( ; cur !== this; cur = cur.parentNode || this ) {

				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.disabled !== true || event.type !== "click" ) {
					matches = [];
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matches[ sel ] === undefined ) {
							matches[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) >= 0 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matches[ sel ] ) {
							matches.push( handleObj );
						}
					}
					if ( matches.length ) {
						handlerQueue.push({ elem: cur, handlers: matches });
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		if ( delegateCount < handlers.length ) {
			handlerQueue.push({ elem: this, handlers: handlers.slice( delegateCount ) });
		}

		return handlerQueue;
	},

	// Includes some event props shared by KeyEvent and MouseEvent
	props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),

	fixHooks: {},

	keyHooks: {
		props: "char charCode key keyCode".split(" "),
		filter: function( event, original ) {

			// Add which for key events
			if ( event.which == null ) {
				event.which = original.charCode != null ? original.charCode : original.keyCode;
			}

			return event;
		}
	},

	mouseHooks: {
		props: "button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
		filter: function( event, original ) {
			var eventDoc, doc, body,
				button = original.button;

			// Calculate pageX/Y if missing and clientX/Y available
			if ( event.pageX == null && original.clientX != null ) {
				eventDoc = event.target.ownerDocument || document;
				doc = eventDoc.documentElement;
				body = eventDoc.body;

				event.pageX = original.clientX + ( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) - ( doc && doc.clientLeft || body && body.clientLeft || 0 );
				event.pageY = original.clientY + ( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) - ( doc && doc.clientTop  || body && body.clientTop  || 0 );
			}

			// Add which for click: 1 === left; 2 === middle; 3 === right
			// Note: button is not normalized, so don't use it
			if ( !event.which && button !== undefined ) {
				event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
			}

			return event;
		}
	},

	fix: function( event ) {
		if ( event[ jQuery.expando ] ) {
			return event;
		}

		// Create a writable copy of the event object and normalize some properties
		var i, prop, copy,
			type = event.type,
			originalEvent = event,
			fixHook = this.fixHooks[ type ];

		if ( !fixHook ) {
			this.fixHooks[ type ] = fixHook =
				rmouseEvent.test( type ) ? this.mouseHooks :
				rkeyEvent.test( type ) ? this.keyHooks :
				{};
		}
		copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;

		event = new jQuery.Event( originalEvent );

		i = copy.length;
		while ( i-- ) {
			prop = copy[ i ];
			event[ prop ] = originalEvent[ prop ];
		}

		// Support: Safari 6.0+, Chrome < 28
		// Target should not be a text node (#504, #13143)
		if ( event.target.nodeType === 3 ) {
			event.target = event.target.parentNode;
		}

		return fixHook.filter? fixHook.filter( event, originalEvent ) : event;
	},

	special: {
		load: {
			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		focus: {
			// Fire native event if possible so blur/focus sequence is correct
			trigger: function() {
				if ( this !== safeActiveElement() && this.focus ) {
					this.focus();
					return false;
				}
			},
			delegateType: "focusin"
		},
		blur: {
			trigger: function() {
				if ( this === safeActiveElement() && this.blur ) {
					this.blur();
					return false;
				}
			},
			delegateType: "focusout"
		},
		click: {
			// For checkbox, fire native event so checked state will be right
			trigger: function() {
				if ( this.type === "checkbox" && this.click && jQuery.nodeName( this, "input" ) ) {
					this.click();
					return false;
				}
			},

			// For cross-browser consistency, don't fire native .click() on links
			_default: function( event ) {
				return jQuery.nodeName( event.target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Support: Firefox 20+
				// Firefox doesn't alert if the returnValue field is not set.
				if ( event.result !== undefined ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	},

	simulate: function( type, elem, event, bubble ) {
		// Piggyback on a donor event to simulate a different one.
		// Fake originalEvent to avoid donor's stopPropagation, but if the
		// simulated event prevents default then we do the same on the donor.
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true,
				originalEvent: {}
			}
		);
		if ( bubble ) {
			jQuery.event.trigger( e, null, elem );
		} else {
			jQuery.event.dispatch.call( elem, e );
		}
		if ( e.isDefaultPrevented() ) {
			event.preventDefault();
		}
	}
};

jQuery.removeEvent = function( elem, type, handle ) {
	if ( elem.removeEventListener ) {
		elem.removeEventListener( type, handle, false );
	}
};

jQuery.Event = function( src, props ) {
	// Allow instantiation without the 'new' keyword
	if ( !(this instanceof jQuery.Event) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = ( src.defaultPrevented ||
			src.getPreventDefault && src.getPreventDefault() ) ? returnTrue : returnFalse;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || jQuery.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;

		if ( e && e.preventDefault ) {
			e.preventDefault();
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;

		if ( e && e.stopPropagation ) {
			e.stopPropagation();
		}
	},
	stopImmediatePropagation: function() {
		this.isImmediatePropagationStopped = returnTrue;
		this.stopPropagation();
	}
};

// Create mouseenter/leave events using mouseover/out and event-time checks
// Support: Chrome 15+
jQuery.each({
	mouseenter: "mouseover",
	mouseleave: "mouseout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mousenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || (related !== target && !jQuery.contains( target, related )) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
});

// Create "bubbling" focus and blur events
// Support: Firefox, Chrome, Safari
if ( !jQuery.support.focusinBubbles ) {
	jQuery.each({ focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler while someone wants focusin/focusout
		var attaches = 0,
			handler = function( event ) {
				jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ), true );
			};

		jQuery.event.special[ fix ] = {
			setup: function() {
				if ( attaches++ === 0 ) {
					document.addEventListener( orig, handler, true );
				}
			},
			teardown: function() {
				if ( --attaches === 0 ) {
					document.removeEventListener( orig, handler, true );
				}
			}
		};
	});
}

jQuery.fn.extend({

	on: function( types, selector, data, fn, /*INTERNAL*/ one ) {
		var origFn, type;

		// Types can be a map of types/handlers
		if ( typeof types === "object" ) {
			// ( types-Object, selector, data )
			if ( typeof selector !== "string" ) {
				// ( types-Object, data )
				data = data || selector;
				selector = undefined;
			}
			for ( type in types ) {
				this.on( type, selector, data, types[ type ], one );
			}
			return this;
		}

		if ( data == null && fn == null ) {
			// ( types, fn )
			fn = selector;
			data = selector = undefined;
		} else if ( fn == null ) {
			if ( typeof selector === "string" ) {
				// ( types, selector, fn )
				fn = data;
				data = undefined;
			} else {
				// ( types, data, fn )
				fn = data;
				data = selector;
				selector = undefined;
			}
		}
		if ( fn === false ) {
			fn = returnFalse;
		} else if ( !fn ) {
			return this;
		}

		if ( one === 1 ) {
			origFn = fn;
			fn = function( event ) {
				// Can use an empty set, since event contains the info
				jQuery().off( event );
				return origFn.apply( this, arguments );
			};
			// Use same guid so caller can remove using origFn
			fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
		}
		return this.each( function() {
			jQuery.event.add( this, types, fn, data, selector );
		});
	},
	one: function( types, selector, data, fn ) {
		return this.on( types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {
			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {
			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {
			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each(function() {
			jQuery.event.remove( this, types, fn, selector );
		});
	},

	trigger: function( type, data ) {
		return this.each(function() {
			jQuery.event.trigger( type, data, this );
		});
	},
	triggerHandler: function( type, data ) {
		var elem = this[0];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
});
var isSimple = /^.[^:#\[\.,]*$/,
	rneedsContext = jQuery.expr.match.needsContext,
	// methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.fn.extend({
	find: function( selector ) {
		var self, matched, i,
			l = this.length;

		if ( typeof selector !== "string" ) {
			self = this;
			return this.pushStack( jQuery( selector ).filter(function() {
				for ( i = 0; i < l; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			}) );
		}

		matched = [];
		for ( i = 0; i < l; i++ ) {
			jQuery.find( selector, this[ i ], matched );
		}

		// Needed because $( selector, context ) becomes $( context ).find( selector )
		matched = this.pushStack( l > 1 ? jQuery.unique( matched ) : matched );
		matched.selector = ( this.selector ? this.selector + " " : "" ) + selector;
		return matched;
	},

	has: function( target ) {
		var targets = jQuery( target, this ),
			l = targets.length;

		return this.filter(function() {
			var i = 0;
			for ( ; i < l; i++ ) {
				if ( jQuery.contains( this, targets[i] ) ) {
					return true;
				}
			}
		});
	},

	not: function( selector ) {
		return this.pushStack( winnow(this, selector || [], true) );
	},

	filter: function( selector ) {
		return this.pushStack( winnow(this, selector || [], false) );
	},

	is: function( selector ) {
		return !!selector && (
			typeof selector === "string" ?
				// If this is a positional/relative selector, check membership in the returned set
				// so $("p:first").is("p:last") won't return true for a doc with two "p".
				rneedsContext.test( selector ) ?
					jQuery( selector, this.context ).index( this[ 0 ] ) >= 0 :
					jQuery.filter( selector, this ).length > 0 :
				this.filter( selector ).length > 0 );
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			matched = [],
			pos = ( rneedsContext.test( selectors ) || typeof selectors !== "string" ) ?
				jQuery( selectors, context || this.context ) :
				0;

		for ( ; i < l; i++ ) {
			for ( cur = this[i]; cur && cur !== context; cur = cur.parentNode ) {
				// Always skip document fragments
				if ( cur.nodeType < 11 && (pos ?
					pos.index(cur) > -1 :

					// Don't pass non-elements to Sizzle
					cur.nodeType === 1 &&
						jQuery.find.matchesSelector(cur, selectors)) ) {

					cur = matched.push( cur );
					break;
				}
			}
		}

		return this.pushStack( matched.length > 1 ? jQuery.unique( matched ) : matched );
	},

	// Determine the position of an element within
	// the matched set of elements
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
		}

		// index in selector
		if ( typeof elem === "string" ) {
			return core_indexOf.call( jQuery( elem ), this[ 0 ] );
		}

		// Locate the position of the desired element
		return core_indexOf.call( this,

			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[ 0 ] : elem
		);
	},

	add: function( selector, context ) {
		var set = typeof selector === "string" ?
				jQuery( selector, context ) :
				jQuery.makeArray( selector && selector.nodeType ? [ selector ] : selector ),
			all = jQuery.merge( this.get(), set );

		return this.pushStack( jQuery.unique(all) );
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter(selector)
		);
	}
});

function sibling( cur, dir ) {
	while ( (cur = cur[dir]) && cur.nodeType !== 1 ) {}

	return cur;
}

jQuery.each({
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return jQuery.dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return jQuery.dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return jQuery.dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return jQuery.sibling( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return jQuery.sibling( elem.firstChild );
	},
	contents: function( elem ) {
		return jQuery.nodeName( elem, "iframe" ) ?
			elem.contentDocument || elem.contentWindow.document :
			jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var matched = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			matched = jQuery.filter( selector, matched );
		}

		if ( this.length > 1 ) {
			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				jQuery.unique( matched );
			}

			// Reverse order for parents* and prev*
			if ( name[ 0 ] === "p" ) {
				matched.reverse();
			}
		}

		return this.pushStack( matched );
	};
});

jQuery.extend({
	filter: function( expr, elems, not ) {
		var elem = elems[ 0 ];

		if ( not ) {
			expr = ":not(" + expr + ")";
		}

		return elems.length === 1 && elem.nodeType === 1 ?
			jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :
			jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
				return elem.nodeType === 1;
			}));
	},

	dir: function( elem, dir, until ) {
		var matched = [],
			truncate = until !== undefined;

		while ( (elem = elem[ dir ]) && elem.nodeType !== 9 ) {
			if ( elem.nodeType === 1 ) {
				if ( truncate && jQuery( elem ).is( until ) ) {
					break;
				}
				matched.push( elem );
			}
		}
		return matched;
	},

	sibling: function( n, elem ) {
		var matched = [];

		for ( ; n; n = n.nextSibling ) {
			if ( n.nodeType === 1 && n !== elem ) {
				matched.push( n );
			}
		}

		return matched;
	}
});

// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( jQuery.isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			/* jshint -W018 */
			return !!qualifier.call( elem, i, elem ) !== not;
		});

	}

	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		});

	}

	if ( typeof qualifier === "string" ) {
		if ( isSimple.test( qualifier ) ) {
			return jQuery.filter( qualifier, elements, not );
		}

		qualifier = jQuery.filter( qualifier, elements );
	}

	return jQuery.grep( elements, function( elem ) {
		return ( core_indexOf.call( qualifier, elem ) >= 0 ) !== not;
	});
}
var rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
	rtagName = /<([\w:]+)/,
	rhtml = /<|&#?\w+;/,
	rnoInnerhtml = /<(?:script|style|link)/i,
	manipulation_rcheckableType = /^(?:checkbox|radio)$/i,
	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rscriptType = /^$|\/(?:java|ecma)script/i,
	rscriptTypeMasked = /^true\/(.*)/,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,

	// We have to close these tags to support XHTML (#13200)
	wrapMap = {

		// Support: IE 9
		option: [ 1, "<select multiple='multiple'>", "</select>" ],

		thead: [ 1, "<table>", "</table>" ],
		tr: [ 2, "<table><tbody>", "</tbody></table>" ],
		td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

		_default: [ 0, "", "" ]
	};

// Support: IE 9
wrapMap.optgroup = wrapMap.option;

wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.col = wrapMap.thead;
wrapMap.th = wrapMap.td;

jQuery.fn.extend({
	text: function( value ) {
		return jQuery.access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().append( ( this[ 0 ] && this[ 0 ].ownerDocument || document ).createTextNode( value ) );
		}, null, value, arguments.length );
	},

	append: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		});
	},

	prepend: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		});
	},

	before: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		});
	},

	after: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		});
	},

	// keepData is for internal use only--do not document
	remove: function( selector, keepData ) {
		var elem,
			elems = selector ? jQuery.filter( selector, this ) : this,
			i = 0;

		for ( ; (elem = elems[i]) != null; i++ ) {
			if ( !keepData && elem.nodeType === 1 ) {
				jQuery.cleanData( getAll( elem ) );
			}

			if ( elem.parentNode ) {
				if ( keepData && jQuery.contains( elem.ownerDocument, elem ) ) {
					setGlobalEval( getAll( elem, "script" ) );
				}
				elem.parentNode.removeChild( elem );
			}
		}

		return this;
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; (elem = this[i]) != null; i++ ) {
			if ( elem.nodeType === 1 ) {

				// Prevent memory leaks
				jQuery.cleanData( getAll( elem, false ) );

				// Remove any remaining nodes
				elem.textContent = "";
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function () {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		});
	},

	html: function( value ) {
		return jQuery.access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this.length;

			if ( value === undefined && elem.nodeType === 1 ) {
				return elem.innerHTML;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

				value = value.replace( rxhtmlTag, "<$1></$2>" );

				try {
					for ( ; i < l; i++ ) {
						elem = this[ i ] || {};

						// Remove element nodes and prevent memory leaks
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch( e ) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var
			// Snapshot the DOM in case .domManip sweeps something relevant into its fragment
			args = jQuery.map( this, function( elem ) {
				return [ elem.nextSibling, elem.parentNode ];
			}),
			i = 0;

		// Make the changes, replacing each context element with the new content
		this.domManip( arguments, function( elem ) {
			var next = args[ i++ ],
				parent = args[ i++ ];

			if ( parent ) {
				jQuery( this ).remove();
				parent.insertBefore( elem, next );
			}
		// Allow new content to include elements from the context set
		}, true );

		// Force removal if there was no new content (e.g., from empty arguments)
		return i ? this : this.remove();
	},

	detach: function( selector ) {
		return this.remove( selector, true );
	},

	domManip: function( args, callback, allowIntersection ) {

		// Flatten any nested arrays
		args = core_concat.apply( [], args );

		var fragment, first, scripts, hasScripts, node, doc,
			i = 0,
			l = this.length,
			set = this,
			iNoClone = l - 1,
			value = args[ 0 ],
			isFunction = jQuery.isFunction( value );

		// We can't cloneNode fragments that contain checked, in WebKit
		if ( isFunction || !( l <= 1 || typeof value !== "string" || jQuery.support.checkClone || !rchecked.test( value ) ) ) {
			return this.each(function( index ) {
				var self = set.eq( index );
				if ( isFunction ) {
					args[ 0 ] = value.call( this, index, self.html() );
				}
				self.domManip( args, callback, allowIntersection );
			});
		}

		if ( l ) {
			fragment = jQuery.buildFragment( args, this[ 0 ].ownerDocument, false, !allowIntersection && this );
			first = fragment.firstChild;

			if ( fragment.childNodes.length === 1 ) {
				fragment = first;
			}

			if ( first ) {
				scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
				hasScripts = scripts.length;

				// Use the original fragment for the last item instead of the first because it can end up
				// being emptied incorrectly in certain situations (#8070).
				for ( ; i < l; i++ ) {
					node = fragment;

					if ( i !== iNoClone ) {
						node = jQuery.clone( node, true, true );

						// Keep references to cloned scripts for later restoration
						if ( hasScripts ) {
							// Support: QtWebKit
							// jQuery.merge because core_push.apply(_, arraylike) throws
							jQuery.merge( scripts, getAll( node, "script" ) );
						}
					}

					callback.call( this[ i ], node, i );
				}

				if ( hasScripts ) {
					doc = scripts[ scripts.length - 1 ].ownerDocument;

					// Reenable scripts
					jQuery.map( scripts, restoreScript );

					// Evaluate executable scripts on first document insertion
					for ( i = 0; i < hasScripts; i++ ) {
						node = scripts[ i ];
						if ( rscriptType.test( node.type || "" ) &&
							!data_priv.access( node, "globalEval" ) && jQuery.contains( doc, node ) ) {

							if ( node.src ) {
								// Hope ajax is available...
								jQuery._evalUrl( node.src );
							} else {
								jQuery.globalEval( node.textContent.replace( rcleanScript, "" ) );
							}
						}
					}
				}
			}
		}

		return this;
	}
});

jQuery.each({
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1,
			i = 0;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone( true );
			jQuery( insert[ i ] )[ original ]( elems );

			// Support: QtWebKit
			// .get() because core_push.apply(_, arraylike) throws
			core_push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
});

jQuery.extend({
	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var i, l, srcElements, destElements,
			clone = elem.cloneNode( true ),
			inPage = jQuery.contains( elem.ownerDocument, elem );

		// Support: IE >= 9
		// Fix Cloning issues
		if ( !jQuery.support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) && !jQuery.isXMLDoc( elem ) ) {

			// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			for ( i = 0, l = srcElements.length; i < l; i++ ) {
				fixInput( srcElements[ i ], destElements[ i ] );
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					cloneCopyEvent( srcElements[ i ], destElements[ i ] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		// Return the cloned set
		return clone;
	},

	buildFragment: function( elems, context, scripts, selection ) {
		var elem, tmp, tag, wrap, contains, j,
			i = 0,
			l = elems.length,
			fragment = context.createDocumentFragment(),
			nodes = [];

		for ( ; i < l; i++ ) {
			elem = elems[ i ];

			if ( elem || elem === 0 ) {

				// Add nodes directly
				if ( jQuery.type( elem ) === "object" ) {
					// Support: QtWebKit
					// jQuery.merge because core_push.apply(_, arraylike) throws
					jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

				// Convert non-html into a text node
				} else if ( !rhtml.test( elem ) ) {
					nodes.push( context.createTextNode( elem ) );

				// Convert html into DOM nodes
				} else {
					tmp = tmp || fragment.appendChild( context.createElement("div") );

					// Deserialize a standard representation
					tag = ( rtagName.exec( elem ) || ["", ""] )[ 1 ].toLowerCase();
					wrap = wrapMap[ tag ] || wrapMap._default;
					tmp.innerHTML = wrap[ 1 ] + elem.replace( rxhtmlTag, "<$1></$2>" ) + wrap[ 2 ];

					// Descend through wrappers to the right content
					j = wrap[ 0 ];
					while ( j-- ) {
						tmp = tmp.firstChild;
					}

					// Support: QtWebKit
					// jQuery.merge because core_push.apply(_, arraylike) throws
					jQuery.merge( nodes, tmp.childNodes );

					// Remember the top-level container
					tmp = fragment.firstChild;

					// Fixes #12346
					// Support: Webkit, IE
					tmp.textContent = "";
				}
			}
		}

		// Remove wrapper from fragment
		fragment.textContent = "";

		i = 0;
		while ( (elem = nodes[ i++ ]) ) {

			// #4087 - If origin and destination elements are the same, and this is
			// that element, do not do anything
			if ( selection && jQuery.inArray( elem, selection ) !== -1 ) {
				continue;
			}

			contains = jQuery.contains( elem.ownerDocument, elem );

			// Append to fragment
			tmp = getAll( fragment.appendChild( elem ), "script" );

			// Preserve script evaluation history
			if ( contains ) {
				setGlobalEval( tmp );
			}

			// Capture executables
			if ( scripts ) {
				j = 0;
				while ( (elem = tmp[ j++ ]) ) {
					if ( rscriptType.test( elem.type || "" ) ) {
						scripts.push( elem );
					}
				}
			}
		}

		return fragment;
	},

	cleanData: function( elems ) {
		var data, elem, type,
			l = elems.length,
			i = 0,
			special = jQuery.event.special;

		for ( ; i < l; i++ ) {
			elem = elems[ i ];

			if ( jQuery.acceptData( elem ) ) {

				data = data_priv.access( elem );

				if ( data ) {
					for ( type in data.events ) {
						if ( special[ type ] ) {
							jQuery.event.remove( elem, type );

						// This is a shortcut to avoid jQuery.event.remove's overhead
						} else {
							jQuery.removeEvent( elem, type, data.handle );
						}
					}
				}
			}
			// Discard any remaining `private` and `user` data
			// One day we'll replace the dual arrays with a WeakMap and this won't be an issue.
			// (Splices the data objects out of the internal cache arrays)
			data_user.discard( elem );
			data_priv.discard( elem );
		}
	},

	_evalUrl: function( url ) {
		return jQuery.ajax({
			url: url,
			type: "GET",
			dataType: "text",
			async: false,
			global: false,
			success: jQuery.globalEval
		});
	}
});

// Support: 1.x compatibility
// Manipulating tables requires a tbody
function manipulationTarget( elem, content ) {
	return jQuery.nodeName( elem, "table" ) &&
		jQuery.nodeName( content.nodeType === 1 ? content : content.firstChild, "tr" ) ?

		elem.getElementsByTagName("tbody")[0] ||
			elem.appendChild( elem.ownerDocument.createElement("tbody") ) :
		elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = (elem.getAttribute("type") !== null) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	var match = rscriptTypeMasked.exec( elem.type );

	if ( match ) {
		elem.type = match[ 1 ];
	} else {
		elem.removeAttribute("type");
	}

	return elem;
}

// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var l = elems.length,
		i = 0;

	for ( ; i < l; i++ ) {
		data_priv.set(
			elems[ i ], "globalEval", !refElements || data_priv.get( refElements[ i ], "globalEval" )
		);
	}
}

function cloneCopyEvent( src, dest ) {
	var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

	if ( dest.nodeType !== 1 ) {
		return;
	}

	// 1. Copy private data: events, handlers, etc.
	if ( data_priv.hasData( src ) ) {
		pdataOld = data_priv.access( src );
		pdataCur = jQuery.extend( {}, pdataOld );
		events = pdataOld.events;

		data_priv.set( dest, pdataCur );

		if ( events ) {
			delete pdataCur.handle;
			pdataCur.events = {};

			for ( type in events ) {
				for ( i = 0, l = events[ type ].length; i < l; i++ ) {
					jQuery.event.add( dest, type, events[ type ][ i ] );
				}
			}
		}
	}

	// 2. Copy user data
	if ( data_user.hasData( src ) ) {
		udataOld = data_user.access( src );
		udataCur = jQuery.extend( {}, udataOld );

		data_user.set( dest, udataCur );
	}
}


function getAll( context, tag ) {
	var ret = context.getElementsByTagName ? context.getElementsByTagName( tag || "*" ) :
			context.querySelectorAll ? context.querySelectorAll( tag || "*" ) :
			[];

	return tag === undefined || tag && jQuery.nodeName( context, tag ) ?
		jQuery.merge( [ context ], ret ) :
		ret;
}

// Support: IE >= 9
function fixInput( src, dest ) {
	var nodeName = dest.nodeName.toLowerCase();

	// Fails to persist the checked state of a cloned checkbox or radio button.
	if ( nodeName === "input" && manipulation_rcheckableType.test( src.type ) ) {
		dest.checked = src.checked;

	// Fails to return the selected option to the default selected state when cloning options
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}
jQuery.fn.extend({
	wrapAll: function( html ) {
		var wrap;

		if ( jQuery.isFunction( html ) ) {
			return this.each(function( i ) {
				jQuery( this ).wrapAll( html.call(this, i) );
			});
		}

		if ( this[ 0 ] ) {

			// The elements to wrap the target around
			wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

			if ( this[ 0 ].parentNode ) {
				wrap.insertBefore( this[ 0 ] );
			}

			wrap.map(function() {
				var elem = this;

				while ( elem.firstElementChild ) {
					elem = elem.firstElementChild;
				}

				return elem;
			}).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each(function( i ) {
				jQuery( this ).wrapInner( html.call(this, i) );
			});
		}

		return this.each(function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		});
	},

	wrap: function( html ) {
		var isFunction = jQuery.isFunction( html );

		return this.each(function( i ) {
			jQuery( this ).wrapAll( isFunction ? html.call(this, i) : html );
		});
	},

	unwrap: function() {
		return this.parent().each(function() {
			if ( !jQuery.nodeName( this, "body" ) ) {
				jQuery( this ).replaceWith( this.childNodes );
			}
		}).end();
	}
});
var curCSS, iframe,
	// swappable if display is none or starts with table except "table", "table-cell", or "table-caption"
	// see here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	rmargin = /^margin/,
	rnumsplit = new RegExp( "^(" + core_pnum + ")(.*)$", "i" ),
	rnumnonpx = new RegExp( "^(" + core_pnum + ")(?!px)[a-z%]+$", "i" ),
	rrelNum = new RegExp( "^([+-])=(" + core_pnum + ")", "i" ),
	elemdisplay = { BODY: "block" },

	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: 0,
		fontWeight: 400
	},

	cssExpand = [ "Top", "Right", "Bottom", "Left" ],
	cssPrefixes = [ "Webkit", "O", "Moz", "ms" ];

// return a css property mapped to a potentially vendor prefixed property
function vendorPropName( style, name ) {

	// shortcut for names that are not vendor prefixed
	if ( name in style ) {
		return name;
	}

	// check for vendor prefixed names
	var capName = name.charAt(0).toUpperCase() + name.slice(1),
		origName = name,
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in style ) {
			return name;
		}
	}

	return origName;
}

function isHidden( elem, el ) {
	// isHidden might be called from jQuery#filter function;
	// in that case, element will be second argument
	elem = el || elem;
	return jQuery.css( elem, "display" ) === "none" || !jQuery.contains( elem.ownerDocument, elem );
}

// NOTE: we've included the "window" in window.getComputedStyle
// because jsdom on node.js will break without it.
function getStyles( elem ) {
	return window.getComputedStyle( elem, null );
}

function showHide( elements, show ) {
	var display, elem, hidden,
		values = [],
		index = 0,
		length = elements.length;

	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		values[ index ] = data_priv.get( elem, "olddisplay" );
		display = elem.style.display;
		if ( show ) {
			// Reset the inline display of this element to learn if it is
			// being hidden by cascaded rules or not
			if ( !values[ index ] && display === "none" ) {
				elem.style.display = "";
			}

			// Set elements which have been overridden with display: none
			// in a stylesheet to whatever the default browser style is
			// for such an element
			if ( elem.style.display === "" && isHidden( elem ) ) {
				values[ index ] = data_priv.access( elem, "olddisplay", css_defaultDisplay(elem.nodeName) );
			}
		} else {

			if ( !values[ index ] ) {
				hidden = isHidden( elem );

				if ( display && display !== "none" || !hidden ) {
					data_priv.set( elem, "olddisplay", hidden ? display : jQuery.css(elem, "display") );
				}
			}
		}
	}

	// Set the display of most of the elements in a second loop
	// to avoid the constant reflow
	for ( index = 0; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}
		if ( !show || elem.style.display === "none" || elem.style.display === "" ) {
			elem.style.display = show ? values[ index ] || "" : "none";
		}
	}

	return elements;
}

jQuery.fn.extend({
	css: function( name, value ) {
		return jQuery.access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( jQuery.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	},
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		var bool = typeof state === "boolean";

		return this.each(function() {
			if ( bool ? state : isHidden( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		});
	}
});

jQuery.extend({
	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {
					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Exclude the following css properties to add px
	cssNumber: {
		"columnCount": true,
		"fillOpacity": true,
		"fontWeight": true,
		"lineHeight": true,
		"opacity": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {
		// normalize float css property
		"float": "cssFloat"
	},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {
		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = jQuery.camelCase( name ),
			style = elem.style;

		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( style, origName ) );

		// gets hook for the prefixed version
		// followed by the unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// convert relative number strings (+= or -=) to relative numbers. #7345
			if ( type === "string" && (ret = rrelNum.exec( value )) ) {
				value = ( ret[1] + 1 ) * ret[2] + parseFloat( jQuery.css( elem, name ) );
				// Fixes bug #9237
				type = "number";
			}

			// Make sure that NaN and null values aren't set. See: #7116
			if ( value == null || type === "number" && isNaN( value ) ) {
				return;
			}

			// If a number was passed in, add 'px' to the (except for certain CSS properties)
			if ( type === "number" && !jQuery.cssNumber[ origName ] ) {
				value += "px";
			}

			// Fixes #8908, it can be done more correctly by specifying setters in cssHooks,
			// but it would mean to define eight (for every problematic property) identical functions
			if ( !jQuery.support.clearCloneStyle && value === "" && name.indexOf("background") === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !("set" in hooks) || (value = hooks.set( elem, value, extra )) !== undefined ) {
				style[ name ] = value;
			}

		} else {
			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks && (ret = hooks.get( elem, false, extra )) !== undefined ) {
				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var val, num, hooks,
			origName = jQuery.camelCase( name );

		// Make sure that we're working with the right name
		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( elem.style, origName ) );

		// gets hook for the prefixed version
		// followed by the unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		//convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Return, converting to number if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || jQuery.isNumeric( num ) ? num || 0 : val;
		}
		return val;
	}
});

curCSS = function( elem, name, _computed ) {
	var width, minWidth, maxWidth,
		computed = _computed || getStyles( elem ),

		// Support: IE9
		// getPropertyValue is only needed for .css('filter') in IE9, see #12537
		ret = computed ? computed.getPropertyValue( name ) || computed[ name ] : undefined,
		style = elem.style;

	if ( computed ) {

		if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
			ret = jQuery.style( elem, name );
		}

		// Support: Safari 5.1
		// A tribute to the "awesome hack by Dean Edwards"
		// Safari 5.1.7 (at least) returns percentage for a larger set of values, but width seems to be reliably pixels
		// this is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values
		if ( rnumnonpx.test( ret ) && rmargin.test( name ) ) {

			// Remember the original values
			width = style.width;
			minWidth = style.minWidth;
			maxWidth = style.maxWidth;

			// Put in the new values to get a computed value out
			style.minWidth = style.maxWidth = style.width = ret;
			ret = computed.width;

			// Revert the changed values
			style.width = width;
			style.minWidth = minWidth;
			style.maxWidth = maxWidth;
		}
	}

	return ret;
};


function setPositiveNumber( elem, value, subtract ) {
	var matches = rnumsplit.exec( value );
	return matches ?
		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 1 ] - ( subtract || 0 ) ) + ( matches[ 2 ] || "px" ) :
		value;
}

function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
	var i = extra === ( isBorderBox ? "border" : "content" ) ?
		// If we already have the right measurement, avoid augmentation
		4 :
		// Otherwise initialize for horizontal or vertical properties
		name === "width" ? 1 : 0,

		val = 0;

	for ( ; i < 4; i += 2 ) {
		// both box models exclude margin, so add it if we want it
		if ( extra === "margin" ) {
			val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
		}

		if ( isBorderBox ) {
			// border-box includes padding, so remove it if we want content
			if ( extra === "content" ) {
				val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// at this point, extra isn't border nor margin, so remove border
			if ( extra !== "margin" ) {
				val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		} else {
			// at this point, extra isn't content, so add padding
			val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// at this point, extra isn't content nor padding, so add border
			if ( extra !== "padding" ) {
				val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	return val;
}

function getWidthOrHeight( elem, name, extra ) {

	// Start with offset property, which is equivalent to the border-box value
	var valueIsBorderBox = true,
		val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
		styles = getStyles( elem ),
		isBorderBox = jQuery.support.boxSizing && jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

	// some non-html elements return undefined for offsetWidth, so check for null/undefined
	// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
	// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
	if ( val <= 0 || val == null ) {
		// Fall back to computed then uncomputed css if necessary
		val = curCSS( elem, name, styles );
		if ( val < 0 || val == null ) {
			val = elem.style[ name ];
		}

		// Computed unit is not pixels. Stop here and return.
		if ( rnumnonpx.test(val) ) {
			return val;
		}

		// we need the check for style in case a browser which returns unreliable values
		// for getComputedStyle silently falls back to the reliable elem.style
		valueIsBorderBox = isBorderBox && ( jQuery.support.boxSizingReliable || val === elem.style[ name ] );

		// Normalize "", auto, and prepare for extra
		val = parseFloat( val ) || 0;
	}

	// use the active box-sizing model to add/subtract irrelevant styles
	return ( val +
		augmentWidthOrHeight(
			elem,
			name,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles
		)
	) + "px";
}

// Try to determine the default display value of an element
function css_defaultDisplay( nodeName ) {
	var doc = document,
		display = elemdisplay[ nodeName ];

	if ( !display ) {
		display = actualDisplay( nodeName, doc );

		// If the simple way fails, read from inside an iframe
		if ( display === "none" || !display ) {
			// Use the already-created iframe if possible
			iframe = ( iframe ||
				jQuery("<iframe frameborder='0' width='0' height='0'/>")
				.css( "cssText", "display:block !important" )
			).appendTo( doc.documentElement );

			// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
			doc = ( iframe[0].contentWindow || iframe[0].contentDocument ).document;
			doc.write("<!doctype html><html><body>");
			doc.close();

			display = actualDisplay( nodeName, doc );
			iframe.detach();
		}

		// Store the correct default display
		elemdisplay[ nodeName ] = display;
	}

	return display;
}

// Called ONLY from within css_defaultDisplay
function actualDisplay( name, doc ) {
	var elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),
		display = jQuery.css( elem[0], "display" );
	elem.remove();
	return display;
}

jQuery.each([ "height", "width" ], function( i, name ) {
	jQuery.cssHooks[ name ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {
				// certain elements can have dimension info if we invisibly show them
				// however, it must have a current display style that would benefit from this
				return elem.offsetWidth === 0 && rdisplayswap.test( jQuery.css( elem, "display" ) ) ?
					jQuery.swap( elem, cssShow, function() {
						return getWidthOrHeight( elem, name, extra );
					}) :
					getWidthOrHeight( elem, name, extra );
			}
		},

		set: function( elem, value, extra ) {
			var styles = extra && getStyles( elem );
			return setPositiveNumber( elem, value, extra ?
				augmentWidthOrHeight(
					elem,
					name,
					extra,
					jQuery.support.boxSizing && jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
					styles
				) : 0
			);
		}
	};
});

// These hooks cannot be added until DOM ready because the support test
// for it is not run until after DOM ready
jQuery(function() {
	// Support: Android 2.3
	if ( !jQuery.support.reliableMarginRight ) {
		jQuery.cssHooks.marginRight = {
			get: function( elem, computed ) {
				if ( computed ) {
					// Support: Android 2.3
					// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
					// Work around by temporarily setting element display to inline-block
					return jQuery.swap( elem, { "display": "inline-block" },
						curCSS, [ elem, "marginRight" ] );
				}
			}
		};
	}

	// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
	// getComputedStyle returns percent when specified for top/left/bottom/right
	// rather than make the css module depend on the offset module, we just check for it here
	if ( !jQuery.support.pixelPosition && jQuery.fn.position ) {
		jQuery.each( [ "top", "left" ], function( i, prop ) {
			jQuery.cssHooks[ prop ] = {
				get: function( elem, computed ) {
					if ( computed ) {
						computed = curCSS( elem, prop );
						// if curCSS returns percentage, fallback to offset
						return rnumnonpx.test( computed ) ?
							jQuery( elem ).position()[ prop ] + "px" :
							computed;
					}
				}
			};
		});
	}

});

if ( jQuery.expr && jQuery.expr.filters ) {
	jQuery.expr.filters.hidden = function( elem ) {
		// Support: Opera <= 12.12
		// Opera reports offsetWidths and offsetHeights less than zero on some elements
		return elem.offsetWidth <= 0 && elem.offsetHeight <= 0;
	};

	jQuery.expr.filters.visible = function( elem ) {
		return !jQuery.expr.filters.hidden( elem );
	};
}

// These hooks are used by animate to expand properties
jQuery.each({
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// assumes a single number if not a string
				parts = typeof value === "string" ? value.split(" ") : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( !rmargin.test( prefix ) ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
});
var r20 = /%20/g,
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

jQuery.fn.extend({
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map(function(){
			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		})
		.filter(function(){
			var type = this.type;
			// Use .is(":disabled") so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !manipulation_rcheckableType.test( type ) );
		})
		.map(function( i, elem ){
			var val = jQuery( this ).val();

			return val == null ?
				null :
				jQuery.isArray( val ) ?
					jQuery.map( val, function( val ){
						return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
					}) :
					{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		}).get();
	}
});

//Serialize an array of form elements or a set of
//key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, value ) {
			// If value is a function, invoke it and return its value
			value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );
			s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
		};

	// Set traditional to true for jQuery <= 1.3.2 behavior.
	if ( traditional === undefined ) {
		traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
	}

	// If an array was passed in, assume that it is an array of form elements.
	if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {
		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		});

	} else {
		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" ).replace( r20, "+" );
};

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( jQuery.isArray( obj ) ) {
		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {
				// Treat each array item as a scalar.
				add( prefix, v );

			} else {
				// Item is non-scalar (array or object), encode its numeric index.
				buildParams( prefix + "[" + ( typeof v === "object" ? i : "" ) + "]", v, traditional, add );
			}
		});

	} else if ( !traditional && jQuery.type( obj ) === "object" ) {
		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {
		// Serialize scalar item.
		add( prefix, obj );
	}
}
jQuery.each( ("blur focus focusin focusout load resize scroll unload click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup error contextmenu").split(" "), function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		return arguments.length > 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};
});

jQuery.fn.extend({
	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	},

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {
		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ? this.off( selector, "**" ) : this.off( types, selector || "**", fn );
	}
});
var
	// Document location
	ajaxLocParts,
	ajaxLocation,

	ajax_nonce = jQuery.now(),

	ajax_rquery = /\?/,
	rhash = /#.*$/,
	rts = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,
	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,
	rurl = /^([\w.+-]+:)(?:\/\/([^\/?#:]*)(?::(\d+)|)|)/,

	// Keep a copy of the old load method
	_load = jQuery.fn.load,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat("*");

// #8138, IE may throw an exception when accessing
// a field from window.location if document.domain has been set
try {
	ajaxLocation = location.href;
} catch( e ) {
	// Use the href attribute of an A element
	// since IE will modify it given document.location
	ajaxLocation = document.createElement( "a" );
	ajaxLocation.href = "";
	ajaxLocation = ajaxLocation.href;
}

// Segment location into parts
ajaxLocParts = rurl.exec( ajaxLocation.toLowerCase() ) || [];

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( core_rnotwhite ) || [];

		if ( jQuery.isFunction( func ) ) {
			// For each dataType in the dataTypeExpression
			while ( (dataType = dataTypes[i++]) ) {
				// Prepend if requested
				if ( dataType[0] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					(structure[ dataType ] = structure[ dataType ] || []).unshift( func );

				// Otherwise append
				} else {
					(structure[ dataType ] = structure[ dataType ] || []).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if( typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[ dataTypeOrTransport ] ) {
				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		});
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var key, deep,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || (deep = {}) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

jQuery.fn.load = function( url, params, callback ) {
	if ( typeof url !== "string" && _load ) {
		return _load.apply( this, arguments );
	}

	var selector, type, response,
		self = this,
		off = url.indexOf(" ");

	if ( off >= 0 ) {
		selector = url.slice( off );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( jQuery.isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax({
			url: url,

			// if "type" variable is undefined, then "GET" method will be used
			type: type,
			dataType: "html",
			data: params
		}).done(function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery("<div>").append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		}).complete( callback && function( jqXHR, status ) {
			self.each( callback, response || [ jqXHR.responseText, status, jqXHR ] );
		});
	}

	return this;
};

// Attach a bunch of functions for handling common AJAX events
jQuery.each( [ "ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend" ], function( i, type ){
	jQuery.fn[ type ] = function( fn ){
		return this.on( type, fn );
	};
});

jQuery.extend({

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: ajaxLocation,
		type: "GET",
		isLocal: rlocalProtocol.test( ajaxLocParts[ 1 ] ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",
		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /xml/,
			html: /html/,
			json: /json/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": jQuery.parseJSON,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var transport,
			// URL without anti-cache param
			cacheURL,
			// Response headers
			responseHeadersString,
			responseHeaders,
			// timeout handle
			timeoutTimer,
			// Cross-domain detection vars
			parts,
			// To know if global events are to be dispatched
			fireGlobals,
			// Loop variable
			i,
			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),
			// Callbacks context
			callbackContext = s.context || s,
			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context && ( callbackContext.nodeType || callbackContext.jquery ) ?
				jQuery( callbackContext ) :
				jQuery.event,
			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks("once memory"),
			// Status-dependent callbacks
			statusCode = s.statusCode || {},
			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},
			// The jqXHR state
			state = 0,
			// Default abort message
			strAbort = "canceled",
			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( state === 2 ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( (match = rheaders.exec( responseHeadersString )) ) {
								responseHeaders[ match[1].toLowerCase() ] = match[ 2 ];
							}
						}
						match = responseHeaders[ key.toLowerCase() ];
					}
					return match == null ? null : match;
				},

				// Raw string
				getAllResponseHeaders: function() {
					return state === 2 ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					var lname = name.toLowerCase();
					if ( !state ) {
						name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( !state ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( state < 2 ) {
							for ( code in map ) {
								// Lazy-add the new callback in a way that preserves old ones
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						} else {
							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR ).complete = completeDeferred.add;
		jqXHR.success = jqXHR.done;
		jqXHR.error = jqXHR.fail;

		// Remove hash character (#7531: and string promotion)
		// Add protocol if not provided (prefilters might expect it)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || ajaxLocation ) + "" ).replace( rhash, "" )
			.replace( rprotocol, ajaxLocParts[ 1 ] + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().match( core_rnotwhite ) || [""];

		// A cross-domain request is in order when we have a protocol:host:port mismatch
		if ( s.crossDomain == null ) {
			parts = rurl.exec( s.url.toLowerCase() );
			s.crossDomain = !!( parts &&
				( parts[ 1 ] !== ajaxLocParts[ 1 ] || parts[ 2 ] !== ajaxLocParts[ 2 ] ||
					( parts[ 3 ] || ( parts[ 1 ] === "http:" ? "80" : "443" ) ) !==
						( ajaxLocParts[ 3 ] || ( ajaxLocParts[ 1 ] === "http:" ? "80" : "443" ) ) )
			);
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( state === 2 ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		fireGlobals = s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger("ajaxStart");
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		cacheURL = s.url;

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// If data is available, append data to url
			if ( s.data ) {
				cacheURL = ( s.url += ( ajax_rquery.test( cacheURL ) ? "&" : "?" ) + s.data );
				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add anti-cache in url if needed
			if ( s.cache === false ) {
				s.url = rts.test( cacheURL ) ?

					// If there is already a '_' parameter, set its value
					cacheURL.replace( rts, "$1_=" + ajax_nonce++ ) :

					// Otherwise add one to the end
					cacheURL + ( ajax_rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ajax_nonce++;
			}
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[0] ] ?
				s.accepts[ s.dataTypes[0] ] + ( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend && ( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {
			// Abort if not done already and return
			return jqXHR.abort();
		}

		// aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		for ( i in { success: 1, error: 1, complete: 1 } ) {
			jqXHR[ i ]( s[ i ] );
		}

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}
			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = setTimeout(function() {
					jqXHR.abort("timeout");
				}, s.timeout );
			}

			try {
				state = 1;
				transport.send( requestHeaders, done );
			} catch ( e ) {
				// Propagate exception as error if not done
				if ( state < 2 ) {
					done( -1, e );
				// Simply rethrow otherwise
				} else {
					throw e;
				}
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Called once
			if ( state === 2 ) {
				return;
			}

			// State is "done" now
			state = 2;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader("Last-Modified");
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader("etag");
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {
				// We extract error from statusText
				// then normalize statusText and status for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );
				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger("ajaxStop");
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
});

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {
		// shift arguments if data argument was omitted
		if ( jQuery.isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		return jQuery.ajax({
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		});
	};
});

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {

	var ct, type, finalDataType, firstDataType,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {
		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[0] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}
		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},
		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

		// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {
								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s[ "throws" ] ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return { state: "parsererror", error: conv ? e : "No conversion from " + prev + " to " + current };
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}
// Install script dataType
jQuery.ajaxSetup({
	accepts: {
		script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /(?:java|ecma)script/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
});

// Handle cache's special case and crossDomain
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
	}
});

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function( s ) {
	// This transport only deals with cross domain requests
	if ( s.crossDomain ) {
		var script, callback;
		return {
			send: function( _, complete ) {
				script = jQuery("<script>").prop({
					async: true,
					charset: s.scriptCharset,
					src: s.url
				}).on(
					"load error",
					callback = function( evt ) {
						script.remove();
						callback = null;
						if ( evt ) {
							complete( evt.type === "error" ? 404 : 200, evt.type );
						}
					}
				);
				document.head.appendChild( script[ 0 ] );
			},
			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
});
var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup({
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( ajax_nonce++ ) );
		this[ callback ] = true;
		return callback;
	}
});

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" && !( s.contentType || "" ).indexOf("application/x-www-form-urlencoded") && rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( ajax_rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters["script json"] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always(function() {
			// Restore preexisting value
			window[ callbackName ] = overwritten;

			// Save back as free
			if ( s[ callbackName ] ) {
				// make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && jQuery.isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		});

		// Delegate to script
		return "script";
	}
});
jQuery.ajaxSettings.xhr = function() {
	try {
		return new XMLHttpRequest();
	} catch( e ) {}
};

var xhrSupported = jQuery.ajaxSettings.xhr(),
	xhrSuccessStatus = {
		// file protocol always yields status code 0, assume 200
		0: 200,
		// Support: IE9
		// #1450: sometimes IE returns 1223 when it should be 204
		1223: 204
	},
	// Support: IE9
	// We need to keep track of outbound xhr and abort them manually
	// because IE is not smart enough to do it all by itself
	xhrId = 0,
	xhrCallbacks = {};

if ( window.ActiveXObject ) {
	jQuery( window ).on( "unload", function() {
		for( var key in xhrCallbacks ) {
			xhrCallbacks[ key ]();
		}
		xhrCallbacks = undefined;
	});
}

jQuery.support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
jQuery.support.ajax = xhrSupported = !!xhrSupported;

jQuery.ajaxTransport(function( options ) {
	var callback;
	// Cross domain only allowed if supported through XMLHttpRequest
	if ( jQuery.support.cors || xhrSupported && !options.crossDomain ) {
		return {
			send: function( headers, complete ) {
				var i, id,
					xhr = options.xhr();
				xhr.open( options.type, options.url, options.async, options.username, options.password );
				// Apply custom fields if provided
				if ( options.xhrFields ) {
					for ( i in options.xhrFields ) {
						xhr[ i ] = options.xhrFields[ i ];
					}
				}
				// Override mime type if needed
				if ( options.mimeType && xhr.overrideMimeType ) {
					xhr.overrideMimeType( options.mimeType );
				}
				// X-Requested-With header
				// For cross-domain requests, seeing as conditions for a preflight are
				// akin to a jigsaw puzzle, we simply never set it to be sure.
				// (it can always be set on a per-request basis or even using ajaxSetup)
				// For same-domain requests, won't change header if already provided.
				if ( !options.crossDomain && !headers["X-Requested-With"] ) {
					headers["X-Requested-With"] = "XMLHttpRequest";
				}
				// Set headers
				for ( i in headers ) {
					xhr.setRequestHeader( i, headers[ i ] );
				}
				// Callback
				callback = function( type ) {
					return function() {
						if ( callback ) {
							delete xhrCallbacks[ id ];
							callback = xhr.onload = xhr.onerror = null;
							if ( type === "abort" ) {
								xhr.abort();
							} else if ( type === "error" ) {
								complete(
									// file protocol always yields status 0, assume 404
									xhr.status || 404,
									xhr.statusText
								);
							} else {
								complete(
									xhrSuccessStatus[ xhr.status ] || xhr.status,
									xhr.statusText,
									// Support: IE9
									// #11426: When requesting binary data, IE9 will throw an exception
									// on any attempt to access responseText
									typeof xhr.responseText === "string" ? {
										text: xhr.responseText
									} : undefined,
									xhr.getAllResponseHeaders()
								);
							}
						}
					};
				};
				// Listen to events
				xhr.onload = callback();
				xhr.onerror = callback("error");
				// Create the abort callback
				callback = xhrCallbacks[( id = xhrId++ )] = callback("abort");
				// Do send the request
				// This may raise an exception which is actually
				// handled in jQuery.ajax (so no try/catch here)
				xhr.send( options.hasContent && options.data || null );
			},
			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
});
var fxNow, timerId,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rfxnum = new RegExp( "^(?:([+-])=|)(" + core_pnum + ")([a-z%]*)$", "i" ),
	rrun = /queueHooks$/,
	animationPrefilters = [ defaultPrefilter ],
	tweeners = {
		"*": [function( prop, value ) {
			var end, unit,
				tween = this.createTween( prop, value ),
				parts = rfxnum.exec( value ),
				target = tween.cur(),
				start = +target || 0,
				scale = 1,
				maxIterations = 20;

			if ( parts ) {
				end = +parts[2];
				unit = parts[3] || ( jQuery.cssNumber[ prop ] ? "" : "px" );

				// We need to compute starting value
				if ( unit !== "px" && start ) {
					// Iteratively approximate from a nonzero starting point
					// Prefer the current property, because this process will be trivial if it uses the same units
					// Fallback to end or a simple constant
					start = jQuery.css( tween.elem, prop, true ) || end || 1;

					do {
						// If previous iteration zeroed out, double until we get *something*
						// Use a string for doubling factor so we don't accidentally see scale as unchanged below
						scale = scale || ".5";

						// Adjust and apply
						start = start / scale;
						jQuery.style( tween.elem, prop, start + unit );

					// Update scale, tolerating zero or NaN from tween.cur()
					// And breaking the loop if scale is unchanged or perfect, or if we've just had enough
					} while ( scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations );
				}

				tween.unit = unit;
				tween.start = start;
				// If a +=/-= token was provided, we're doing a relative animation
				tween.end = parts[1] ? start + ( parts[1] + 1 ) * end : end;
			}
			return tween;
		}]
	};

// Animations created synchronously will run synchronously
function createFxNow() {
	setTimeout(function() {
		fxNow = undefined;
	});
	return ( fxNow = jQuery.now() );
}

function createTweens( animation, props ) {
	jQuery.each( props, function( prop, value ) {
		var collection = ( tweeners[ prop ] || [] ).concat( tweeners[ "*" ] ),
			index = 0,
			length = collection.length;
		for ( ; index < length; index++ ) {
			if ( collection[ index ].call( animation, prop, value ) ) {

				// we're done with this property
				return;
			}
		}
	});
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = animationPrefilters.length,
		deferred = jQuery.Deferred().always( function() {
			// don't match elem in the :animated selector
			delete tick.elem;
		}),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),
				// archaic crash bug won't allow us to use 1 - ( 0.5 || 0 ) (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length ; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ]);

			if ( percent < 1 && length ) {
				return remaining;
			} else {
				deferred.resolveWith( elem, [ animation ] );
				return false;
			}
		},
		animation = deferred.promise({
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, { specialEasing: {} }, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,
					// if we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length ; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// resolve when we played the last frame
				// otherwise, reject
				if ( gotoEnd ) {
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		}),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length ; index++ ) {
		result = animationPrefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			return result;
		}
	}

	createTweens( animation, props );

	if ( jQuery.isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		})
	);

	// attach callbacks from options
	return animation.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = jQuery.camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( jQuery.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// not quite $.extend, this wont overwrite keys already present.
			// also - reusing 'index' from above because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

jQuery.Animation = jQuery.extend( Animation, {

	tweener: function( props, callback ) {
		if ( jQuery.isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.split(" ");
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length ; index++ ) {
			prop = props[ index ];
			tweeners[ prop ] = tweeners[ prop ] || [];
			tweeners[ prop ].unshift( callback );
		}
	},

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			animationPrefilters.unshift( callback );
		} else {
			animationPrefilters.push( callback );
		}
	}
});

function defaultPrefilter( elem, props, opts ) {
	/* jshint validthis: true */
	var index, prop, value, length, dataShow, toggle, tween, hooks, oldfire,
		anim = this,
		style = elem.style,
		orig = {},
		handled = [],
		hidden = elem.nodeType && isHidden( elem );

	// handle queue: false promises
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always(function() {
			// doing this makes sure that the complete handler will be called
			// before this completes
			anim.always(function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			});
		});
	}

	// height/width overflow pass
	if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {
		// Make sure that nothing sneaks out
		// Record all 3 overflow attributes because IE9-10 do not
		// change the overflow attribute when overflowX and
		// overflowY are set to the same value
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Set display property to inline-block for height/width
		// animations on inline elements that are having width/height animated
		if ( jQuery.css( elem, "display" ) === "inline" &&
				jQuery.css( elem, "float" ) === "none" ) {

			style.display = "inline-block";
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		anim.always(function() {
			style.overflow = opts.overflow[ 0 ];
			style.overflowX = opts.overflow[ 1 ];
			style.overflowY = opts.overflow[ 2 ];
		});
	}


	// show/hide pass
	dataShow = data_priv.get( elem, "fxshow" );
	for ( index in props ) {
		value = props[ index ];
		if ( rfxtypes.exec( value ) ) {
			delete props[ index ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {

				// If there is dataShow left over from a stopped hide or show and we are going to proceed with show, we should pretend to be hidden
				if( value === "show" && dataShow !== undefined && dataShow[ index ] !== undefined ) {
					hidden = true;
				} else {
					continue;
				}
			}
			handled.push( index );
		}
	}

	length = handled.length;
	if ( length ) {
		dataShow = data_priv.get( elem, "fxshow" ) || data_priv.access( elem, "fxshow", {} );
		if ( "hidden" in dataShow ) {
			hidden = dataShow.hidden;
		}

		// store state if its toggle - enables .stop().toggle() to "reverse"
		if ( toggle ) {
			dataShow.hidden = !hidden;
		}
		if ( hidden ) {
			jQuery( elem ).show();
		} else {
			anim.done(function() {
				jQuery( elem ).hide();
			});
		}
		anim.done(function() {
			var prop;

			data_priv.remove( elem, "fxshow" );
			for ( prop in orig ) {
				jQuery.style( elem, prop, orig[ prop ] );
			}
		});
		for ( index = 0 ; index < length ; index++ ) {
			prop = handled[ index ];
			tween = anim.createTween( prop, hidden ? dataShow[ prop ] : 0 );
			orig[ prop ] = dataShow[ prop ] || jQuery.style( elem, prop );

			if ( !( prop in dataShow ) ) {
				dataShow[ prop ] = tween.start;
				if ( hidden ) {
					tween.end = tween.start;
					tween.start = prop === "width" || prop === "height" ? 1 : 0;
				}
			}
		}
	}
}

function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || "swing";
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			if ( tween.elem[ tween.prop ] != null &&
				(!tween.elem.style || tween.elem.style[ tween.prop ] == null) ) {
				return tween.elem[ tween.prop ];
			}

			// passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails
			// so, simple values such as "10px" are parsed to Float.
			// complex values such as "rotate(1rad)" are returned as is.
			result = jQuery.css( tween.elem, tween.prop, "" );
			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {
			// use step hook for back compat - use cssHook if its there - use .style if its
			// available and use plain properties where available
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.style && ( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null || jQuery.cssHooks[ tween.prop ] ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE9
// Panic based approach to setting things on disconnected nodes

Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.each([ "toggle", "show", "hide" ], function( i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
});

jQuery.fn.extend({
	fadeTo: function( speed, to, easing, callback ) {

		// show any hidden elements after setting opacity to 0
		return this.filter( isHidden ).css( "opacity", 0 ).show()

			// animate to the value specified
			.end().animate({ opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {
				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );
				doAnimation.finish = function() {
					anim.stop( true );
				};
				// Empty animations, or finishing resolves immediately
				if ( empty || data_priv.get( this, "finish" ) ) {
					anim.stop( true );
				}
			};
			doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each(function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = data_priv.get( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && (type == null || timers[ index ].queue === type) ) {
					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// start the next in the queue if the last step wasn't forced
			// timers currently will call their complete callbacks, which will dequeue
			// but only if they were gotoEnd
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		});
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each(function() {
			var index,
				data = data_priv.get( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// enable finishing flag on private data
			data.finish = true;

			// empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.cur && hooks.cur.finish ) {
				hooks.cur.finish.call( this );
			}

			// look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// turn off finishing flag
			delete data.finish;
		});
	}
});

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		attrs = { height: type },
		i = 0;

	// if we include width, step value is 1 to do all cssExpand values,
	// if we don't include width, step value is 2 to skip over Left and Right
	includeWidth = includeWidth? 1 : 0;
	for( ; i < 4 ; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

// Generate shortcuts for custom animations
jQuery.each({
	slideDown: genFx("show"),
	slideUp: genFx("hide"),
	slideToggle: genFx("toggle"),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
});

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			jQuery.isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
	};

	opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration :
		opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;

	// normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( jQuery.isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p*Math.PI ) / 2;
	}
};

jQuery.timers = [];
jQuery.fx = Tween.prototype.init;
jQuery.fx.tick = function() {
	var timer,
		timers = jQuery.timers,
		i = 0;

	fxNow = jQuery.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];
		// Checks the timer has not already been removed
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	if ( timer() && jQuery.timers.push( timer ) ) {
		jQuery.fx.start();
	}
};

jQuery.fx.interval = 13;

jQuery.fx.start = function() {
	if ( !timerId ) {
		timerId = setInterval( jQuery.fx.tick, jQuery.fx.interval );
	}
};

jQuery.fx.stop = function() {
	clearInterval( timerId );
	timerId = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,
	// Default speed
	_default: 400
};

// Back Compat <1.8 extension point
jQuery.fx.step = {};

if ( jQuery.expr && jQuery.expr.filters ) {
	jQuery.expr.filters.animated = function( elem ) {
		return jQuery.grep(jQuery.timers, function( fn ) {
			return elem === fn.elem;
		}).length;
	};
}
jQuery.fn.offset = function( options ) {
	if ( arguments.length ) {
		return options === undefined ?
			this :
			this.each(function( i ) {
				jQuery.offset.setOffset( this, options, i );
			});
	}

	var docElem, win,
		elem = this[ 0 ],
		box = { top: 0, left: 0 },
		doc = elem && elem.ownerDocument;

	if ( !doc ) {
		return;
	}

	docElem = doc.documentElement;

	// Make sure it's not a disconnected DOM node
	if ( !jQuery.contains( docElem, elem ) ) {
		return box;
	}

	// If we don't have gBCR, just use 0,0 rather than error
	// BlackBerry 5, iOS 3 (original iPhone)
	if ( typeof elem.getBoundingClientRect !== core_strundefined ) {
		box = elem.getBoundingClientRect();
	}
	win = getWindow( doc );
	return {
		top: box.top + win.pageYOffset - docElem.clientTop,
		left: box.left + win.pageXOffset - docElem.clientLeft
	};
};

jQuery.offset = {

	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// Set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) && ( curCSSTop + curCSSLeft ).indexOf("auto") > -1;

		// Need to be able to calculate position if either top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;

		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( jQuery.isFunction( options ) ) {
			options = options.call( elem, i, curOffset );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );

		} else {
			curElem.css( props );
		}
	}
};


jQuery.fn.extend({

	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset,
			elem = this[ 0 ],
			parentOffset = { top: 0, left: 0 };

		// Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent
		if ( jQuery.css( elem, "position" ) === "fixed" ) {
			// We assume that getBoundingClientRect is available when computed position is fixed
			offset = elem.getBoundingClientRect();

		} else {
			// Get *real* offsetParent
			offsetParent = this.offsetParent();

			// Get correct offsets
			offset = this.offset();
			if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
				parentOffset = offsetParent.offset();
			}

			// Add offsetParent borders
			parentOffset.top += jQuery.css( offsetParent[ 0 ], "borderTopWidth", true );
			parentOffset.left += jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true );
		}

		// Subtract parent offsets and element margins
		return {
			top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
		};
	},

	offsetParent: function() {
		return this.map(function() {
			var offsetParent = this.offsetParent || docElem;

			while ( offsetParent && ( !jQuery.nodeName( offsetParent, "html" ) && jQuery.css( offsetParent, "position") === "static" ) ) {
				offsetParent = offsetParent.offsetParent;
			}

			return offsetParent || docElem;
		});
	}
});


// Create scrollLeft and scrollTop methods
jQuery.each( {scrollLeft: "pageXOffset", scrollTop: "pageYOffset"}, function( method, prop ) {
	var top = "pageYOffset" === prop;

	jQuery.fn[ method ] = function( val ) {
		return jQuery.access( this, function( elem, method, val ) {
			var win = getWindow( elem );

			if ( val === undefined ) {
				return win ? win[ prop ] : elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : window.pageXOffset,
					top ? val : window.pageYOffset
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length, null );
	};
});

function getWindow( elem ) {
	return jQuery.isWindow( elem ) ? elem : elem.nodeType === 9 && elem.defaultView;
}
// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name }, function( defaultExtra, funcName ) {
		// margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return jQuery.access( this, function( elem, type, value ) {
				var doc;

				if ( jQuery.isWindow( elem ) ) {
					// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
					// isn't a whole lot we can do. See pull request at this URL for discussion:
					// https://github.com/jquery/jquery/pull/764
					return elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
					// whichever is greatest
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?
					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable, null );
		};
	});
});
// Limit scope pollution from any deprecated API
// (function() {

// The number of elements contained in the matched element set
jQuery.fn.size = function() {
	return this.length;
};

jQuery.fn.andSelf = jQuery.fn.addBack;

// })();
if ( typeof module === "object" && typeof module.exports === "object" ) {
	// Expose jQuery as module.exports in loaders that implement the Node
	// module pattern (including browserify). Do not create the global, since
	// the user will be storing it themselves locally, and globals are frowned
	// upon in the Node module world.
	module.exports = jQuery;
} else {
	// Register as a named AMD module, since jQuery can be concatenated with other
	// files that may use define, but not via a proper concatenation script that
	// understands anonymous AMD modules. A named AMD is safest and most robust
	// way to register. Lowercase jquery is used because AMD module names are
	// derived from file names, and jQuery is normally delivered in a lowercase
	// file name. Do this after creating the global so that if an AMD module wants
	// to call noConflict to hide this version of jQuery, it will work.
	if ( typeof define === "function" && define.amd ) {
		define( "jquery", [], function () { return jQuery; } );
	}
}

// If there is a window object, that at least has a document property,
// define jQuery and $ identifiers
if ( typeof window === "object" && typeof window.document === "object" ) {
	window.jQuery = window.$ = jQuery;
}

})( window );

define("jquery/dist/jquery", function(){});


define ('cobweb/Basic/X3DFieldDefinition',[],function ()
{
	function X3DFieldDefinition (accessType, name, value, userDefined)
	{
		this .accessType  = accessType;
		this .dataType    = value .getType ();
		this .name        = name;
		this .value       = value;
		this .userDefined = userDefined;
	}

	X3DFieldDefinition .prototype .constructor = X3DFieldDefinition;

	return X3DFieldDefinition;
});


define ('cobweb/Basic/FieldDefinitionArray',[
	"jquery",
],
function ($)
{
	var handler =
	{
		get: function (target, key)
		{
			if (key in target)
				return target [key];

			return target .array [key];
		},
		set: function (target, key, value)
		{
			return false;
		},
	};

	function FieldDefinitionArray (value)
	{
		this .array = value;

		return new Proxy (this, handler);
	}

	$.extend (FieldDefinitionArray .prototype,
	{
		constructor: FieldDefinitionArray,
		getValue: function ()
		{
			return this .array;
		},
	});

	return FieldDefinitionArray;
});


define ('cobweb/Base/X3DObject',[
],
function ()
{
	/*
	 *  Id
	 */

	var id = 0;
	
	function getId () { return this .id; }

	/*
	 *  X3DObject
	 */

	function X3DObject () { }

	X3DObject .prototype =
	{
		constructor: X3DObject,
		id: 0,
		name: "",
		tainted: false,
		interests: { },
		getId: function ()
		{
			if (! this .hasOwnProperty ("getId"))
				this .getId = getId;

			return this .id = ++ id;
		},
		setName: function (value)
		{
			this .name = value;
		},
		getName: function ()
		{
			return this .name;
		},
		setTainted: function (value)
		{
			this .tainted = value;
		},
		getTainted: function ()
		{
			return this .tainted;
		},
		addInterest: function (object, callback)
		{
			if (! this .hasOwnProperty ("interests"))
				this .interests = { };

			var args = Array .prototype .slice .call (arguments, 0);
	
			args [1] = this;

			this .interests [object .getId () + callback] = Function .prototype .bind .apply (object [callback], args);
		},
		removeInterest: function (object, callback)
		{
			delete this .interests [object .getId () + callback];
		},
		getInterests: function ()
		{
			return this .interests;
		},
		processInterests: function ()
		{
			var interests = this .interests;

			for (var key in interests)
				interests [key] ();
		},
	};

	return X3DObject;
});


define ('cobweb/Base/X3DChildObject',[
	"jquery",
	"cobweb/Base/X3DObject",
],
function ($, X3DObject)
{
	function X3DChildObject ()
	{
		X3DObject .call (this);

		this .parents = { };
	}

	X3DChildObject .prototype = $.extend (Object .create (X3DObject .prototype),
	{
		constructor: X3DChildObject,
		addParent: function (parent)
		{
			this .parents [parent .getId ()] = parent;
		},
		removeParent: function (parent)
		{
			delete this .parents [parent .getId ()];
		},
		getParents: function ()
		{
			return this .parents;
		},
	});

	return X3DChildObject;
});


define ('cobweb/Bits/X3DConstants',[],function ()
{
	var
		loadState = 0,
		fieldType = 0,
		nodeType  = 0;

	var X3DConstants =
	{
		// Load state

		NOT_STARTED_STATE: loadState ++,
		IN_PROGRESS_STATE: loadState ++,
		COMPLETE_STATE:    loadState ++,
		FAILED_STATE:      loadState ++,

		// Access type

		initializeOnly: parseInt ('001', 2),
		inputOnly:      parseInt ('010', 2),
		outputOnly:     parseInt ('100', 2),
		inputOutput:    parseInt ('111', 2),

		// X3DField

		SFBool:      fieldType ++,
		SFColor:     fieldType ++,
		SFColorRGBA: fieldType ++,
		SFDouble:    fieldType ++,
		SFFloat:     fieldType ++,
		SFImage:     fieldType ++,
		SFInt32:     fieldType ++,
		SFMatrix3d:  fieldType ++,
		SFMatrix3f:  fieldType ++,
		SFMatrix4d:  fieldType ++,
		SFMatrix4f:  fieldType ++,
		SFNode:      fieldType ++,
		SFRotation:  fieldType ++,
		SFString:    fieldType ++,
		SFTime:      fieldType ++,
		SFVec2d:     fieldType ++,
		SFVec2f:     fieldType ++,
		SFVec3d:     fieldType ++,
		SFVec3f:     fieldType ++,
		SFVec4d:     fieldType ++,
		SFVec4f:     fieldType ++,

		VrmlMatrix:  fieldType ++,

		// X3DArrayField

		MFBool:      fieldType ++,
		MFColor:     fieldType ++,
		MFColorRGBA: fieldType ++,
		MFDouble:    fieldType ++,
		MFFloat:     fieldType ++,
		MFImage:     fieldType ++,
		MFInt32:     fieldType ++,
		MFMatrix3d:  fieldType ++,
		MFMatrix3f:  fieldType ++,
		MFMatrix4d:  fieldType ++,
		MFMatrix4f:  fieldType ++,
		MFNode:      fieldType ++,
		MFRotation:  fieldType ++,
		MFString:    fieldType ++,
		MFTime:      fieldType ++,
		MFVec2d:     fieldType ++,
		MFVec2f:     fieldType ++,
		MFVec3d:     fieldType ++,
		MFVec3f:     fieldType ++,
		MFVec4d:     fieldType ++,
		MFVec4f:     fieldType ++,

		// X3DNode
		
		Anchor:                       nodeType ++,
		Appearance:                   nodeType ++,
		Arc2D:                        nodeType ++,
		ArcClose2D:                   nodeType ++,
		AudioClip:                    nodeType ++,
		Background:                   nodeType ++,
		BallJoint:                    nodeType ++,
		Billboard:                    nodeType ++,
		BooleanFilter:                nodeType ++,
		BooleanSequencer:             nodeType ++,
		BooleanToggle:                nodeType ++,
		BooleanTrigger:               nodeType ++,
		BoundedPhysicsModel:          nodeType ++,
		Box:                          nodeType ++,
		CADAssembly:                  nodeType ++,
		CADFace:                      nodeType ++,
		CADLayer:                     nodeType ++,
		CADPart:                      nodeType ++,
		Circle2D:                     nodeType ++,
		ClipPlane:                    nodeType ++,
		CollidableOffset:             nodeType ++,
		CollidableShape:              nodeType ++,
		Collision:                    nodeType ++,
		CollisionCollection:          nodeType ++,
		CollisionSensor:              nodeType ++,
		CollisionSpace:               nodeType ++,
		Color:                        nodeType ++,
		ColorChaser:                  nodeType ++,
		ColorDamper:                  nodeType ++,
		ColorInterpolator:            nodeType ++,
		ColorRGBA:                    nodeType ++,
		ComposedCubeMapTexture:       nodeType ++,
		ComposedShader:               nodeType ++,
		ComposedTexture3D:            nodeType ++,
		Cone:                         nodeType ++,
		ConeEmitter:                  nodeType ++,
		Contact:                      nodeType ++,
		Contour2D:                    nodeType ++,
		ContourPolyline2D:            nodeType ++,
		Coordinate:                   nodeType ++,
		CoordinateChaser:             nodeType ++,
		CoordinateDamper:             nodeType ++,
		CoordinateDouble:             nodeType ++,
		CoordinateInterpolator:       nodeType ++,
		CoordinateInterpolator2D:     nodeType ++,
		Cylinder:                     nodeType ++,
		CylinderSensor:               nodeType ++,
		DISEntityManager:             nodeType ++,
		DISEntityTypeMapping:         nodeType ++,
		DirectionalLight:             nodeType ++,
		Disk2D:                       nodeType ++,
		DoubleAxisHingeJoint:         nodeType ++,
		EaseInEaseOut:                nodeType ++,
		ElevationGrid:                nodeType ++,
		EspduTransform:               nodeType ++,
		ExplosionEmitter:             nodeType ++,
		Extrusion:                    nodeType ++,
		FillProperties:               nodeType ++,
		FloatVertexAttribute:         nodeType ++,
		Fog:                          nodeType ++,
		FogCoordinate:                nodeType ++,
		FontStyle:                    nodeType ++,
		ForcePhysicsModel:            nodeType ++,
		GeneratedCubeMapTexture:      nodeType ++,
		GeoCoordinate:                nodeType ++,
		GeoElevationGrid:             nodeType ++,
		GeoLOD:                       nodeType ++,
		GeoLocation:                  nodeType ++,
		GeoMetadata:                  nodeType ++,
		GeoOrigin:                    nodeType ++,
		GeoPositionInterpolator:      nodeType ++,
		GeoProximitySensor:           nodeType ++,
		GeoTouchSensor:               nodeType ++,
		GeoTransform:                 nodeType ++,
		GeoViewpoint:                 nodeType ++,
		Group:                        nodeType ++,
		HAnimDisplacer:               nodeType ++,
		HAnimHumanoid:                nodeType ++,
		HAnimJoint:                   nodeType ++,
		HAnimSegment:                 nodeType ++,
		HAnimSite:                    nodeType ++,
		ImageCubeMapTexture:          nodeType ++,
		ImageTexture:                 nodeType ++,
		ImageTexture3D:               nodeType ++,
		IndexedFaceSet:               nodeType ++,
		IndexedLineSet:               nodeType ++,
		IndexedQuadSet:               nodeType ++,
		IndexedTriangleFanSet:        nodeType ++,
		IndexedTriangleSet:           nodeType ++,
		IndexedTriangleStripSet:      nodeType ++,
		Inline:                       nodeType ++,
		IntegerSequencer:             nodeType ++,
		IntegerTrigger:               nodeType ++,
		KeySensor:                    nodeType ++,
		LOD:                          nodeType ++,
		Layer:                        nodeType ++,
		LayerSet:                     nodeType ++,
		Layout:                       nodeType ++,
		LayoutGroup:                  nodeType ++,
		LayoutLayer:                  nodeType ++,
		LinePickSensor:               nodeType ++,
		LineProperties:               nodeType ++,
		LineSet:                      nodeType ++,
		LoadSensor:                   nodeType ++,
		LocalFog:                     nodeType ++,
		Material:                     nodeType ++,
		Matrix3VertexAttribute:       nodeType ++,
		Matrix4VertexAttribute:       nodeType ++,
		MetadataBoolean:              nodeType ++,
		MetadataDouble:               nodeType ++,
		MetadataFloat:                nodeType ++,
		MetadataInteger:              nodeType ++,
		MetadataSet:                  nodeType ++,
		MetadataString:               nodeType ++,
		MotorJoint:                   nodeType ++,
		MovieTexture:                 nodeType ++,
		MultiTexture:                 nodeType ++,
		MultiTextureCoordinate:       nodeType ++,
		MultiTextureTransform:        nodeType ++,
		NavigationInfo:               nodeType ++,
		Normal:                       nodeType ++,
		NormalInterpolator:           nodeType ++,
		NurbsCurve:                   nodeType ++,
		NurbsCurve2D:                 nodeType ++,
		NurbsOrientationInterpolator: nodeType ++,
		NurbsPatchSurface:            nodeType ++,
		NurbsPositionInterpolator:    nodeType ++,
		NurbsSet:                     nodeType ++,
		NurbsSurfaceInterpolator:     nodeType ++,
		NurbsSweptSurface:            nodeType ++,
		NurbsSwungSurface:            nodeType ++,
		NurbsTextureCoordinate:       nodeType ++,
		NurbsTrimmedSurface:          nodeType ++,
		OrientationChaser:            nodeType ++,
		OrientationDamper:            nodeType ++,
		OrientationInterpolator:      nodeType ++,
		OrthoViewpoint:               nodeType ++,
		PackagedShader:               nodeType ++,
		ParticleSystem:               nodeType ++,
		PickableGroup:                nodeType ++,
		PixelTexture:                 nodeType ++,
		PixelTexture3D:               nodeType ++,
		PlaneSensor:                  nodeType ++,
		PointEmitter:                 nodeType ++,
		PointLight:                   nodeType ++,
		PointPickSensor:              nodeType ++,
		PointSet:                     nodeType ++,
		Polyline2D:                   nodeType ++,
		PolylineEmitter:              nodeType ++,
		Polypoint2D:                  nodeType ++,
		PositionChaser:               nodeType ++,
		PositionChaser2D:             nodeType ++,
		PositionDamper:               nodeType ++,
		PositionDamper2D:             nodeType ++,
		PositionInterpolator:         nodeType ++,
		PositionInterpolator2D:       nodeType ++,
		PrimitivePickSensor:          nodeType ++,
		ProgramShader:                nodeType ++,
		ProximitySensor:              nodeType ++,
		QuadSet:                      nodeType ++,
		ReceiverPdu:                  nodeType ++,
		Rectangle2D:                  nodeType ++,
		RigidBody:                    nodeType ++,
		RigidBodyCollection:          nodeType ++,
		ScalarChaser:                 nodeType ++,
		ScalarDamper:                 nodeType ++,
		ScalarInterpolator:           nodeType ++,
		ScreenFontStyle:              nodeType ++,
		ScreenGroup:                  nodeType ++,
		Script:                       nodeType ++,
		ShaderPart:                   nodeType ++,
		ShaderProgram:                nodeType ++,
		Shape:                        nodeType ++,
		SignalPdu:                    nodeType ++,
		SingleAxisHingeJoint:         nodeType ++,
		SliderJoint:                  nodeType ++,
		Sound:                        nodeType ++,
		Sphere:                       nodeType ++,
		SphereSensor:                 nodeType ++,
		SplinePositionInterpolator:   nodeType ++,
		SplinePositionInterpolator2D: nodeType ++,
		SplineScalarInterpolator:     nodeType ++,
		SpotLight:                    nodeType ++,
		SquadOrientationInterpolator: nodeType ++,
		StaticGroup:                  nodeType ++,
		StringSensor:                 nodeType ++,
		SurfaceEmitter:               nodeType ++,
		Switch:                       nodeType ++,
		TexCoordChaser2D:             nodeType ++,
		TexCoordDamper2D:             nodeType ++,
		Text:                         nodeType ++,
		TextureBackground:            nodeType ++,
		TextureCoordinate:            nodeType ++,
		TextureCoordinate3D:          nodeType ++,
		TextureCoordinate4D:          nodeType ++,
		TextureCoordinateGenerator:   nodeType ++,
		TextureProperties:            nodeType ++,
		TextureTransform:             nodeType ++,
		TextureTransform3D:           nodeType ++,
		TextureTransformMatrix3D:     nodeType ++,
		TimeSensor:                   nodeType ++,
		TimeTrigger:                  nodeType ++,
		TouchGroup:                   nodeType ++,
		TouchSensor:                  nodeType ++,
		Transform:                    nodeType ++,
		TransformSensor:              nodeType ++,
		TransmitterPdu:               nodeType ++,
		TriangleFanSet:               nodeType ++,
		TriangleSet:                  nodeType ++,
		TriangleSet2D:                nodeType ++,
		TriangleStripSet:             nodeType ++,
		TwoSidedMaterial:             nodeType ++,
		UniversalJoint:               nodeType ++,
		Viewpoint:                    nodeType ++,
		ViewpointGroup:               nodeType ++,
		Viewport:                     nodeType ++,
		VisibilitySensor:             nodeType ++,
		VolumeEmitter:                nodeType ++,
		VolumePickSensor:             nodeType ++,
		WindPhysicsModel:             nodeType ++,
		WorldInfo:                    nodeType ++,

		// Abstract node

		X3DBaseNode:                  nodeType ++,

		X3DAppearanceChildNode:       nodeType ++,
		X3DAppearanceNode:            nodeType ++,
		X3DBackgroundNode:            nodeType ++,
		X3DBindableNode:              nodeType ++,
		X3DBoundedObject:             nodeType ++,
		X3DChaserNode:                nodeType ++,
		X3DChildNode:                 nodeType ++,
		X3DColorNode:                 nodeType ++,
		X3DComposedGeometryNode:      nodeType ++,
		X3DCoordinateNode:            nodeType ++,
		X3DDamperNode:                nodeType ++,
		X3DDragSensorNode:            nodeType ++,
		X3DEnvironmentTextureNode:    nodeType ++,
		X3DEnvironmentalSensorNode:   nodeType ++,
		X3DFogObject:                 nodeType ++,
		X3DFollowerNode:              nodeType ++,
		X3DFontStyleNode:             nodeType ++,
		X3DGeometricPropertyNode:     nodeType ++,
		X3DGeometryNode:              nodeType ++,
		X3DGeospatialObject:          nodeType ++,
		X3DGroupingNode:              nodeType ++,
		X3DInfoNode:                  nodeType ++,
		X3DInterpolatorNode:          nodeType ++,
		X3DKeyDeviceSensorNode:       nodeType ++,
		X3DLayerNode:                 nodeType ++,
		X3DLayoutNode:                nodeType ++,
		X3DLightNode:                 nodeType ++,
		X3DMaterialNode:              nodeType ++,
		X3DMetadataObject:            nodeType ++,
		X3DNBodyCollidableNode:       nodeType ++,
		X3DNBodyCollisionSpaceNode:   nodeType ++,
		X3DNetworkSensorNode:         nodeType ++,
		X3DNode:                      nodeType ++,
		X3DNormalNode:                nodeType ++,
		X3DNurbsControlCurveNode:     nodeType ++,
		X3DNurbsSurfaceGeometryNode:  nodeType ++,
		X3DParametricGeometryNode:    nodeType ++,
		X3DParticleEmitterNode:       nodeType ++,
		X3DParticlePhysicsModelNode:  nodeType ++,
		X3DPickSensorNode:            nodeType ++,
		X3DPickableObject:            nodeType ++,
		X3DPointingDeviceSensorNode:  nodeType ++,
		X3DProductStructureChildNode: nodeType ++,
		X3DProgrammableShaderObject:  nodeType ++,
		X3DPrototypeInstance:         nodeType ++,
		X3DRigidJointNode:            nodeType ++,
		X3DScriptNode:                nodeType ++,
		X3DSensorNode:                nodeType ++,
		X3DSequencerNode:             nodeType ++,
		X3DShaderNode:                nodeType ++,
		X3DShapeNode:                 nodeType ++,
		X3DSoundNode:                 nodeType ++,
		X3DSoundSourceNode:           nodeType ++,
		X3DTexture2DNode:             nodeType ++,
		X3DTexture3DNode:             nodeType ++,
		X3DTextureCoordinateNode:     nodeType ++,
		X3DTextureNode:               nodeType ++,
		X3DTextureTransformNode:      nodeType ++,
		X3DTimeDependentNode:         nodeType ++,
		X3DTouchSensorNode:           nodeType ++,
		X3DTransformMatrix4DNode:     nodeType ++,
		X3DTransformNode:             nodeType ++,
		X3DTriggerNode:               nodeType ++,
		X3DUrlObject:                 nodeType ++,
		X3DVertexAttributeNode:       nodeType ++,
		X3DViewpointNode:             nodeType ++,
		X3DViewpointObject:           nodeType ++,
		X3DViewportNode:              nodeType ++,

		X3DProtoDeclarationNode:      nodeType ++,
		X3DProtoDeclaration:          nodeType ++,
		X3DExternProtoDeclaration:    nodeType ++,
	};

	Object .preventExtensions (X3DConstants);
	Object .freeze (X3DConstants);
	Object .seal (X3DConstants);

	return X3DConstants;
});


define ('cobweb/Base/Event',[
	"jquery",
],
function ($)
{
	var Event =
	{
	   stack: [ ],
	   create: function (field)
	   {
	      if (this .stack .length)
	      {
	         var event = this .stack .pop ();

				event .field = field;

            return event;
	      }
            
	      return {
				field: field,
				sources: { },
			};
	   },
	   copy: function (event)
	   {
	      if (this .stack .length)
	      {
	         var copy = this .stack .pop ();

				copy .field = event .field;

            $.extend (copy .sources, event .sources);

            return copy;
	      }

	      return {
				field: event .field,
				sources: $.extend ({ }, event .sources),
			};
	   },
		push: function (event)
		{
		   var sources = event .sources;

		   for (var id in sources)
		      delete event .sources [id];

		   this .stack .push (event);
		},
	};

	return Event;
});


define ('cobweb/Basic/X3DField',[
	"jquery",
	"cobweb/Base/X3DChildObject",
	"cobweb/Bits/X3DConstants",
	"cobweb/Base/Event",
],
function ($,
	       X3DChildObject,
	       X3DConstants,
	       Event)
{
	function X3DField (value)
	{
		X3DChildObject .call (this);
	
		this .value_ = value;
	}

	X3DField .prototype = $.extend (Object .create (X3DChildObject .prototype),
	{
		constructor: X3DField,
		fieldValue: null,
		accessType: X3DConstants .initializeOnly,
		references: { },
		fieldInterests: { },
		fieldCallbacks: { },
		clone: function ()
		{
			return this .copy ();
		},
		setValue: function (value)
		{
			this .set (value instanceof this .constructor ? value .getValue () : value);
			this .addEvent ();
		},
		set: function (value)
		{
			this .value_ = value;
		},
		setFieldValue: function (value)
		{
			// Boolean indication whether the value is set during parse, or undefined.
			return this .fieldValue = value;
		},
		getFieldValue: function ()
		{
			return this .fieldValue;
		},
		getValue: function ()
		{
			return this .value_;
		},
		setAccessType: function (value)
		{
			this .accessType = value;
		},
		getAccessType: function ()
		{
			return this .accessType;
		},
		isReadable: function ()
		{
			return this .accessType !== X3DConstants .inputOnly;
		},
		isWritable: function ()
		{
			return this .accessType !== X3DConstants .initializeOnly;
		},
		isInput: function ()
		{
			return this .accessType & X3DConstants .inputOnly;
		},
		isOutput: function ()
		{
			return this .accessType & X3DConstants .outputOnly;
		},
		hasReferences: function ()
		{
			if (this .hasOwnProperty ("references"))
				return ! $.isEmptyObject (this .references);

			return false;
		},
		addReference: function (reference)
		{
			var references = this .getReferences ();

			if (references [reference .getId ()])
				return;

			references [reference .getId ()] = reference;

			// Create IS relationship

			switch (this .accessType & reference .getAccessType ())
			{
				case X3DConstants .initializeOnly:
					this .set (reference .getValue ());
					return;
				case X3DConstants .inputOnly:
					reference .addFieldInterest (this);
					return;
				case X3DConstants .outputOnly:
					this .addFieldInterest (reference);
					return;
				case X3DConstants .inputOutput:
					reference .addFieldInterest (this);
					this .addFieldInterest (reference);
					this .set (reference .getValue ());
					return;
			}
		},
		getReferences: function ()
		{
			if (! this .hasOwnProperty ("references"))
				this .references = { };

			return this .references;
		},
		updateReferences: function ()
		{
			if (this .hasOwnProperty ("references"))
			{
				for (var id in this .references)
				{
					var reference = this .references [id];

					switch (this .accessType & reference .getAccessType ())
					{
						case X3DConstants .inputOnly:
						case X3DConstants .outputOnly:
							continue;
						case X3DConstants .initializeOnly:
						case X3DConstants .inputOutput:
							this .set (reference .getValue ());
							continue;
					}
				}
			}
		},
		addFieldInterest: function (field)
		{
			if (! this .hasOwnProperty ("fieldInterests"))
				this .fieldInterests = { };

			this .fieldInterests [field .getId ()] = field;
		},
		removeFieldInterest: function (field)
		{
			delete this .fieldInterests [field .getId ()];
		},
		addFieldCallback: function (string, object)
		{
			if (! this .hasOwnProperty ("fieldCallbacks"))
				this .fieldCallbacks = { };

			this .fieldCallbacks [string] = object;
		},
		removeFieldCallback: function (string)
		{
			delete this .fieldCallbacks [string];
		},
		addEvent: function ()
		{
			var parents = this .getParents ();

			for (var key in parents)
				parents [key] .addEvent (this);
		},
		addEventObject: function (field, event)
		{
			var parents = this .getParents ();

			for (var key in parents)
				parents [key] .addEventObject (this, event);
		},
		processEvent: function (event)
		{
			if (event .sources .hasOwnProperty (this .getId ()))
				return;

			event .sources [this .getId ()] = true;

			this .setTainted (false);

			if (event .field !== this)
				this .set (event .field .getValue ());

			// Process interests

			this .processInterests ();

			// Process routes

			var
				fieldInterests = this .fieldInterests,
				first          = true;

			for (var key in fieldInterests)
			{
				if (first)
				{
					first = false;
					fieldInterests [key] .addEventObject (this, event);
				}
				else
					fieldInterests [key] .addEventObject (this, Event .copy (event));
			}

			if (first)
			   Event .push (event);

			// Process field callbacks

			var fieldCallbacks = this .fieldCallbacks;

			for (var key in fieldCallbacks)
				fieldCallbacks [key] (this .valueOf ());
		},
		valueOf: function ()
		{
			return this;
		},
	});

	return X3DField;
});



define ('cobweb/InputOutput/Generator',[
	"jquery",
],
function ($)
{
	return {
		indent: "",
		indentChar: "  ",
		Indent: function ()
		{
			return this .indent;
		},
		IncIndent: function ()
		{
			this .indent += this .indentChar;
		},
		DecIndent: function ()
		{
			this .indent = this .indent .substr (0, this .indent .length - this .indentChar .length);
		},
	};
});


define ('cobweb/Basic/X3DArrayField',[
	"jquery",
	"cobweb/Basic/X3DField",
	"cobweb/Bits/X3DConstants",
	"cobweb/InputOutput/Generator",
],
function ($, X3DField, X3DConstants, Generator)
{
	var handler =
	{
		get: function (target, key)
		{
			try
			{
				if (key in target)
					return target [key];

				// value
				
				var array = target .getValue ();

				if (key >= array .length)
					target .resize (key + 1);

				return array [key] .valueOf ();
			}
			catch (error)
			{
				console .log (key, error);
			}
		},
		set: function (target, key, value)
		{
			try
			{
				if (key in target)
				{
					target [key] = value;
					return true;
				}

				var
					array = target .getValue (),
					index = parseInt (key);

				if (index >= array .length)
					target .resize (index + 1);

				array [index] .setValue (value);
				return true;
			}
			catch (error)
			{
				console .log (key, error);
				return false;
			}
		},
	};

	function X3DArrayField (value)
	{
		X3DField .call (this, [ ]);
		
		if (value !== undefined)
		{
			if (value [0] instanceof Array)
				value = value [0];

			for (var i = 0, length = value .length; i < length; ++ i)
				this .push (value [i]);

			return new Proxy (this, handler);
		}
	}

	X3DArrayField .prototype = $.extend (new X3DField ([ ]),
	{
		constructor: X3DArrayField,
		copy: function ()
		{
			var
				copy  = new (this .constructor) (),
				array = this .getValue ();

			for (var i = 0, length = array .length; i < length; ++ i)
				copy .push (array [i]);

			return copy;
		},
		setValue: function (value)
		{
			this .set (value instanceof X3DArrayField ? value .getValue () : value);
			this .addEvent ();
		},
		set: function (value)
		{
			this .resize (value .length, undefined, true);

			var array = this .getValue ();

			for (var i = 0; i < value .length; ++ i)
				array [i] .set (value [i] instanceof X3DField ? value [i] .getValue () : value [i]);
		},
		unshift: function (value)
		{
			var
				array = this .getValue (),
				field = new (this .valueType_) ();

			field .setValue (value);
			field .addParent (this);

			this .addEvent ();

			return array .unshift (field);
		},
		shift: function ()
		{
			var array = this .getValue ();

			if (array .length)
			{
				var field = array .shift ();
				field .removeParent (this);
				this .addEvent ();
				return field .valueOf ();
			}
		},
		push: function (value)
		{
			var
				array = this .getValue (),
				field = new (this .valueType_) ();

			field .setValue (value);
			field .addParent (this);

			this .addEvent ();

			return array .push (field);
		},
		pop: function ()
		{
			var array = this .getValue ();

			if (array .length)
			{
				var field = array .pop ();
				field .removeParent (this);
				this .addEvent ();
				return field .valueOf ();
			}
		},
		insert: function (index, array, first, last)
		{
			var args = [index, 0];

			for (var i = first; i < last; ++ i)
			{
				var field = new (this .valueType_) ();

				field .setValue (array [i]);
				field .addParent (this);

				args .push (field);
			}

			Array .prototype .splice .apply (this .getValue (), args);

			this .addEvent ();
		},
		erase: function (first, last)
		{
			var values = this .getValue () .splice (first, last - first);
				
			for (var i = 0; i < values .length; ++ i)
				values [i] .removeParent (this);
			
			this .addEvent ();
		},
		resize: function (size, value, silent)
		{
			var array = this .getValue ();
		
			if (size < array .length)
			{
				for (var i = size; i < array .length; ++ i)
					array [i] .removeParent (this);

				array .length = size;

				if (! silent)
					this .addEvent ();
			}
			else if (size > array .length)
			{
				for (var i = array .length; i < size; ++ i)
				{
					var field = new (this .valueType_) ();

					if (value !== undefined)
						field .setValue (value);

					field .addParent (this);
					array .push (field);
				}

				if (! silent)
					this .addEvent ();
			}
		},
		toString: function ()
		{
			var
				array  = this .getValue (),
				string = "";

			switch (array .length)
			{
				case 0:
				{
					string += "[ ]";
					break;
				}
				case 1:
				{
					string += array [0] .toString ();
					break;
				}
				default:
				{
					string += "[\n";
					Generator .IncIndent ();
				
					for (var i = 0, length = array .length - 1; i < length; ++ i)
					{
						string += Generator .Indent ();
						string += array [i] .toString ();
						string += ",\n"
					}

					string += Generator .Indent ();
					string += array [length] .toString ();
					string += "\n";
					Generator .DecIndent ();
					string += Generator .Indent ();
					string += "]";
					break;
				}
			}

			return string;
		},
	});

	Object .defineProperty (X3DArrayField .prototype, "length",
	{
		get: function () { return this .getValue () .length; },
		set: function (value) { this .resize (value); },
		enumerable: false,
		configurable: false
	});

	return X3DArrayField;
});


define ('cobweb/Fields/SFBool',[
	"jquery",
	"cobweb/Basic/X3DField",
	"cobweb/Bits/X3DConstants",
],
function ($, X3DField, X3DConstants)
{
	function SFBool (value)
	{
		X3DField .call (this, Boolean (value));
	}

	SFBool .prototype = $.extend (Object .create (X3DField .prototype),
	{
		constructor: SFBool,
		copy: function ()
		{
			return new SFBool (this .getValue ());
		},
		equals: function (value)
		{
			return this .getValue () == value;
		},
		set: function (value)
		{
			X3DField .prototype .set .call (this, Boolean (value));
		},
		valueOf: function ()
		{
			return this .getValue ();
		},
		getTypeName: function ()
		{
			return "SFBool";
		},
		getType: function ()
		{
			return X3DConstants .SFBool;
		},
		valueOf: X3DField .prototype .getValue,
		toString: function ()
		{
			return this .getValue () ? "TRUE" : "FALSE";
		},
	});

	return SFBool;
});



define ('standard/Math/Algorithm',['require'],function (Vector3)
{
	var destinations = { };

	var Algorithm =
	{
		radians: function (value)
		{
			return value * (Math .PI / 180);
		},
		degrees: function (value)
		{
			return value * (180 / Math .PI);
		},
		clamp: function (value, min, max)
		{
			return value < min ? min : (value > max ? max : value);
		},
		interval: function (value, low, high)
		{
			if (value >= high)
				return ((value - low) % (high - low)) + low;

			if (value < low)
				return ((value - high) % (high - low)) + high;

			return value;
		},
		lerp: function (source, destination, t)
		{
			return source + t * (destination - source);
		},
		slerp: function (source, destination, t)
		{
			if (destinations [destination .constructor .name])
				destination = destinations [destination .constructor .name] .assign (destination);
			else
				destination = destinations [destination .constructor .name] = destination .copy ();

			var cosom = source .dot (destination);

			if (cosom <= -1)
				throw new Error ("slerp is not possible: vectors are inverse collinear.");

			if (cosom >= 1) // both normal vectors are equal
				return source;

			if (cosom < 0)
			{
				// Reverse signs so we travel the short way round
				cosom = -cosom;
				destination .negate ()
			}				

			var
				omega = Math .acos (cosom),
				sinom = Math .sin  (omega),

				scale0 = Math .sin ((1 - t) * omega),
				scale1 = Math .sin (t * omega);

			return source .multiply (scale0) .add (destination .multiply (scale1)) .divide (sinom);
		},
		isPowerOfTwo: function (n)
		{
			return ((n - 1) & n) === 0;
		},
		nextPowerOfTwo: function (n)
		{
			-- n;

			for (var k = 1; ! (k & (1 << (4 + 1))); k <<= 1)
				n |= n >> k;

			return ++ n;
		},
		/*
		isInt: function(n)
		{
			return typeof n === 'number' && 
			       parseFloat (n) == parseInt (n, 10) && ! isNaN (n);
		},
		decimalPlaces: function (n)
		{
			var
				a = Math.abs(n),
				c = a, count = 1;

			while(! Algorithm .isInt (c) && isFinite (c))
				c = a * Math .pow (10, count ++);
	
			return count-1;
		},
		*/
		less: function (lhs, rhs)
		{
			return lhs < rhs;
		},
		greater: function (lhs, rhs)
		{
			return lhs > rhs;
		},
		lowerBound: function (array, first, last, value, comp)
		{
			var
				index = 0,
				step  = 0,
				count = last - first;

			while (count > 0)
			{
				step  = count >>> 1;
				index = first + step;

				if (comp (array [index], value))
				{
					first  = ++ index;
					count -= step + 1;
				}
				else
					count = step;
			}

			return first;
		},
		upperBound: function (array, first, last, value, comp)
		{
			var
				index = 0,
				step  = 0,
				count = last - first;

			while (count > 0)
			{
				step  = count >>> 1;
				index = first + step;

				if (comp (value, array [index]))
					count = step;

				else
				{
					first  = ++ index;
					count -= step + 1;
				}
			}

			return first;
		},
	};

	Object .preventExtensions (Algorithm);
	Object .freeze (Algorithm);
	Object .seal (Algorithm);

	return Algorithm;
});


define ('standard/Math/Numbers/Color3',[
	"jquery",
	"standard/Math/Algorithm",
],
function ($, Algorithm)
{
	var clamp = Algorithm .clamp;

	function Color3 (r, g, b)
	{
		if (arguments .length)
		{
			this .r_ = clamp (r, 0, 1);
			this .g_ = clamp (g, 0, 1);
			this .b_ = clamp (b, 0, 1);
		}
		else
		{
			this .r_ = 0;
			this .g_ = 0;
			this .b_ = 0;
		}
	}
	
	$.extend (Color3,
	{
		HSV: function (h, s, v)
		{
			var color = new Color3 ();
			color .setHSV (h, s, v);
			return color;
		},
	});

	Color3 .prototype =
	{
		constructor: Color3,
		length: 3,
		copy: function ()
		{
			var copy = Object .create (Color3 .prototype);
			copy .r_ = this .r_;
			copy .g_ = this .g_;
			copy .b_ = this .b_;
			return copy;
		},
		assign: function (color)
		{
			this .r_ = color .r_;
			this .g_ = color .g_;
			this .b_ = color .b_;
		},
		set: function (r, g, b)
		{
			this .r_ = clamp (r, 0, 1);
			this .g_ = clamp (g, 0, 1);
			this .b_ = clamp (b, 0, 1);
		},
		equals: function (color)
		{
			return this .r_ === vector .r_ &&
			       this .g_ === vector .g_ &&
			       this .b_ === vector .b_;
		},
		getHSV: function ()
		{
			var h, s, v;

			var min = Math .min (this .r_, this .g_, this .b_);
			var max = Math .max (this .r_, this .g_, this .b_);
			v = max; // value

			var delta = max - min;

			if (max !== 0 && delta !== 0)
			{
				s = delta / max; // s

				if (this .r_ === max)
					h =     (this .g_ - this .b_) / delta;  // between yellow & magenta
				else if (this .g_ === max)
					h = 2 + (this .b_ - this .r_) / delta;  // between cyan & yellow
				else
					h = 4 + (this .r_ - this .g_) / delta;  // between magenta & cyan

				h *= Math .PI / 3;  // radiants
				if (h < 0)
					h += Math .PI * 2;
			}
			else
				s = h = 0;         // s = 0, h is undefined

			return [h, s, v];
		},
		setHSV: function (h, s, v)
		{
			s = clamp (s, 0, 1),
			v = clamp (v, 0, 1);

			// H is given on [0, 2 * Pi]. S and V are given on [0, 1].
			// RGB are each returned on [0, 1].

			if (s === 0)
			{
				// achromatic (grey)
				this .r_ = this .g_ = this .b_ = v;
			}
			else
			{
				var w = Algorithm .degrees (Algorithm .interval (h, 0, Math .PI * 2)) / 60;     // sector 0 to 5

				var i = Math .floor (w);
				var f = w - i;                      // factorial part of h
				var p = v * ( 1 - s );
				var q = v * ( 1 - s * f );
				var t = v * ( 1 - s * ( 1 - f ) );

				switch (i % 6)
				{
					case 0:  this .r_ = v; this .g_ = t; this .b_ = p; break;
					case 1:  this .r_ = q; this .g_ = v; this .b_ = p; break;
					case 2:  this .r_ = p; this .g_ = v; this .b_ = t; break;
					case 3:  this .r_ = p; this .g_ = q; this .b_ = v; break;
					case 4:  this .r_ = t; this .g_ = p; this .b_ = v; break;
					default: this .r_ = v; this .g_ = p; this .b_ = q; break;
				}
			}
		},
		toString: function ()
		{
			return this .r_ + " " +
			       this .g_ + " " +
			       this .b_;
		},
	};

	Object .defineProperty (Color3 .prototype, "r",
	{
		get: function () { return this .r_; },
		set: function (value) { this .r_ = clamp (value, 0, 1); },
		enumerable: true,
		configurable: false
	});

	Object .defineProperty (Color3 .prototype, "0",
	{
		get: function () { return this .r_; },
		set: function (value) { this .r_ = clamp (value, 0, 1); },
		enumerable: false,
		configurable: false
	});

	Object .defineProperty (Color3 .prototype, "g",
	{
		get: function () { return this .g_; },
		set: function (value) { this .g_ = clamp (value, 0, 1); },
		enumerable: true,
		configurable: false
	});

	Object .defineProperty (Color3 .prototype, "1",
	{
		get: function () { return this .g_; },
		set: function (value) { this .g_ = clamp (value, 0, 1); },
		enumerable: false,
		configurable: false
	});

	Object .defineProperty (Color3 .prototype, "b",
	{
		get: function () { return this .b_; },
		set: function (value) { this .b_ = clamp (value, 0, 1); },
		enumerable: true,
		configurable: false
	});

	Object .defineProperty (Color3 .prototype, "2",
	{
		get: function () { return this .b_; },
		set: function (value) { this .b_ = clamp (value, 0, 1); },
		enumerable: false,
		configurable: false
	});

	$.extend (Color3,
	{
		HSV: function (h, s, v)
		{
			var color = new Color3 (0, 0, 0);
			color .setHSV (h, s, v);
			return color;
		},
		lerp: function (a, b, t, r)
		{
			var range = Math .abs (b [0] - a [0]);

			if (range <= Math .PI)
			{
				r [0] = Algorithm .lerp (a [0], b [0], t);
				r [1] = Algorithm .lerp (a [1], b [1], t);
				r [2] = Algorithm .lerp (a [2], b [2], t);
				return r;
			}

			var
				PI2  = Math .PI * 2,
				step = (PI2 - range) * t;
				h    = a [0] < b [0] ? a [0] - step : a [0] + step;

			if (h < 0)
				h += PI2;

			else if (h > PI2)
				h -= PI2;

			r [0] = h;
			r [1] = Algorithm .lerp (a [1], b [1], t);
			r [2] = Algorithm .lerp (a [2], b [2], t);
			return r;
		},
	});

	return Color3;
});


define ('cobweb/Fields/SFColor',[
	"jquery",
	"standard/Math/Numbers/Color3",
	"cobweb/Basic/X3DField",
	"cobweb/Bits/X3DConstants",
],
function ($, Color3, X3DField, X3DConstants)
{
	function SFColor (r, g, b)
	{
		if (arguments .length)
		{
			if (arguments [0] instanceof Color3)
				X3DField .call (this, arguments [0]);
			else
				X3DField .call (this, new Color3 (+r, +g, +b));
		}
		else
			X3DField .call (this, new Color3 ());
	}

	SFColor .prototype = $.extend (Object .create (X3DField .prototype),
	{
		constructor: SFColor,
		copy: function ()
		{
			return new SFColor (this .getValue () .copy ());
		},
		getTypeName: function ()
		{
			return "SFColor";
		},
		getType: function ()
		{
			return X3DConstants .SFColor;
		},
		equals: function (color)
		{
			return this .getValue () .equals (color .getValue ());
		},
		set: function (value)
		{
			this .getValue () .assign (value);
		},
		getHSV: function ()
		{
			return this .getValue () .getHSV ();
		},
		setHSV: function (h, s, v)
		{
			this .getValue () .setHSV (h, s, v);
			this .addEvent ();
		},
		toString: function ()
		{
			return this .getValue () .toString ();
		},
	});

	Object .defineProperty (SFColor .prototype, "r",
	{
		get: function ()
		{
			return this .getValue () .r;
		},
		set: function (value)
		{
			this .getValue () .r = value;
			this .addEvent ();
		},
		enumerable: true,
		configurable: false
	});

	Object .defineProperty (SFColor .prototype, "0",
	{
		get: function ()
		{
			return this .getValue () .r;
		},
		set: function (value)
		{
			this .getValue () .r = value;
			this .addEvent ();
		},
		enumerable: false,
		configurable: false
	});

	Object .defineProperty (SFColor .prototype, "g",
	{
		get: function ()
		{
			return this .getValue () .g;
		},
		set: function (value)
		{
			this .getValue () .g = value;
			this .addEvent ();
		},
		enumerable: true,
		configurable: false
	});

	Object .defineProperty (SFColor .prototype, "1",
	{
		get: function ()
		{
			return this .getValue () .g;
		},
		set: function (value)
		{
			this .getValue () .g = value;
			this .addEvent ();
		},
		enumerable: false,
		configurable: false
	});

	Object .defineProperty (SFColor .prototype, "b",
	{
		get: function ()
		{
			return this .getValue () .b;
		},
		set: function (value)
		{
			this .getValue () .b = value;
			this .addEvent ();
		},
		enumerable: true,
		configurable: false
	});

	Object .defineProperty (SFColor .prototype, "2",
	{
		get: function ()
		{
			return this .getValue () .b;
		},
		set: function (value)
		{
			this .getValue () .b = value;
			this .addEvent ();
		},
		enumerable: false,
		configurable: false
	});

	return SFColor;
});


define ('standard/Math/Numbers/Color4',[
	"jquery",
	"standard/Math/Algorithm",
],
function ($, Algorithm)
{
	var clamp = Algorithm .clamp;

	function Color4 (r, g, b, a)
	{
		if (arguments .length)
		{
			this .r_ = clamp (r, 0, 1);
			this .g_ = clamp (g, 0, 1);
			this .b_ = clamp (b, 0, 1);
			this .a_ = clamp (a, 0, 1);
		}
		else
		{
			this .r_ = 0;
			this .g_ = 0;
			this .b_ = 0;
			this .a_ = 0;
		}
	}
	
	$.extend (Color4,
	{
		HSVA: function (h, s, v, a)
		{
			var color = new Color3 (0, 0, 0, a);
			color .setHSV (h, s, v);
			return color;
		},
	});

	Color4 .prototype =
	{
		constructor: Color4,
		length: 4,
		copy: function ()
		{
			var copy = Object .create (Color4 .prototype);
			copy .r_ = this .r_;
			copy .g_ = this .g_;
			copy .b_ = this .b_;
			copy .a_ = this .a_;
			return copy;
		},
		assign: function (color)
		{
			this .r_ = color .r_;
			this .g_ = color .g_;
			this .b_ = color .b_;
			this .a_ = color .a_;
		},
		set: function (r, g, b, a)
		{
			this .r_ = clamp (r, 0, 1);
			this .g_ = clamp (g, 0, 1);
			this .b_ = clamp (b, 0, 1);
			this .a_ = clamp (a, 0, 1);
		},
		equals: function (color)
		{
			return this .r_ === color .r_ &&
			       this .g_ === color .g_ &&
			       this .b_ === color .b_ &&
			       this .a_ === color .a_;
		},
		getHSV: function ()
		{
			var h, s, v;

			var min = Math .min (this .r_, this .g_, this .b_);
			var max = Math .max (this .r_, this .g_, this .b_);
			v = max; // value

			var delta = max - min;

			if (max !== 0 && delta !== 0)
			{
				s = delta / max; // s

				if (this .r === max)
					h =     (this .g_ - this .b_) / delta;  // between yellow & magenta
				else if (this .g_ == max)
					h = 2 + (this .b_ - this .r_) / delta;  // between cyan & yellow
				else
					h = 4 + (this .r_ - this .g_) / delta;  // between magenta & cyan

				h *= Math .PI / 3;  // radiants
				if (h < 0)
					h += Math .PI * 2;
			}
			else
				s = h = 0;         // s = 0, h is undefined

			return [h, s, v];
		},
		setHSV: function (h, s, v)
		{
			s = clamp (s, 0, 1),
			v = clamp (v, 0, 1);

			// H is given on [0, 2 * Pi]. S and V are given on [0, 1].
			// RGB are each returned on [0, 1].

			if (s === 0)
			{
				// achromatic (grey)
				this .r_ = this .g_ = this .b_ = v;
			}
			else
			{
				var w = Algorithm .degrees (Algorithm .interval (h, 0, Math .PI * 2)) / 60;     // sector 0 to 5

				var i = Math .floor (w);
				var f = w - i;                      // factorial part of h
				var p = v * (1 - s);
				var q = v * (1 - s * f);
				var t = v * (1 - s * (1 - f));

				switch (i % 6)
				{
					case 0:  this .r_ = v; this .g_ = t; this .b_ = p; break;
					case 1:  this .r_ = q; this .g_ = v; this .b_ = p; break;
					case 2:  this .r_ = p; this .g_ = v; this .b_ = t; break;
					case 3:  this .r_ = p; this .g_ = q; this .b_ = v; break;
					case 4:  this .r_ = t; this .g_ = p; this .b_ = v; break;
					default: this .r_ = v; this .g_ = p; this .b_ = q; break;
				}
			}
		},
		toString: function ()
		{
			return this .r_ + " " +
			       this .g_ + " " +
			       this .b_ + " " +
			       this .a_;
		},
	};

	Object .defineProperty (Color4 .prototype, "r",
	{
		get: function () { return this .r_; },
		set: function (value) { this .r_ = clamp (value, 0, 1); },
		enumerable: true,
		configurable: false
	});

	Object .defineProperty (Color4 .prototype, "0",
	{
		get: function () { return this .r_; },
		set: function (value) { this .r_ = clamp (value, 0, 1); },
		enumerable: false,
		configurable: false
	});

	Object .defineProperty (Color4 .prototype, "g",
	{
		get: function () { return this .g_; },
		set: function (value) { this .g_ = clamp (value, 0, 1); },
		enumerable: true,
		configurable: false
	});

	Object .defineProperty (Color4 .prototype, "1",
	{
		get: function () { return this .g_; },
		set: function (value) { this .g_ = clamp (value, 0, 1); },
		enumerable: false,
		configurable: false
	});

	Object .defineProperty (Color4 .prototype, "b",
	{
		get: function () { return this .b_; },
		set: function (value) { this .b_ = clamp (value, 0, 1); },
		enumerable: true,
		configurable: false
	});

	Object .defineProperty (Color4 .prototype, "2",
	{
		get: function () { return this .b_; },
		set: function (value) { this .b_ = clamp (value, 0, 1); },
		enumerable: false,
		configurable: false
	});

	Object .defineProperty (Color4 .prototype, "a",
	{
		get: function () { return this .a_; },
		set: function (value) { this .a_ = clamp (value, 0, 1); },
		enumerable: true,
		configurable: false
	});

	Object .defineProperty (Color4 .prototype, "3",
	{
		get: function () { return this .a_; },
		set: function (value) { this .a_ = clamp (value, 0, 1); },
		enumerable: false,
		configurable: false
	});

	Color4 .HSVA = function (h, s, v, a)
	{
		var color = new Color4 (0, 0, 0, a);
		color .setHSV (h, s, v);
		return color;
	}

	return Color4;
});


define ('cobweb/Fields/SFColorRGBA',[
	"jquery",
	"standard/Math/Numbers/Color4",
	"cobweb/Basic/X3DField",
	"cobweb/Bits/X3DConstants",
],
function ($, Color4, X3DField, X3DConstants)
{
	function SFColorRGBA (r, g, b, a)
	{
		if (arguments .length)
		{
			if (arguments [0] instanceof Color4)
				X3DField .call (this, arguments [0]);
			else
				X3DField .call (this, new Color4 (+r, +g, +b, +a));
		}
		else
			X3DField .call (this, new Color4 ());
	}

	SFColorRGBA .prototype = $.extend (Object .create (X3DField .prototype),
	{
		constructor: SFColorRGBA,
		copy: function ()
		{
			return new SFColorRGBA (this .getValue () .copy ());
		},
		getTypeName: function ()
		{
			return "SFColorRGBA";
		},
		getType: function ()
		{
			return X3DConstants .SFColorRGBA;
		},
		equals: function (color)
		{
			return this .getValue () .equals (color .getValue ());
		},
		set: function (value)
		{
			this .getValue () .assign (value);
		},
		getHSV: function ()
		{
			return this .getValue () .getHSV ();
		},
		setHSV: function (h, s, v)
		{
			this .getValue () .setHSV (h, s, v);
			this .addEvent ();
		},
		toString: function ()
		{
			return this .getValue () .toString ();
		},
	});

	Object .defineProperty (SFColorRGBA .prototype, "r",
	{
		get: function ()
		{
			return this .getValue () .r;
		},
		set: function (value)
		{
			this .getValue () .r = value;
			this .addEvent ();
		},
		enumerable: true,
		configurable: false
	});

	Object .defineProperty (SFColorRGBA .prototype, "0",
	{
		get: function ()
		{
			return this .getValue () .r;
		},
		set: function (value)
		{
			this .getValue () .r = value;
			this .addEvent ();
		},
		enumerable: false,
		configurable: false
	});

	Object .defineProperty (SFColorRGBA .prototype, "g",
	{
		get: function ()
		{
			return this .getValue () .g;
		},
		set: function (value)
		{
			this .getValue () .g = value;
			this .addEvent ();
		},
		enumerable: true,
		configurable: false
	});

	Object .defineProperty (SFColorRGBA .prototype, "1",
	{
		get: function ()
		{
			return this .getValue () .g;
		},
		set: function (value)
		{
			this .getValue () .g = value;
			this .addEvent ();
		},
		enumerable: false,
		configurable: false
	});

	Object .defineProperty (SFColorRGBA .prototype, "b",
	{
		get: function ()
		{
			return this .getValue () .b;
		},
		set: function (value)
		{
			this .getValue () .b = value;
			this .addEvent ();
		},
		enumerable: true,
		configurable: false
	});

	Object .defineProperty (SFColorRGBA .prototype, "2",
	{
		get: function ()
		{
			return this .getValue () .b;
		},
		set: function (value)
		{
			this .getValue () .b = value;
			this .addEvent ();
		},
		enumerable: false,
		configurable: false
	});

	Object .defineProperty (SFColorRGBA .prototype, "a",
	{
		get: function ()
		{
			return this .getValue () .a;
		},
		set: function (value)
		{
			this .getValue () .a = value;
			this .addEvent ();
		},
		enumerable: true,
		configurable: false
	});

	Object .defineProperty (SFColorRGBA .prototype, "3",
	{
		get: function ()
		{
			return this .getValue () .a;
		},
		set: function (value)
		{
			this .getValue () .a = value;
			this .addEvent ();
		},
		enumerable: false,
		configurable: false
	});

	return SFColorRGBA;
});


define ('cobweb/Fields/SFDouble',[
	"jquery",
	"cobweb/Basic/X3DField",
	"cobweb/Bits/X3DConstants",
],
function ($, X3DField, X3DConstants)
{
	function SFDouble (value)
	{
		X3DField .call (this, arguments .length ? +value : 0);
	}

	SFDouble .prototype = $.extend (Object .create (X3DField .prototype),
	{
		constructor: SFDouble,
		copy: function ()
		{
			return new SFDouble (this .getValue ());
		},
		getTypeName: function ()
		{
			return "SFDouble";
		},
		getType: function ()
		{
			return X3DConstants .SFDouble;
		},
		set: function (value)
		{
			X3DField .prototype .set .call (this, +value);
		},
		valueOf: X3DField .prototype .getValue,
		toString: function ()
		{
			return String (this .getValue ());
		},
	});

	return SFDouble;
});


define ('cobweb/Fields/SFFloat',[
	"jquery",
	"cobweb/Basic/X3DField",
	"cobweb/Bits/X3DConstants",
],
function ($, X3DField, X3DConstants)
{
	function SFFloat (value)
	{
		X3DField .call (this, arguments .length ? +value : 0);
	}

	SFFloat .prototype = $.extend (Object .create (X3DField .prototype),
	{
		constructor: SFFloat,
		copy: function ()
		{
			return new SFFloat (this .getValue ());
		},
		getTypeName: function ()
		{
			return "SFFloat";
		},
		getType: function ()
		{
			return X3DConstants .SFFloat;
		},
		set: function (value)
		{
			X3DField .prototype .set .call (this, +value);
		},
		valueOf: X3DField .prototype .getValue,
		toString: function ()
		{
			return String (this .getValue ());
		},
	});

	return SFFloat;
});


define ('cobweb/Fields/SFInt32',[
	"jquery",
	"cobweb/Basic/X3DField",
	"cobweb/Bits/X3DConstants",
],
function ($, X3DField, X3DConstants)
{
	function SFInt32 (value)
	{
		X3DField .call (this, ~~value);
	}

	SFInt32 .prototype = $.extend (Object .create (X3DField .prototype),
	{
		constructor: SFInt32,
		copy: function ()
		{
			return new SFInt32 (this .getValue ());
		},
		getTypeName: function ()
		{
			return "SFInt32";
		},
		getType: function ()
		{
			return X3DConstants .SFInt32;
		},
		set: function (value)
		{
			X3DField .prototype .set .call (this, ~~value);
		},
		valueOf: X3DField .prototype .getValue,
		toString: function ()
		{
			return String (this .getValue ());
		},
	});

	return SFInt32;
});


define ('standard/Math/Numbers/Vector2',[
	"jquery",
	"standard/Math/Algorithm",
],
function ($, Algorithm)
{
	function Vector2 (x, y)
	{		
		this .x = x;
		this .y = y;
	}

	Vector2 .prototype =
	{
		constructor: Vector2,
		length: 2,
		copy: function ()
		{
			var copy = Object .create (Vector2 .prototype);
			copy .x = this .x;
			copy .y = this .y;
			return copy;
		},
		assign: function (vector)
		{
			this .x = vector .x;
			this .y = vector .y;
			return this;
		},
		set: function (x, y)
		{
			this .x = x;
			this .y = y;
			return this;
		},
		equals: function (vector)
		{
			return this .x === vector .x &&
			       this .y === vector .y;
		},
		negate: function ()
		{
			this .x = -this .x;
			this .y = -this .y;
			return this;
		},
		add: function (vector)
		{
			this .x += vector .x;
			this .y += vector .y;
			return this;
		},
		subtract: function (vector)
		{
			this .x -= vector .x;
			this .y -= vector .y;
			return this;
		},
		multiply: function (value)
		{
			this .x *= value;
			this .y *= value;
			return this;
		},
		multVec: function (vector)
		{
			this .x *= vector .x;
			this .y *= vector .y;
			return this;
		},
		divide: function (value)
		{
			this .x /= value;
			this .y /= value;
			return this;
		},
		divVec: function (vector)
		{
			this .x /= vector .x;
			this .y /= vector .y;
			return this;
		},
		normalize: function ()
		{
			var length = Math .sqrt (this .x * this .x +
			                         this .y * this .y);
			
			if (length)
			{
				length = 1 / length;

				this .x *= length;
				this .y *= length;
			}

			return this;
		},
		dot: function (vector)
		{
			return this .x * vector .x +
			       this .y * vector .y;
		},
		norm: function ()
		{
			return this .x * this .x +
			       this .y * this .y;
		},
		abs: function ()
		{
			return Math .sqrt (this .x * this .x +
			                   this .y * this .y);
		},
		lerp: function (dest, t)
		{
			this .x = Algorithm .lerp (this .x, dest .x, t);
			this .y = Algorithm .lerp (this .y, dest .y, t);
			return this;
		},
		min: function (vector)
		{
			for (var i = 0; i < arguments .length; ++ i)
			{
				var vector = arguments [i];

				this .x = Math .min (this .x, vector .x);
				this .y = Math .min (this .y, vector .y);
			}

			return this;
		},
		max: function (vector)
		{
			for (var i = 0; i < arguments .length; ++ i)
			{
				var vector = arguments [i];

				this .x = Math .max (this .x, vector .x);
				this .y = Math .max (this .y, vector .y);
			}

			return this;
		},
		toString: function ()
		{
			return this .x + " " +
			       this .y;
		}
	};

	Object .defineProperty (Vector2 .prototype, "0",
	{
		get: function () { return this .x; },
		set: function (value) { this .x = value; },
		enumerable: false,
		configurable: false
	});

	Object .defineProperty (Vector2 .prototype, "1",
	{
		get: function () { return this .y; },
		set: function (value) { this .y = value; },
		enumerable: false,
		configurable: false
	});

	$.extend (Vector2,
	{
		Zero: new Vector2 (0, 0),
		One: new Vector2 (1, 1),
		negate: function (vector)
		{
			var copy = Object .create (this .prototype);
			copy .x = -vector .x;
			copy .y = -vector .y;
			return copy;
		},
		add: function (lhs, rhs)
		{
			var copy = Object .create (this .prototype);
			copy .x = lhs .x + rhs .x;
			copy .y = lhs .y + rhs .y;
			return copy;
		},
		subtract: function (lhs, rhs)
		{
			var copy = Object .create (this .prototype);
			copy .x = lhs .x - rhs .x;
			copy .y = lhs .y - rhs .y;
			return copy;
		},
		multiply: function (lhs, rhs)
		{
			var copy = Object .create (this .prototype);
			copy .x = lhs .x * rhs;
			copy .y = lhs .y * rhs;
			return copy;
		},
		multVec: function (lhs, rhs)
		{
			var copy = Object .create (this .prototype);
			copy .x = lhs .x * rhs .x;
			copy .y = lhs .y * rhs .y;
			return copy;
		},
		divide: function (lhs, rhs)
		{
			var copy = Object .create (this .prototype);
			copy .x = lhs .x / rhs;
			copy .y = lhs .y / rhs;
			return copy;
		},
		divVec: function (lhs, rhs)
		{
			var copy = Object .create (this .prototype);
			copy .x = lhs .x / rhs .x;
			copy .y = lhs .y / rhs .y;
			return copy;
		},
		normalize: function (vector)
		{
			var
				copy   = Object .create (this .prototype),
				x      = vector .x,
				y      = vector .y,
				length = Math .sqrt (x * x + y * y);

			if (length)
			{
				length = 1 / length;

				copy .x = x * length;
				copy .y = y * length;
			}
			else
			{
				copy .x = 0;
				copy .y = 0;
			}

			return copy;
		},
		dot: function (lhs, rhs)
		{
			return lhs .dot (rhs);
		},
		lerp: function (source, dest, t)
		{
			return new Vector2 (Algorithm .lerp (source .x, dest .x, t),
			                    Algorithm .lerp (source .y, dest .y, t));
		},
		min: function (lhs, rhs)
		{
			var
				x = arguments [0] .x,
				y = arguments [0] .y;

			for (var i = 1; i < arguments .length; ++ i)
			{
				var vector = arguments [i];

				x = Math .min (x, vector .x);
				y = Math .min (y, vector .y);
			}

			return new Vector2 (x, y);
		},
		max: function (lhs, rhs)
		{
			var
				x = arguments [0] .x,
				y = arguments [0] .y;

			for (var i = 1; i < arguments .length; ++ i)
			{
				var vector = arguments [i];

				x = Math .max (x, vector .x);
				y = Math .max (y, vector .y);
			}

			return new Vector2 (x, y);
		},
	});

	return Vector2;
});


define ('cobweb/Fields/SFVec2',[
	"jquery",
	"standard/Math/Numbers/Vector2",
	"cobweb/Basic/X3DField",
	"cobweb/Bits/X3DConstants",
],
function ($, Vector2, X3DField, X3DConstants)
{
	function SFVec2 (x, y)
	{
		if (arguments .length)
		{
			if (arguments [0] instanceof Vector2)
				X3DField .call (this, arguments [0]);
			else
				X3DField .call (this, new Vector2 (+x, +y));
		}
		else
			X3DField .call (this, new Vector2 (0, 0));
	}

	SFVec2 .prototype = $.extend (Object .create (X3DField .prototype),
	{
		constructor: SFVec2,
		copy: function ()
		{
			return new (this .constructor) (this .getValue () .copy ());
		},
		equals: function (vector)
		{
			return this .getValue () .equals (vector .getValue ());
		},
		set: function (value)
		{
			this .getValue () .assign (value);
		},
		negate: function ()
		{
			return new (this .constructor) (Vector2 .negate (this .getValue () .copy ()));
		},
		add: function (vector)
		{
			return new (this .constructor) (Vector2 .add (this .getValue (), vector .getValue ()));
		},
		subtract: function (vector)
		{
			return new (this .constructor) (Vector2 .subtract (this .getValue (), vector .getValue ()));
		},
		multiply: function (value)
		{
			return new (this .constructor) (Vector2 .multiply (this .getValue (), value));
		},
		divide: function (value)
		{
			return new (this .constructor) (Vector2 .divide (this .getValue (), value));
		},
		dot: function (vector)
		{
			return new (this .constructor) (this .getValue () .dot (vector .getValue ()));
		},
		normalize: function (vector)
		{
			return new (this .constructor) (Vector2 .normalize (this .getValue ()));
		},
		length: function (vector)
		{
			return new (this .constructor) (this .getValue () .abs ());
		},
		toString: function ()
		{
			return this .getValue () .toString ();
		},
	});

	Object .defineProperty (SFVec2 .prototype, "x",
	{
		get: function ()
		{
			return this .getValue () .x;
		},
		set: function (value)
		{
			this .getValue () .x = value;
			this .addEvent ();
		},
		enumerable: true,
		configurable: false
	});

	Object .defineProperty (SFVec2 .prototype, "0",
	{
		get: function ()
		{
			return this .getValue () .x;
		},
		set: function (value)
		{
			this .getValue () .x = value;
			this .addEvent ();
		},
		enumerable: false,
		configurable: false
	});

	Object .defineProperty (SFVec2 .prototype, "y",
	{
		get: function ()
		{
			return this .getValue () .y;
		},
		set: function (value)
		{
			this .getValue () .y = value;
			this .addEvent ();
		},
		enumerable: true,
		configurable: false
	});

	Object .defineProperty (SFVec2 .prototype, "1",
	{
		get: function ()
		{
			return this .getValue () .y;
		},
		set: function (value)
		{
			this .getValue () .y = value;
			this .addEvent ();
		},
		enumerable: false,
		configurable: false
	});

	/*
	 *  SFVec2d
	 */

	function SFVec2d (x, y)
	{
		SFVec2 .apply (this, arguments);
	}

	SFVec2d .prototype = $.extend (Object .create (SFVec2 .prototype),
	{
		constructor: SFVec2d,
		getTypeName: function ()
		{
			return "SFVec2d";
		},
		getType: function ()
		{
			return X3DConstants .SFVec2d;
		},
	});

	/*
	 *  SFVec2f
	 */

	function SFVec2f (x, y)
	{
		SFVec2 .apply (this, arguments);
	}

	SFVec2f .prototype = $.extend (Object .create (SFVec2 .prototype),
	{
		constructor: SFVec2f,
		getTypeName: function ()
		{
			return "SFVec2f";
		},
		getType: function ()
		{
			return X3DConstants .SFVec2f;
		},
	});

	return {
		SFVec2d: SFVec2d,
		SFVec2f: SFVec2f,
	};
});


define ('standard/Math/Numbers/Vector3',[
	"jquery",
	"standard/Math/Algorithm",
],
function ($, Algorithm)
{
	function Vector3 (x, y, z)
	{		
		this .x = x;
		this .y = y;
		this .z = z;
	}

	Vector3 .prototype =
	{
		constructor: Vector3,
		length: 3,
		copy: function ()
		{
			var copy = Object .create (Vector3 .prototype);
			copy .x = this .x;
			copy .y = this .y;
			copy .z = this .z;
			return copy;
		},
		assign: function (vector)
		{
			this .x = vector .x;
			this .y = vector .y;
			this .z = vector .z;
			return this;
		},
		set: function (x, y, z)
		{
			this .x = x;
			this .y = y;
			this .z = z;
			return this;
		},
		equals: function (vector)
		{
			return this .x === vector .x &&
			       this .y === vector .y &&
			       this .z === vector .z;
		},
		negate: function ()
		{
			this .x = -this .x;
			this .y = -this .y;
			this .z = -this .z;
			return this;
		},
		add: function (vector)
		{
			this .x += vector .x;
			this .y += vector .y;
			this .z += vector .z;
			return this;
		},
		subtract: function (vector)
		{
			this .x -= vector .x;
			this .y -= vector .y;
			this .z -= vector .z;
			return this;
		},
		multiply: function (value)
		{
			this .x *= value;
			this .y *= value;
			this .z *= value;
			return this;
		},
		multVec: function (vector)
		{
			this .x *= vector .x;
			this .y *= vector .y;
			this .z *= vector .z;
			return this;
		},
		divide: function (value)
		{
			this .x /= value;
			this .y /= value;
			this .z /= value;
			return this;
		},
		divVec: function (vector)
		{
			this .x /= vector .x;
			this .y /= vector .y;
			this .z /= vector .z;
			return this;
		},
		cross: function (vector)
		{
			var x = this .x, y = this .y, z = this .z;

			this .x = y * vector .z - z * vector .y;
			this .y = z * vector .x - x * vector .z;
			this .z = x * vector .y - y * vector .x;

			return this;
		},
		normalize: function ()
		{
			var length = Math .sqrt (this .x * this .x +
			                         this .y * this .y +
			                         this .z * this .z);
			
			if (length)
			{
				length = 1 / length;

				this .x *= length;
				this .y *= length;
				this .z *= length;
			}

			return this;
		},
		dot: function (vector)
		{
			return this .x * vector .x +
			       this .y * vector .y +
			       this .z * vector .z;
		},
		norm: function ()
		{
			return this .x * this .x +
			       this .y * this .y +
			       this .z * this .z;
		},
		abs: function ()
		{
			return Math .sqrt (this .x * this .x +
			                   this .y * this .y +
			                   this .z * this .z);
		},
		lerp: function (dest, t)
		{
			this .x = Algorithm .lerp (this .x, dest .x, t);
			this .y = Algorithm .lerp (this .y, dest .y, t);
			this .z = Algorithm .lerp (this .z, dest .z, t);
			return this;
		},
		min: function (vector)
		{
			for (var i = 0; i < arguments .length; ++ i)
			{
				var vector = arguments [i];

				this .x = Math .min (this .x, vector .x);
				this .y = Math .min (this .y, vector .y);
				this .z = Math .min (this .z, vector .z);
			}

			return this;
		},
		max: function (vector)
		{
			for (var i = 0; i < arguments .length; ++ i)
			{
				var vector = arguments [i];

				this .x = Math .max (this .x, vector .x);
				this .y = Math .max (this .y, vector .y);
				this .z = Math .max (this .z, vector .z);
			}

			return this;
		},
		toString: function ()
		{
			return this .x + " " +
			       this .y + " " +
			       this .z;
		}
	};

	Object .defineProperty (Vector3 .prototype, "0",
	{
		get: function () { return this .x; },
		set: function (value) { this .x = value; },
		enumerable: false,
		configurable: false
	});

	Object .defineProperty (Vector3 .prototype, "1",
	{
		get: function () { return this .y; },
		set: function (value) { this .y = value; },
		enumerable: false,
		configurable: false
	});

	Object .defineProperty (Vector3 .prototype, "2",
	{
		get: function () { return this .z; },
		set: function (value) { this .z = value; },
		enumerable: false,
		configurable: false
	});

	$.extend (Vector3,
	{
		Zero: new Vector3 (0, 0, 0),
		One: new Vector3 (1, 1, 1),
		negate: function (vector)
		{
			var copy = Object .create (this .prototype);
			copy .x = -vector .x;
			copy .y = -vector .y;
			copy .z = -vector .z;
			return copy;
		},
		add: function (lhs, rhs)
		{
			var copy = Object .create (this .prototype);
			copy .x = lhs .x + rhs .x;
			copy .y = lhs .y + rhs .y;
			copy .z = lhs .z + rhs .z;
			return copy;
		},
		subtract: function (lhs, rhs)
		{
			var copy = Object .create (this .prototype);
			copy .x = lhs .x - rhs .x;
			copy .y = lhs .y - rhs .y;
			copy .z = lhs .z - rhs .z;
			return copy;
		},
		multiply: function (lhs, rhs)
		{
			var copy = Object .create (this .prototype);
			copy .x = lhs .x * rhs;
			copy .y = lhs .y * rhs;
			copy .z = lhs .z * rhs;
			return copy;
		},
		multVec: function (lhs, rhs)
		{
			var copy = Object .create (this .prototype);
			copy .x = lhs .x * rhs .x;
			copy .y = lhs .y * rhs .y;
			copy .z = lhs .z * rhs .z;
			return copy;
		},
		divide: function (lhs, rhs)
		{
			var copy = Object .create (this .prototype);
			copy .x = lhs .x / rhs;
			copy .y = lhs .y / rhs;
			copy .z = lhs .z / rhs;
			return copy;
		},
		divVec: function (lhs, rhs)
		{
			var copy = Object .create (this .prototype);
			copy .x = lhs .x / rhs .x;
			copy .y = lhs .y / rhs .y;
			copy .z = lhs .z / rhs .z;
			return copy;
		},
		cross: function (lhs, rhs)
		{
			var copy = Object .create (this .prototype);
			copy .x = lhs .y * rhs .z - lhs .z * rhs .y;
			copy .y = lhs .z * rhs .x - lhs .x * rhs .z;
			copy .z = lhs .x * rhs .y - lhs .y * rhs .x;
			return copy;
		},
		normalize: function (vector)
		{
			var
				copy   = Object .create (this .prototype),
				x      = vector .x,
				y      = vector .y,
				z      = vector .z,
				length = Math .sqrt (x * x + y * y + z * z);

			if (length)
			{
				length = 1 / length;

				copy .x = x * length;
				copy .y = y * length;
				copy .z = z * length;
			}
			else
			{
				copy .x = 0;
				copy .y = 0;
				copy .z = 0;
			}

			return copy;
		},
		dot: function (lhs, rhs)
		{
			return lhs .dot (rhs);
		},
		lerp: function (source, dest, t)
		{
			return new Vector3 (Algorithm .lerp (source .x, dest .x, t),
			                    Algorithm .lerp (source .y, dest .y, t),
			                    Algorithm .lerp (source .z, dest .z, t));
		},
		slerp: function (source, destination, t)
		{
			return Algorithm .slerp (new Vector3 (source .x, source .y, source .z), destination, t);
		},
		min: function (lhs, rhs)
		{
			var
				x = arguments [0] .x,
				y = arguments [0] .y,
				z = arguments [0] .z;

			for (var i = 1; i < arguments .length; ++ i)
			{
				var vector = arguments [i];

				x = Math .min (x, vector .x);
				y = Math .min (y, vector .y);
				z = Math .min (z, vector .z);
			}

			return new Vector3 (x, y, z);
		},
		max: function (lhs, rhs)
		{
			var
				x = arguments [0] .x,
				y = arguments [0] .y,
				z = arguments [0] .z;

			for (var i = 1; i < arguments .length; ++ i)
			{
				var vector = arguments [i];

				x = Math .max (x, vector .x);
				y = Math .max (y, vector .y);
				z = Math .max (z, vector .z);
			}

			return new Vector3 (x, y, z);
		},
	});

	return Vector3;
});


define ('standard/Math/Numbers/Matrix2',[
	"jquery",
	"standard/Math/Algorithm"
],
function ($, Algorithm)
{
	function Matrix2 ()
	{
		if (arguments .length)
		{
			this [0] = arguments [0];
			this [1] = arguments [1];
			this [2] = arguments [2];
			this [3] = arguments [3];
		}
		else
			this .identity ();
	}

	Matrix2 .prototype =
	{
		constructor: Matrix2,
		order: 2,
		length: 4,
		copy: function ()
		{
			var copy = Object .create (Matrix2 .prototype);
			copy [0] = this [0];
			copy [1] = this [1];
			copy [2] = this [2];
			copy [3] = this [3];
			return copy;
		},
		assign: function (matrix)
		{
			this [0] = matrix [0];
			this [1] = matrix [1];
			this [2] = matrix [2];
			this [3] = matrix [3];
		},
		equals: function (matrix)
		{
			return this [0] === matrix [0] &&
			       this [1] === matrix [1] &&
			       this [2] === matrix [2] &&
			       this [3] === matrix [3];
		},
		set1: function (r, c, value)
		{
			this [r * this .order + c] = value;
		},
		get1: function (r, c)
		{
			return this [r * this .order + c];
		},
		set: function ()
		{
			switch (arguments .length)
			{
				case 0:
				{
					this .identity ();
					break;
				}
				case 4:
				{
					this [0] = arguments [0];
					this [1] = arguments [1];
					this [2] = arguments [2];
					this [3] = arguments [3];	
					break;
				}
			}
		},
		identity: function ()
		{
			this [0] = 1;
			this [1] = 0;
			this [2] = 0;
			this [3] = 1;	
		},
		toString: function ()
		{
			return this [0] + " " + this [1] + " " +
			       this [2] + " " + this [3]
		},
	};

	Object .defineProperty (Matrix2 .prototype, "x",
	{
		get: function () { return this [0]; },
		enumerable: false,
		configurable: false
	});

	Object .defineProperty (Matrix2 .prototype, "origin",
	{
		get: function () { return nthis [2]; },
		enumerable: false,
		configurable: false
	});

	Object .defineProperty (Matrix2 .prototype, "submatrix",
	{
		get: function () { return this .value [0]; },
		enumerable: false,
		configurable: false
	});

	$.extend (Matrix2,
	{
		Identity: new Matrix2 (),
	});

	return Matrix2;
});


define ('standard/Math/Algorithms/eigendecomposition',[],function ()
{
	// Calculate eigenvalues and eigenvectors.
	// This is from SGI Inventor Matrix.cpp.
	return function (matrix)
	{
		var
			ORDER   = matrix .order,
			values  = new Array (ORDER),
			vectors = new Array (ORDER);

		var sm;                // smallest entry
		var theta;             // angle for Jacobi rotation
		var c, s, t;           // cosine, sine, tangent of theta
		var tau;               // sine / (1 + cos)
		var h, g;              // two scrap values
		var thresh;            // threshold below which no rotation done
		var a = new Array (ORDER);
		var b = new Array (ORDER); // more scratch
		var z = new Array (ORDER); // more scratch
		var p, q, i, j;
		var SIZE = matrix .length;

		// initializations
		for (i = 0; i < ORDER; ++i)
		{
			vectors [i] = new Array (ORDER);
			a [i] = new Array (ORDER);
			b [i] = values [i] = matrix .get1 (i, i);
			z [i] = 0;
			for (j = 0; j < ORDER; ++j)
			{
				vectors [i] [j] = (i === j) ? 1 : 0;
				a [i] [j] = matrix .get1 (j, i);
			}
		}

		// Why 50? I don't know--it's the way the folks who wrote the
		// algorithm did it:
		for (i = 0; i < 50; ++i)
		{
			sm = 0;
			for (p = 0; p < ORDER - 1; ++p)
				for (q = p+1; q < ORDER; ++q)
					sm += Math .abs (a [p] [q]);

			if (sm === 0)
				break;

			thresh = i < 3 ?
				0.2 * sm / SIZE :
				0;

			for (p = 0; p < ORDER - 1; ++p)
			{
				for (q = p+1; q < ORDER; ++q)
				{
					g = 100 * Math .abs (a [p] [q]);

					if (
						i > 3
						&& (Math .abs (values [p]) + g === Math .abs (values [p]))
						&& (Math .abs (values [q]) + g === Math .abs (values [q]))
					)
					{
						a [p] [q] = 0;
					}

					else if (Math .abs (a [p] [q]) > thresh)
					{
						h = values [q] - values [p];

						if (Math .abs (h) + g === Math .abs (h))
							t = a [p] [q] / h;
						else
						{
							theta = 0.5 * h / a [p] [q];
							t = 1 / (Math .abs (theta) + Math .sqrt (1 + theta * theta));
							if (theta < 0)  t = -t;
						}
						// End of computing tangent of rotation angle

						c   = 1 / Math .sqrt (1 + t*t);
						s   = t * c;
						tau = s / (1 + c);
						h   = t * a [p] [q];
						z [p] -= h;
						z [q] += h;
						values [p] -= h;
						values [q] += h;
						a [p] [q] = 0;

						for (j = 0; j < p; ++j)
						{
							g = a [j] [p];
							h = a [j] [q];
							a [j] [p] = g - s * (h + g * tau);
							a [j] [q] = h + s * (g - h * tau);
						}

						for (j = p+1; j < q; ++j)
						{
							g = a [p] [j];
							h = a [j] [q];
							a [p] [j] = g - s * (h + g * tau);
							a [j] [q] = h + s * (g - h * tau);
						}

						for (j = q+1; j < ORDER; ++j)
						{
							g = a [p] [j];
							h = a [q] [j];
							a [p] [j] = g - s * (h + g * tau);
							a [q] [j] = h + s * (g - h * tau);
						}

						for (j = 0; j < ORDER; ++j)
						{
							g = vectors [j] [p];
							h = vectors [j] [q];
							vectors [j] [p] = g - s * (h + g * tau);
							vectors [j] [q] = h + s * (g - h * tau);
						}
					}
				}
			}

			for (p = 0; p < ORDER; ++p)
			{
				values [p] = b [p] += z [p];
				z [p] = 0;
			}
		}

		return { values: values, vectors: vectors };
	};
});


define ('standard/Math/Numbers/Matrix3',[
	"jquery",
	"standard/Math/Numbers/Vector2",
	"standard/Math/Numbers/Vector3",
	"standard/Math/Numbers/Matrix2",
	"standard/Math/Algorithms/eigendecomposition",
],
function ($, Vector2, Vector3, Matrix2, eigendecomposition)
{
	var
		dummyTranslation      = new Vector2 (0, 0),
		dummyRotation         = new Vector3 (0, 0, 0),
		dummyScale            = new Vector2 (0, 0),
		dummyScaleOrientation = new Vector3 (0, 0, 0),
		dummyCenter           = new Vector2 (0, 0);
								
	function Matrix3 ()
	{
		if (arguments .length)
		{
			this [0] = arguments [0];
			this [1] = arguments [1];
			this [2] = arguments [2];
			this [3] = arguments [3];
			this [4] = arguments [4];
			this [5] = arguments [5];
			this [6] = arguments [6];
			this [7] = arguments [7];
			this [8] = arguments [8];
		}
		else
			this .identity ();
	}

	Matrix3 .prototype =
	{
		constructor: Matrix3,
		order: 3,
		length: 9,
		copy: function ()
		{
			var copy = Object .create (Matrix3 .prototype);
			copy [0] = this [0];
			copy [1] = this [1];
			copy [2] = this [2];
			copy [3] = this [3];
			copy [4] = this [4];
			copy [5] = this [5];
			copy [6] = this [6];
			copy [7] = this [7];
			copy [8] = this [8];
			return copy;
		},
		assign: function (matrix)
		{
			this [0] = matrix [0];
			this [1] = matrix [1];
			this [2] = matrix [2];
			this [3] = matrix [3];
			this [4] = matrix [4];
			this [5] = matrix [5];
			this [6] = matrix [6];
			this [7] = matrix [7];
			this [8] = matrix [8];
			return this;
		},
		equals: function (matrix)
		{
			return this [0] === matrix [0] &&
			       this [1] === matrix [1] &&
			       this [2] === matrix [2] &&
			       this [3] === matrix [3] &&
			       this [4] === matrix [4] &&
			       this [5] === matrix [5] &&
			       this [6] === matrix [6] &&
			       this [7] === matrix [7] &&
			       this [8] === matrix [8];
		},
		rotation: function ()
		{
			return math .atan2 (this [1], this [0]);
		},
		set1: function (r, c, value)
		{
			this [r * this .order + c] = value;
		},
		get1: function (r, c)
		{
			return this [r * this .order + c];
		},
		set: function (translation, rotation, scale, scaleOrientation, center)
		{
			switch (arguments .length)
			{
				case 0:
				{
					this .identity ();
					break;
				}
				case 1:
				{
					if (translation === null) translation = Vector2 .Zero;

					this .identity ();
					this .translate (translation);
					break;
				}
				case 2:
				{
					if (translation === null) translation = Vector2 .Zero;
					if (rotation    === null) rotation    = Vector3 .Zero;

					this .identity ();
					this .translate (translation);

					if (rotation [2] !== 0)
						this .rotate (rotation [2]);

					break;
				}
				case 3:
				{
					if (translation === null) translation = Vector2 .Zero;
					if (rotation    === null) rotation    = Vector3 .Zero;
					if (scale       === null) scale       = Vector2 .One;

					this .identity ();
					this .translate (translation);

					if (rotation [2] !== 0)
						this .rotate (rotation [2]);

					if (! scale .equals (Vector2 .One))
						this .scale  (scale);

					break;
				}
				case 4:
				{
					if (translation      === null) translation      = Vector2 .Zero;
					if (rotation         === null) rotation         = Vector3 .Zero;
					if (scale            === null) scale            = Vector2 .One;
					if (scaleOrientation === null) scaleOrientation = Vector3 .Zero;

					this .identity ();
					this .translate (translation);

					if (rotation [2] !== 0)
						this .rotate (rotation [2]);

					if (! scale .equals (Vector2 .One))
					{
						var hasScaleOrientation = scaleOrientation [2] !== 0;

						if (hasScaleOrientation)
						{
							this .rotate (scaleOrientation [2]);
							this .scale (scale);
							this .rotate (-scaleOrientation [2]);
						}
						else
							this .scale (scale);
					}

					break;
				}
				case 5:
				{
					if (translation      === null) translation      = Vector2 .Zero;
					if (rotation         === null) rotation         = Vector3 .Zero;
					if (scale            === null) scale            = Vector2 .One;
					if (scaleOrientation === null) scaleOrientation = Vector3 .Zero;
					if (center           === null) center           = Vector2 .Zero;

					// P' = T * C * R * SR * S * -SR * -C * P
					this .identity ();
					this .translate (translation);

					var hasCenter = ! center .equals (Vector2 .Zero);

					if (hasCenter)
						this .translate (center);

					if (rotation [2] !== 0)
						this .rotate (rotation [2]);

					if (! scale .equals (Vector2 .One))
					{
						if (scaleOrientation [2] !== 0)
						{
							this .rotate (scaleOrientation [2]);
							this .scale (scale);
							this .rotate (-scaleOrientation [2]);
						}
						else
							this .scale (scale);
					}

					if (hasCenter)
						this .translate (Vector2 .negate (center));

					break;
				}
				case 9:
				{
					this [0] = arguments [0];
					this [1] = arguments [1];
					this [2] = arguments [2];
					this [3] = arguments [3];
					this [4] = arguments [4];
					this [5] = arguments [5];
					this [6] = arguments [6];
					this [7] = arguments [7];
					this [8] = arguments [8];
					break;
				}
			}
		},
		get: function (translation, rotation, scale, scaleOrientation, center)
		{
			if (translation      === null) translation      = dummyTranslation;
			if (rotation         === null) rotation         = dummyRotation;
			if (scale            === null) scale            = dummyScale;
			if (scaleOrientation === null) scaleOrientation = dummyScaleOrientation;
			if (center           === null) center           = dummyCenter;
		},
		determinant2: function ()
		{
			return this [0] * this [4] -
			       this [1] * this [3];
		},
		determinant: function ()
		{
			var
				m0 = this [0], m1 = this [1], m2 = this [2],
				m3 = this [3], m4 = this [4], m5 = this [5],
				m6 = this [6], m7 = this [7], m8 = this [8];

			return m0 * (m4 * m8 - m5 * m7) -
			       m1 * (m3 * m8 - m5 * m6) +
			       m2 * (m3 * m7 - m4 * m6);
		},
		transpose: function ()
		{
			var tmp;

			tmp = this [1]; this [1] = this [3]; this [3] = tmp;
			tmp = this [2]; this [2] = this [6]; this [6] = tmp;
			tmp = this [5]; this [5] = this [7]; this [7] = tmp;

			return this;
		},
		inverse: function ()
		{
			var
				m0  = this [0],
				m1  = this [1],
				m2  = this [2],
				m3  = this [3],
				m4  = this [4],
				m5  = this [5],
				m6  = this [6],
				m7  = this [7],
				m8  = this [8],
				t4  = m0 * m4,
				t6  = m0 * m7,
				t8  = m3 * m1,
				t10 = m3 * m7,
				t12 = m6 * m1,
				t14 = m6 * m4;

			var d = (t4 * m8 - t6 * m5 - t8 * m8 + t10 * m2 + t12 * m5 - t14 * m2);

			if (d === 0)
				throw new Error ("Matrix3 .inverse: determinant is 0.");

			d = 1 / d;

			var
				b0 =  (m4 * m8 - m7 * m5) * d,
				b1 = -(m1 * m8 - m7 * m2) * d,
				b2 =  (m1 * m5 - m4 * m2) * d,
				b3 = -(m3 * m8 - m6 * m5) * d,
				b4 =  (m0 * m8 - m6 * m2) * d,
				b5 = -(m0 * m5 - m3 * m2) * d;
	
			this [0] = b0;
			this [1] = b1;
			this [2] = b2;
			this [3] = b3;
			this [4] = b4;
			this [5] = b5;
			this [6] =  (t10 - t14) * d;
			this [7] = -(t6 - t12) * d;
			this [8] =  (t4 - t8) * d;

			return this;
		},
		multLeft: function (matrix)
		{
			var
				a0 = this [0], a1 = this [1], a2 = this [2],
				a3 = this [3], a4 = this [4], a5 = this [5],
				a6 = this [6], a7 = this [7], a8 = this [8],
				b0 = matrix [0], b1 = matrix [1], b2 = matrix [2],
				b3 = matrix [3], b4 = matrix [4], b5 = matrix [5],
				b6 = matrix [6], b7 = matrix [7], b8 = matrix [8];

			this [0] = a0 * b0 + a3 * b1 + a6 * b2;
			this [1] = a1 * b0 + a4 * b1 + a7 * b2;
			this [2] = a2 * b0 + a5 * b1 + a8 * b2;
			this [3] = a0 * b3 + a3 * b4 + a6 * b5;
			this [4] = a1 * b3 + a4 * b4 + a7 * b5;
			this [5] = a2 * b3 + a5 * b4 + a8 * b5;
			this [6] = a0 * b6 + a3 * b7 + a6 * b8;
			this [7] = a1 * b6 + a4 * b7 + a7 * b8;
			this [8] = a2 * b6 + a5 * b7 + a8 * b8;

			return this;
		},
		multRight: function (matrix)
		{
			var
				a0 = this [0], a1 = this [1], a2 = this [2],
				a3 = this [3], a4 = this [4], a5 = this [5],
				a6 = this [6], a7 = this [7], a8 = this [8],
				b0 = matrix [0], b1 = matrix [1], b2 = matrix [2],
				b3 = matrix [3], b4 = matrix [4], b5 = matrix [5],
				b6 = matrix [6], b7 = matrix [7], b8 = matrix [8];

			this [0] = a0 * b0 + a1 * b3 + a2 * b6;
			this [1] = a0 * b1 + a1 * b4 + a2 * b7;
			this [2] = a0 * b2 + a1 * b5 + a2 * b8;
			this [3] = a3 * b0 + a4 * b3 + a5 * b6;
			this [4] = a3 * b1 + a4 * b4 + a5 * b7;
			this [5] = a3 * b2 + a4 * b5 + a5 * b8;
			this [6] = a6 * b0 + a7 * b3 + a8 * b6;
			this [7] = a6 * b1 + a7 * b4 + a8 * b7;
			this [8] = a6 * b2 + a7 * b5 + a8 * b8;

			return this;
		},
		multVecMatrix: function (vector)
		{
			if (vector .length === 2)
			{
				var
					x = vector .x,
					y = vector .y,
					w = x * this [2] + y * this [5] + this [8];

				vector .x = (x * this [0] + y * this [3] + this [6]) / w;
				vector .y = (x * this [1] + y * this [4] + this [7]) / w;
				
				return vector;
			}

			var
				x = vector .x,
				y = vector .y,
				z = vector .z;

			vector .x = x * this [0] + y * this [3] + z * this [6];
			vector .y = x * this [1] + y * this [4] + z * this [7];
			vector .z = x * this [2] + y * this [5] + z * this [8];

			return vector;
		},
		multMatrixVec: function (vector)
		{
			if (vector .length === 2)
			{
				var
					x = vector .x,
					y = vector .y,
					w = x * this [6] + y * this [7] + this [8];

				vector .x = (x * this [0] + y * this [1] + this [2]) / w;
				vector .y = (x * this [3] + y * this [4] + this [5]) / w;
				
				return vector;
			}

			var
				x = vector .x,
				y = vector .y,
				z = vector .z;

			vector .x = x * this [0] + y * this [1] + z * this [2];
			vector .y = x * this [3] + y * this [4] + z * this [5];
			vector .z = x * this [6] + y * this [7] + z * this [8];

			return vector;
		},
		multDirMatrix: function (vector)
		{
			var
				x = vector .x,
				y = vector .y;

			vector .x = x * this [0] + y * this [3];
			vector .y = x * this [1] + y * this [4];

			return vector;
		},
		multMatrixDir: function (vector)
		{
			var
				x = vector .x,
				y = vector .y;

			vector .x = x * this [0] + y * this [1];
			vector .y = x * this [3] + y * this [4];

			return vector;
		},
		identity: function ()
		{
			this [0] = 1; this [1] = 0; this [2] = 0;
			this [3] = 0; this [4] = 1; this [5] = 0;
			this [6] = 0; this [7] = 0; this [8] = 1;
		},
		translate: function (translation)
		{
			var
				x = translation .x,
				y = translation .y;

			this [6] += this [0] * x + this [3] * y;
			this [7] += this [1] * x + this [4] * y;
		},
		rotate: function (rotation)
		{
			this .multLeft (Matrix3 .Rotation (rotation));
		},
		scale: function (scale)
		{
			var
				x = scale .x,
				y = scale .y;

			this [0] *= x;
			this [3] *= y;

			this [1] *= x;
			this [4] *= y;
		},
		toString: function ()
		{
			return this [0] + " " + this [1] + " " + this [2] + " " +
			       this [3] + " " + this [4] + " " + this [5] + " " +
			       this [6] + " " + this [7] + " " + this [8]
		},
	};

	Object .defineProperty (Matrix3 .prototype, "x",
	{
		get: function () { return new Vector2 (this [0], this [1]); },
		enumerable: false,
		configurable: false
	});

	Object .defineProperty (Matrix3 .prototype, "y",
	{
		get: function () { return new Vector2 (this [3], this [4]); },
		enumerable: false,
		configurable: false
	});

	Object .defineProperty (Matrix3 .prototype, "origin",
	{
		get: function () { return new Vector2 (this [6], this [7]); },
		enumerable: false,
		configurable: false
	});

	Object .defineProperty (Matrix3 .prototype, "submatrix",
	{
		get: function ()
		{
			var matrix = Object .create (Matrix2 .prototype);
			matrix [0] = this [0]; matrix [1] = this [1];
			matrix [2] = this [3]; matrix [3] = this [4];
			return matrix;
		},
		enumerable: false,
		configurable: false
	});

	$.extend (Matrix3,
	{
		Identity: new Matrix3 (),
		Rotation: function (rotation)
		{
			var
				sinAngle = Math .sin (rotation),
				cosAngle = Math .cos (rotation);

			return new Matrix3 ( cosAngle, sinAngle, 0,
			                    -sinAngle, cosAngle, 0,
			                     0, 0, 1);
		},
		Matrix2: function (matrix)
		{
			return new Matrix3 (matrix [0], matrix [1], 0,
			                    matrix [2], matrix [3], 0,
			                    0, 0, 1);
		},
		transpose: function (matrix)
		{
			var copy = Object .create (this .prototype);
			copy [0] = matrix [0]; copy [1] = matrix [3]; copy [2] = matrix [6];
			copy [3] = matrix [1]; copy [4] = matrix [4]; copy [5] = matrix [7];
			copy [6] = matrix [2]; copy [7] = matrix [5]; copy [8] = matrix [8];
			return copy;
		},
		inverse: function (matrix)
		{
			var
				copy = Object .create (this .prototype),
				m0  = matrix [0],
				m1  = matrix [1],
				m2  = matrix [2],
				m3  = matrix [3],
				m4  = matrix [4],
				m5  = matrix [5],
				m6  = matrix [6],
				m7  = matrix [7],
				m8  = matrix [8],
				t4  = m0 * m4,
				t6  = m0 * m7,
				t8  = m3 * m1,
				t10 = m3 * m7,
				t12 = m6 * m1,
				t14 = m6 * m4;

			var d = (t4 * m8 - t6 * m5 - t8 * m8 + t10 * m2 + t12 * m5 - t14 * m2);

			if (d === 0)
				throw new Error ("Matrix3 .inverse: determinant is 0.");

			d = 1 / d;

			var
				b0 =  (m4 * m8 - m7 * m5) * d,
				b1 = -(m1 * m8 - m7 * m2) * d,
				b2 =  (m1 * m5 - m4 * m2) * d,
				b3 = -(m3 * m8 - m6 * m5) * d,
				b4 =  (m0 * m8 - m6 * m2) * d,
				b5 = -(m0 * m5 - m3 * m2) * d;
	
			copy [0] = b0;
			copy [1] = b1;
			copy [2] = b2;
			copy [3] = b3;
			copy [4] = b4;
			copy [5] = b5;
			copy [6] =  (t10 - t14) * d;
			copy [7] = -(t6 - t12) * d;
			copy [8] =  (t4 - t8) * d;

			return copy;
		},
		multLeft: function (lhs, rhs)
		{
			var
				copy = Object .create (this .prototype),
				a0 = lhs [0], a1 = lhs [1], a2 = lhs [2],
				a3 = lhs [3], a4 = lhs [4], a5 = lhs [5],
				a6 = lhs [6], a7 = lhs [7], a8 = lhs [8],
				b0 = rhs [0], b1 = rhs [1], b2 = rhs [2],
				b3 = rhs [3], b4 = rhs [4], b5 = rhs [5],
				b6 = rhs [6], b7 = rhs [7], b8 = rhs [8];

			copy [0] = a0 * b0 + a3 * b1 + a6 * b2;
			copy [1] = a1 * b0 + a4 * b1 + a7 * b2;
			copy [2] = a2 * b0 + a5 * b1 + a8 * b2;
			copy [3] = a0 * b3 + a3 * b4 + a6 * b5;
			copy [4] = a1 * b3 + a4 * b4 + a7 * b5;
			copy [5] = a2 * b3 + a5 * b4 + a8 * b5;
			copy [6] = a0 * b6 + a3 * b7 + a6 * b8;
			copy [7] = a1 * b6 + a4 * b7 + a7 * b8;
			copy [8] = a2 * b6 + a5 * b7 + a8 * b8;

			return copy;
		},
		multRight: function (lhs, rhs)
		{
			var
				copy = Object .create (this .prototype),
				a0 = lhs [0], a1 = lhs [1], a2 = lhs [2],
				a3 = lhs [3], a4 = lhs [4], a5 = lhs [5],
				a6 = lhs [6], a7 = lhs [7], a8 = lhs [8],
				b0 = rhs [0], b1 = rhs [1], b2 = rhs [2],
				b3 = rhs [3], b4 = rhs [4], b5 = rhs [5],
				b6 = rhs [6], b7 = rhs [7], b8 = rhs [8];

			copy [0] = a0 * b0 + a1 * b3 + a2 * b6;
			copy [1] = a0 * b1 + a1 * b4 + a2 * b7;
			copy [2] = a0 * b2 + a1 * b5 + a2 * b8;
			copy [3] = a3 * b0 + a4 * b3 + a5 * b6;
			copy [4] = a3 * b1 + a4 * b4 + a5 * b7;
			copy [5] = a3 * b2 + a4 * b5 + a5 * b8;
			copy [6] = a6 * b0 + a7 * b3 + a8 * b6;
			copy [7] = a6 * b1 + a7 * b4 + a8 * b7;
			copy [8] = a6 * b2 + a7 * b5 + a8 * b8;

			return copy;
		},
	});

	return Matrix3;
});


define ('cobweb/Fields/SFMatrix3',[
	"jquery",
	"cobweb/Basic/X3DField",
	"cobweb/Fields/SFVec2",
	"cobweb/Bits/X3DConstants",
	"standard/Math/Numbers/Matrix3",
	"standard/Math/Numbers/Vector2",
	"standard/Math/Numbers/Vector3",
],
function ($, X3DField, SFVec2, X3DConstants, Matrix3, Vector2, Vector3)
{
	var
		SFVec2d = SFVec2 .SFVec2d,
		SFVec2f = SFVec2 .SFVec2f;

	function SFMatrix3 (m00, m01, m02,
	                    m10, m11, m12,
	                    m20, m21, m22)
	{
		if (arguments .length)
		{
			if (arguments [0] instanceof Matrix3)
				X3DField .call (this, arguments [0]);
			else
				X3DField .call (this, new Matrix3 (+m00, +m01, +m02,
	                                            +m10, +m11, +m12,
	                                            +m20, +m21, +m22));
		}
		else
			X3DField .call (this, new Matrix3 ());
	}

	SFMatrix3 .prototype = $.extend (Object .create (X3DField .prototype),
	{
		constructor: SFMatrix3,
		copy: function ()
		{
			return new (this .constructor) (this .getValue () .copy ());
		},
		equals: function (matrix)
		{
			return this .getValue () .equals (matrix .getValue ());
		},
		set: function (value)
		{
			this .getValue () .assign (value);
		},
		setTransform: function (translation, rotation, scale, scaleOrientation, center)
		{
			translation      = translation      ? translation      .getValue () : Vector2 .Zero;
			rotation         = rotation         ? rotation         .getValue () : Vector3 .Zero;
			scale            = scale            ? scale            .getValue () : Vector2 .One
			scaleOrientation = scaleOrientation ? scaleOrientation .getValue () : Vector3 .Zero;
			center           = center           ? center           .getValue () : Vector2 .Zero;

			this .getValue () .setTransform (translation, rotation, scale, scaleOrientation, center);
		},
		getTransform: function (translation, rotation, scale, scaleOrientation, center)
		{
			translation      = translation      ? translation      .getValue () : null;
			rotation         = rotation         ? rotation         .getValue () : null;
			scale            = scale            ? scale            .getValue () : null;
			scaleOrientation = scaleOrientation ? scaleOrientation .getValue () : null;
			center           = center           ? center           .getValue () : null;

			this .getValue () .getTransform (translation, rotation, scale, scaleOrientation, center);
		},
		transpose: function ()
		{
			return new (this .constructor) (Matrix3 .transpose (this .getValue ()));
		},
		inverse: function ()
		{
			return new (this .constructor) (Matrix3 .inverse (this .getValue ()));
		},
		multLeft: function (matrix)
		{
			return new (this .constructor) (Matrix3 .multLeft (this .getValue (), matrix .getValue ()));
		},
		multRight: function (matrix)
		{
			return new (this .constructor) (Matrix3 .multRight (this .getValue (), matrix .getValue ()));
		},
		multVecMatrix: function (vector)
		{
			return new (this .constructor .Vector2) (this .getValue () .multVecMatrix (vector .getValue () .copy ()));
		},
		multMatrixVec: function (vector)
		{
			return new (this .constructor .Vector2) (this .getValue () .multMatrixVec (vector .getValue () .copy ()));
		},
		multDirMatrix: function (vector)
		{
			return new (this .constructor .Vector2) (this .getValue () .multDirMatrix (vector .getValue () .copy ()));
		},
		multMatrixDir: function (vector)
		{
			return new (this .constructor .Vector2) (this .getValue () .multMatrixDir (vector .getValue () .copy ()));
		},
		toString: function ()
		{
			return this .getValue () .toString ();
		},
	});

	function defineProperty (i)
	{
		Object .defineProperty (SFMatrix3 .prototype, i,
		{
			get: function ()
			{
				return this .getValue () [i];
			},
			set: function (value)
			{
				this .getValue () [i] = value;
				this .addEvent ();
			},
			enumerable: false,
			configurable: false
		});
	}

	for (var i = 0; i < Matrix3 .prototype .length; ++ i)
		defineProperty (i);

	/*
	 *  SFMatrix3d
	 */

	function SFMatrix3d (m00, m01, m02,
	                     m10, m11, m12,
	                     m20, m21, m22)
	{
		SFMatrix3 .apply (this, arguments);
	}

	SFMatrix3d .prototype = $.extend (Object .create (SFMatrix3 .prototype),
	{
		constructor: SFMatrix3d,
		Vector2: SFVec2d,
		getTypeName: function ()
		{
			return "SFMatrix3d";
		},
		getType: function ()
		{
			return X3DConstants .SFMatrix3d;
		},
	});

	/*
	 *  SFMatrix3f
	 */

	function SFMatrix3f (m00, m01, m02,
	                     m10, m11, m12,
	                     m20, m21, m22)
	{
		SFMatrix3 .apply (this, arguments);
	}

	SFMatrix3f .prototype = $.extend (Object .create (SFMatrix3 .prototype),
	{
		constructor: SFMatrix3f,
		Vector2: SFVec2f,
		getTypeName: function ()
		{
			return "SFMatrix3f";
		},
		getType: function ()
		{
			return X3DConstants .SFMatrix3f;
		},
	});

	return {
		SFMatrix3d: SFMatrix3d,
		SFMatrix3f: SFMatrix3f,
	};
});


define ('cobweb/Fields/SFVec3',[
	"jquery",
	"standard/Math/Numbers/Vector3",
	"cobweb/Basic/X3DField",
	"cobweb/Bits/X3DConstants",
],
function ($, Vector3, X3DField, X3DConstants)
{
	function SFVec3 (x, y, z)
	{
		if (arguments .length)
		{
			if (arguments [0] instanceof Vector3)
				X3DField .call (this, arguments [0]);
			else
				X3DField .call (this, new Vector3 (+x, +y, +z));
		}
		else
			X3DField .call (this, new Vector3 (0, 0, 0));
	}

	SFVec3 .prototype = $.extend (Object .create (X3DField .prototype),
	{
		constructor: SFVec3,
		copy: function ()
		{
			return new (this .constructor) (this .getValue () .copy ());
		},
		equals: function (vector)
		{
			return this .getValue () .equals (vector .getValue ());
		},
		set: function (value)
		{
			this .getValue () .assign (value);
		},
		negate: function ()
		{
			return new (this .constructor) (Vector3 .negate (this .getValue () .copy ()));
		},
		add: function (vector)
		{
			return new (this .constructor) (Vector3 .add (this .getValue (), vector .getValue ()));
		},
		subtract: function (vector)
		{
			return new (this .constructor) (Vector3 .subtract (this .getValue (), vector .getValue ()));
		},
		multiply: function (value)
		{
			return new (this .constructor) (Vector3 .multiply (this .getValue (), value));
		},
		divide: function (value)
		{
			return new (this .constructor) (Vector3 .divide (this .getValue (), value));
		},
		cross: function (vector)
		{
			return new (this .constructor) (Vector3 .cross (this .getValue (), vector .getValue ()));
		},
		dot: function (vector)
		{
			return new (this .constructor) (this .getValue () .dot (vector .getValue ()));
		},
		normalize: function (vector)
		{
			return new (this .constructor) (Vector3 .normalize (this .getValue ()));
		},
		length: function (vector)
		{
			return new (this .constructor) (this .getValue () .abs ());
		},
		toString: function ()
		{
			return this .getValue () .toString ();
		},
	});

	Object .defineProperty (SFVec3 .prototype, "x",
	{
		get: function ()
		{
			return this .getValue () .x;
		},
		set: function (value)
		{
			this .getValue () .x = value;
			this .addEvent ();
		},
		enumerable: true,
		configurable: false
	});

	Object .defineProperty (SFVec3 .prototype, "0",
	{
		get: function ()
		{
			return this .getValue () .x;
		},
		set: function (value)
		{
			this .getValue () .x = value;
			this .addEvent ();
		},
		enumerable: false,
		configurable: false
	});

	Object .defineProperty (SFVec3 .prototype, "y",
	{
		get: function ()
		{
			return this .getValue () .y;
		},
		set: function (value)
		{
			this .getValue () .y = value;
			this .addEvent ();
		},
		enumerable: true,
		configurable: false
	});

	Object .defineProperty (SFVec3 .prototype, "1",
	{
		get: function ()
		{
			return this .getValue () .y;
		},
		set: function (value)
		{
			this .getValue () .y = value;
			this .addEvent ();
		},
		enumerable: false,
		configurable: false
	});

	Object .defineProperty (SFVec3 .prototype, "z",
	{
		get: function ()
		{
			return this .getValue () .z;
		},
		set: function (value)
		{
			this .getValue () .z = value;
			this .addEvent ();
		},
		enumerable: true,
		configurable: false
	});

	Object .defineProperty (SFVec3 .prototype, "2",
	{
		get: function ()
		{
			return this .getValue () .z;
		},
		set: function (value)
		{
			this .getValue () .z = value;
			this .addEvent ();
		},
		enumerable: false,
		configurable: false
	});

	/*
	 *  SFVec3d
	 */

	function SFVec3d (x, y, z)
	{
		SFVec3 .apply (this, arguments);
	}

	SFVec3d .prototype = $.extend (Object .create (SFVec3 .prototype),
	{
		constructor: SFVec3d,
		getTypeName: function ()
		{
			return "SFVec3d";
		},
		getType: function ()
		{
			return X3DConstants .SFVec3d;
		},
	});

	/*
	 *  SFVec3f
	 */

	function SFVec3f (x, y, z)
	{
		SFVec3 .apply (this, arguments);
	}

	SFVec3f .prototype = $.extend (Object .create (SFVec3 .prototype),
	{
		constructor: SFVec3f,
		getTypeName: function ()
		{
			return "SFVec3f";
		},
		getType: function ()
		{
			return X3DConstants .SFVec3f;
		},
	});

	return {
		SFVec3d: SFVec3d,
		SFVec3f: SFVec3f,
	};
});


define ('standard/Math/Numbers/Vector4',[
	"jquery",
	"standard/Math/Algorithm",
],
function ($, Algorithm)
{
	function Vector4 (x, y, z, w)
	{		
		this .x = x;
		this .y = y;
		this .z = z;
		this .w = w;
	}

	Vector4 .prototype =
	{
		constructor: Vector4,
		length: 4,
		copy: function ()
		{
			var copy = Object .create (Vector4 .prototype);
			copy .x = this .x;
			copy .y = this .y;
			copy .z = this .z;
			copy .w = this .w;
			return copy;
		},
		assign: function (vector)
		{
			this .x = vector .x;
			this .y = vector .y;
			this .z = vector .z;
			this .w = vector .w;
			return this;
		},
		set: function (x, y, z, w)
		{
			this .x = x;
			this .y = y;
			this .z = z;
			this .w = w;
			return this;
		},
		equals: function (vector)
		{
			return this .x === vector .x &&
			       this .y === vector .y &&
			       this .z === vector .z &&
			       this .w === vector .w;
		},
		negate: function ()
		{
			this .x = -this .x;
			this .y = -this .y;
			this .z = -this .z;
			this .w = -this .w;
			return this;
		},
		add: function (vector)
		{
			this .x += vector .x;
			this .y += vector .y;
			this .z += vector .z;
			this .w += vector .w;
			return this;
		},
		subtract: function (vector)
		{
			this .x -= vector .x;
			this .y -= vector .y;
			this .z -= vector .z;
			this .w -= vector .w;
			return this;
		},
		multiply: function (value)
		{
			this .x *= value;
			this .y *= value;
			this .z *= value;
			this .w *= value;
			return this;
		},
		multVec: function (vector)
		{
			this .x *= vector .x;
			this .y *= vector .y;
			this .z *= vector .z;
			this .w *= vector .w;
			return this;
		},
		divide: function (value)
		{
			this .x /= value;
			this .y /= value;
			this .z /= value;
			this .w /= value;
			return this;
		},
		divVec: function (vector)
		{
			this .x /= vector .x;
			this .y /= vector .y;
			this .z /= vector .z;
			this .w /= vector .w;
			return this;
		},
		normalize: function ()
		{
			var length = Math .sqrt (this .x * this .x +
			                         this .y * this .y +
			                         this .z * this .z +
			                         this .w * this .w);
			
			if (length)
			{
				length = 1 / length;

				this .x *= length;
				this .y *= length;
				this .z *= length;
				this .w *= length;
			}

			return this;
		},
		dot: function (vector)
		{
			return this .x * vector .x +
			       this .y * vector .y +
			       this .z * vector .z +
			       this .w * vector .w;
		},
		norm: function ()
		{
			return this .x * this .x +
			       this .y * this .y +
			       this .z * this .z +
			       this .w * this .w;
		},
		abs: function ()
		{
			return Math .sqrt (this .x * this .x +
			                   this .y * this .y +
			                   this .z * this .z +
			                   this .w * this .w);
		},
		lerp: function (dest, t)
		{
			this .x = Algorithm .lerp (this .x, dest .x, t);
			this .y = Algorithm .lerp (this .y, dest .y, t);
			this .z = Algorithm .lerp (this .z, dest .z, t);
			this .w = Algorithm .lerp (this .w, dest .w, t);
			return this;
		},
		min: function (vector)
		{
			for (var i = 0; i < arguments .length; ++ i)
			{
				var vector = arguments [i];

				this .x = Math .min (this .x, vector .x);
				this .y = Math .min (this .y, vector .y);
				this .z = Math .min (this .z, vector .z);
				this .w = Math .min (this .w, vector .w);
			}

			return this;
		},
		max: function (vector)
		{
			for (var i = 0; i < arguments .length; ++ i)
			{
				var vector = arguments [i];

				this .x = Math .max (this .x, vector .x);
				this .y = Math .max (this .y, vector .y);
				this .z = Math .max (this .z, vector .z);
				this .w = Math .max (this .w, vector .w);
			}

			return this;
		},
		toString: function ()
		{
			return this .x + " " +
			       this .y + " " +
			       this .z + " " +
			       this .w;
		},
	};

	Object .defineProperty (Vector4 .prototype, "0",
	{
		get: function () { return this .x; },
		set: function (value) { this .x = value; },
		enumerable: false,
		configurable: false
	});

	Object .defineProperty (Vector4 .prototype, "1",
	{
		get: function () { return this .y; },
		set: function (value) { this .y = value; },
		enumerable: false,
		configurable: false
	});

	Object .defineProperty (Vector4 .prototype, "2",
	{
		get: function () { return this .z; },
		set: function (value) { this .z = value; },
		enumerable: false,
		configurable: false
	});

	Object .defineProperty (Vector4 .prototype, "3",
	{
		get: function () { return this .w; },
		set: function (value) { this .w = value; },
		enumerable: false,
		configurable: false
	});

	$.extend (Vector4,
	{
		Zero: new Vector4 (0, 0, 0, 0),
		One: new Vector4 (1, 1, 1, 1),
		negate: function (vector)
		{
			var copy = Object .create (this .prototype);
			copy .x = -vector .x;
			copy .y = -vector .y;
			copy .z = -vector .z;
			copy .w = -vector .w;
			return copy;
		},
		add: function (lhs, rhs)
		{
			var copy = Object .create (this .prototype);
			copy .x = lhs .x + rhs .x;
			copy .y = lhs .y + rhs .y;
			copy .z = lhs .z + rhs .z;
			copy .w = lhs .w + rhs .w;
			return copy;
		},
		subtract: function (lhs, rhs)
		{
			var copy = Object .create (this .prototype);
			copy .x = lhs .x - rhs .x;
			copy .y = lhs .y - rhs .y;
			copy .z = lhs .z - rhs .z;
			copy .w = lhs .w - rhs .w;
			return copy;
		},
		multiply: function (lhs, rhs)
		{
			var copy = Object .create (this .prototype);
			copy .x = lhs .x * rhs;
			copy .y = lhs .y * rhs;
			copy .z = lhs .z * rhs;
			copy .w = lhs .w * rhs;
			return copy;
		},
		multVec: function (lhs, rhs)
		{
			var copy = Object .create (this .prototype);
			copy .x = lhs .x * rhs .x;
			copy .y = lhs .y * rhs .y;
			copy .z = lhs .z * rhs .z;
			copy .w = lhs .w * rhs .w;
			return copy;
		},
		divide: function (lhs, rhs)
		{
			var copy = Object .create (this .prototype);
			copy .x = lhs .x / rhs;
			copy .y = lhs .y / rhs;
			copy .z = lhs .z / rhs;
			copy .w = lhs .w / rhs;
			return copy;
		},
		divVec: function (lhs, rhs)
		{
			var copy = Object .create (this .prototype);
			copy .x = lhs .x / rhs .x;
			copy .y = lhs .y / rhs .y;
			copy .z = lhs .z / rhs .z;
			copy .w = lhs .w / rhs .w;
			return copy;
		},
		normalize: function (vector)
		{
			var
				copy   = Object .create (this .prototype),
				x      = vector .x,
				y      = vector .y,
				z      = vector .z,
				w      = vector .w,
				length = Math .sqrt (x * x + y * y + z * z + w * w);

			if (length)
			{
				length = 1 / length;

				copy .x = x * length;
				copy .y = y * length;
				copy .z = z * length;
				copy .w = w * length;
			}
			else
			{
				copy .x = 0;
				copy .y = 0;
				copy .z = 0;
				copy .w = 0;
			}

			return copy;
		},
		dot: function (lhs, rhs)
		{
			return lhs .dot (rhs);
		},
		lerp: function (source, dest, t)
		{
			return new Vector4 (Algorithm .lerp (source .x, dest .x, t),
			                    Algorithm .lerp (source .y, dest .y, t),
			                    Algorithm .lerp (source .z, dest .z, t),
			                    Algorithm .lerp (source .w, dest .w, t));
		},
		min: function (lhs, rhs)
		{
			var
				x = arguments [0] .x,
				y = arguments [0] .y,
				z = arguments [0] .z,
				w = arguments [0] .w;

			for (var i = 1; i < arguments .length; ++ i)
			{
				var vector = arguments [i];

				x = Math .min (x, vector .x);
				y = Math .min (y, vector .y);
				z = Math .min (z, vector .z);
				w = Math .min (w, vector .w);
			}

			return new Vector4 (x, y, z, w);
		},
		max: function (lhs, rhs)
		{
			var
				x = arguments [0] .x,
				y = arguments [0] .y,
				z = arguments [0] .z,
				w = arguments [0] .w;

			for (var i = 1; i < arguments .length; ++ i)
			{
				var vector = arguments [i];

				x = Math .max (x, vector .x);
				y = Math .max (y, vector .y);
				z = Math .max (z, vector .z);
				w = Math .max (w, vector .w);
			}

			return new Vector4 (x, y, z, w);
		},
	});

	return Vector4;
});


define ('standard/Math/Numbers/Quaternion',[
	"jquery",
	"standard/Math/Numbers/Vector3",
	"standard/Math/Algorithm",
],
function ($, Vector3, Algorithm)
{
	function Quaternion (x, y, z, w)
	{
		this .x = x;
		this .y = y;
		this .z = z;
		this .w = w;
	}

	Quaternion .prototype =
	{
		constructor: Quaternion,
		length: 4,
		copy: function ()
		{
			var copy = Object .create (Quaternion .prototype);
			copy .x = this .x;
			copy .y = this .y;
			copy .z = this .z;
			copy .w = this .w;
			return copy;
		},
		assign: function (quat)
		{
			this .x = quat .x;
			this .y = quat .y;
			this .z = quat .z;
			this .w = quat .w;
			return this;
		},
		set: function (x, y, z, w)
		{
			this .x = x;
			this .y = y;
			this .z = z;
			this .w = w;
			return this;
		},
		isReal: function ()
		{
			return ! (this .x || this .y || this .z);
		},
		isImag: function ()
		{
			return ! this .w;
		},
		equals: function (quat)
		{
			return this .x === quat .x &&
			       this .y === quat .y &&
			       this .z === quat .z &&
			       this .w === quat .w;
		},
		negate: function ()
		{
			this .x = -this .x;
			this .y = -this .y;
			this .z = -this .z;
			this .w = -this .w;
			return this;
		},
		inverse: function ()
		{
			this .x = -this .x;
			this .y = -this .y;
			this .z = -this .z;
			return this;
		},
		add: function (quat)
		{
			this .x += quat .x;
			this .y += quat .y;
			this .z += quat .z;
			this .w += quat .w;
			return this;
		},
		subtract: function (quat)
		{
			this .x -= quat .x;
			this .y -= quat .y;
			this .z -= quat .z;
			this .w -= quat .w;
			return this;
		},
		multiply: function (value)
		{
			this .x *= value;
			this .y *= value;
			this .z *= value;
			this .w *= value;
			return this;
		},
		multLeft: function (quat)
		{
			var
				ax = this .x, ay = this .y, az = this .z, aw = this .w,
				bx = quat .x, by = quat .y, bz = quat .z, bw = quat .w;

			this .x = aw * bx + ax * bw + ay * bz - az * by;
			this .y = aw * by + ay * bw + az * bx - ax * bz;
			this .z = aw * bz + az * bw + ax * by - ay * bx;
			this .w = aw * bw - ax * bx - ay * by - az * bz;

			return this;
		},
		multRight: function (quat)
		{
			var
				ax = this .x, ay = this .y, az = this .z, aw = this .w,
				bx = quat .x, by = quat .y, bz = quat .z, bw = quat .w;

			this .x = bw * ax + bx * aw + by * az - bz * ay;
			this .y = bw * ay + by * aw + bz * ax - bx * az;
			this .z = bw * az + bz * aw + bx * ay - by * ax;
			this .w = bw * aw - bx * ax - by * ay - bz * az;

			return this;
		},
		divide: function (value)
		{
			this .x /= value;
			this .y /= value;
			this .z /= value;
			this .w /= value;
			return this;
		},
		multVecQuat: function (vector)
		{
			var
				qx = this .x, qy = this .y, qz = this .z, qw = this .w,
				vx = vector .x, vy = vector .y, vz = vector .z,
				a  = qw * qw - qx * qx - qy * qy - qz * qz,                   
				b  = 2 * (vx * qx + vy * qy + vz * qz), 
				c  = 2 * qw;                                       

			vector .x = a * vx + b * qx + c * (qy * vz - qz * vy);
			vector .y = a * vy + b * qy + c * (qz * vx - qx * vz);
			vector .z = a * vz + b * qz + c * (qx * vy - qy * vx);
			
			return vector;
		},
		multQuatVec: function (vector)
		{
			var
				qx = this .x, qy = this .y, qz = this .z, qw = this .w,
				vx = vector .x, vy = vector .y, vz = vector .z,
				a  = qw * qw - qx * qx - qy * qy - qz * qz,                    
				b  = 2 * (vx * qx + vy * qy + vz * qz), 
				c  = 2 * qw;                                       

			vector .x = a * vx + b * qx - c * (qy * vz - qz * vy);
			vector .y = a * vy + b * qy - c * (qz * vx - qx * vz);
			vector .z = a * vz + b * qz - c * (qx * vy - qy * vx);

			return vector;
		},
		normalize: function ()
		{
			var length = Math .sqrt (this .x * this .x +
			                         this .y * this .y +
			                         this .z * this .z +
			                         this .w * this .w);
			
			if (length)
			{
				length = 1 / length;

				this .x *= length;
				this .y *= length;
				this .z *= length;
				this .w *= length;
			}

			return this;
		},
		dot: function (quat)
		{
			return this .x * quat .x +
			       this .y * quat .y +
			       this .z * quat .z +
			       this .w * quat .w;
		},
		norm: function ()
		{
			return this .x * this .x +
			       this .y * this .y +
			       this .z * this .z +
			       this .w * this .w;
		},
		abs: function ()
		{
			return Math .sqrt (this .x * this .x +
			                   this .y * this .y +
			                   this .z * this .z +
			                   this .w * this .w);
		},
		pow: function (exponent)
		{
			if (exponent instanceof Quaternion)
				return this .exp (exponent * this .log ());

			if (this .isReal ())
				return this .set (0, 0, 0, Math .pow (this .w, exponent));

			var
				l     = this .abs (),
				theta = Math .acos (this .w / l),
				li    = this .imag .abs (),
				ltoe  = Math .pow (l, exponent),
				et    = exponent * theta,
				scale = ltoe / li * Math .sin (et);

			this .x *= scale;
			this .y *= scale;
			this .z *= scale;
			this .w  = ltoe * Math .cos (et);
			return this;
		},
		log: function ()
		{
			if (this .isReal ())
			{
				if (this .w > 0)
					return this .set (0, 0, 0, Math .log (this .w));

				else
					return this .set (Math .PI, 0, 0, Math .log (-this .w));
			}

			var
				l = this .abs (),
				v = this .imag .normalize () .multiply (Math .acos (this .w / l)),
				w = Math .log (l);

			this .x = v .x;
			this .y = v .y;
			this .z = v .z;
			this .w = w;
			return this;
		},
		exp: function ()
		{	
			if (this .isReal ())
				return this .set (0, 0, 0, Math .exp (this .w));

			var
				i  = this .imag,
				li = i .abs (),
				ew = Math .exp (this .w),
				w  = ew * Math .cos (li),
				v  = i .multiply (ew * Math .sin (li) / li);

			this .x = v .x;
			this .y = v .y;
			this .z = v .z;
			this .w = w;
			return this;
		},
		slerp: function (dest, t)
		{
			return Algorithm .slerp (this, dest, t);
		},
		toString: function ()
		{
			return this .x + " " +
			       this .y + " " +
			       this .z + " " +
			       this .w;
		},
	};

	Object .defineProperty (Quaternion .prototype, "0",
	{
		get: function () { return this .x; },
		set: function (value) { this .x = value; },
		enumerable: false,
		configurable: false
	});

	Object .defineProperty (Quaternion .prototype, "1",
	{
		get: function () { return this .y; },
		set: function (value) { this .y = value; },
		enumerable: false,
		configurable: false
	});

	Object .defineProperty (Quaternion .prototype, "2",
	{
		get: function () { return this .z; },
		set: function (value) { this .z = value; },
		enumerable: false,
		configurable: false
	});

	Object .defineProperty (Quaternion .prototype, "3",
	{
		get: function () { return this .w; },
		set: function (value) { this .w = value; },
		enumerable: false,
		configurable: false
	});

	Object .defineProperty (Quaternion .prototype, "real",
	{
		get: function () { return this .w; },
		enumerable: false,
		configurable: false
	});

	Object .defineProperty (Quaternion .prototype, "imag",
	{
		get: function ()
		{
			return new Vector3 (this .x,
			                    this .y,
			                    this .z);
		},
		enumerable: false,
		configurable: false
	});

	$.extend (Quaternion,
	{
		Matrix3: function (matrix)
		{
			var quat = new Quaternion (0, 0, 0, 1);

			var i;

			// First, find largest diagonal in matrix:
			if (matrix [0] > matrix [4])
			{
				i = matrix [0] > matrix [8] ? 0 : 2;
			}
			else
			{
				i = matrix [4] > matrix [8] ? 1 : 2;
			}

			var scalerow = matrix [0] + matrix [4] + matrix [8];

			if (scalerow > matrix [i * 3 + i])
			{
				// Compute w first:
				quat [3] = Math .sqrt (scalerow + 1) / 2;

				// And compute other values:
				var d = 4 * quat [3];
				quat [0] = (matrix [5] - matrix [7]) / d;
				quat [1] = (matrix [6] - matrix [2]) / d;
				quat [2] = (matrix [1] - matrix [3]) / d;
			}
			else
			{
				// Compute x, y, or z first:
				var j = (i + 1) % 3;
				var k = (i + 2) % 3;

				// Compute first value:
				quat [i] = Math .sqrt (matrix [i * 3 + i] - matrix [j * 3 + j] - matrix [k * 3 + k] + 1) / 2;

				// And the others:
				var d = 4 * quat [i];
				quat [j] = (matrix [i * 3 + j] + matrix [j * 3 + i]) / d;
				quat [k] = (matrix [i * 3 + k] + matrix [k * 3 + i]) / d;
				quat [3] = (matrix [j * 3 + k] - matrix [k * 3 + j]) / d;
			}

			return quat;
		},
		negate: function (vector)
		{
			var copy = Object .create (this .prototype);
			copy .x = -this .x;
			copy .y = -this .y;
			copy .z = -this .z;
			copy .w = -this .w;
			return copy;
		},
		inverse: function (vector)
		{
			var copy = Object .create (this .prototype);
			copy .x = -vector .x;
			copy .y = -vector .y;
			copy .z = -vector .z;
			copy .w =  vector .w;
			return copy;
		},
		add: function (lhs, rhs)
		{
			var copy = Object .create (this .prototype);
			copy .x = rhs .x + rhs .x;
			copy .y = rhs .y + rhs .y;
			copy .z = rhs .z + rhs .z;
			copy .w = rhs .w + rhs .w;
			return copy;
		},
		subtract: function (lhs, rhs)
		{
			var copy = Object .create (this .prototype);
			copy .x = rhs .x - rhs .x;
			copy .y = rhs .y - rhs .y;
			copy .z = rhs .z - rhs .z;
			copy .w = rhs .w - rhs .w;
			return copy;
		},
		multiply: function (lhs, rhs)
		{
			var copy = Object .create (this .prototype);
			copy .x = rhs .x * rhs;
			copy .y = rhs .y * rhs;
			copy .z = rhs .z * rhs;
			copy .w = rhs .w * rhs;
			return copy;
		},
		multLeft: function (lhs, rhs)
		{
			var
				copy = Object .create (this .prototype),
				ax = lhs .x, ay = lhs .y, az = lhs .z, aw = lhs .w,
				bx = rhs .x, by = rhs .y, bz = rhs .z, bw = rhs .w;

			copy .x = aw * bx + ax * bw + ay * bz - az * by;
			copy .y = aw * by + ay * bw + az * bx - ax * bz;
			copy .z = aw * bz + az * bw + ax * by - ay * bx;
			copy .w = aw * bw - ax * bx - ay * by - az * bz;

			return copy;
		},
		multRight: function (lhs, rhs)
		{
			var
				copy = Object .create (this .prototype),
				ax = lhs .x, ay = lhs .y, az = lhs .z, aw = lhs .w,
				bx = rhs .x, by = rhs .y, bz = rhs .z, bw = rhs .w;

			copy .x = bw * ax + bx * aw + by * az - bz * ay;
			copy .y = bw * ay + by * aw + bz * ax - bx * az;
			copy .z = bw * az + bz * aw + bx * ay - by * ax;
			copy .w = bw * aw - bx * ax - by * ay - bz * az;

			return copy;
		},
		divide: function (lhs, rhs)
		{
			var copy = Object .create (this .prototype);
			copy .x = rhs .x / rhs;
			copy .y = rhs .y / rhs;
			copy .z = rhs .z / rhs;
			copy .w = rhs .w / rhs;
			return copy;
		},
		normalize: function (quat)
		{
			var
				copy   = Object .create (this .prototype),
				x      = quat .x,
				y      = quat .y,
				z      = quat .z,
				w      = quat .w,
				length = Math .sqrt (x * x + y * y + z * z + w * w);

			if (length)
			{
				length = 1 / length;

				copy .x = x * length;
				copy .y = y * length;
				copy .z = z * length;
				copy .w = w * length;
			}
			else
			{
				copy .x = 0;
				copy .y = 0;
				copy .z = 0;
				copy .w = 0;
			}

			return copy;
		},
		slerp: function (source, dest, t)
		{
			return Algorithm .slerp (new Quaternion (source .x, source .y, source .z, source .w), dest, t);
		},
		/*

		!!! Algorithm .slerp is in place.

		squad: function (source, a, b, destination, t)
		{
			// We must use shortest path slerp to prevent flipping.  Also see spline.

			return Algorithm .slerp (Algorithm .slerp (source, destination, t), Algorithm .slerp (a, b, t), 2 * t * (1 - t));
		},
		bezier: function (q0, a, b, q1, t)
		{
			var q11 = Algorithm .slerp (q0,  a, t);
			var q12 = Algorithm .slerp ( a,  b, t);
			var q13 = Algorithm .slerp ( b, q1, t);

			return Algorithm .slerp (Algorithm .slerp (q11, q12, t), Algorithm .slerp (q12, q13, t), t);
		},
		spline: function (q0, q1, q2)
		{
			// If the dot product is smaller than 0 we must negate the quaternion to prevent flipping. If we negate all
			// the terms we get a different quaternion but it represents the same rotation.

			if (q0 .dot (q1) < 0)
				q0 = Quaternion .negate (q0);

			if (q2 .dot (q1) < 0)
				q2 = Quaternion .negate (q2);

			var q1_i = Quaternion .inverse (q1);

			// The result must be normalized as it will be used in slerp and we can only slerp normalized vectors.

			return Quaternion .multiply (q1,
				Quaternion .multiply (q1_i, q0) .log () .add (Quaternion .multiply (q1_i, q2) .log ()) .divide (-4) .exp ()
			)
			.normalize ();
		},
		*/
	});

	return Quaternion;
});



define ('standard/Math/Numbers/Rotation4',[
	"jquery",
	"standard/Math/Numbers/Quaternion",
	"standard/Math/Numbers/Vector3",
],
function ($, Quaternion, Vector3)
{
	var
		xAxis = new Vector3 (1, 0, 0),
		yAxis = new Vector3 (0, 1, 0);

	function Rotation4 (x, y, z, angle)
	{
		switch (arguments .length)
		{
			case 0:
			{
				this .value = new Quaternion (0, 0, 0, 1);
				return;
			}
			case 1:
			{
				this .value = arguments [0];
				return;
			}
			case 2:
			{
				this .value = new Quaternion (0, 0, 0, 1);

				if (arguments [1] instanceof Vector3)
				   return this .setFromTo (arguments [0], arguments [1]);
				
				this .set (arguments [0] .x,
				           arguments [0] .y,
				           arguments [0] .z,
				           arguments [1]);
			
			   break;
			}
			case 4:
			{
				this .value = new Quaternion (0, 0, 0, 1);
				this .set (x, y, z, angle);
				return;
			}
		}
	}

	Rotation4 .prototype =
	{
		constructor: Rotation4,
		length: 4,
		copy: function ()
		{
			var copy = Object .create (Rotation4 .prototype);
			copy .value = this .value .copy ();
			return copy;
		},
		assign: function (rotation)
		{
			this .value .assign (rotation .value);
			return this;
		},
		set: function (x, y, z, angle)
		{
			var scale = Math .sqrt (x * x + y * y + z * z);

			if (scale === 0)
			{
				this .value .set (0, 0, 0, 1);
				return this;
			}

			// Calculate quaternion

			var halfTheta = angle / 2;
			scale = Math .sin (halfTheta) / scale;

			this .value .set (x * scale,
			                  y * scale,
			                  z * scale,
			                  Math .cos (halfTheta));
			return this;
		},
		get: function ()
		{
			if (Math .abs (this .value .w) === 1)
				return [0, 0, 1, 0];

			var vector = this .value .imag .normalize ();

			return [ vector .x,
				      vector .y,
				      vector .z,
				      2 * Math .acos (this .value .w) ];
		},
		setFromTo: function (fromVec, toVec)
		{
			// https://bitbucket.org/Coin3D/coin/src/abc9f50968c9/src/base/SbRotation.cpp

			var
				from = Vector3 .normalize (fromVec),
				to   = Vector3 .normalize (toVec);

			var
				cos_angle = from .dot (to),
				crossvec  = Vector3 .cross (from, to) .normalize (),
				crosslen  = crossvec .abs ();

			if (crosslen === 0)
			{
				// Parallel vectors
				// Check if they are pointing in the same direction.
				if (cos_angle > 0)
					this .value = new Quaternion (0, 0, 0, 1); // standard rotation

				// Ok, so they are parallel and pointing in the opposite direction
				// of each other.
				else
				{
					// Try crossing with x axis.
					var t = Vector3 .cross (from, xAxis);

					// If not ok, cross with y axis.
					if (t .norm () === 0)
						t = Vector3 .cross (from , yAxis);

					t .normalize ();

					this .value .set (t .x, t .y, t .z, 0);
				}
			}
			else
			{
				// Vectors are not parallel
				// The abs () wrapping is to avoid problems when `dot' "overflows" a tiny wee bit,
				// which can lead to sqrt () returning NaN.
				crossvec .multiply (Math .sqrt (Math .abs (1 - cos_angle) / 2));

				this .value .set (crossvec .x,
				                  crossvec .y,
				                  crossvec .z,
				                  Math .sqrt (Math .abs (1 + cos_angle) / 2));
			}
		},
		getAxis: function ()
		{
			if (Math .abs (this .value .w) === 1)
				return new Vector3 (0, 0, 1);

			return this .value .imag .normalize ();
		},
		equals: function (rot)
		{
			return this .value .equals (rot .value);
		},
		inverse: function ()
		{
			this .value .inverse ();
			return this;
		},
		multLeft: function (rot)
		{
			this .value .multLeft (rot .value) .normalize ();
			return this;
		},
		multRight: function (rot)
		{
			this .value .multRight (rot .value) .normalize ();
			return this;
		},
		multVecRot: function (vector)
		{
			return this .value .multVecQuat (vector);
		},
		multRotVec: function (vector)
		{
			return this .value .multQuatVec (vector);
		},
		slerp: function (dest, t)
		{
			this .value .slerp (dest .value, t);
			return this;
		},
		toString: function ()
		{
			var r = this .get ();
			return r [0] + " " +
			       r [1] + " " +
			       r [2] + " " +
			       r [3];
		}
	};

	Object .defineProperty (Rotation4 .prototype, "x",
	{
		get: function ()
		{
			return this .getAxis () .x;
		},
		set: function (value)
		{
			var r = this .get ();
			this .set (value, r [1], r [2], r [3]);
		},
		enumerable: false,
		configurable: false
	});

	Object .defineProperty (Rotation4 .prototype, "0",
	{
		get: function ()
		{
			return this .getAxis () .x;
		},
		set: function (value)
		{
			var r = this .get ();
			this .set (value, r [1], r [2], r [3]);
		},
		enumerable: false,
		configurable: false
	});

	Object .defineProperty (Rotation4 .prototype, "y",
	{
		get: function ()
		{
			return this .getAxis () .y;
		},
		set: function (value)
		{
			var r = this .get ();
			this .set (r [0], value, r [2], r [3]);
		},
		enumerable: false,
		configurable: false
	});

	Object .defineProperty (Rotation4 .prototype, "1",
	{
		get: function ()
		{
			return this .getAxis () .y;
		},
		set: function (value)
		{
			var r = this .get ();
			this .set (r [0], value, r [2], r [3]);
		},
		enumerable: false,
		configurable: false
	});

	Object .defineProperty (Rotation4 .prototype, "z",
	{
		get: function ()
		{
			return this .getAxis () .z;
		},
		set: function (value)
		{
			var r = this .get ();
			this .set (r [0], r [1], value, r [3]);
		},
		enumerable: false,
		configurable: false
	});

	Object .defineProperty (Rotation4 .prototype, "2",
	{
		get: function ()
		{
			return this .getAxis () .z;
		},
		set: function (value)
		{
			var r = this .get ();
			this .set (r [0], r [1], value, r [3]);
		},
		enumerable: false,
		configurable: false
	});

	Object .defineProperty (Rotation4 .prototype, "angle",
	{
		get: function ()
		{
			if (Math .abs (this .value .w === 1))
				return 0;

			return 2 * Math .acos (this .value .w);
		},
		set: function (value)
		{
			var v = this .getAxis ();
			this .set (v .x, v .y, v .z, value);
		},
		enumerable: false,
		configurable: false
	});

	Object .defineProperty (Rotation4 .prototype, "3",
	{
		get: function ()
		{
			if (Math .abs (this .value .w === 1))
				return 0;

			return 2 * Math .acos (this .value .w);
		},
		set: function (value)
		{
			var v = this .getAxis ();
			this .set (v .x, v .y, v .z, value);
		},
		enumerable: false,
		configurable: false
	});

	$.extend (Rotation4,
	{
		Identity: new Rotation4 (),
		Matrix3: function (matrix)
		{
			return new Rotation4 (Quaternion .Matrix3 (matrix));
		},
		inverse: function (rotation)
		{
			var copy = Object .create (this .prototype);
			copy .value = Quaternion .inverse (rotation .value);
			return copy;
		},
		multRight: function (lhs, rhs)
		{
			var copy = Object .create (this .prototype);
			copy .value = Quaternion .multRight (lhs .value, rhs .value);
			return copy;
		},
		slerp: function (source, destination, t)
		{
			return new Rotation4 (Quaternion .slerp (source .value, destination .value, t));
		},
		squad: function (source, a, b, destination, t)
		{
			return new Rotation4 (Quaternion .squad (source .value, a, b, destination .value, t));
		},
		bezier: function (source, a, b, destination, t)
		{
			return new Rotation4 (Quaternion .bezier (source .value, a, b, destination .value, t));
		},
		spline: function (q0, a1, q2)
		{
			return new Rotation4 (Quaternion .spline (q0 .value, q1 .value, q2 .value));
		},
	});

	return Rotation4;
});

define ('standard/Math/Numbers/Matrix4',[
	"jquery",
	"standard/Math/Numbers/Vector3",
	"standard/Math/Numbers/Vector4",
	"standard/Math/Numbers/Rotation4",
	"standard/Math/Numbers/Matrix3",
	"standard/Math/Algorithms/eigendecomposition",
],
function ($, Vector3, Vector4, Rotation4, Matrix3, eigendecomposition)
{
	var
		dummyTranslation      = new Vector3 (0, 0, 0),
		dummyRotation         = new Rotation4 (),
		dummyScale            = new Vector3 (0, 0, 0),
		dummyScaleOrientation = new Rotation4 (),
		dummyCenter           = new Vector3 (0, 0, 0),
		rot                   = new Matrix3 (),
		so                    = new Matrix3 (),
		si                    = new Matrix3 ();

	function Matrix4 ()
	{
		if (arguments .length)
		{
			this [ 0] = arguments [ 0];
			this [ 1] = arguments [ 1];
			this [ 2] = arguments [ 2];
			this [ 3] = arguments [ 3];
			this [ 4] = arguments [ 4];
			this [ 5] = arguments [ 5];
			this [ 6] = arguments [ 6];
			this [ 7] = arguments [ 7];
			this [ 8] = arguments [ 8];
			this [ 9] = arguments [ 9];
			this [10] = arguments [10];
			this [11] = arguments [11];
			this [12] = arguments [12];
			this [13] = arguments [13];
			this [14] = arguments [14];
			this [15] = arguments [15];
		}
		else
			this .identity ();
	}

	Matrix4 .prototype =
	{
		constructor: Matrix4,
		order: 4,
		length: 16,
		copy: function ()
		{
			var copy = Object .create (Matrix4 .prototype);
			copy [ 0] = this [ 0];
			copy [ 1] = this [ 1];
			copy [ 2] = this [ 2];
			copy [ 3] = this [ 3];
			copy [ 4] = this [ 4];
			copy [ 5] = this [ 5];
			copy [ 6] = this [ 6];
			copy [ 7] = this [ 7];
			copy [ 8] = this [ 8];
			copy [ 9] = this [ 9];
			copy [10] = this [10];
			copy [11] = this [11];
			copy [12] = this [12];
			copy [13] = this [13];
			copy [14] = this [14];
			copy [15] = this [15];
			return copy;
		},
		assign: function (matrix)
		{
			this [ 0] = matrix [ 0];
			this [ 1] = matrix [ 1];
			this [ 2] = matrix [ 2];
			this [ 3] = matrix [ 3];
			this [ 4] = matrix [ 4];
			this [ 5] = matrix [ 5];
			this [ 6] = matrix [ 6];
			this [ 7] = matrix [ 7];
			this [ 8] = matrix [ 8];
			this [ 9] = matrix [ 9];
			this [10] = matrix [10];
			this [11] = matrix [11];
			this [12] = matrix [12];
			this [13] = matrix [13];
			this [14] = matrix [14];
			this [15] = matrix [15];
			return this;
		},
		equals: function (matrix)
		{
			return this [ 0] === matrix [ 0] &&
			       this [ 1] === matrix [ 1] &&
			       this [ 2] === matrix [ 2] &&
			       this [ 3] === matrix [ 3] &&
			       this [ 4] === matrix [ 4] &&
			       this [ 5] === matrix [ 5] &&
			       this [ 6] === matrix [ 6] &&
			       this [ 7] === matrix [ 7] &&
			       this [ 8] === matrix [ 8] &&
			       this [ 9] === matrix [ 9] &&
			       this [10] === matrix [10] &&
			       this [11] === matrix [11] &&
			       this [12] === matrix [12] &&
			       this [13] === matrix [13] &&
			       this [14] === matrix [14] &&
			       this [15] === matrix [15];
		},
		set1: function (r, c, value)
		{
			this [r * this .order + c] = value;
		},
		get1: function (r, c)
		{
			return this [r * this .order + c];
		},
		set: function (translation, rotation, scale, scaleOrientation, center)
		{
			switch (arguments .length)
			{
				case 0:
				{
					this .identity ();
					break;
				}
				case 1:
				{
					if (translation === null) translation = Vector3 .Zero;

					this .identity ();
					this .translate (translation);
					break;
				}
				case 2:
				{
					if (translation === null) translation = Vector3 .Zero;
					if (rotation    === null) rotation    = Rotation4 .Identity;

					this .identity ();
					this .translate (translation);

					if (! rotation .equals (Rotation4 .Identity))
						this .rotate (rotation);

					break;
				}
				case 3:
				{
					if (translation === null) translation = Vector3 .Zero;
					if (rotation    === null) rotation    = Rotation4 .Identity;
					if (scale       === null) scale       = Vector3 .One;

					this .identity ();
					this .translate (translation);

					if (! rotation .equals (Rotation4 .Identity))
						this .rotate (rotation);

					if (! scale .equals (Vector3 .One))
						this .scale  (scale);

					break;
				}
				case 4:
				{
					if (translation      === null) translation      = Vector3 .Zero;
					if (rotation         === null) rotation         = Rotation4 .Identity;
					if (scale            === null) scale            = Vector3 .One;
					if (scaleOrientation === null) scaleOrientation = Rotation4 .Identity;

					this .identity ();
					this .translate (translation);

					if (! rotation .equals (Rotation4 .Identity))
						this .rotate (rotation);

					if (! scale .equals (Vector3 .One))
					{
						var hasScaleOrientation = ! scaleOrientation .equals (Rotation4 .Identity);

						if (hasScaleOrientation)
						{
							this .rotate (scaleOrientation);
							this .scale (scale);
							this .rotate (Rotation4 .inverse (scaleOrientation));
						}
						else
							this .scale (scale);
					}

					break;
				}
				case 5:
				{
					if (translation      === null) translation      = Vector3 .Zero;
					if (rotation         === null) rotation         = Rotation4 .Identity;
					if (scale            === null) scale            = Vector3 .One;
					if (scaleOrientation === null) scaleOrientation = Rotation4 .Identity;
					if (center           === null) center           = Vector3 .Zero;

					// P' = T * C * R * SR * S * -SR * -C * P
					this .identity ();
					this .translate (translation);

					var hasCenter = ! center .equals (Vector3 .Zero);

					if (hasCenter)
						this .translate (center);

					if (! rotation .equals (Rotation4 .Identity))
						this .rotate (rotation);

					if (! scale .equals (Vector3 .One))
					{
						if (! scaleOrientation .equals (Rotation4 .Identity))
						{
							this .rotate (scaleOrientation);
							this .scale (scale);
							this .rotate (Rotation4 .inverse (scaleOrientation));
						}
						else
							this .scale (scale);
					}

					if (hasCenter)
						this .translate (Vector3 .negate (center));

					break;
				}
				case 16:
				{
					this [ 0] = arguments [ 0];
					this [ 1] = arguments [ 1];
					this [ 2] = arguments [ 2];
					this [ 3] = arguments [ 3];
					this [ 4] = arguments [ 4];
					this [ 5] = arguments [ 5];
					this [ 6] = arguments [ 6];
					this [ 7] = arguments [ 7];
					this [ 8] = arguments [ 8];
					this [ 9] = arguments [ 9];
					this [10] = arguments [10];
					this [11] = arguments [11];
					this [12] = arguments [12];
					this [13] = arguments [13];
					this [14] = arguments [14];
					this [15] = arguments [15];
					break;
				}
			}
		},
		get: function (translation, rotation, scale, scaleOrientation, center)
		{
			if (translation      === null) translation      = dummyTranslation;
			if (rotation         === null) rotation         = dummyRotation;
			if (scale            === null) scale            = dummyScale;
			if (scaleOrientation === null) scaleOrientation = dummyScaleOrientation;
			if (center           === null) center           = dummyCenter;

			switch (arguments .length)
			{
				case 1:
				{
					translation .set (this [12], this [13], this [14]);
					break;
				}
				case 2:
				{
					this .factor (translation, rot, dummyScale, so);
					rotation .assign (Rotation4 .Matrix3 (rot));
					break;
				}
				case 3:
				{
					this .factor (translation, rot, scale, so);
					rotation .assign (Rotation4 .Matrix3 (rot));
					break;
				}
				case 4:
				{
					this .factor (translation, rot, scale, so);
					rotation .assign (Rotation4 .Matrix3 (rot));
					scaleOrientation .assign (Rotation4 .Matrix3 (so));
					break;
				}
				case 5:
				{
					var m = new Matrix4 ();

					m .set (Vector3 .negate (center));
					m .multLeft (this);
					m .translate (center);

					m .get (translation, rotation, scale, scaleOrientation);
					break;
				}
			}
		},
		factor: function (translation, rotation, scale, scaleOrientation)
		{
			// (1) Get translation.
			translation .set (this [12], this [13], this [14]);

			// (2) Create 3x3 matrix.
			var a = this .submatrix;

			// (3) Compute det A. If negative, set sign = -1, else sign = 1
			var det      = a .determinant ();
			var det_sign = det < 0 ? -1 : 1;

			if (det_sign * det === 0)
				return falsesingular

			// (4) B = A * !A  (here !A means A transpose)
			var
				b = Matrix3 .transpose (a) .multLeft (a),
				e = eigendecomposition (b);

			// Find min / max eigenvalues and do ratio test to determine singularity.

			scaleOrientation .set (e .vectors [0] [0], e .vectors [0] [1], e .vectors [0] [2],
			                       e .vectors [1] [0], e .vectors [1] [1], e .vectors [1] [2],
			                       e .vectors [2] [0], e .vectors [2] [1], e .vectors [2] [2]);

			// Compute s = sqrt(evalues), with sign. Set si = s-inverse

			scale .x = det_sign * Math .sqrt (e .values [0]);
			scale .y = det_sign * Math .sqrt (e .values [1]);
			scale .z = det_sign * Math .sqrt (e .values [2]);

			si [0] = 1 / scale .x;
			si [4] = 1 / scale .y;
			si [8] = 1 / scale .z;

			// (5) Compute U = !R ~S R A.
			rotation .assign (Matrix3 .multRight (scaleOrientation, si) .transpose () .multLeft (scaleOrientation) .multRight (a));

			scaleOrientation .transpose ();
			return true;
		},
		determinant3: function ()
		{
			var
				m00 = this [0], m01 = this [1], m02 = this [ 2],
				m04 = this [4], m05 = this [5], m06 = this [ 6],
				m08 = this [8], m09 = this [9], m10 = this [10];

			return m00 * (m05 * m10 - m06 * m09) -
			       m01 * (m04 * m10 - m06 * m08) +
			       m02 * (m04 * m09 - m05 * m08);
		},
		determinant: function ()
		{
			var
				m00 = this [ 0],
				m01 = this [ 1],
				m02 = this [ 2],
				m03 = this [ 3],
				m04 = this [ 4],
				m05 = this [ 5],
				m06 = this [ 6],
				m07 = this [ 7],
				m08 = this [ 8],
				m09 = this [ 9],
				m10 = this [10],
				m11 = this [11],
				m12 = this [12],
				m13 = this [13],
				m14 = this [14],
				m15 = this [15],
				b = m10 * m15,
				c = m14 * m11,
				d = m06 * m15,
				e = m14 * m07,
				f = m06 * m11,
				g = m10 * m07,
				h = m02 * m15,
				i = m14 * m03,
				j = m02 * m11,
				o = m10 * m03,
				r = m02 * m07,
				x = m06 * m03,
				H = b * m05 + e * m09 + f * m13 - (c * m05) - (d * m09) - (g * m13),
				I = c * m01 + h * m09 + o * m13 - (b * m01) - (i * m09) - (j * m13),
				J = d * m01 + i * m05 + r * m13 - (e * m01) - (h * m05) - (x * m13),
				K = g * m01 + j * m05 + x * m09 - (f * m01) - (o * m05) - (r * m09);

			return m00 * H + m04 * I + m08 * J + m12 * K;
		},
		transpose: function ()
		{
			var tmp;
			
			tmp = this [ 1]; this [ 1] = this [ 4]; this [ 1] = tmp;
			tmp = this [ 2]; this [ 2] = this [ 8]; this [ 2] = tmp;
			tmp = this [ 3]; this [ 3] = this [12]; this [ 3] = tmp;
			tmp = this [ 6]; this [ 6] = this [ 9]; this [ 6] = tmp;
			tmp = this [ 7]; this [ 7] = this [13]; this [ 7] = tmp;
			tmp = this [11]; this [11] = this [14]; this [11] = tmp;

			return this;
		},
		inverse: function ()
		{
			var
				m00 = this [ 0],
				m01 = this [ 1],
				m02 = this [ 2],
				m03 = this [ 3],
				m04 = this [ 4],
				m05 = this [ 5],
				m06 = this [ 6],
				m07 = this [ 7],
				m08 = this [ 8],
				m09 = this [ 9],
				m10 = this [10],
				m11 = this [11],
				m12 = this [12],
				m13 = this [13],
				m14 = this [14],
				m15 = this [15],
				b = m10 * m15,
				c = m14 * m11,
				d = m06 * m15,
				e = m14 * m07,
				f = m06 * m11,
				g = m10 * m07,
				h = m02 * m15,
				i = m14 * m03,
				j = m02 * m11,
				o = m10 * m03,
				r = m02 * m07,
				x = m06 * m03,
				t = m08 * m13,
				p = m12 * m09,
				v = m04 * m13,
				s = m12 * m05,
				y = m04 * m09,
				z = m08 * m05,
				A = m00 * m13,
				C = m12 * m01,
				D = m00 * m09,
				E = m08 * m01,
				F = m00 * m05,
				G = m04 * m01,
				H = b * m05 + e * m09 + f * m13 - ((c * m05) + (d * m09) + (g * m13)),
				I = c * m01 + h * m09 + o * m13 - ((b * m01) + (i * m09) + (j * m13)),
				J = d * m01 + i * m05 + r * m13 - ((e * m01) + (h * m05) + (x * m13)),
				K = g * m01 + j * m05 + x * m09 - ((f * m01) + (o * m05) + (r * m09)),
				B = m00 * H + m04 * I + m08 * J + m12 * K;

			if (B == 0)
				throw Error ("Matrix4 .inverse: determinant is 0.");

			B = 1 / B;

			this [ 0] = B * H;
			this [ 1] = B * I;
			this [ 2] = B * J;
			this [ 3] = B * K;
			this [ 4] = B * (c * m04 + d * m08 + g * m12 - (b * m04) - (e * m08) - (f * m12));
			this [ 5] = B * (b * m00 + i * m08 + j * m12 - (c * m00) - (h * m08) - (o * m12));
			this [ 6] = B * (e * m00 + h * m04 + x * m12 - (d * m00) - (i * m04) - (r * m12));
			this [ 7] = B * (f * m00 + o * m04 + r * m08 - (g * m00) - (j * m04) - (x * m08));
			this [ 8] = B * (t * m07 + s * m11 + y * m15 - (p * m07) - (v * m11) - (z * m15));
			this [ 9] = B * (p * m03 + A * m11 + E * m15 - (t * m03) - (C * m11) - (D * m15));
			this [10] = B * (v * m03 + C * m07 + F * m15 - (s * m03) - (A * m07) - (G * m15));
			this [11] = B * (z * m03 + D * m07 + G * m11 - (y * m03) - (E * m07) - (F * m11));
			this [12] = B * (v * m10 + z * m14 + p * m06 - (y * m14) - (t * m06) - (s * m10));
			this [13] = B * (D * m14 + t * m02 + C * m10 - (A * m10) - (E * m14) - (p * m02));
			this [14] = B * (A * m06 + G * m14 + s * m02 - (F * m14) - (v * m02) - (C * m06));
			this [15] = B * (F * m10 + y * m02 + E * m06 - (D * m06) - (G * m10) - (z * m02));

			return this;
		},
		multLeft: function (matrix)
		{
			var
				a00 = this [ 0], a01 = this [ 1], a02 = this [ 2], a03 = this [ 3],
				a04 = this [ 4], a05 = this [ 5], a06 = this [ 6], a07 = this [ 7],
				a08 = this [ 8], a09 = this [ 9], a10 = this [10], a11 = this [11],
				a12 = this [12], a13 = this [13], a14 = this [14], a15 = this [15],
				b00 = matrix [ 0], b01 = matrix [ 1], b02 = matrix [ 2], b03 = matrix [ 3],
				b04 = matrix [ 4], b05 = matrix [ 5], b06 = matrix [ 6], b07 = matrix [ 7],
				b08 = matrix [ 8], b09 = matrix [ 9], b10 = matrix [10], b11 = matrix [11],
				b12 = matrix [12], b13 = matrix [13], b14 = matrix [14], b15 = matrix [15];

			this [ 0] = a00 * b00 + a04 * b01 + a08 * b02 + a12 * b03;
			this [ 1] = a01 * b00 + a05 * b01 + a09 * b02 + a13 * b03;
			this [ 2] = a02 * b00 + a06 * b01 + a10 * b02 + a14 * b03;
			this [ 3] = a03 * b00 + a07 * b01 + a11 * b02 + a15 * b03;
			this [ 4] = a00 * b04 + a04 * b05 + a08 * b06 + a12 * b07;
			this [ 5] = a01 * b04 + a05 * b05 + a09 * b06 + a13 * b07;
			this [ 6] = a02 * b04 + a06 * b05 + a10 * b06 + a14 * b07;
			this [ 7] = a03 * b04 + a07 * b05 + a11 * b06 + a15 * b07;
			this [ 8] = a00 * b08 + a04 * b09 + a08 * b10 + a12 * b11;
			this [ 9] = a01 * b08 + a05 * b09 + a09 * b10 + a13 * b11;
			this [10] = a02 * b08 + a06 * b09 + a10 * b10 + a14 * b11;
			this [11] = a03 * b08 + a07 * b09 + a11 * b10 + a15 * b11;
			this [12] = a00 * b12 + a04 * b13 + a08 * b14 + a12 * b15;
			this [13] = a01 * b12 + a05 * b13 + a09 * b14 + a13 * b15;
			this [14] = a02 * b12 + a06 * b13 + a10 * b14 + a14 * b15;
			this [15] = a03 * b12 + a07 * b13 + a11 * b14 + a15 * b15;

			return this;
		},
		multRight: function (matrix)
		{
			var
				a00 = this [ 0], a01 = this [ 1], a02 = this [ 2], a03 = this [ 3],
				a04 = this [ 4], a05 = this [ 5], a06 = this [ 6], a07 = this [ 7],
				a08 = this [ 8], a09 = this [ 9], a10 = this [10], a11 = this [11],
				a12 = this [12], a13 = this [13], a14 = this [14], a15 = this [15],
				b00 = matrix [ 0], b01 = matrix [ 1], b02 = matrix [ 2], b03 = matrix [ 3],
				b04 = matrix [ 4], b05 = matrix [ 5], b06 = matrix [ 6], b07 = matrix [ 7],
				b08 = matrix [ 8], b09 = matrix [ 9], b10 = matrix [10], b11 = matrix [11],
				b12 = matrix [12], b13 = matrix [13], b14 = matrix [14], b15 = matrix [15];

			this [ 0] = a00 * b00 + a01 * b04 + a02 * b08 + a03 * b12;
			this [ 1] = a00 * b01 + a01 * b05 + a02 * b09 + a03 * b13;
			this [ 2] = a00 * b02 + a01 * b06 + a02 * b10 + a03 * b14;
			this [ 3] = a00 * b03 + a01 * b07 + a02 * b11 + a03 * b15;
			this [ 4] = a04 * b00 + a05 * b04 + a06 * b08 + a07 * b12;
			this [ 5] = a04 * b01 + a05 * b05 + a06 * b09 + a07 * b13;
			this [ 6] = a04 * b02 + a05 * b06 + a06 * b10 + a07 * b14;
			this [ 7] = a04 * b03 + a05 * b07 + a06 * b11 + a07 * b15;
			this [ 8] = a08 * b00 + a09 * b04 + a10 * b08 + a11 * b12;
			this [ 9] = a08 * b01 + a09 * b05 + a10 * b09 + a11 * b13;
			this [10] = a08 * b02 + a09 * b06 + a10 * b10 + a11 * b14;
			this [11] = a08 * b03 + a09 * b07 + a10 * b11 + a11 * b15;
			this [12] = a12 * b00 + a13 * b04 + a14 * b08 + a15 * b12;
			this [13] = a12 * b01 + a13 * b05 + a14 * b09 + a15 * b13;
			this [14] = a12 * b02 + a13 * b06 + a14 * b10 + a15 * b14;
			this [15] = a12 * b03 + a13 * b07 + a14 * b11 + a15 * b15;

			return this;
		},
		multVecMatrix: function (vector)
		{
			if (vector .length === 3)
			{
				var
					x = vector .x,
					y = vector .y,
					z = vector .z,
					w = 1 / (x * this [3] + y * this [7] + z * this [11] + this [15]);

				vector .x = (x * this [0] + y * this [4] + z * this [ 8] + this [12]) * w;
				vector .y = (x * this [1] + y * this [5] + z * this [ 9] + this [13]) * w;
				vector .z = (x * this [2] + y * this [6] + z * this [10] + this [14]) * w;
				
				return vector;
			}

			var
				x = vector .x,
				y = vector .y,
				z = vector .z,
				w = vector .w;

			vector .x = x * this [0] + y * this [4] + z * this [ 8] + w * this [12];
			vector .y = x * this [1] + y * this [5] + z * this [ 9] + w * this [13];
			vector .z = x * this [2] + y * this [6] + z * this [10] + w * this [14];
			vector .w = x * this [3] + y * this [7] + z * this [11] + w * this [15];

			return vector;
		},
		multMatrixVec: function (vector)
		{
			if (vector .length === 3)
			{
				var
					x = vector .x,
					y = vector .y,
					z = vector .z,
					w = 1 / (x * this [12] + y * this [13] + z * this [14] + this [15]);

				vector .x = (x * this [0] + y * this [1] + z * this [ 2] + this [ 3]) * w;
				vector .y = (x * this [4] + y * this [5] + z * this [ 6] + this [ 7]) * w;
				vector .z = (x * this [8] + y * this [9] + z * this [10] + this [11]) * w;

				return vector;
			}
			
			var
				x = vector .x,
				y = vector .y,
				z = vector .z,
				w = vector .w;

			vector .x = x * this [ 0] + y * this [ 1] + z * this [ 2] + w * this [ 3];
			vector .y = x * this [ 4] + y * this [ 5] + z * this [ 6] + w * this [ 7];
			vector .z = x * this [ 8] + y * this [ 9] + z * this [10] + w * this [11];
			vector .w = x * this [12] + y * this [13] + z * this [14] + w * this [15];

			return vector;
		},
		multDirMatrix: function (vector)
		{
			var
				x = vector .x,
				y = vector .y,
				z = vector .z;

			vector .x = x * this [0] + y * this [4] + z * this [ 8];
			vector .y = x * this [1] + y * this [5] + z * this [ 9];
			vector .z = x * this [2] + y * this [6] + z * this [10];

			return vector;
		},
		multMatrixDir: function (vector)
		{
			var
				x = vector .x,
				y = vector .y,
				z = vector .z;

			vector .x = x * this [0] + y * this [1] + z * this [ 2];
			vector .y = x * this [4] + y * this [5] + z * this [ 6];
			vector .z = x * this [8] + y * this [9] + z * this [10];

			return vector;
		},
		identity: function ()
		{
			this [ 0] = 1; this [ 1] = 0; this [ 2] = 0; this [ 3] = 0;
			this [ 4] = 0; this [ 5] = 1; this [ 6] = 0; this [ 7] = 0;
			this [ 8] = 0; this [ 9] = 0; this [10] = 1; this [11] = 0;
			this [12] = 0; this [13] = 0; this [14] = 0; this [15] = 1;
		},
		translate: function (translation)
		{
			var
				x = translation .x,
				y = translation .y,
				z = translation .z;

			this [12] += this [ 0] * x + this [ 4] * y + this [ 8] * z;
			this [13] += this [ 1] * x + this [ 5] * y + this [ 9] * z;
			this [14] += this [ 2] * x + this [ 6] * y + this [10] * z;
		},
		rotate: function (rotation)
		{
			this .multLeft (Matrix4 .Quaternion (rotation .value));
		},
		scale: function (scale)
		{
			var
				x = scale .x,
				y = scale .y,
				z = scale .z;

			this [ 0] *= x;
			this [ 4] *= y;
			this [ 8] *= z;

			this [ 1] *= x;
			this [ 5] *= y;
			this [ 9] *= z;

			this [ 2] *= x;
			this [ 6] *= y;
			this [10] *= z;
		},
		toString: function ()
		{
			return this [ 0] + " " + this [ 1] + " " + this [ 2] + " " + this [ 3] + " " +
			       this [ 4] + " " + this [ 5] + " " + this [ 6] + " " + this [ 7] + " " +
			       this [ 8] + " " + this [ 9] + " " + this [10] + " " + this [11] + " " +
			       this [12] + " " + this [13] + " " + this [14] + " " + this [15]
		},
	};

	Object .defineProperty (Matrix4 .prototype, "x",
	{
		get: function () { return new Vector3 (this [ 0], this [ 1], this [ 2]); },
		enumerable: false,
		configurable: false
	});

	Object .defineProperty (Matrix4 .prototype, "y",
	{
		get: function () { return new Vector3 (this [ 4], this [ 5], this [ 6]); },
		enumerable: false,
		configurable: false
	});

	Object .defineProperty (Matrix4 .prototype, "z",
	{
		get: function () { return new Vector3 (this [ 8], this [ 9], this [10]); },
		enumerable: false,
		configurable: false
	});

	Object .defineProperty (Matrix4 .prototype, "origin",
	{
		get: function () { return new Vector3 (this [12], this [13], this [14]); },
		enumerable: false,
		configurable: false
	});

	Object .defineProperty (Matrix4 .prototype, "submatrix",
	{
		get: function ()
		{
			var matrix = Object .create (Matrix3 .prototype);
			matrix [0] = this [ 0]; matrix [1] = this [ 1]; matrix [2] = this [ 2];
			matrix [3] = this [ 4]; matrix [4] = this [ 5]; matrix [5] = this [ 6];
			matrix [6] = this [ 8]; matrix [7] = this [ 9]; matrix [8] = this [10];
			return matrix;
		},
		enumerable: false,
		configurable: false
	});

	$.extend (Matrix4,
	{
		Identity: new Matrix4 (),
		Rotation: function (rotation)
		{
			return Matrix4 .Quaternion (rotation .value);
		},
		Quaternion: function (quaternion)
		{
			var
				x = quaternion .x,
				y = quaternion .y,
				z = quaternion .z,
				w = quaternion .w,
				A = y * y,
				B = z * z,
				C = x * y,
				D = z * w,
				E = z * x,
				F = y * w,
				G = x * x,
				H = y * z,
				I = x * w;

			return new Matrix4 (1 - 2 * (A + B),     2 * (C + D),     2 * (E - F), 0,
					                  2 * (C - D), 1 - 2 * (B + G),     2 * (H + I), 0,
					                  2 * (E + F),     2 * (H - I), 1 - 2 * (A + G), 0,
				                               0,               0,               0, 1);
		},
		Matrix3: function (matrix)
		{
			return new Matrix4 (matrix [0], matrix [1], matrix [2], 0,
			                    matrix [3], matrix [4], matrix [5], 0,
			                    matrix [6], matrix [7], matrix [8], 0,
			                    0, 0, 0, 1);
		},
		transpose: function (matrix)
		{
			var copy = Object .create (this .prototype);
			copy [ 0] = matrix [ 0]; copy [ 1] = matrix [ 4]; copy [ 2] = matrix [ 8]; copy [ 3] = matrix [12];
			copy [ 4] = matrix [ 1]; copy [ 5] = matrix [ 5]; copy [ 6] = matrix [ 9]; copy [ 7] = matrix [13];
			copy [ 8] = matrix [ 2]; copy [ 9] = matrix [ 6]; copy [10] = matrix [10]; copy [11] = matrix [14];
			copy [12] = matrix [ 3]; copy [13] = matrix [ 7]; copy [14] = matrix [11]; copy [15] = matrix [15];
			return copy;
		},
		inverse: function (matrix)
		{
			var
				copy = Object .create (this .prototype),
				m00 = matrix [ 0],
				m01 = matrix [ 1],
				m02 = matrix [ 2],
				m03 = matrix [ 3],
				m04 = matrix [ 4],
				m05 = matrix [ 5],
				m06 = matrix [ 6],
				m07 = matrix [ 7],
				m08 = matrix [ 8],
				m09 = matrix [ 9],
				m10 = matrix [10],
				m11 = matrix [11],
				m12 = matrix [12],
				m13 = matrix [13],
				m14 = matrix [14],
				m15 = matrix [15],
				b = m10 * m15,
				c = m14 * m11,
				d = m06 * m15,
				e = m14 * m07,
				f = m06 * m11,
				g = m10 * m07,
				h = m02 * m15,
				i = m14 * m03,
				j = m02 * m11,
				o = m10 * m03,
				r = m02 * m07,
				x = m06 * m03,
				t = m08 * m13,
				p = m12 * m09,
				v = m04 * m13,
				s = m12 * m05,
				y = m04 * m09,
				z = m08 * m05,
				A = m00 * m13,
				C = m12 * m01,
				D = m00 * m09,
				E = m08 * m01,
				F = m00 * m05,
				G = m04 * m01,
				H = b * m05 + e * m09 + f * m13 - ((c * m05) + (d * m09) + (g * m13)),
				I = c * m01 + h * m09 + o * m13 - ((b * m01) + (i * m09) + (j * m13)),
				J = d * m01 + i * m05 + r * m13 - ((e * m01) + (h * m05) + (x * m13)),
				K = g * m01 + j * m05 + x * m09 - ((f * m01) + (o * m05) + (r * m09)),
				B = m00 * H + m04 * I + m08 * J + m12 * K;

			if (B == 0)
				throw Error ("Matrix4 .inverse: determinant is 0.");

			B = 1 / B;

			copy [ 0] = B * H;
			copy [ 1] = B * I;
			copy [ 2] = B * J;
			copy [ 3] = B * K;
			copy [ 4] = B * (c * m04 + d * m08 + g * m12 - (b * m04) - (e * m08) - (f * m12));
			copy [ 5] = B * (b * m00 + i * m08 + j * m12 - (c * m00) - (h * m08) - (o * m12));
			copy [ 6] = B * (e * m00 + h * m04 + x * m12 - (d * m00) - (i * m04) - (r * m12));
			copy [ 7] = B * (f * m00 + o * m04 + r * m08 - (g * m00) - (j * m04) - (x * m08));
			copy [ 8] = B * (t * m07 + s * m11 + y * m15 - (p * m07) - (v * m11) - (z * m15));
			copy [ 9] = B * (p * m03 + A * m11 + E * m15 - (t * m03) - (C * m11) - (D * m15));
			copy [10] = B * (v * m03 + C * m07 + F * m15 - (s * m03) - (A * m07) - (G * m15));
			copy [11] = B * (z * m03 + D * m07 + G * m11 - (y * m03) - (E * m07) - (F * m11));
			copy [12] = B * (v * m10 + z * m14 + p * m06 - (y * m14) - (t * m06) - (s * m10));
			copy [13] = B * (D * m14 + t * m02 + C * m10 - (A * m10) - (E * m14) - (p * m02));
			copy [14] = B * (A * m06 + G * m14 + s * m02 - (F * m14) - (v * m02) - (C * m06));
			copy [15] = B * (F * m10 + y * m02 + E * m06 - (D * m06) - (G * m10) - (z * m02));

			return copy;
		},
		multLeft: function (lhs, rhs)
		{
			var
				copy = Object .create (this .prototype),
				a00 = lhs [ 0], a01 = lhs [ 1], a02 = lhs [ 2], a03 = lhs [ 3],
				a04 = lhs [ 4], a05 = lhs [ 5], a06 = lhs [ 6], a07 = lhs [ 7],
				a08 = lhs [ 8], a09 = lhs [ 9], a10 = lhs [10], a11 = lhs [11],
				a12 = lhs [12], a13 = lhs [13], a14 = lhs [14], a15 = lhs [15],
				b00 = rhs [ 0], b01 = rhs [ 1], b02 = rhs [ 2], b03 = rhs [ 3],
				b04 = rhs [ 4], b05 = rhs [ 5], b06 = rhs [ 6], b07 = rhs [ 7],
				b08 = rhs [ 8], b09 = rhs [ 9], b10 = rhs [10], b11 = rhs [11],
				b12 = rhs [12], b13 = rhs [13], b14 = rhs [14], b15 = rhs [15];

			copy [ 0] = a00 * b00 + a04 * b01 + a08 * b02 + a12 * b03;
			copy [ 1] = a01 * b00 + a05 * b01 + a09 * b02 + a13 * b03;
			copy [ 2] = a02 * b00 + a06 * b01 + a10 * b02 + a14 * b03;
			copy [ 3] = a03 * b00 + a07 * b01 + a11 * b02 + a15 * b03;
			copy [ 4] = a00 * b04 + a04 * b05 + a08 * b06 + a12 * b07;
			copy [ 5] = a01 * b04 + a05 * b05 + a09 * b06 + a13 * b07;
			copy [ 6] = a02 * b04 + a06 * b05 + a10 * b06 + a14 * b07;
			copy [ 7] = a03 * b04 + a07 * b05 + a11 * b06 + a15 * b07;
			copy [ 8] = a00 * b08 + a04 * b09 + a08 * b10 + a12 * b11;
			copy [ 9] = a01 * b08 + a05 * b09 + a09 * b10 + a13 * b11;
			copy [10] = a02 * b08 + a06 * b09 + a10 * b10 + a14 * b11;
			copy [11] = a03 * b08 + a07 * b09 + a11 * b10 + a15 * b11;
			copy [12] = a00 * b12 + a04 * b13 + a08 * b14 + a12 * b15;
			copy [13] = a01 * b12 + a05 * b13 + a09 * b14 + a13 * b15;
			copy [14] = a02 * b12 + a06 * b13 + a10 * b14 + a14 * b15;
			copy [15] = a03 * b12 + a07 * b13 + a11 * b14 + a15 * b15;

			return copy;
		},
		multRight: function (lhs, rhs)
		{
			var
				copy = Object .create (this .prototype),
				a00 = lhs [ 0], a01 = lhs [ 1], a02 = lhs [ 2], a03 = lhs [ 3],
				a04 = lhs [ 4], a05 = lhs [ 5], a06 = lhs [ 6], a07 = lhs [ 7],
				a08 = lhs [ 8], a09 = lhs [ 9], a10 = lhs [10], a11 = lhs [11],
				a12 = lhs [12], a13 = lhs [13], a14 = lhs [14], a15 = lhs [15],
				b00 = rhs [ 0], b01 = rhs [ 1], b02 = rhs [ 2], b03 = rhs [ 3],
				b04 = rhs [ 4], b05 = rhs [ 5], b06 = rhs [ 6], b07 = rhs [ 7],
				b08 = rhs [ 8], b09 = rhs [ 9], b10 = rhs [10], b11 = rhs [11],
				b12 = rhs [12], b13 = rhs [13], b14 = rhs [14], b15 = rhs [15];

			copy [ 0] = a00 * b00 + a01 * b04 + a02 * b08 + a03 * b12;
			copy [ 1] = a00 * b01 + a01 * b05 + a02 * b09 + a03 * b13;
			copy [ 2] = a00 * b02 + a01 * b06 + a02 * b10 + a03 * b14;
			copy [ 3] = a00 * b03 + a01 * b07 + a02 * b11 + a03 * b15;
			copy [ 4] = a04 * b00 + a05 * b04 + a06 * b08 + a07 * b12;
			copy [ 5] = a04 * b01 + a05 * b05 + a06 * b09 + a07 * b13;
			copy [ 6] = a04 * b02 + a05 * b06 + a06 * b10 + a07 * b14;
			copy [ 7] = a04 * b03 + a05 * b07 + a06 * b11 + a07 * b15;
			copy [ 8] = a08 * b00 + a09 * b04 + a10 * b08 + a11 * b12;
			copy [ 9] = a08 * b01 + a09 * b05 + a10 * b09 + a11 * b13;
			copy [10] = a08 * b02 + a09 * b06 + a10 * b10 + a11 * b14;
			copy [11] = a08 * b03 + a09 * b07 + a10 * b11 + a11 * b15;
			copy [12] = a12 * b00 + a13 * b04 + a14 * b08 + a15 * b12;
			copy [13] = a12 * b01 + a13 * b05 + a14 * b09 + a15 * b13;
			copy [14] = a12 * b02 + a13 * b06 + a14 * b10 + a15 * b14;
			copy [15] = a12 * b03 + a13 * b07 + a14 * b11 + a15 * b15;

			return copy;
		},
	});

	return Matrix4;
});


define ('cobweb/Fields/SFMatrix4',[
	"jquery",
	"cobweb/Basic/X3DField",
	"cobweb/Fields/SFVec3",
	"cobweb/Bits/X3DConstants",
	"standard/Math/Numbers/Matrix4",
	"standard/Math/Numbers/Vector3",
	"standard/Math/Numbers/Rotation4",
],
function ($, X3DField, SFVec3, X3DConstants, Matrix4, Vector3, Rotation4)
{
	var
		SFVec3d = SFVec3 .SFVec3d,
		SFVec3f = SFVec3 .SFVec3f;

	function SFMatrix4 (m00, m01, m02, m03,
	                    m10, m11, m12, m13,
	                    m20, m21, m22, m23,
	                    m30, m31, m32, m33)
	{
		if (arguments .length)
		{
			if (arguments [0] instanceof Matrix4)
				X3DField .call (this, arguments [0]);
			else
				X3DField .call (this, new Matrix4 (+m00, +m01, +m02, +m03,
	                                            +m10, +m11, +m12, +m13,
	                                            +m20, +m21, +m22, +m23,
	                                            +m30, +m31, +m32, +m33));
		}
		else
			X3DField .call (this, new Matrix4 ());
	}

	SFMatrix4 .prototype = $.extend (Object .create (X3DField .prototype),
	{
		constructor: SFMatrix4,
		copy: function ()
		{
			return new (this .constructor) (this .getValue () .copy ());
		},
		equals: function (matrix)
		{
			return this .getValue () .equals (matrix .getValue ());
		},
		set: function (value)
		{
			this .getValue () .assign (value);
		},
		set: function (value)
		{
			this .getValue () .assign (value);
		},
		setTransform: function (translation, rotation, scale, scaleOrientation, center)
		{
			translation      = translation      ? translation      .getValue () : null;
			rotation         = rotation         ? rotation         .getValue () : null;
			scale            = scale            ? scale            .getValue () : null;
			scaleOrientation = scaleOrientation ? scaleOrientation .getValue () : null;
			center           = center           ? center           .getValue () : null;

			this .getValue () .setTransform (translation, rotation, scale, scaleOrientation, center);
		},
		getTransform: function (translation, rotation, scale, scaleOrientation, center)
		{
			translation      = translation      ? translation      .getValue () : null;
			rotation         = rotation         ? rotation         .getValue () : null;
			scale            = scale            ? scale            .getValue () : null;
			scaleOrientation = scaleOrientation ? scaleOrientation .getValue () : null;
			center           = center           ? center           .getValue () : null;

			this .getValue () .getTransform (translation, rotation, scale, scaleOrientation, center);
		},
		transpose: function ()
		{
			return new (this .constructor) (Matrix4 .transpose (this .getValue ()));
		},
		inverse: function ()
		{
			return new (this .constructor) (Matrix4 .inverse (this .getValue ()));
		},
		multLeft: function (matrix)
		{
			return new (this .constructor) (Matrix4 .multLeft (this .getValue (), matrix .getValue ()));
		},
		multRight: function (matrix)
		{
			return new (this .constructor) (Matrix4 .multRight (this .getValue (), matrix .getValue ()));
		},
		multVecMatrix: function (vector)
		{
			return new (this .constructo .Vector3r) (this .getValue () .multVecMatrix (vector .getValue () .copy ()));
		},
		multMatrixVec: function (vector)
		{
			return new (this .constructor .Vector3) (this .getValue () .multMatrixVec (vector .getValue () .copy ()));
		},
		multDirMatrix: function (vector)
		{
			return new (this .constructor .Vector3) (this .getValue () .multDirMatrix (vector .getValue () .copy ()));
		},
		multMatrixDir: function (vector)
		{
			return new (this .constructor .Vector3) (this .getValue () .multMatrixDir (vector .getValue () .copy ()));
		},
		toString: function ()
		{
			return this .getValue () .toString ();
		},
	});

	function defineProperty (i)
	{
		Object .defineProperty (SFMatrix4 .prototype, i,
		{
			get: function ()
			{
				return this .getValue () [i];
			},
			set: function (value)
			{
				this .getValue () [i] = value;
				this .addEvent ();
			},
			enumerable: false,
			configurable: false
		});
	}

	for (var i = 0; i < Matrix4 .prototype .length; ++ i)
		defineProperty (i);

	/*
	 *  SFMatrix4d
	 */

	function SFMatrix4d (m00, m01, m02, m03,
	                     m10, m11, m12, m13,
	                     m20, m21, m22, m23,
	                     m30, m31, m32, m33)
	{
		SFMatrix4 .apply (this, arguments);
	}

	SFMatrix4d .prototype = $.extend (Object .create (SFMatrix4 .prototype),
	{
		constructor: SFMatrix4d,
		getTypeName: function ()
		{
			return "SFMatrix4d";
		},
		getType: function ()
		{
			return X3DConstants .SFMatrix4d;
		},
	});

	/*
	 *  SFMatrix4f
	 */

	function SFMatrix4f (m00, m01, m02, m03,
	                     m10, m11, m12, m13,
	                     m20, m21, m22, m23,
	                     m30, m31, m32, m33)
	{
		SFMatrix4 .apply (this, arguments);
	}

	SFMatrix4f .prototype = $.extend (Object .create (SFMatrix4 .prototype),
	{
		constructor: SFMatrix4f,
		Vector3: SFVec3d,
		getTypeName: function ()
		{
			return "SFMatrix4f";
		},
		getType: function ()
		{
			return X3DConstants .SFMatrix4f;
		},
	});

	/*
	 *  VrmlMatrix
	 */

	function VrmlMatrix (m00, m01, m02, m03,
	                     m10, m11, m12, m13,
	                     m20, m21, m22, m23,
	                     m30, m31, m32, m33)
	{
		SFMatrix4 .apply (this, arguments);
	}

	VrmlMatrix .prototype = $.extend (Object .create (SFMatrix4 .prototype),
	{
		constructor: VrmlMatrix,
		Vector3: SFVec3f,
		getTypeName: function ()
		{
			return "VrmlMatrix";
		},
		getType: function ()
		{
			return X3DConstants .VrmlMatrix;
		},
	});

	return {
		SFMatrix4d: SFMatrix4d,
		SFMatrix4f: SFMatrix4f,
		VrmlMatrix: VrmlMatrix,
	};
});


define ('cobweb/Fields/SFNode',[
	"jquery",
	"cobweb/Basic/X3DField",
	"cobweb/Bits/X3DConstants",
],
function ($, X3DField, X3DConstants)
{
	var handler =
	{
		get: function (target, key)
		{
			if (key in target)
				return target [key];

			try
			{
				var
					field      = target .getValue () .getField (key),
					accessType = field .getAccessType ();

				if (accessType & X3DConstants .outputOnly)
					return field .valueOf ();

				return undefined;
			}
			catch (error)
			{
				return undefined;
			}
 		},
		set: function (target, key, value)
		{
			if (key in target)
				return target [key] = value;

			try
			{
				var
					field      = target .getValue () .getField (key),
					accessType = field .getAccessType ();

				if (accessType & X3DConstants .inputOnly)
					field .setValue (value);

	 			return true;
			}
			catch (error)
			{
				return false;
			}
		},
	};

	function SFNode (value)
	{
		X3DField .call (this, value ? value : null);

		return new Proxy (this, handler);
	}

	SFNode .prototype = $.extend (Object .create (X3DField .prototype),
	{
		constructor: SFNode,
		clone: function ()
		{
			return new SFNode (this .getValue ());
		},
		copy: function (executionContext)
		{
			var value = this .getValue ();
			
			if (value)
				return new SFNode (value .copy (executionContext));

			return new SFNode (null);
		},
		getTypeName: function ()
		{
			return "SFNode";
		},
		getType: function ()
		{
			return X3DConstants .SFNode;
		},
		set: function (value)
		{
			X3DField .prototype .set .call (this, value ? value : null);
		},
		getNodeTypeName: function ()
		{
			return this .getValue () .getTypeName ();
		},
		getNodeName: function ()
		{
			return this .getValue () .getName ();
		},
		getFieldDefinitions: function ()
		{
			return this .getValue () .getFieldDefinitions ();
		},
		valueOf: function ()
		{
			if (this .getValue ())
				return this;

			return null;	
		},
		toString: function ()
		{
			var node = this .getValue ();
			return node ? node .toString () : "NULL";
		},
		toVRMLString: function ()
		{
			var node = this .getValue ();
			return node ? node .toVRMLString () : "NULL";
		},
		toXMLString: function ()
		{
			var node = this .getValue ();
			return node ? node .toXMLString () : "<!-- NULL -->";
		},
	});

	return SFNode;
});

define ('cobweb/Fields/SFRotation',[
	"jquery",
	"cobweb/Fields/SFVec3",
	"cobweb/Basic/X3DField",
	"cobweb/Bits/X3DConstants",
	"standard/Math/Numbers/Rotation4",
],
function ($, SFVec3, X3DField, X3DConstants, Rotation4)
{
	var SFVec3f = SFVec3 .SFVec3f;

	function SFRotation (x, y, z, angle)
	{
		switch (arguments .length)
		{
			case 0:
				X3DField .call (this, new Rotation4 ());
				return;
			case 1:
				X3DField .call (this, arguments [0]);
				return;
			case 2:
				if (arguments [1] instanceof SFVec3f)
					X3DField .call (this, new Rotation4 (arguments [0] .getValue (), arguments [1] .getValue ()));
				else
					X3DField .call (this, new Rotation4 (arguments [0] .getValue (), +arguments [1]));
				return;
			case 4:
				X3DField .call (this, new Rotation4 (+x, +y, +z, +angle));
				return;
		}
	}

	SFRotation .prototype = $.extend (Object .create (X3DField .prototype),
	{
		constructor: SFRotation,
		copy: function ()
		{
			return new SFRotation (this .getValue () .copy ());
		},
		equals: function (rotation)
		{
			return this .getValue () .equals (rotation .getValue ());
		},
		getTypeName: function ()
		{
			return "SFRotation";
		},
		getType: function ()
		{
			return X3DConstants .SFRotation;
		},
		set: function (value)
		{
			this .getValue () .assign (value);
		},
		inverse: function ()
		{
			return new SFRotation (Rotation4 .inverse (this .getValue ()));
		},
		multiply: function (rotation)
		{
			return new SFRotation (Rotation4 .multRight (rotation .getValue (), this .getValue ()));
		},
		multVec: function (vector)
		{
			return new SFVec3f (this .getValue () .multVecRot (vector .getValue () .copy ()));
		},
		slerp: function (rotation, t)
		{
			return new SFRotation (Rotation4 .slerp (this .getValue (), rotation .getValue (), t));
		},
		toString: function ()
		{
			return this .getValue () .toString ();
		},
	});

	Object .defineProperty (SFRotation .prototype, "x",
	{
		get: function ()
		{
			return this .getValue () .x;
		},
		set: function (value)
		{
			this .getValue () .x = value;
			this .addEvent ();
		},
		enumerable: false,
		configurable: false
	});

	Object .defineProperty (SFRotation .prototype, "0",
	{
		get: function ()
		{
			return this .getValue () .x;
		},
		set: function (value)
		{
			this .getValue () .x = value;
			this .addEvent ();
		},
		enumerable: true,
		configurable: false
	});

	Object .defineProperty (SFRotation .prototype, "y",
	{
		get: function ()
		{
			return this .getValue () .y;
		},
		set: function (value)
		{
			this .getValue () .y = value;
			this .addEvent ();
		},
		enumerable: false,
		configurable: false
	});

	Object .defineProperty (SFRotation .prototype, "1",
	{
		get: function ()
		{
			return this .getValue () .y;
		},
		set: function (value)
		{
			this .getValue () .y = value;
			this .addEvent ();
		},
		enumerable: true,
		configurable: false
	});

	Object .defineProperty (SFRotation .prototype, "z",
	{
		get: function ()
		{
			return this .getValue () .z;
		},
		set: function (value)
		{
			this .getValue () .z = value;
			this .addEvent ();
		},
		enumerable: false,
		configurable: false
	});

	Object .defineProperty (SFRotation .prototype, "2",
	{
		get: function ()
		{
			return this .getValue () .z;
		},
		set: function (value)
		{
			this .getValue () .z = value;
			this .addEvent ();
		},
		enumerable: true,
		configurable: false
	});

	Object .defineProperty (SFRotation .prototype, "angle",
	{
		get: function ()
		{
			return this .getValue () .angle;
		},
		set: function (value)
		{
			this .getValue () .angle = value;
			this .addEvent ();
		},
		enumerable: false,
		configurable: false
	});

	Object .defineProperty (SFRotation .prototype, "3",
	{
		get: function ()
		{
			return this .getValue () .angle;
		},
		set: function (value)
		{
			this .getValue () .angle = value;
			this .addEvent ();
		},
		enumerable: true,
		configurable: false
	});

	return SFRotation;
});


define ('cobweb/Fields/SFString',[
	"jquery",
	"cobweb/Basic/X3DField",
	"cobweb/Bits/X3DConstants",
],
function ($, X3DField, X3DConstants)
{
	var
		unescape = /\\([\\"])/g,
		escape   = /([\\"])/g;

	function SFString (value)
	{
		X3DField .call (this, arguments .length ? String (value) : "");
	}
	
	$.extend (SFString,
	{
		unescape: function (string)
		{
			return string .replace (unescape, "$1");
		},
		escape: function (string)
		{
			return string .replace (escape, "\\$1");
		},
	});

	SFString .prototype = $.extend (Object .create (X3DField .prototype),
	{
		constructor: SFString,
		copy: function ()
		{
			return new SFString (this .getValue ());
		},
		getTypeName: function ()
		{
			return "SFString";
		},
		getType: function ()
		{
			return X3DConstants .SFString;
		},
		set: function (value)
		{
			X3DField .prototype .set .call (this, String (value));
		},
		valueOf: X3DField .prototype .getValue,
		toString: function ()
		{
			return '"'+ SFString .escape (this .getValue ()) + '"';
		},
	});

	Object .defineProperty (SFString .prototype, "length",
	{
		get: function ()
		{
			return this .getValue () .length;
		},
		enumerable: true,
		configurable: false
	});

	return SFString;
});


define ('cobweb/Fields/SFTime',[
	"jquery",
	"cobweb/Basic/X3DField",
	"cobweb/Bits/X3DConstants",
],
function ($, X3DField, X3DConstants)
{
	function SFTime (value)
	{
		X3DField .call (this, arguments .length ? +value : 0);
	}

	SFTime .prototype = $.extend (Object .create (X3DField .prototype),
	{
		constructor: SFTime,
		copy: function ()
		{
			return new SFTime (this .getValue ());
		},
		getTypeName: function ()
		{
			return "SFTime";
		},
		getType: function ()
		{
			return X3DConstants .SFTime;
		},
		set: function (value)
		{
			X3DField .prototype .set .call (this, +value);
		},
		valueOf: X3DField .prototype .getValue,
		toString: function ()
		{
			return String (this .getValue ());
		},
	});

	return SFTime;
});


define ('cobweb/Fields/SFVec4',[
	"jquery",
	"standard/Math/Numbers/Vector4",
	"cobweb/Basic/X3DField",
	"cobweb/Bits/X3DConstants",
],
function ($, Vector4, X3DField, X3DConstants)
{
	function SFVec4 (x, y, z, w)
	{
		if (arguments .length)
		{
			if (arguments [0] instanceof Vector4)
				X3DField .call (this, arguments [0]);
			else
				X3DField .call (this, new Vector4 (+x, +y, +z, +w));
		}
		else
			X3DField .call (this, new Vector4 (0, 0, 0, 0));
	}

	SFVec4 .prototype = $.extend (Object .create (X3DField .prototype),
	{
		constructor: SFVec4,
		copy: function ()
		{
			return new (this .constructor) (this .getValue () .copy ());
		},
		equals: function (vector)
		{
			return this .getValue () .equals (vector .getValue ());
		},
		set: function (value)
		{
			this .getValue () .assign (value);
		},
		negate: function ()
		{
			return new (this .constructor) (Vector4 .negate (this .getValue () .copy ()));
		},
		add: function (vector)
		{
			return new (this .constructor) (Vector4 .add (this .getValue (), vector .getValue ()));
		},
		subtract: function (vector)
		{
			return new (this .constructor) (Vector4 .subtract (this .getValue (), vector .getValue ()));
		},
		multiply: function (value)
		{
			return new (this .constructor) (Vector4 .multiply (this .getValue (), value));
		},
		divide: function (value)
		{
			return new (this .constructor) (Vector4 .divide (this .getValue (), value));
		},
		dot: function (vector)
		{
			return new (this .constructor) (this .getValue () .dot (vector .getValue ()));
		},
		normalize: function (vector)
		{
			return new (this .constructor) (Vector4 .normalize (this .getValue ()));
		},
		length: function (vector)
		{
			return new (this .constructor) (this .getValue () .abs ());
		},
		toString: function ()
		{
			return this .getValue () .toString ();
		},
	});

	Object .defineProperty (SFVec4 .prototype, "x",
	{
		get: function ()
		{
			return this .getValue () .x;
		},
		set: function (value)
		{
			this .getValue () .x = value;
			this .addEvent ();
		},
		enumerable: true,
		configurable: false
	});

	Object .defineProperty (SFVec4 .prototype, "0",
	{
		get: function ()
		{
			return this .getValue () .x;
		},
		set: function (value)
		{
			this .getValue () .x = value;
			this .addEvent ();
		},
		enumerable: false,
		configurable: false
	});

	Object .defineProperty (SFVec4 .prototype, "y",
	{
		get: function ()
		{
			return this .getValue () .y;
		},
		set: function (value)
		{
			this .getValue () .y = value;
			this .addEvent ();
		},
		enumerable: true,
		configurable: false
	});

	Object .defineProperty (SFVec4 .prototype, "1",
	{
		get: function ()
		{
			return this .getValue () .y;
		},
		set: function (value)
		{
			this .getValue () .y = value;
			this .addEvent ();
		},
		enumerable: false,
		configurable: false
	});

	Object .defineProperty (SFVec4 .prototype, "z",
	{
		get: function ()
		{
			return this .getValue () .z;
		},
		set: function (value)
		{
			this .getValue () .z = value;
			this .addEvent ();
		},
		enumerable: true,
		configurable: false
	});

	Object .defineProperty (SFVec4 .prototype, "2",
	{
		get: function ()
		{
			return this .getValue () .z;
		},
		set: function (value)
		{
			this .getValue () .z = value;
			this .addEvent ();
		},
		enumerable: false,
		configurable: false
	});

	Object .defineProperty (SFVec4 .prototype, "w",
	{
		get: function ()
		{
			return this .getValue () .w;
		},
		set: function (value)
		{
			this .getValue () .w = value;
			this .addEvent ();
		},
		enumerable: true,
		configurable: false
	});

	Object .defineProperty (SFVec4 .prototype, "3",
	{
		get: function ()
		{
			return this .getValue () .w;
		},
		set: function (value)
		{
			this .getValue () .w = value;
			this .addEvent ();
		},
		enumerable: false,
		configurable: false
	});

	/*
	 *  SFVec4d
	 */

	function SFVec4d (x, y, z, w)
	{
		SFVec4 .apply (this, arguments);
	}

	SFVec4d .prototype = $.extend (Object .create (SFVec4 .prototype),
	{
		constructor: SFVec4d,
		getTypeName: function ()
		{
			return "SFVec4d";
		},
		getType: function ()
		{
			return X3DConstants .SFVec4d;
		},
	});

	/*
	 *  SFVec4f
	 */

	function SFVec4f (x, y, z, w)
	{
		SFVec4 .apply (this, arguments);
	}

	SFVec4f .prototype = $.extend (Object .create (SFVec4 .prototype),
	{
		constructor: SFVec4f,
		getTypeName: function ()
		{
			return "SFVec4f";
		},
		getType: function ()
		{
			return X3DConstants .SFVec4f;
		},
	});

	return {
		SFVec4d: SFVec4d,
		SFVec4f: SFVec4f,
	};
});


define ('cobweb/Fields/ArrayFields',[
	"jquery",
	"cobweb/Fields/SFBool",
	"cobweb/Fields/SFColor",
	"cobweb/Fields/SFColorRGBA",
	"cobweb/Fields/SFDouble",
	"cobweb/Fields/SFFloat",
	"cobweb/Fields/SFImage",
	"cobweb/Fields/SFInt32",
	"cobweb/Fields/SFMatrix3",
	"cobweb/Fields/SFMatrix4",
	"cobweb/Fields/SFNode",
	"cobweb/Fields/SFRotation",
	"cobweb/Fields/SFString",
	"cobweb/Fields/SFTime",
	"cobweb/Fields/SFVec2",
	"cobweb/Fields/SFVec3",
	"cobweb/Fields/SFVec4",
	"cobweb/Basic/X3DArrayField",
	"cobweb/Bits/X3DConstants",
],
function ($,
          SFBool,
          SFColor,
          SFColorRGBA,
          SFDouble,
          SFFloat,
          SFImage,
          SFInt32,
          SFMatrix3,
          SFMatrix4,
          SFNode,
          SFRotation,
          SFString,
          SFTime,
          SFVec2,
          SFVec3,
          SFVec4,
          X3DArrayField,
          X3DConstants)
{
	var
		SFMatrix3d = SFMatrix3 .SFMatrix3d,
		SFMatrix3f = SFMatrix3 .SFMatrix3f,
		SFMatrix4d = SFMatrix4 .SFMatrix4d,
		SFMatrix4f = SFMatrix4 .SFMatrix4f,
		SFVec2d    = SFVec2 .SFVec2d,
		SFVec2f    = SFVec2 .SFVec2f,
		SFVec3d    = SFVec3 .SFVec3d,
		SFVec3f    = SFVec3 .SFVec3f,
		SFVec4d    = SFVec4 .SFVec4d,
		SFVec4f    = SFVec4 .SFVec4f;

	/*
	 *  MFBool
	 */

	function MFBool (value)
	{
		return X3DArrayField .call (this, arguments);
	}

	MFBool .prototype = $.extend (Object .create (X3DArrayField .prototype),
	{
		constructor: MFBool,
		valueType_: SFBool,
		getTypeName: function ()
		{
			return "MFBool";
		},
		getType: function ()
		{
			return X3DConstants .MFBool;
		},
	});

	/*
	 *  MFColor
	 */

	function MFColor (value)
	{
		return X3DArrayField .call (this, arguments);
	}

	MFColor .prototype = $.extend (Object .create (X3DArrayField .prototype),
	{
		constructor: MFColor,
		valueType_: SFColor,
		getTypeName: function ()
		{
			return "MFColor";
		},
		getType: function ()
		{
			return X3DConstants .MFColor;
		},
	});

	/*
	 *  MFColorRGBA
	 */

	function MFColorRGBA (value)
	{
		return X3DArrayField .call (this, arguments);
	}

	MFColorRGBA .prototype = $.extend (Object .create (X3DArrayField .prototype),
	{
		constructor: MFColorRGBA,
		valueType_: SFColorRGBA,
		getTypeName: function ()
		{
			return "MFColorRGBA";
		},
		getType: function ()
		{
			return X3DConstants .MFColorRGBA;
		},
	});

	/*
	 *  MFDouble
	 */

	function MFDouble (value)
	{
		return X3DArrayField .call (this, arguments);
	}

	MFDouble .prototype = $.extend (Object .create (X3DArrayField .prototype),
	{
		constructor: MFDouble,
		valueType_: SFDouble,
		getTypeName: function ()
		{
			return "MFDouble";
		},
		getType: function ()
		{
			return X3DConstants .MFDouble;
		},
	});

	/*
	 *  MFFloat
	 */

	function MFFloat (value)
	{
		return X3DArrayField .call (this, arguments);
	}

	MFFloat .prototype = $.extend (Object .create (X3DArrayField .prototype),
	{
		constructor: MFFloat,
		valueType_: SFFloat,
		getTypeName: function ()
		{
			return "MFFloat";
		},
		getType: function ()
		{
			return X3DConstants .MFFloat;
		},
	});

	/*
	 *  MFImage
	 */

	function MFImage (value)
	{
		return X3DArrayField .call (this, arguments);
	}

	MFImage .prototype = $.extend (Object .create (X3DArrayField .prototype),
	{
		constructor: MFImage,
		valueType_: SFImage,
		getTypeName: function ()
		{
			return "MFImage";
		},
		getType: function ()
		{
			return X3DConstants .MFImage;
		},
	});

	/*
	 *  MFInt32
	 */

	function MFInt32 (value)
	{
		return X3DArrayField .call (this, arguments);
	}

	MFInt32 .prototype = $.extend (Object .create (X3DArrayField .prototype),
	{
		constructor: MFInt32,
		valueType_: SFInt32,
		getTypeName: function ()
		{
			return "MFInt32";
		},
		getType: function ()
		{
			return X3DConstants .MFInt32;
		},
	});

	/*
	 *  MFMatrix3d
	 */

	function MFMatrix3d (value)
	{
		return X3DArrayField .call (this, arguments);
	}

	MFMatrix3d .prototype = $.extend (Object .create (X3DArrayField .prototype),
	{
		constructor: MFMatrix3d,
		valueType_: SFMatrix3d,
		getTypeName: function ()
		{
			return "MFMatrix3d";
		},
		getType: function ()
		{
			return X3DConstants .MFMatrix3d;
		},
	});

	/*
	 *  MFMatrix3f
	 */

	function MFMatrix3f (value)
	{
		return X3DArrayField .call (this, arguments);
	}

	MFMatrix3f .prototype = $.extend (Object .create (X3DArrayField .prototype),
	{
		constructor: MFMatrix3f,
		valueType_: SFMatrix3f,
		getTypeName: function ()
		{
			return "MFMatrix3f";
		},
		getType: function ()
		{
			return X3DConstants .MFMatrix3f;
		},
	});

	/*
	 *  MFMatrix4d
	 */

	function MFMatrix4d (value)
	{
		return X3DArrayField .call (this, arguments);
	}

	MFMatrix4d .prototype = $.extend (Object .create (X3DArrayField .prototype),
	{
		constructor: MFMatrix4d,
		valueType_: SFMatrix4d,
		getTypeName: function ()
		{
			return "MFMatrix4d";
		},
		getType: function ()
		{
			return X3DConstants .MFMatrix4d;
		},
	});

	/*
	 *  MFMatrix4f
	 */

	function MFMatrix4f (value)
	{
		return X3DArrayField .call (this, arguments);
	}

	MFMatrix4f .prototype = $.extend (Object .create (X3DArrayField .prototype),
	{
		constructor: MFMatrix4f,
		valueType_: SFMatrix4f,
		getTypeName: function ()
		{
			return "MFMatrix4f";
		},
		getType: function ()
		{
			return X3DConstants .MFMatrix4f;
		},
	});

	/*
	 *  MFNode
	 */

	function MFNode (value)
	{
		return X3DArrayField .call (this, arguments);
	}

	MFNode .prototype = $.extend (Object .create (X3DArrayField .prototype),
	{
		constructor: MFNode,
		valueType_: SFNode,
		getTypeName: function ()
		{
			return "MFNode";
		},
		getType: function ()
		{
			return X3DConstants .MFNode;
		},
		clone: function ()
		{
			var clone = new MFNode ();
			clone .setValue (this);
			return clone;
		},
		copy: function (executionContext)
		{
			var
				copy   = new MFNode (),
				array1 = this .getValue (),
				array2 = copy .getValue ();

			for (var i = 0, length = array1 .length; i < length; ++ i)
			{
				var value = array1 [i] .copy (executionContext);
				value .addParent (copy);
				array2 .push (value);
			}

			return copy;
		},
	});

	/*
	 *  MFRotation
	 */

	function MFRotation (value)
	{
		return X3DArrayField .call (this, arguments);
	}

	MFRotation .prototype = $.extend (Object .create (X3DArrayField .prototype),
	{
		constructor: MFRotation,
		valueType_: SFRotation,
		getTypeName: function ()
		{
			return "MFRotation";
		},
		getType: function ()
		{
			return X3DConstants .MFRotation;
		},
	});

	/*
	 *  MFString
	 */

	function MFString (value)
	{
		return X3DArrayField .call (this, arguments);
	}

	MFString .prototype = $.extend (Object .create (X3DArrayField .prototype),
	{
		constructor: MFString,
		valueType_: SFString,
		getTypeName: function ()
		{
			return "MFString";
		},
		getType: function ()
		{
			return X3DConstants .MFString;
		},
	});

	/*
	 *  MFTime
	 */

	function MFTime (value)
	{
		return X3DArrayField .call (this, arguments);
	}

	MFTime .prototype = $.extend (Object .create (X3DArrayField .prototype),
	{
		constructor: MFTime,
		valueType_: SFTime,
		getTypeName: function ()
		{
			return "MFTime";
		},
		getType: function ()
		{
			return X3DConstants .MFTime;
		},
	});

	/*
	 *  MFVec2d
	 */

	function MFVec2d (value)
	{
		return X3DArrayField .call (this, arguments);
	}

	MFVec2d .prototype = $.extend (Object .create (X3DArrayField .prototype),
	{
		constructor: MFVec2d,
		valueType_: SFVec2d,
		getTypeName: function ()
		{
			return "MFVec2d";
		},
		getType: function ()
		{
			return X3DConstants .MFVec2d;
		},
	});

	/*
	 *  MFVec2f
	 */

	function MFVec2f (value)
	{
		return X3DArrayField .call (this, arguments);
	}

	MFVec2f .prototype = $.extend (Object .create (X3DArrayField .prototype),
	{
		constructor: MFVec2f,
		valueType_: SFVec2f,
		getTypeName: function ()
		{
			return "MFVec2f";
		},
		getType: function ()
		{
			return X3DConstants .MFVec2f;
		},
	});

	/*
	 *  MFVec3d
	 */

	function MFVec3d (value)
	{
		return X3DArrayField .call (this, arguments);
	}

	MFVec3d .prototype = $.extend (Object .create (X3DArrayField .prototype),
	{
		constructor: MFVec3d,
		valueType_: SFVec3d,
		getTypeName: function ()
		{
			return "MFVec3d";
		},
		getType: function ()
		{
			return X3DConstants .MFVec3d;
		},
	});

	/*
	 *  MFVec3f
	 */

	function MFVec3f (value)
	{
		return X3DArrayField .call (this, arguments);
	}

	MFVec3f .prototype = $.extend (Object .create (X3DArrayField .prototype),
	{
		constructor: MFVec3f,
		valueType_: SFVec3f,
		getTypeName: function ()
		{
			return "MFVec3f";
		},
		getType: function ()
		{
			return X3DConstants .MFVec3f;
		},
	});

	/*
	 *  MFVec4d
	 */

	function MFVec4d (value)
	{
		return X3DArrayField .call (this, arguments);
	}

	MFVec4d .prototype = $.extend (Object .create (X3DArrayField .prototype),
	{
		constructor: MFVec4d,
		valueType_: SFVec4d,
		getTypeName: function ()
		{
			return "MFVec4d";
		},
		getType: function ()
		{
			return X3DConstants .MFVec4d;
		},
	});

	/*
	 *  MFVec4f
	 */

	function MFVec4f (value)
	{
		return X3DArrayField .call (this, arguments);
	}

	MFVec4f .prototype = $.extend (Object .create (X3DArrayField .prototype),
	{
		constructor: MFVec4f,
		valueType_: SFVec4f,
		getTypeName: function ()
		{
			return "MFVec4f";
		},
		getType: function ()
		{
			return X3DConstants .MFVec4f;
		},
	});

	var ArrayFields =
	{
		MFBool:      MFBool,
		MFColor:     MFColor,
		MFColorRGBA: MFColorRGBA,
		MFDouble:    MFDouble,
		MFFloat:     MFFloat,
		MFImage:     MFImage,
		MFInt32:     MFInt32,
		MFMatrix3d:  MFMatrix3d,
		MFMatrix3f:  MFMatrix3f,
		MFMatrix4d:  MFMatrix4d,
		MFMatrix4f:  MFMatrix4f,
		MFNode:      MFNode,
		MFRotation:  MFRotation,
		MFString:    MFString,
		MFTime:      MFTime,
		MFVec2d:     MFVec2d,
		MFVec2f:     MFVec2f,
		MFVec3d:     MFVec3d,
		MFVec3f:     MFVec3f,
		MFVec4d:     MFVec4d,
		MFVec4f:     MFVec4f,
	};

	Object .preventExtensions (ArrayFields);
	Object .freeze (ArrayFields);
	Object .seal (ArrayFields);

	return ArrayFields;
});

define ('cobweb/Fields/SFImage',[
	"jquery",
	"cobweb/Basic/X3DField",
	"cobweb/Fields/ArrayFields",
	"cobweb/Bits/X3DConstants",
],
function ($, X3DField, ArrayFields, X3DConstants)
{
	var MFInt32 = ArrayFields .MFInt32;

	/*
	 *  Image
	 */

	function Image (width, height, comp, array)
	{
		this .width  = width;
		this .height = height;
		this .comp   = comp;
		this .array  = new MFInt32 ();
		this .array .setValue (array);
		this .array .length = width * height;
	}
	
	Image .prototype =
	{
		constructor: Image,
		copy: function ()
		{
			return new Image (this .width, this .height, this .comp, this .array);
		},
		equals: function (image)
		{
			return this .width  === image .width &&
			       this .height === image .height &&
			       this .comp   === image .comp &&
			       this .array .equals (image .array);
		},
		assign: function (image)
		{
			this .width  = image .width;
			this .height = image .height;
			this .comp   = image .comp;
			this .array .set (image .array .getValue ());
		},
		set: function (width, height, comp, array)
		{
			this .width  = width;
			this .height = height;
			this .comp   = comp;
			this .array .set (array);
		},
		setWidth: function (value)
		{
			this .width = value;
			this .array .length = this .width  * this .height;	
		},
		getWidth: function ()
		{
			return this .width;
		},
		setHeight: function (value)
		{
			this .height = value;
			this .array .length = this .width  * this .height;	
		},
		getHeight: function ()
		{
			return this .height;
		},
		setComp: function (value)
		{
			this .comp = value;
		},
		getComp: function ()
		{
			return this .comp;
		},
		setArray: function (value)
		{
			this .array .setValue (value);
			this .array .length = this .width  * this .height;	
		},
		getArray: function ()
		{
			return this .array;
		},
	};

	/*
	 *  SFImage
	 */

	function SFImage (width, height, comp, array)
	{
		if (arguments .length === 4)
			X3DField .call (this, new Image (+width, +height, +comp, array));
		else
			X3DField .call (this, new Image (0, 0, 0, new MFInt32 ()));

		this .getValue () .getArray () .addParent (this);
		this .addInterest (this, "set_size__");
	}

	SFImage .prototype = $.extend (Object .create (X3DField .prototype),
	{
		constructor: SFImage,
		set_size__: function ()
		{
			this .getValue () .getArray () .length = this .width * this .height;
		},
		copy: function ()
		{
			return new SFImage (this .getValue ());
		},
		equals: function (image)
		{
			return this .getValue () .equals (image .getValue ());
		},
		set: function (image)
		{
			this .getValue () .assign (image);
		},
		getTypeName: function ()
		{
			return "SFImage";
		},
		getType: function ()
		{
			return X3DConstants .SFImage;
		},
		toString: function ()
		{
			return this .width + " " + this .height + " " + this .comp;
		},
	});

	Object .defineProperty (SFImage .prototype, "width",
	{
		get: function ()
		{
			return this .getValue () .getWidth ();
		},
		set: function (value)
		{
			this .getValue () .setWidth (value);
			this .addEvent ();
		},
		enumerable: true,
		configurable: false
	});

	Object .defineProperty (SFImage .prototype, "x",
	{
		get: function ()
		{
			return this .getValue () .getWidth ();
		},
		set: function (value)
		{
			this .getValue () .setWidth (value);
			this .addEvent ();
		},
		enumerable: false,
		configurable: false
	});

	Object .defineProperty (SFImage .prototype, "height",
	{
		get: function ()
		{
			return this .getValue () .getHeight ();
		},
		set: function (value)
		{
			this .getValue () .setHeight (value);
			this .addEvent ();
		},
		enumerable: true,
		configurable: false
	});

	Object .defineProperty (SFImage .prototype, "y",
	{
		get: function ()
		{
			return this .getValue () .getHeight ();
		},
		set: function (value)
		{
			this .getValue () .setHeight (value);
			this .addEvent ();
		},
		enumerable: false,
		configurable: false
	});

	Object .defineProperty (SFImage .prototype, "comp",
	{
		get: function ()
		{
			return this .getValue () .getComp ();
		},
		set: function (value)
		{
			this .getValue () .setComp (value);
			this .addEvent ();
		},
		enumerable: true,
		configurable: false
	});

	Object .defineProperty (SFImage .prototype, "array",
	{
		get: function ()
		{
			return this .getValue () .getArray ();
		},
		set: function (value)
		{
			this .getValue () .setArray (value);
			this .addEvent ();
		},
		enumerable: true,
		configurable: false
	});

	return SFImage;
});


define ('cobweb/Fields',[
	"jquery",
	"cobweb/Fields/SFBool",
	"cobweb/Fields/SFColor",
	"cobweb/Fields/SFColorRGBA",
	"cobweb/Fields/SFDouble",
	"cobweb/Fields/SFFloat",
	"cobweb/Fields/SFImage",
	"cobweb/Fields/SFInt32",
	"cobweb/Fields/SFMatrix3",
	"cobweb/Fields/SFMatrix4",
	"cobweb/Fields/SFNode",
	"cobweb/Fields/SFRotation",
	"cobweb/Fields/SFString",
	"cobweb/Fields/SFTime",
	"cobweb/Fields/SFVec2",
	"cobweb/Fields/SFVec3",
	"cobweb/Fields/SFVec4",
	"cobweb/Fields/ArrayFields",
],
function ($,
          SFBool,
          SFColor,
          SFColorRGBA,
          SFDouble,
          SFFloat,
          SFImage,
          SFInt32,
          SFMatrix3,
          SFMatrix4,
          SFNode,
          SFRotation,
          SFString,
          SFTime,
          SFVec2,
          SFVec3,
          SFVec4,
          ArrayFields)
{
	var Fields = $.extend (
	{
		SFBool:      SFBool,
		SFColor:     SFColor,
		SFColorRGBA: SFColorRGBA,
		SFDouble:    SFDouble,
		SFFloat:     SFFloat,
		SFImage:     SFImage,
		SFInt32:     SFInt32,
		SFMatrix3d:  SFMatrix3 .SFMatrix3d,
		SFMatrix3f:  SFMatrix3 .SFMatrix3f,
		SFMatrix4d:  SFMatrix4 .SFMatrix4d,
		SFMatrix4f:  SFMatrix4 .SFMatrix4f,
		SFNode:      SFNode,
		SFRotation:  SFRotation,
		SFString:    SFString,
		SFTime:      SFTime,
		SFVec3d:     SFVec2 .SFVec2d,
		SFVec2f:     SFVec2 .SFVec2f,
		SFVec2d:     SFVec3 .SFVec3d,
		SFVec3f:     SFVec3 .SFVec3f,
		SFVec4d:     SFVec4 .SFVec4d,
		SFVec4f:     SFVec4 .SFVec4f,
		VrmlMatrix:  SFMatrix4 .VrmlMatrix,
	},
	ArrayFields);

	Object .preventExtensions (Fields);
	Object .freeze (Fields);
	Object .seal (Fields);

	return Fields;
});

define ('cobweb/Base/X3DEventObject',[
	"jquery",
	"cobweb/Base/X3DChildObject",
	"cobweb/Base/Event",
],
function ($,
	       X3DChildObject,
	       Event)
{
	function X3DEventObject (browser)
	{
		X3DChildObject .call (this);

		this .browser = browser;
	}

	X3DEventObject .prototype = $.extend (Object .create (X3DChildObject .prototype),
	{
		constructor: X3DEventObject,
		getBrowser: function ()
		{
			return this .browser;
		},
		getExtendedEventHandling: function ()
		{
			return true;
		},
		addEvent: function (field)
		{
			if (field .getTainted ())
				return;

			field .setTainted (true);

			this .addEventObject (field, Event .create (field));
		},
		addEventObject: function (field, event)
		{
			this .getBrowser () .addBrowserEvent ();

			// Register for processEvent

			this .getBrowser () .addTaintedField (field, event);

			// Register for eventsProcessed

			if (this .getTainted ())
			   return;

			if (field .isInput () || (this .getExtendedEventHandling () && ! field .isOutput ()))
			{
				this .setTainted (true);
				this .getBrowser () .addTaintedNode (this);
			}
		},
		addNodeEvent: function ()
		{
			if (this .getTainted ())
			   return;

			this .setTainted (true);
			this .getBrowser () .addTaintedNode (this);
			this .getBrowser () .addBrowserEvent ();
		},
		eventsProcessed: function ()
		{
			this .setTainted (false);
			this .processInterests ();
		},
	});

	return X3DEventObject;
});


define ('cobweb/Basic/X3DBaseNode',[
	"jquery",
	"cobweb/Base/X3DEventObject",
	"cobweb/Basic/X3DFieldDefinition",
	"cobweb/Fields",
	"cobweb/Bits/X3DConstants",
],
function ($,
          X3DEventObject,
          X3DFieldDefinition,
          Fields,
          X3DConstants)
{
	with (Fields)
	{
		function X3DBaseNode (browser, executionContext)
		{
			if (this .hasOwnProperty ("executionContext"))
				return;

			X3DEventObject .call (this, browser);

			this .executionContext  = executionContext;
			this .type              = [ X3DConstants .X3DBaseNode ];
			this .fields            = { };
			this .preDefinedFields  = { };
			this .userDefinedFields = { };
			
			this .addChildren ("isLive", new SFBool (true));

			for (var i = 0; i < this .fieldDefinitions .length; ++ i)
				this .addField (this .fieldDefinitions [i]);
		}

		X3DBaseNode .prototype = $.extend (Object .create (X3DEventObject .prototype),
		{
			constructor: X3DBaseNode,
			fieldDefinitions: [ ],
			$initialized: false,
			create: function (executionContext)
			{
				return new (this .constructor) (executionContext);
			},
			getScene: function ()
			{
				var executionContext = this .executionContext;

				while (! executionContext .isRootContext ())
					executionContext = executionContext .getExecutionContext ();

				return executionContext;
			},
			getExecutionContext: function ()
			{
				return this .executionContext;
			},
			addType: function (value)
			{
				this .type .push (value);
			},
			getType: function ()
			{
				return this .type;
			},
			getInnerNode: function ()
			{
				return this;
			},
			isInitialized: function ()
			{
				return this .$initialized;
			},
			isLive: function ()
			{
			   return this .isLive_;
			},
			setup: function ()
			{
				if (this .$initialized)
					return;

				this .$initialized = true;

				for (var i = 0; i < this .fieldDefinitions .length; ++ i)
				{
					var field = this .fields [this .fieldDefinitions [i] .name];
					field .updateReferences ();
					field .setTainted (false);
				}

				this .initialize ();
			},
			initialize: function () { },
			copy: function (executionContext)
			{
				// First try to get a named node with the node's name.

				var name = this .getName ();
			
				if (name .length)
				{
					try
					{
						return executionContext .getNamedNode (name) .getValue ();
					}
					catch (error)
					{ }
				}

				// Create copy.

				var copy = this .create (executionContext);

				if (name .length)
					executionContext .updateNamedNode (name, copy);

				// Default fields
				
				for (var i = 0, length = copy .fieldDefinitions .length; i < length; ++ i)
				{
					try
					{
						var
							fieldDefinition = copy .fieldDefinitions [i],
							field1          = this .preDefinedFields [fieldDefinition .name],
							field2          = copy .getField (fieldDefinition .name);

						if (field1 .hasReferences ())
						{
							// IS relationship
							for (var id in field1 .getReferences ())
							{
								var originalReference = field1 .getReferences () [id];

								try
								{
									field2 .addReference (executionContext .getField (originalReference .getName ()));
								}
								catch (error)
								{
									console .log (error .message);
								}
							}
						}
						else
						{
							if (field1 .getAccessType () & X3DConstants .initializeOnly)
								field2 .set (field1 .copy (executionContext) .getValue ());
						}
					}
					catch (error)
					{
						console .log (error .message);
					}
				}

				// User-defined fields

				for (var name in this .userDefinedFields)
				{
					var
						field1 = this .userDefinedFields [name],
						field2 = field1 .copy (executionContext);

					copy .addUserDefinedField (field1 .getAccessType (),
					                           field1 .getName (),
					                           field2);

					if (field1 .hasReferences ())
					{
						// IS relationship

						for (var id in field1 .getReferences ())
						{
							var originalReference = field1 .getReferences () [id];

							try
							{
								field2 .addReference (executionContext .getField (originalReference .getName ()));
							}
							catch (error)
							{
								console .log ("No reference '" + originalReference .getName () + "' inside execution context " + executionContext .getTypeName () + " '" + executionContext .getName () + "'.");
							}
						}
					}
				}

				executionContext .addUninitializedNode (copy);
				return copy;
			},
			addChildren: function (name, field)
			{
				for (var i = 0; i < arguments .length; i += 2)
					this .addChild (arguments [i + 0], arguments [i + 1]);
			},
			addChild: function (name, field)
			{
				field .addParent (this);
				field .setName (name);

				Object .defineProperty (this, name + "_",
				{
					get: function () { return this; } .bind (field),
					set: field .setValue .bind (field),
					enumerable: true,
					configurable: false,
				});
			},
			addField: function (fieldDefinition)
			{
				var
					accessType = fieldDefinition .accessType,
					name       = fieldDefinition .name,
					field      = fieldDefinition .value .clone ();

				field .setTainted (true);
				field .addParent (this);
				field .setName (name);
				field .setAccessType (accessType);

				this .addAlias (name, field, fieldDefinition .userDefined);
			},
			addAlias: function (name, field, userDefined)
			{
				this .fields [name]           = field;
				this .preDefinedFields [name] = field;

				if (field .getAccessType () === X3DConstants .inputOutput)
				{
					this .fields ["set_" + name]     = field;
					this .fields [name + "_changed"] = field;
				}

				if (userDefined)
					return;

				Object .defineProperty (this, name + "_",
				{
					get: function () { return this; } .bind (field),
					set: field .setValue .bind (field),
					enumerable: true,
					configurable: false,
				});
			},
			removeField: function (name /*, completely */)
			{
				var field = this .fields [name];

				//if (completely && field .getAccessType () === X3DConstants .inputOutput)
				//{
				//	delete this .fields ["set_" + field .getName ()];
				//	delete this .fields [field .getName () + "_changed"];
				//}

				delete this .fields [name];
				delete this .userDefinedFields [name];

				var fieldDefinitions = this .fieldDefinitions .getValue ();

				for (var i = 0; i < fieldDefinitions .length; ++ i)
				{
					if (fieldDefinitions [i] .name === name)
					{
						fieldDefinitions .splice (i, 1);
						break;
					}
				}
			},
			getField: function (name)
			{
				var field = this .fields [name];
				
				if (field)
					return field;

				throw Error ("Unkown field '" + name + "' in node class " + this .getTypeName () + ".");
			},
			getFieldDefinitions: function ()
			{
				return this .fieldDefinitions;
			},
			hasUserDefinedFields: function ()
			{
				return false;
			},
			addUserDefinedField: function (accessType, name, field)
			{
				if (this .fields [name])
					this .removeField (name);

				field .setTainted (true);
				field .addParent (this);
				field .setName (name);
				field .setAccessType (accessType);

				this .fieldDefinitions .getValue () .push (new X3DFieldDefinition (accessType, name, field, true));
				this .fields [name] = field;
				this .userDefinedFields [name] = field;

				if (field .getAccessType () === X3DConstants .inputOutput)
				{
					this .fields ["set_" + name]     = field;
					this .fields [name + "_changed"] = field;
				}
			},
			getUserDefinedFields: function ()
			{
				return this .userDefinedFields;
			},
			getCDATA: function ()
			{
				return null;
			},
			traverse: function () { },
			beginUpdate: function ()
			{
			   if (this .isLive () .getValue ())
			      return;

			   this .isLive () .setValue (true);
			},
			endUpdate: function ()
			{
			   if (this .isLive () .getValue ())
			      this .isLive () .setValue (false);
			},
			toString: function ()
			{
				return this .getTypeName () + " { }";
			},
		});

		return X3DBaseNode;
	}
});


define ('cobweb/Browser/Core/PrimitiveQuality',[],function ()
{
	var i = 0;

	var PrimitiveQuality =
	{
		LOW:    i ++,
		MEDIUM: i ++,
		HIGH:   i ++,
	};

	Object .preventExtensions (PrimitiveQuality);
	Object .freeze (PrimitiveQuality);
	Object .seal (PrimitiveQuality);

	return PrimitiveQuality;
});


define ('cobweb/Browser/Core/BrowserOptions',[
	"jquery",
	"cobweb/Fields",
	"cobweb/Basic/X3DFieldDefinition",
	"cobweb/Basic/FieldDefinitionArray",
	"cobweb/Basic/X3DBaseNode",
	"cobweb/Bits/X3DConstants",
	"cobweb/Browser/Core/PrimitiveQuality",
],
function ($,
          Fields,
          X3DFieldDefinition,
          FieldDefinitionArray,
          X3DBaseNode,
          X3DConstants,
          PrimitiveQuality)
{
	with (Fields)
	{
		function BrowserOptions (executionContext)
		{
			X3DBaseNode .call (this, executionContext .getBrowser (), executionContext);

			this .addAlias ("AntiAliased", this .Antialiased_);
		}

		BrowserOptions .prototype = $.extend (Object .create (X3DBaseNode .prototype),
		{
			constructor: BrowserOptions,
			fieldDefinitions: new FieldDefinitionArray ([
				new X3DFieldDefinition (X3DConstants .inputOutput, "SplashScreen",           new SFBool (true)),
				new X3DFieldDefinition (X3DConstants .inputOutput, "Dashboard",              new SFBool (true)),
				new X3DFieldDefinition (X3DConstants .inputOutput, "Rubberband",             new SFBool (true)),
				new X3DFieldDefinition (X3DConstants .inputOutput, "EnableInlineViewpoints", new SFBool (true)),
				new X3DFieldDefinition (X3DConstants .inputOutput, "Antialiased",            new SFBool (true)),
				new X3DFieldDefinition (X3DConstants .inputOutput, "TextureQuality",         new SFString ("MEDIUM")),
				new X3DFieldDefinition (X3DConstants .inputOutput, "PrimitiveQuality",       new SFString ("MEDIUM")),
				new X3DFieldDefinition (X3DConstants .inputOutput, "QualityWhenMoving",      new SFString ("MEDIUM")),
				new X3DFieldDefinition (X3DConstants .inputOutput, "Shading",                new SFString ("GOURAUD")),
				new X3DFieldDefinition (X3DConstants .inputOutput, "MotionBlur",             new SFBool (false)),
			]),
			initialize: function ()
			{
				X3DBaseNode .prototype .initialize .call (this);
				
				this .PrimitiveQuality_ .addInterest (this, "set_primitiveQuality__");
				this .Shading_          .addInterest (this, "set_shading__");

				this .set_primitiveQuality__ ();
			},
			getPrimitiveQuality: function ()
			{
			   return this .primitiveQuality;
			},
			set_primitiveQuality__: function ()
			{
				switch (this .PrimitiveQuality_ .getValue ())
				{
				   case "LOW":
				      this .primitiveQuality = PrimitiveQuality .LOW;
				      break;
				   case "HIGH":
				      this .primitiveQuality = PrimitiveQuality .HIGH;
				      break;
				   default:
				      this .primitiveQuality = PrimitiveQuality .MEDIUM;
				      break;
				}
			},
			set_shading__: function ()
			{
				this .getBrowser () .setDefaultShader (this .Shading_ .getValue ());
			},
		});

		return BrowserOptions;
	}
});


define ('cobweb/Bits/TraverseType',[],function ()
{
	var i = 0;

	var TraverseType =
	{
		POINTER:    i ++,
		CAMERA:     i ++,
		NAVIGATION: i ++,
		COLLISION:  i ++,
		POINTER:    i ++,
		DISPLAY:    i ++,
	};

	Object .preventExtensions (TraverseType);
	Object .freeze (TraverseType);
	Object .seal (TraverseType);

	return TraverseType;
});


define ('cobweb/Components/Core/X3DNode',[
	"jquery",
	"cobweb/Basic/X3DBaseNode",
	"cobweb/Bits/TraverseType",
	"cobweb/Bits/X3DConstants",
],
function ($,
          X3DBaseNode,
          TraverseType,
          X3DConstants)
{
	function X3DNode (browser, executionContext)
	{
		X3DBaseNode .call (this, browser, executionContext);

		this .addType (X3DConstants .X3DNode);
	}

	X3DNode .prototype = $.extend (Object .create (X3DBaseNode .prototype),
	{
		constructor: X3DNode,
		getCurrentLayer: function ()
		{
			return this .getBrowser () .getLayers () [0];
		},
		getCurrentViewport: function ()
		{
			return this .getBrowser () .getLayers () [0] .getViewport ();
		},
		getCurrentNavigationInfo: function ()
		{
			return this .getBrowser () .getLayers () [0] .getNavigationInfo ();
		},
		getCurrentViewpoint: function ()
		{
			return this .getBrowser () .getLayers () [0] .getViewpoint ();
		},
		getModelViewMatrix: function (type)
		{
			var modelViewMatrix = this .getBrowser () .getModelViewMatrix () .get () .copy ();
		
			if (type === TraverseType .CAMERA)
				modelViewMatrix .multRight (this .getCurrentViewpoint () .getInverseCameraSpaceMatrix ());

			return modelViewMatrix;
		},
	});

	return X3DNode;
});


define ('standard/Math/Geometry/Box3',[
	"standard/Math/Numbers/Matrix4",
	"standard/Math/Numbers/Vector3",
],
function (Matrix4, Vector3)
{
	var
	   min = new Vector3 (0, 0, 0),
	   max = new Vector3 (0, 0, 0),
	   x   = new Vector3 (0, 0, 0),
	   y   = new Vector3 (0, 0, 0),
	   z   = new Vector3 (0, 0, 0);

	function Box3 (size, center)
	{
		switch (arguments .length)
		{
			case 0:
			{
				this .matrix = new Matrix4 (0.5, 0,   0,   0,
				                            0,   0.5, 0,   0,
				                            0,   0,   0.5, 0,
				                            0,   0,   0,   0);
				return;
			}
			case 2:
			{
				this .matrix = new Matrix4 (size .x / 2, 0, 0, 0,
				                            0, size .y / 2, 0, 0,
				                            0, 0, size .z / 2, 0,
				                            center .x, center .y, center .z, 1);
				return;
			}
			case 3:
			{
				var
					min = arguments [0],
					max = arguments [1],
					sx  = (max .x - min .x) / 2,
					sy  = (max .y - min .y) / 2,
					sz  = (max .z - min .z) / 2,
					cx  = (max .x + min .x) / 2,
					cy  = (max .y + min .y) / 2,
					cz  = (max .z + min .z) / 2;

				this .matrix = new Matrix4 (sx, 0,  0,  0,
				                            0,  sy, 0,  0,
				                            0,  0,  sz, 0,
				                            cx, cy, cz, 1);
				return;
			}
		}
	}

	Box3 .prototype =
	{
		constructor: Box3,
		copy: function ()
		{
			var copy = Object .create (Box3 .prototype);
			copy .matrix = this .matrix .copy ();
			return copy;
		},
		assign: function (box)
		{
			this .matrix .assign (box .matrix);
			return this;
		},
		set: function (size, center)
		{
			var m = this .matrix;
		
			switch (arguments .length)
			{
				case 0:
				{
					m [ 0] = 0.5; m [ 1] = 0;   m [ 2] = 0;   m [ 3] = 0;
					m [ 4] = 0;   m [ 5] = 0.5; m [ 6] = 0;   m [ 7] = 0;
					m [ 8] = 0;   m [ 9] = 0;   m [10] = 0.5; m [11] = 0;
					m [12] = 0;   m [13] = 0;   m [14] = 0;   m [15] = 0;
					return this;
				}
				case 2:
				{
					m [ 0] = size .x / 2; m [ 1] = 0;           m [ 2] = 0;           m [ 3] = 0;
					m [ 4] = 0;           m [ 5] = size .y / 2; m [ 6] = 0;           m [ 7] = 0;
					m [ 8] = 0;           m [ 9] = 0;           m [10] = size .z / 2; m [11] = 0;
					m [12] = center .x;   m [13] = center .y;   m [14] = center .z;   m [15] = 1;
					return this;
				}
				case 3:
				{
					var
						min = arguments [0],
						max = arguments [1],
						sx  = (max .x - min .x) / 2,
						sy  = (max .y - min .y) / 2,
						sz  = (max .z - min .z) / 2,
						cx  = (max .x + min .x) / 2,
						cy  = (max .y + min .y) / 2,
						cz  = (max .z + min .z) / 2;

					m [ 0] = sx; m [ 1] = 0;  m [ 2] = 0;  m [ 3] = 0;
					m [ 4] = 0;  m [ 5] = sy; m [ 6] = 0;  m [ 7] = 0;
					m [ 8] = 0;  m [ 9] = 0;  m [10] = sz; m [11] = 0;
					m [12] = cx; m [13] = cy; m [14] = cz; m [15] = 1;
					return this;
				}
			}
		},
		setExtents: function (min, max)
		{
			var
				m  = this .matrix,
				sx = (max .x - min .x) / 2,
				sy = (max .y - min .y) / 2,
				sz = (max .z - min .z) / 2,
				cx = (max .x + min .x) / 2,
				cy = (max .y + min .y) / 2,
				cz = (max .z + min .z) / 2;

			m [ 0] = sx; m [ 1] = 0;  m [ 2] = 0;  m [ 3] = 0;
			m [ 4] = 0;  m [ 5] = sy; m [ 6] = 0;  m [ 7] = 0;
			m [ 8] = 0;  m [ 9] = 0;  m [10] = sz; m [11] = 0;
			m [12] = cx; m [13] = cy; m [14] = cz; m [15] = 1;
			return this;
		},
		isEmpty: function ()
		{
			return this .matrix [15] === 0;
		},
		add: function (box)
		{
			if (this .isEmpty ())
				return this .assign (box);

			if (box .isEmpty ())
				return this;

			var
				lhs_min = new Vector3 (0, 0, 0),
				lhs_max = new Vector3 (0, 0, 0),
				rhs_min = new Vector3 (0, 0, 0),
				rhs_max = new Vector3 (0, 0, 0);

			this .getExtents (lhs_min, lhs_max);
			box  .getExtents (rhs_min, rhs_max);

			return this .assign (new Box3 (lhs_min .min (rhs_min), lhs_max .max (rhs_max), true));
		},
		multLeft: function (matrix)
		{
			this .matrix .multLeft (matrix);
			return this;
		},
		multRight: function (matrix)
		{
			this .matrix .multRight (matrix);
			return this;
		},
		getExtents: function (min, max)
		{
			this .getAbsoluteExtents (min, max);

			min .add (this .center);
			max .add (this .center);
		},
		getAbsoluteExtents: function (min, max)
		{
		   var m = this .matrix;

			x .set (m [0], m [1], m [2]);
			y .set (m [4], m [5], m [6]);
			z .set (m [8], m [9], m [10]);

			var
				r1 = Vector3 .add (y, z),
				r2 = z .subtract (y);

			var
				p1 = Vector3 .add (x, r1),
				p4 = Vector3 .add (x, r2),
				p2 = r1 .subtract (x),
				p3 = r2 .subtract (x);

			min .assign (p1);
			max .assign (p2);

			min .min (p2, p3, p4);
			max .max (p2, p3, p4);

			p3 .negate ();
			p4 .negate ();
			p1 .negate ();
			p2 .negate ();

			min .min (p1, p2, p3, p4);
			max .max (p1, p2, p3, p4);
		},
		intersectsPoint: function (point)
		{
			this .getExtents (min, max);

			return min .x <= point .x &&
			       max .x >= point .x &&
			       min .y <= point .y &&
			       max .y >= point .y &&
			       min .z <= point .z &&
			       max .z >= point .z;
		},
		toString: function ()
		{
			return this .size + ", " + this .center;
		},
	};

	Object .defineProperty (Box3 .prototype, "size",
	{
		get: function ()
		{
			var max = new Vector3 (0, 0, 0);
			
			this .getAbsoluteExtents (min, max);

			return max .subtract (min);
		},
		enumerable: true,
		configurable: false
	});

	Object .defineProperty (Box3 .prototype, "center",
	{
		get: function ()
		{
			return this .matrix .origin;
		},
		enumerable: true,
		configurable: false
	});

	return Box3;
});


define ('standard/Math/Geometry/Plane3',[
	"standard/Math/Numbers/Vector3",
],
function (Vector3)
{
	function Plane3 (point, normal)
	{
		this .normal             = normal .copy ();
		this .distanceFromOrigin = normal .dot (point);
	}

	Plane3 .prototype =
	{
		constructor: Plane3,
		set: function (point, normal)
		{
			this .normal             = normal .copy ();
			this .distanceFromOrigin = normal .dot (point);	   
		},
		distance: function (point)
		{
			return point .dot (this .normal) - this .distanceFromOrigin;
		},
		getDistanceToPoint: function (point)
		{
			return Vector3 .dot (point, this .normal) - this .distanceFromOrigin;
		},
		intersectsLine: function (line, intersection)
		{
			var
				point     = line .point,
				direction = line .direction;
		
			// Check if the line is parallel to the plane.
			var theta = direction .dot (this .normal);

			// Plane and line are parallel.
			if (theta === 0)
				return false;

			// Plane and line are not parallel. The intersection point can be calculated now.
			var t = (this .distanceFromOrigin - this .normal .dot (point)) / theta;

			intersection .x = point .x + direction .x * t;
			intersection .y = point .y + direction .y * t;
			intersection .z = point .z + direction .z * t;

			return true;
		},
		toString: function ()
		{
			return this .normal .toString () + " " + this .distanceFromOrigin;
		},
	};

	return Plane3;
});


define ('cobweb/Components/Rendering/X3DGeometryNode',[
	"jquery",
	"cobweb/Fields",
	"cobweb/Components/Core/X3DNode",
	"cobweb/Bits/X3DConstants",
	"standard/Math/Numbers/Color3",
	"standard/Math/Numbers/Vector2",
	"standard/Math/Numbers/Vector3",
	"standard/Math/Numbers/Matrix4",
	"standard/Math/Geometry/Box3",
	"standard/Math/Geometry/Plane3",
],
function ($,
          Fields,
          X3DNode,
          X3DConstants,
          Color3,
          Vector2,
          Vector3,
          Matrix4,
          Box3,
          Plane3)
{
	with (Fields)
	{
		// Box normals for bbox / line intersection.
		var boxNormals = [
			new Vector3 (0,  0,  1), // front
			new Vector3 (0,  0, -1), // back
			new Vector3 (0,  1,  0), // top
			new Vector3 (0, -1,  0), // bottom
			new Vector3 (1,  0,  0)  // right
			// left: We do not have to test for left.
		];

		var zero = new Vector3 (0,  0,  0);

		function X3DGeometryNode (browser, executionContext)
		{
			X3DNode .call (this, browser, executionContext);

			this .addType (X3DConstants .X3DGeometryNode);
		}

		X3DGeometryNode .prototype = $.extend (Object .create (X3DNode .prototype),
		{
			constructor: X3DGeometryNode,
			intersection: new Vector3 (0, 0, 0),
			uvt: new Vector3 (0, 0, 0),
			v0: new Vector3 (0, 0, 0),
			v1: new Vector3 (0, 0, 0),
			v2: new Vector3 (0, 0, 0),
			setup: function ()
			{
				this .setTainted (true);
			
				X3DNode .prototype .setup .call (this);

				this .addInterest (this, "update");
				this .update ();

				this .setTainted (false);
			},
			initialize: function ()
			{
				X3DNode .prototype .initialize .call (this);

				this .addChildren ("transparent", new SFBool (false));

				var gl = this .getBrowser () .getContext ();
		
				this .min         = new Vector3 (0, 0, 0);
				this .max         = new Vector3 (0, 0, 0);
				this .bbox        = new Box3 (this .min, this .max, true);
				this .solid       = true;
				this .frontFace   = 0;
				this .colors      = [ ];
				this .texCoords   = [ ];
				this .normals     = [ ];
				this .vertices    = [ ];
				this .vertexCount = 0;

				this .frontFace       = gl .CCW;
				this .colorBuffer     = gl .createBuffer ();
				this .texCoordBuffers = [ ];
				this .normalBuffer    = gl .createBuffer ();
				this .vertexBuffer    = gl .createBuffer ();
				this .planes          = [ ];

				if (! this .isLineGeometry ())
				{
					for (var i = 0; i < 5; ++ i)
						this .planes [i] = new Plane3 (zero, boxNormals [0]);
				}

				this .setCurrentTexCoord (null);
			},
			isLineGeometry: function ()
			{
				return false;
			},
			getBBox: function ()
			{
				return this .bbox;
			},
			setExtents: function (extents)
			{
				this .min .assign (extents [0]);
				this .max .assign (extents [1]);
			},
			getExtents: function ()
			{
				return [this .min, this .max];
			},
			getMatrix: function ()
			{
				return Matrix4 .Identity;
			},
			setSolid: function (value)
			{
				this .solid = value;
			},
			setCCW: function (value)
			{
				this .frontFace = value ? this .getBrowser () .getContext () .CCW : this .getBrowser () .getContext () .CW;
			},
			addColor: function (color)
			{
				this .colors .push (color .r, color .g, color .b, color .length === 3 ? 1 : color .a);
			},
			setColors: function (value)
			{
				this .colors = value;
			},
			getColors: function ()
			{
				return this .colors;
			},
			setTexCoords: function (value)
			{
				this .texCoords = value;
			},
			getTexCoords: function ()
			{
				return this .texCoords;
			},
			setCurrentTexCoord: function (value)
			{
				this .currentTexCoordNode = value || this .getBrowser () .getDefaultTextureCoordinate ();
			},
			addNormal: function (normal)
			{
				this .normals .push (normal .x, normal .y, normal .z);
			},
			setNormals: function (value)
			{
				this .normals = value;
			},
			getNormals: function ()
			{
				return this .normals;
			},
			addVertex: function (vertex)
			{
				this .min .min (vertex);
				this .max .max (vertex);

				this .vertices .push (vertex .x, vertex .y, vertex .z, 1);
			},
			setVertices: function (value)
			{
				this .vertices = value;
			},
			getVertices: function ()
			{
				return this .vertices;
			},
			buildTexCoords: function ()
			{
				var
					p         = this .getTexCoordParams (),
					min       = p .min,
					Sindex    = p .Sindex,
					Tindex    = p .Tindex,
					Ssize     = p .Ssize,
					S         = min [Sindex],
					T         = min [Tindex],
					texCoords = [ ],
					vertices  = this .vertices;

				this .texCoords .push (texCoords);

				for (var i = 0, length = this .vertices .length; i < length; i += 4)
				{
					texCoords .push ((vertices [i + Sindex] - S) / Ssize,
					                 (vertices [i + Tindex] - T) / Ssize,
					                 0,
					                 1);
				}
			},
			getTexCoordParams: function ()
			{
				var
					p     = { },
					bbox  = this .getBBox (),
					size  = bbox .size,
					Xsize = size .x,
					Ysize = size .y,
					Zsize = size .z;

				p .min = bbox .center .subtract (size .divide (2));

				if ((Xsize >= Ysize) && (Xsize >= Zsize))
				{
					// X size largest
					p .Ssize = Xsize; p .Sindex = 0;

					if (Ysize >= Zsize)
						p .Tindex = 1;
					else
						p .Tindex = 2;
				}
				else if ((Ysize >= Xsize) && (Ysize >= Zsize))
				{
					// Y size largest
					p .Ssize = Ysize; p .Sindex = 1;

					if (Xsize >= Zsize)
						p .Tindex = 0;
					else
						p .Tindex = 2;
				}
				else
				{
					// Z is the largest
					p .Ssize = Zsize; p .Sindex = 2;

					if (Xsize >= Ysize)
						p .Tindex = 0;
					else
						p .Tindex = 1;
				}

				return p;
			},
			refineNormals: function (normalIndex, normals, creaseAngle)
			{
				if (creaseAngle === 0)
					return normals;

				var
					cosCreaseAngle = Math .cos (creaseAngle),
					normals_       = [ ];

				for (var i in normalIndex) // Don't use forEach
				{
					var vertex = normalIndex [i];

					for (var p = 0; p < vertex .length; ++ p)
					{
						var
							P = vertex [p],
							m = normals [P],
							n = new Vector3 (0, 0, 0);

						for (var q = 0; q < vertex .length; ++ q)
						{
							var Q = normals [vertex [q]];
		
							if (Q .dot (m) >= cosCreaseAngle)
								n .add (Q);
						}

						normals_ [P] = n .normalize ();
					}
				}

				return normals_;
			},
			update: function ()
			{
				this .clear ();
				this .build ();

				if (this .vertices .length)
					this .bbox .setExtents (this .min, this .max);
				else
					this .bbox .setExtents (this .min .set (0, 0, 0), this .max .set (0, 0, 0));

				if (! this .isLineGeometry ())
				{
					for (var i = 0; i < 5; ++ i)
						this .planes [i] .set (i % 2 ? this .min : this .max, boxNormals [i]);

					if (this .texCoords .length === 0)
						this .buildTexCoords ();
				}

				this .transfer ();
			},
			clear: function ()
			{
				this .min .set (Number .POSITIVE_INFINITY, Number .POSITIVE_INFINITY, Number .POSITIVE_INFINITY);
				this .max .set (Number .NEGATIVE_INFINITY, Number .NEGATIVE_INFINITY, Number .NEGATIVE_INFINITY);

				this .colors    .length = 0;
				this .texCoords .length = 0;
				this .normals   .length = 0;
				this .vertices  .length = 0;
			},
			transfer: function ()
			{
				var
					gl    = this .getBrowser () .getContext (),
					count = this .vertices .length / 4;

				// Transfer colors.

				gl .bindBuffer (gl .ARRAY_BUFFER, this .colorBuffer);
				gl .bufferData (gl .ARRAY_BUFFER, new Float32Array (this .colors), gl .STATIC_DRAW);

				// Transfer texCoords.

				for (var i = this .texCoordBuffers .length; i < this .texCoords .length; ++ i)
					this .texCoordBuffers .push (gl .createBuffer ());

				this .texCoordBuffers .length = this .texCoords .length;
				
				for (var i = 0; i < this .texCoords .length; ++ i)
				{
					gl .bindBuffer (gl .ARRAY_BUFFER, this .texCoordBuffers [i]);
					gl .bufferData (gl .ARRAY_BUFFER, new Float32Array (this .texCoords [i]), gl .STATIC_DRAW);
				}

				// Transfer normals.

				gl .bindBuffer (gl .ARRAY_BUFFER, this .normalBuffer);
				gl .bufferData (gl .ARRAY_BUFFER, new Float32Array (this .normals), gl .STATIC_DRAW);

				// Transfer vertices.

				gl .bindBuffer (gl .ARRAY_BUFFER, this .vertexBuffer);
				gl .bufferData (gl .ARRAY_BUFFER, new Float32Array (this .vertices), gl .STATIC_DRAW);
				this .vertexCount = count;
	  		},
			traverse: function (context)
			{
				var
					browser = this .getBrowser (),
					gl      = browser .getContext (),
					shader  = browser .getShader ();

				if (shader .vertex >= 0)
				{
					// Setup shader.
					context .colorMaterial = this .colors .length;
					shader .setLocalUniforms (context);

					// Setup vertex attributes.

					if (this .colors .length && shader .color >= 0)
					{
						gl .enableVertexAttribArray (shader .color);
						gl .bindBuffer (gl .ARRAY_BUFFER, this .colorBuffer);
						gl .vertexAttribPointer (shader .color, 4, gl .FLOAT, false, 0, 0);
					}

					if (shader .texCoord >= 0)
					{
						gl .enableVertexAttribArray (shader .texCoord);
						gl .bindBuffer (gl .ARRAY_BUFFER, this .texCoordBuffers [0]);
						gl .vertexAttribPointer (shader .texCoord, 4, gl .FLOAT, false, 0, 0);
					}

					if (shader .normal >= 0)
					{
						gl .enableVertexAttribArray (shader .normal);
						gl .bindBuffer (gl .ARRAY_BUFFER, this .normalBuffer);
						gl .vertexAttribPointer (shader .normal, 3, gl .FLOAT, false, 0, 0);
					}

					gl .enableVertexAttribArray (shader .vertex);
					gl .bindBuffer (gl .ARRAY_BUFFER, this .vertexBuffer);
					gl .vertexAttribPointer (shader .vertex, 4, gl .FLOAT, false, 0, 0);

					// Draw depending on wireframe, solid and transparent.

					if (shader .wireframe || this .isLineGeometry ())
					{
						if (this .isLineGeometry ())
							gl .drawArrays (shader .primitiveMode, 0, this .vertexCount);

						else
						{
							for (var i = 0; i < this .vertexCount; i += 3)
								gl .drawArrays (shader .primitiveMode, i, 3);
						}
					}
					else
					{
						var positiveScale = Matrix4 .prototype .determinant3 .call (context .modelViewMatrix) > 0;

						gl .frontFace (positiveScale ? this .frontFace : (this .frontFace === gl .CCW ? gl .CW : gl .CCW));

						if (context .transparent && ! this .solid)
						{
							gl .enable (gl .CULL_FACE);

							gl .cullFace (gl .FRONT);
							gl .drawArrays (shader .primitiveMode, 0, this .vertexCount);		

							gl .cullFace (gl .BACK);
							gl .drawArrays (shader .primitiveMode, 0, this .vertexCount);		
						}
						else
						{
							if (this .solid)
								gl .enable (gl .CULL_FACE);
							else
								gl .disable (gl .CULL_FACE);

							gl .drawArrays (shader .primitiveMode, 0, this .vertexCount);
						}
					}

					if (shader .color    >= 0) gl .disableVertexAttribArray (shader .color);
					if (shader .texCoord >= 0) gl .disableVertexAttribArray (shader .texCoord);
					if (shader .normal   >= 0) gl .disableVertexAttribArray (shader .normal);
					gl .disableVertexAttribArray (shader .vertex);
				}
			},
			intersectsLine: function (line, intersections)
			{
				try
				{
					var intersected = false;

					this .transformLine (line); // Transform line with matrix from screen nodes.

					if (this .intersectsBBox (line))
					{
						//var modelViewMatrix = Matrix4 .multRight (this .getMatrix (), this .getBrowser () .getModelViewMatrix () .get ()) // This matrix is for clipping only.

						var
							texCoords = this .texCoords [0],
							normals   = this .normals,
							vertices  = this .vertices,
							uvt       = this .uvt,
							v0        = this .v0,
							v1        = this .v1,
							v2        = this .v2;

						for (var i = 0, length = this .vertexCount; i < length; i += 3)
						{
							var i4 = i * 4;

							v0 .x = vertices [i4 + 0]; v0 .y = vertices [i4 + 1]; v0 .z = vertices [i4 +  2];
							v1 .x = vertices [i4 + 4]; v1 .y = vertices [i4 + 5]; v1 .z = vertices [i4 +  6];
							v2 .x = vertices [i4 + 8]; v2 .y = vertices [i4 + 9]; v2 .z = vertices [i4 + 10];

							if (line .intersectsTriangle (v0, v1, v2, uvt))
							{
								// Get barycentric coordinates.

								var
									u = uvt .x,
									v = uvt .y,
									t = 1 - u - v;

								// Determine vectors for X3DPointingDeviceSensors.

								var point = new Vector3 (t * vertices [i4 + 0] + u * vertices [i4 + 4] + v * vertices [i4 +  8],
							                            t * vertices [i4 + 1] + u * vertices [i4 + 5] + v * vertices [i4 +  9],
							                            t * vertices [i4 + 2] + u * vertices [i4 + 6] + v * vertices [i4 + 10]);

								//if (this .isClipped (point, modelViewMatrix))
								//	return continue;

								var texCoord = new Vector2 (t * texCoords [i4 + 0] + u * texCoords [i4 + 4] + v * texCoords [i4 + 8],
								                            t * texCoords [i4 + 1] + u * texCoords [i4 + 5] + v * texCoords [i4 + 9]);

								var i3 = i * 3;

								var normal = new Vector3 (t * normals [i3 + 0] + u * normals [i3 + 3] + v * normals [i3 + 6],
								                          t * normals [i3 + 1] + u * normals [i3 + 4] + v * normals [i3 + 7],
								                          t * normals [i3 + 2] + u * normals [i3 + 5] + v * normals [i3 + 8]);

								intersections .push ({ texCoord: texCoord, normal: normal, point: point });
								intersected = true;
							}
						}
					}

					return intersected;
				}
				catch (error)
				{
					//console .log (error);
					return false;
				}
			},
			intersectsBBox: function (line)
			{
				var
					planes       = this .planes,
					min          = this .min,
					max          = this .max,
					intersection = this .intersection;

				if (planes [0] .intersectsLine (line, intersection))
				{
					if (intersection .x >= min .x && intersection .x <= max .x &&
					    intersection .y >= min .y && intersection .y <= max .y)
						return true;
				}

				if (planes [1] .intersectsLine (line, intersection))
				{
					if (intersection .x >= min .x && intersection .x <= max .x &&
					    intersection .y >= min .y && intersection .y <= max .y)
						return true;
				}

				if (planes [2] .intersectsLine (line, intersection))
				{
					if (intersection .x >= min .x && intersection .x <= max .x &&
					    intersection .z >= min .z && intersection .z <= max .z)
						return true;
				}

				if (planes [3] .intersectsLine (line, intersection))
				{
					if (intersection .x >= min .x && intersection .x <= max .x &&
					    intersection .z >= min .z && intersection .z <= max .z)
						return true;
				}

				if (planes [4] .intersectsLine (line, intersection))
				{
					if (intersection .y >= min .y && intersection .y <= max .y &&
					    intersection .z >= min .z && intersection .z <= max .z)
						return true;
				}

				return false;
			},
			transformLine: function (line)
			{
				//line .multLineMatrix (Matrix4 .inverse (this .getMatrix ()));
			},
		});

		return X3DGeometryNode;
	}
});


define ('cobweb/Browser/Core/RenderingProperties',[
	"jquery",
	"cobweb/Basic/X3DBaseNode",
	"cobweb/Components/Rendering/X3DGeometryNode",
],
function ($,
          X3DBaseNode,
          X3DGeometryNode)
{
	function RenderingProperties (executionContext)
	{
		X3DBaseNode .call (this, executionContext .getBrowser (), executionContext);
	}

	RenderingProperties .prototype = $.extend (Object .create (X3DBaseNode .prototype),
	{
		constructor: RenderingProperties,
		initialize: function ()
		{
			X3DBaseNode .prototype .initialize .call (this);

			this .element   = $("<div/>") .addClass ("renderingProperties") .appendTo (this .getBrowser () .getXML () .find (".canvas"));
			this .enabled   = false;
			this .startTime = 0;
			this .frames    = 0;

			if (this .getBrowser () .getXML () [0] .getAttribute ("statistics") != "false")
				this .setEnabled (true);
		},
		setEnabled: function (value)
		{
			this .enabled = value;
			
			if (value)
			{
				this .element .fadeIn ();
				this .getBrowser () .prepareEvents () .addInterest (this, "update");
				this .update ();
			}
			else
			{
				this .element .fadeOut ();
				this .getBrowser () .prepareEvents () .removeInterest (this, "update");
			}
		},
		getEnabled: function ()
		{
			return this .enabled;
		},
		update: function ()
		{
			var currentTime = this .getBrowser () .getCurrentTime ();
		
			if (currentTime - this .startTime > 1)
			{
				var
					browser           = this .getBrowser ();
					layers            = browser .getWorld () .getLayerSet () .getLayers ()
					traverseTime      = 0,
					displayTime       = 0,
					opaqueShapes      = 0,
					transparentShapes = 0;

				var
					prepareEvents = Object .keys (browser .prepareEvents () .getInterests ()) .length,
					sensors       = Object .keys (browser .sensors () .getInterests ()) .length;

				for (var i = 0; i < layers .length; ++ i)
				{
					var layer = layers [i];
					traverseTime      += layer .traverseTime;
					displayTime       += layer .displayTime;
					opaqueShapes      += layer .numOpaqueShapes;
					transparentShapes += layer .numTransparentShapes;
				}

				var routingTime = browser .browserTime - (browser .cameraTime + traverseTime + displayTime);

				var text = "";
				text += "Rendering Properties\n\n";
				text += "Frame rate: " + (this .frames / (currentTime - this .startTime)) .toFixed (2) .toLocaleString () + " fps\n";
				text += "System:     " + browser .systemTime .toFixed (2) .toLocaleString () + " ms" + "\n";
				text += "Browser:    " + browser .browserTime .toFixed (2) .toLocaleString () + " ms" + "\n";
				text += "Routing:    " + routingTime .toFixed (2) .toLocaleString () + " ms" + "\n";
				text += "Camera:     " + browser .cameraTime .toFixed (2) .toLocaleString () + " ms" + "\n";
				text += "Traverse:   " + traverseTime .toFixed (2) .toLocaleString () + " ms" + "\n";
				text += "Display:    " + displayTime .toFixed (2) .toLocaleString () + " ms" + "\n";
				text += "Picking:    " + browser .pickingTime .toFixed (2) .toLocaleString () + " ms" + "\n";
				text += "Shapes:     " + opaqueShapes + " + " + transparentShapes + "\n";
				text += "Sensors:    " + (prepareEvents + sensors) + "\n";

				this .element .text (text);

				this .frames    = 0;
				this .startTime = currentTime;
			}
			else
				++ this .frames;
		},
	});

	return RenderingProperties;
});


define ('cobweb/Browser/Core/Notification',[
	"jquery",
	"cobweb/Fields/SFString",
	"cobweb/Basic/X3DBaseNode",
],
function ($,
          SFString,
          X3DBaseNode)
{
	function Notification (executionContext)
	{
		X3DBaseNode .call (this, executionContext .getBrowser (), executionContext);
	}

	Notification .prototype = $.extend (Object .create (X3DBaseNode .prototype),
	{
		constructor: Notification,
		initialize: function ()
		{
			X3DBaseNode .prototype .initialize .call (this);

			this .addChildren ("string", new SFString ());

			this .element = $("<div/>") .addClass ("notification") .appendTo (this .getBrowser () .getXML () .find (".canvas"));

			this .string_ .addInterest (this, "set_string__");
		},
		set_string__: function ()
		{
			if (this .string_ .length === 0)
				return;

			this .element
				.text (this .string_ .getValue ())
				.stop (true, true)
				.fadeIn ()
				.animate ({"delay":1}, 4000)
				.fadeOut ();
		},
	});

	return Notification;
});


define ('cobweb/Browser/Core/X3DCoreContext',[
	"cobweb/Browser/Core/BrowserOptions",
	"cobweb/Browser/Core/RenderingProperties",
	"cobweb/Browser/Core/Notification",
],
function (BrowserOptions,
          RenderingProperties,
          Notification)
{
	function getContext (canvas)
	{
		try
		{
			var gl = canvas .getContext ('experimental-webgl');

			if (gl === null)
				gl = canvas .getContext ('webgl');

			return gl;
		}
		catch (error)
		{
			return null;
		}
	}

	function X3DCoreContext (xml)
	{
		this .xml = xml;
	}

	X3DCoreContext .prototype =
	{
		initialize: function ()
		{
			// Get canvas & context.

			var browser = $("<div/>") .addClass ("browser") .prependTo (this .xml);
			var canvas  = $("<div/>") .addClass ("canvas")  .prependTo (browser);

			this .canvas  = $("<canvas/>") .prependTo (canvas);
			this .context = getContext (this .canvas [0]);

			this .browserOptions      = new BrowserOptions (this);
			this .renderingProperties = new RenderingProperties (this);
			this .notification        = new Notification (this);

			this .browserOptions      .setup ()
			this .renderingProperties .setup ();
			this .notification        .setup ();
		},
		getXML: function ()
		{
			return this .xml;
		},
		getCanvas: function ()
		{
			return this .canvas;
		},
		getContext: function ()
		{
			return this .context;
		},
		getBrowserOptions: function ()
		{
			return this .browserOptions;
		},
		getRenderingProperties: function ()
		{
			return this .renderingProperties;
		},
		getNotification: function ()
		{
			return this .notification;
		},
	};

	return X3DCoreContext;
});


define ('standard/Networking/URI',[
	"jquery",
],
function ($)
{
	/*
	 *  Path
	 */

	function Path (path, separator)
	{
		switch (arguments .length)
		{
			case 2:
			{
				this .value                    = path .split (separator);
				this .value .separator         = separator;
				this .value .leadingSeparator  = false;
				this .value .trailingSeparator = false;
				
				if (this .value .length)
				{
					if (this .value [0] === "")
					{
						this .value .shift ();
						this .value .leadingSeparator = true;
					}
				}
				
				if (this .value .length)
				{
					if (this .value [this .value .length - 1] === "")
					{
						this .value .pop ();
						this .value .trailingSeparator = true;
					}		
				}
				
				break;
			}
			case 4:
			{
				this .value                    = arguments [0];
				this .value .separator         = arguments [1];
				this .value .leadingSeparator  = arguments [2];
				this .value .trailingSeparator = arguments [3];					
				break;
			}
		}
	}

	Path .prototype =
	{
		copy: function ()
		{
			return new Path (this .value .slice (0, this .value .length), 
		                    this .value .separator,
		                    this .value .leadingSeparator,
		                    this .value .trailingSeparator);
		},
		get origin ()
		{
			return new Path ([ ], 
		                    this .value .separator,
		                    true,
		                    false);
		},
		get base ()
		{
			if (this .value .trailingSeparator)
				return this .copy ();

			return this .parent;	
		},
		get parent ()
		{
			switch (this .value .length)
			{
				case 0:
				case 1:
				{
					if (this .value .leadingSeparator)
						return this .origin;

					return new Path ([ ".." ], this .value .separator, false, false);
				}

				default:
					return new Path (this .value .slice (0, this .value .length - 1), 
				                    this .value .separator,
				                    this .value .leadingSeparator,
				                    true);
			}

		},
		getRelativePath: function (descendant)
		{
			var path = new Path ([ ], "/", false, false);

			var basePath       = this .removeDotSegments () .base;
			var descendantPath = descendant .removeDotSegments ();

			var i, j;

			for (i = 0; i < basePath .value .length && i < descendantPath .value .length; ++ i)
			{
				if (basePath .value [i] !== descendantPath .value [i])
					break;
			}

			for (j = i; j < basePath .value .length; ++ j)
				path .value .push ("..");

			for (j = i; j < descendantPath .value .length; ++ j)
				path .value .push (descendantPath .value [j]);

			return path;
		},
		removeDotSegments: function ()
		{
			var path = new Path ([ ], this .value .separator, this .value .leadingSeparator, this .value .trailingSeparator);

			if (this .value .length)
			{
				for (var i = 0; i < this .value .length; ++ i)
				{
					var segment = this .value [i];
				
					if (segment .length === 0)
						;

					else if (segment === ".")
						path .value .trailingSeparator = true;

					else if (segment === "..")
					{
						path .value .trailingSeparator = true;

						if (path .value .length)
							path .value .pop ();
					}

					else
					{
						path .value .trailingSeparator = false;
						path .value .push (segment);
					}
				}

				path .value .trailingSeparator |= this .value .trailingSeparator;
			}

			return path;
		},
		toString: function ()
		{
			var string = "";
		
			if (this .value .leadingSeparator)
				string += this .value .separator;

			string += this .value .join (this .value .separator);

			if (this .value .trailingSeparator)
				string += this .value .separator;

			return string;
		},
	};

	/*
	 *  URI
	 */

	var wellKnownPorts =
	{
		ftp:   21,
		http:  80,
		https: 443,
		ftps:  990,
	};

	var address   = /^(?:([^:\/?#]*?):)?(?:(\/\/)([^\/?#]*))?([^?#]*)(?:\?([^#]*))?(?:#(.*))?$/;
	var authority = /^(.*?)(?:\:([^:]*))?$/;

	function parse (uri, string)
	{
		var result = address .exec (string);
	
		if (result)
		{
			uri .scheme    = result [1] || "";
			uri .slashs    = result [2] || "";
			uri .authority = result [3] || "";
			uri .path      = result [4] || "";
			uri .query     = result [5] || "";
			uri .fragment  = result [6] || "";
			
			var result = authority .exec (uri .authority);
			
			if (result)
			{
				uri .host      = result [1] || "";
				uri .port      = result [2] ? parseInt (result [2]) : 0;
				uri .authority = uri .host;

				if (uri .port)
					uri .authority += ":" + uri .port;
			}
			
			uri .absolute = Boolean (uri .slashs .length) || uri .path [0] === "/";
			uri .local    = /^(?:file|data)$/ .test (uri .scheme) || (! uri .scheme && ! uri .authority)
		}

		uri .string = string;
	}

	function removeDotSegments (path)
	{
		return new Path (path, "/") .removeDotSegments () .toString ();
	}

	function URI (uri)
	{
		this .value =
		{
			local:     true,
			absolute:  true,
			scheme:    "",
			slashs:    "",
			authority: "",
			host:      "",
			port:      0,
			path:      "",
			query:     "",
			fragment:  "",
			string:    "",
		};

		switch (arguments .length)
		{
			case 0:
				break;
			case 1:
			{
				parse (this .value, uri);
				break;
			}
			case 10:
			{
				this .value .local     = arguments [0];
				this .value .absolute  = arguments [1];
				this .value .scheme    = arguments [2];
				this .value .slashs    = arguments [3];
				this .value .authority = arguments [4];
				this .value .host      = arguments [5];
				this .value .port      = arguments [6];
				this .value .path      = arguments [7];
				this .value .query     = arguments [8];
				this .value .fragment  = arguments [9];
				this .value .string    = this .toString ();
				break;
			}
		}
	};

	URI .prototype =
	{
		copy: function ()
		{
			return new URI (this .value .local,
			                this .value .absolute,
			                this .value .scheme,
			                this .value .slashs,
			                this .value .authority,
			                this .value .host,
			                this .value .port,
			                this .value .path,
			                this .value .query,
			                this .value .fragment);
		},
		get length ()
		{
			return this .value .string .length;
		},
		isRelative: function ()
		{
			return ! this .value .absolute ();
		},
		isAbsolute: function ()
		{
			return ! this .value .absolute;
		},
		isLocal: function ()
		{
			return this .value .local;
		},
		isNetwork: function ()
		{
			return ! this .value .local;
		},
		isDirectory: function ()
		{
			return this .value .path .length && this .value .path [this .value .path .length - 1] === "/";
		},
		isFile: function ()
		{
			return ! this .isDirectory ();
		},
		get hierarchy ()
		{
			var hierarchy = "";

			hierarchy += this .value .slashs;
			hierarchy += this .value .authority;
			hierarchy += this .value .path;

			return hierarchy;
		},
		get authority ()
		{
			return this .value .authority;
		},
		get scheme ()
		{
			return this .value .scheme;
		},
		get host ()
		{
			return this .value .host;
		},
		get port ()
		{
			return this .value .port;
		},
		get wellKnownPort ()
		{
			var wellKnownPort = wellKnownPorts [this .value .scheme];

			if (wellKnownPort !== undefined)
				return wellKnownPort;

			return 0;
		},
		get path ()
		{
			return this .value .path;
		},
		set query (value)
		{
			this .value .query = value;
		},
		get query ()
		{
			return this .value .query;
		},
		set fragment (value)
		{
			this .value .fragment = value;
		},
		get fragment ()
		{
			return this .value .fragment;
		},
		get location ()
		{
			return this .toString ();
		},
		get origin ()
		{
			return new URI (this .value .local,
			                this .value .absolute,
			                this .value .scheme,
			                this .value .slashs,
			                this .value .authority,
			                this .value .host,
			                this .value .port,
			                this .value .local ? "/" : "",
			                "",
			                "");
		},
		get base ()
		{
			if (this .isDirectory ())
				return new URI (this .value .local,
				                this .value .absolute,
				                this .value .scheme,
				                this .value .slashs,
				                this .value .authority,
				                this .value .host,
				                this .value .port,
				                this .value .path,
				                "",
				                "");

			return this .parent;
		},
		get parent ()
		{
			var path;
			
			if (this .isDirectory ())
			{
				if (this .value .path .length == 1)
					return "/";

				path = this .value .path .substr (0, this .value .path .length - 1);
			}
			else
				path = this .path;

			var slash = path .lastIndexOf ("/");
			
			path = slash == -1 ? "" : path .substring (0, path .lastIndexOf ("/") + 1);

			return new URI (this .value .local,
			                this .value .absolute,
			                this .value .scheme,
			                this .value .slashs,
			                this .value .authority,
			                this .value .host,
			                this .value .port,
			                path,
			                "",
			                "");	
		},
		get filename ()
		{
			return new URI (this .value .local,
			                this .value .absolute,
			                this .value .scheme,
			                this .value .slashs,
			                this .value .authority,
			                this .value .host,
			                this .value .port,
			                this .value .path,
			                "",
			                "");
		},
		get basename ()
		{
			if (this .value .path)
				return this .value .path .substr (this .value .path. lastIndexOf ("/") + 1);

			return "";
		},
		get prefix ()
		{
			if (this .value .path .length && this .isFile ())
			{
				var basename = this .basename;
				var suffix   = this .suffix;

				return basename .substr (0, basename .length - suffix .length);
			}

			return this .basename;
		},
		get suffix ()
		{
			var dot   = this .value .path .lastIndexOf (".");
			var slash = this .value .path .lastIndexOf ("/");

			if (slash < dot)
				return this .value .path .substr (dot);

			return "";
		},
		transform: function (reference)
		{
			var T_local    = false;
			var T_absolute = false;

			var T_scheme    = "";
			var T_slashs    = "";
			var T_authority = "";
			var T_host      = "";
			var T_port      = 0;
			var T_path      = "";
			var T_query     = "";
			var T_fragment  = "";

			if (reference .scheme .length)
			{
				T_local     = reference .isLocal ();
				T_absolute  = reference .isAbsolute ();
				T_scheme    = reference .scheme;
				T_slashs    = reference .value .slashs;
				T_authority = reference .authority;
				T_host      = reference .host;
				T_port      = reference .port;
				T_path      = reference .path;
				T_query     = reference .query;
			}
			else
			{
				if (reference .authority .length)
				{
					T_local     = reference .isLocal ();
					T_absolute  = reference .isAbsolute ();
					T_authority = reference .authority;
					T_host      = reference .host;
					T_port      = reference .port;
					T_path      = reference .path;
					T_query     = reference .query;
				}
				else
				{
					if (reference .path .length === 0)
					{
						var T_path = this .value .path;

						if (reference .query .length)
							T_query = reference .query;
						else
							T_query = this .value .query;
					}
					else
					{
						if (reference .path [0] === "/")
						{
							T_path = reference .path;
						}
						else
						{
							// merge (Base .path (), reference .path ());

							var base = this .base;

							if (base .path .length === 0)
								T_path = "/";
							else
								T_path += base .path;

							T_path += reference .path;
						}

						T_query = reference .query;
					}

					T_local     = this .isLocal ();
					T_absolute  = this .isAbsolute () || reference .isAbsolute ();
					T_authority = this .value .authority;
					T_host      = this .value .host;
					T_port      = this .value .port;
				}

				T_scheme = this .value .scheme;
				T_slashs = this .value .slashs;
			}

			T_fragment = reference .fragment;

			return new URI (T_local,
			                T_absolute,
			                T_scheme,
			                T_slashs,
			                T_authority,
			                T_host,
			                T_port,
			                removeDotSegments (T_path),
			                T_query,
			                T_fragment);
		},
		removeDotSegments: function ()
		{
			return new URI (this .value .local,
			                this .value .absolute,
			                this .value .scheme,
			                this .value .slashs,
			                this .value .authority,
			                this .value .host,
			                this .value .port,
			                removeDotSegments (this .value .path),
			                this .value .query,
			                this .value .fragment);
		},
		getRelativePath: function (descendant)
		{
			if (this .value .scheme !== descendant .scheme)
				return descendant;

			if (this .value .authority !== descendant .authority)
				return descendant;

			var path           = new Path (this .value .path, "/");
			var descendantPath = new Path (descendant .path,  "/");

			return new URI (true,
			                false,
			                "",
			                "",
			                "",
			                "",
			                0,
			                path .getRelativePath (descendantPath) .toString (),
			                descendant .query,
			                descendant .fragment);
		},
		escape: function ()
		{
			return new URI (escape (this .location));
		},
		unescape: function ()
		{
			return new URI (unescape (this .location));	
		},
		toString: function ()
		{
			var string = this .value .scheme;

			if (this .value .scheme .length)
				string += ":";

			string += this .hierarchy;

			if (this .value .query .length)
				string += "?" + this .value .query;

			if (this .value .fragment .length)
				string += "#" + this .value .fragment;

			return string;
		},
	};

	return URI;
});


define ('cobweb/Browser/Networking/X3DNetworkingContext',[
	"cobweb/Fields",
	"standard/Networking/URI",
],
function (Fields,
          URI)
{
	with (Fields)
	{
		function X3DNetworkingContext () { }

		X3DNetworkingContext .prototype =
		{
			initialize: function ()
			{
			   this .cache = this .getXML () [0] .getAttribute ("cache") != "false";

				this .addChildren ("loadCount", new SFInt32 ());
				this .loadingObjects = { };

				this .location     = new URI (this .getXML () [0] .baseURI);
				this .defaultScene = this .createScene ();
				this .defaultScene .setup ();
				this .defaultScene .beginUpdate ();

				this .privateScene = this .createScene ();
				this .privateScene .setup ();
				this .privateScene .beginUpdate ();
			},
			doCaching: function ()
			{
			   return this .cache;
			},
			getLocation: function ()
			{
				return this .location;
			},
			getDefaultScene: function ()
			{
				return this .defaultScene;
			},
			getPrivateScene: function ()
			{
				return this .privateScene;
			},
			addLoadCount: function (object)
			{
			   if (this .loadingObjects .hasOwnProperty (object .getId ()))
			      return;

			   this .loadingObjects [object .getId ()] = true;

				var value = this .loadCount_ .getValue () + 1;
				this .loadCount_ = value;
				this .getNotification () .string_ = "Loading " + value;
				this .setCursor ("DEFAULT");
			},
			removeLoadCount: function (object)
			{
			   if (! this .loadingObjects .hasOwnProperty (object .getId ()))
			      return;

			   delete this .loadingObjects [object .getId ()];

				var value = this .loadCount_ .getValue () - 1;
				this .loadCount_ = value;

				if (value)
					this .getNotification () .string_ = "Loading " + value;
				else
				{
					this .getNotification () .string_ = "Loading done";
					this .setCursor ("DEFAULT");
				}
			},
		};

		return X3DNetworkingContext;
	}
});


define ('cobweb/Components/Shape/X3DAppearanceChildNode',[
	"jquery",
	"cobweb/Components/Core/X3DNode",
	"cobweb/Bits/X3DConstants",
],
function ($,
          X3DNode, 
          X3DConstants)
{
	function X3DAppearanceChildNode (browser, executionContext)
	{
		X3DNode .call (this, browser, executionContext);

		this .addType (X3DConstants .X3DAppearanceChildNode);
	}

	X3DAppearanceChildNode .prototype = $.extend (Object .create (X3DNode .prototype),
	{
		constructor: X3DAppearanceChildNode,
	});

	return X3DAppearanceChildNode;
});



define ('cobweb/Components/Shaders/X3DShaderNode',[
	"jquery",
	"cobweb/Components/Shape/X3DAppearanceChildNode",
	"cobweb/Bits/X3DConstants",
],
function ($,
          X3DAppearanceChildNode, 
          X3DConstants)
{
	function X3DShaderNode (browser, executionContext)
	{
		X3DAppearanceChildNode .call (this, browser, executionContext);

		this .addType (X3DConstants .X3DShaderNode);
	}

	X3DShaderNode .prototype = $.extend (Object .create (X3DAppearanceChildNode .prototype),
	{
		constructor: X3DShaderNode,
	});

	return X3DShaderNode;
});



define ('cobweb/Components/Shaders/X3DProgrammableShaderObject',[
	"jquery",
	"cobweb/Bits/X3DConstants",
],
function ($,
          X3DConstants)
{
	function X3DProgrammableShaderObject (browser, executionContext)
	{
		this .addType (X3DConstants .X3DProgrammableShaderObject);
	}

	X3DProgrammableShaderObject .prototype =
	{
		constructor: X3DProgrammableShaderObject,
		initialize: function () { },
		hasUserDefinedFields: function ()
		{
			return true;
		},
	};

	return X3DProgrammableShaderObject;
});



define ('cobweb/Components/Shaders/ComposedShader',[
	"jquery",
	"cobweb/Fields",
	"cobweb/Basic/X3DFieldDefinition",
	"cobweb/Basic/FieldDefinitionArray",
	"cobweb/Components/Shaders/X3DShaderNode",
	"cobweb/Components/Shaders/X3DProgrammableShaderObject",
	"cobweb/Bits/X3DConstants",
	"standard/Math/Numbers/Matrix3",
],
function ($,
          Fields,
          X3DFieldDefinition,
          FieldDefinitionArray,
          X3DShaderNode, 
          X3DProgrammableShaderObject, 
          X3DConstants,
          Matrix3)
{
	with (Fields)
	{
		var MAX_LIGHTS = 8;

		function ComposedShader (executionContext)
		{
			X3DShaderNode               .call (this, executionContext .getBrowser (), executionContext);
			X3DProgrammableShaderObject .call (this, executionContext .getBrowser (), executionContext);

			this .addType (X3DConstants .ComposedShader);
		}

		ComposedShader .prototype = $.extend (Object .create (X3DShaderNode .prototype),
			X3DProgrammableShaderObject .prototype,
		{
			constructor: ComposedShader,
			fieldDefinitions: new FieldDefinitionArray ([
				new X3DFieldDefinition (X3DConstants .inputOutput,    "metadata",   new SFNode ()),
				new X3DFieldDefinition (X3DConstants .inputOnly,      "activate",   new SFBool ()),
				new X3DFieldDefinition (X3DConstants .outputOnly,     "isSelected", new SFBool ()),
				new X3DFieldDefinition (X3DConstants .outputOnly,     "isValid",    new SFBool ()),
				new X3DFieldDefinition (X3DConstants .initializeOnly, "language",   new SFString ("")),
				new X3DFieldDefinition (X3DConstants .inputOutput,    "parts",      new MFNode ()),
			]),
			maxLights: MAX_LIGHTS,
			settings: {
				shader: null,
				lights: 0,
			},
			wireframe: false,
			getTypeName: function ()
			{
				return "ComposedShader";
			},
			getComponentName: function ()
			{
				return "Shaders";
			},
			getContainerField: function ()
			{
				return "shaders";
			},
			initialize: function ()
			{
				X3DShaderNode               .prototype .initialize .call (this);
				X3DProgrammableShaderObject .prototype .initialize .call (this);

				this .normalMatrixArray = new Float32Array (9);
				this .relink ();
			},
			relink: function ()
			{
				var
					gl      = this .getBrowser () .getContext (),
					program = gl .createProgram ();

				this .program = program;

				for (var i = 0, length = this .parts_ .length; i < length; ++ i)
					gl .attachShader (program, this .parts_ [i] .getValue () .getShader ());
	
				this .bindAttribLocations (gl, program);

				gl .linkProgram (program);

				this .isValid_ = gl .getProgramParameter (program, gl .LINK_STATUS);

				if (this .isValid_ .getValue ())
					this .getDefaultUniforms ();
				else
					this .getBrowser () .print ("Could not initialise shaders!");
			},
			bindAttribLocations: function (gl, program)
			{
				gl .bindAttribLocation (program, 3, "x3d_Color");
				gl .bindAttribLocation (program, 2, "x3d_TexCoord");
				gl .bindAttribLocation (program, 1, "x3d_Normal");
				gl .bindAttribLocation (program, 0, "x3d_Vertex");
			},
			getDefaultUniforms: function ()
			{
				// Get uniforms and attributes.

				var
					gl      = this .getBrowser () .getContext (),
					program = this .program;

				gl .useProgram (program);

				this .fogType            = gl .getUniformLocation (program, "x3d_fogType");
				this .fogColor           = gl .getUniformLocation (program, "x3d_fogColor");
				this .fogVisibilityRange = gl .getUniformLocation (program, "x3d_fogVisibilityRange");

				this .lighting      = gl .getUniformLocation (program, "x3d_Lighting");
				this .colorMaterial = gl .getUniformLocation (program, "x3d_ColorMaterial");

				this .lightType             = [ ];
				this .lightOn               = [ ];
				this .lightColor            = [ ];
				this .lightIntensity        = [ ];
				this .lightAmbientIntensity = [ ];
				this .lightAttenuation      = [ ];
				this .lightLocation         = [ ];
				this .lightDirection        = [ ];
				this .lightBeamWidth        = [ ];
				this .lightCutOffAngle      = [ ];
				this .lightRadius           = [ ];

				for (var i = 0; i < this .maxLights; ++ i)
				{
					this .lightType [i]             = gl .getUniformLocation (program, "x3d_LightType[" + i + "]");
					this .lightOn [i]               = gl .getUniformLocation (program, "x3d_LightOn[" + i + "]");
					this .lightColor [i]            = gl .getUniformLocation (program, "x3d_LightColor[" + i + "]");
					this .lightAmbientIntensity [i] = gl .getUniformLocation (program, "x3d_LightAmbientIntensity[" + i + "]");
					this .lightIntensity [i]        = gl .getUniformLocation (program, "x3d_LightIntensity[" + i + "]");
					this .lightAttenuation [i]      = gl .getUniformLocation (program, "x3d_LightAttenuation[" + i + "]");
					this .lightLocation [i]         = gl .getUniformLocation (program, "x3d_LightLocation[" + i + "]");
					this .lightDirection [i]        = gl .getUniformLocation (program, "x3d_LightDirection[" + i + "]");
					this .lightBeamWidth [i]        = gl .getUniformLocation (program, "x3d_LightBeamWidth[" + i + "]");
					this .lightCutOffAngle [i]      = gl .getUniformLocation (program, "x3d_LightCutOffAngle[" + i + "]");
					this .lightRadius [i]           = gl .getUniformLocation (program, "x3d_LightRadius[" + i + "]");
				}

				this .ambientIntensity = gl .getUniformLocation (program, "x3d_AmbientIntensity");
				this .diffuseColor     = gl .getUniformLocation (program, "x3d_DiffuseColor");
				this .specularColor    = gl .getUniformLocation (program, "x3d_SpecularColor");
				this .emissiveColor    = gl .getUniformLocation (program, "x3d_EmissiveColor");
				this .shininess        = gl .getUniformLocation (program, "x3d_Shininess");
				this .transparency     = gl .getUniformLocation (program, "x3d_Transparency");

				this .texturing = gl .getUniformLocation (program, "x3d_Texturing");
				this .texture   = gl .getUniformLocation (program, "x3d_Texture");

				this .textureMatrix    = gl .getUniformLocation (program, "x3d_TextureMatrix");
				this .normalMatrix     = gl .getUniformLocation (program, "x3d_NormalMatrix");
				this .projectionMatrix = gl .getUniformLocation (program, "x3d_ProjectionMatrix");
				this .modelViewMatrix  = gl .getUniformLocation (program, "x3d_ModelViewMatrix");
				
				this .color    = gl .getAttribLocation (program, "x3d_Color");
				this .texCoord = gl .getAttribLocation (program, "x3d_TexCoord");
				this .normal   = gl .getAttribLocation (program, "x3d_Normal");
				this .vertex   = gl .getAttribLocation (program, "x3d_Vertex");	

				// Set texture to active texture unit 0.
				gl .uniform1i (this .texture, 0);
			},
			setGlobalUniforms: function ()
			{
				var
					browser      = this .getBrowser (),
					gl           = browser .getContext (),
					globalLights = browser .getGlobalLights ();

				gl .useProgram (this .program);

				for (var i = 0; i < globalLights .length; ++ i)
					globalLights [i] .use (gl, this, i);

				this .settings .shader = null;
			},
			setLocalUniforms: function (context)
			{
				var
					settings        = this .settings,
					browser         = this .getBrowser (),
					gl              = browser .getContext (),
					material        = browser .getMaterial (),
					texture         = browser .getTexture (),
					modelViewMatrix = context .modelViewMatrix
					customShader    = (this !== browser .getDefaultShader ());

				if (settings .shader !== this)
				{
					settings .shader = this;
					gl .useProgram (this .program);
					gl .uniformMatrix4fv (this .projectionMatrix, false, browser .getProjectionMatrixArray ());
				}

				context .fog .use (gl, this);
				gl .uniform1i (this .colorMaterial, context .colorMaterial);

				if (material)
				{
					// Lights

					var
						globalLights = browser .getGlobalLights (),
						localLights  = context .localLights,
						lights       = Math .min (this .maxLights, globalLights .length + localLights .length),
						lightOn      = this .lightOn;

					if (customShader)
					{
						for (var i = 0; i < globalLights .length; ++ i)
							globalLights [i] .use (gl, this, i);
					}

					for (var i = globalLights .length, l = 0; i < lights; ++ i, ++ l)
						localLights [l] .use (gl, this, i);

					for (var length = settings .lights; i < length; ++ i)
						gl .uniform1i (lightOn [i], false);

					settings .lights = lights;

					// Material

					gl .uniform1i  (this .lighting,         true);
					gl .uniform1f  (this .ambientIntensity, material .ambientIntensity);
					gl .uniform3fv (this .diffuseColor,     material .diffuseColor);
					gl .uniform3fv (this .specularColor,    material .specularColor);
					gl .uniform3fv (this .emissiveColor,    material .emissiveColor);
					gl .uniform1f  (this .shininess,        material .shininess);
					gl .uniform1f  (this .transparency,     material .transparency);

					// Set normal matrix.
					var normalMatrix = this .normalMatrixArray;
					normalMatrix [0] = modelViewMatrix [0]; normalMatrix [1] = modelViewMatrix [4]; normalMatrix [2] = modelViewMatrix [ 8];
					normalMatrix [3] = modelViewMatrix [1]; normalMatrix [4] = modelViewMatrix [5]; normalMatrix [5] = modelViewMatrix [ 9];
					normalMatrix [6] = modelViewMatrix [2]; normalMatrix [7] = modelViewMatrix [6]; normalMatrix [8] = modelViewMatrix [10];
					Matrix3 .prototype .inverse .call (normalMatrix);
					gl .uniformMatrix3fv (this .normalMatrix, false, normalMatrix);
				}
				else
				{
					gl .uniform1i (this .lighting, false);

					if (customShader)
					{
						// Set normal matrix.
						var normalMatrix = this .normalMatrixArray;
						normalMatrix [0] = modelViewMatrix [0]; normalMatrix [1] = modelViewMatrix [4]; normalMatrix [2] = modelViewMatrix [ 8];
						normalMatrix [3] = modelViewMatrix [1]; normalMatrix [4] = modelViewMatrix [5]; normalMatrix [5] = modelViewMatrix [ 9];
						normalMatrix [6] = modelViewMatrix [2]; normalMatrix [7] = modelViewMatrix [6]; normalMatrix [8] = modelViewMatrix [10];
						Matrix3 .prototype .inverse .call (normalMatrix);
						gl .uniformMatrix3fv (this .normalMatrix, false, normalMatrix);
					}
				}

				if (texture)
				{
					texture .traverse ();
					gl .uniform1i (this .texturing, true);
					gl .uniformMatrix4fv (this .textureMatrix, false, browser .getTextureTransform () [0] .getMatrixArray ());
					// Active texture 0 is set on initialization.
				}
				else
					gl .uniform1i (this .texturing, false);

				// Set model view matrix
				gl .uniformMatrix4fv (this .modelViewMatrix, false, modelViewMatrix);
			},
			use: function (context)
			{
				var gl = this .getBrowser () .getContext ();

				gl .useProgram (this .program);
			},
		});

		return ComposedShader;
	}
});


define ('cobweb/Components/Networking/X3DUrlObject',[
	"jquery",
	"cobweb/Fields",
	"cobweb/Bits/X3DConstants",
],
function ($,
          Fields,
          X3DConstants)
{
	with (Fields)
	{
		function X3DUrlObject (browser, executionContext)
		{
			this .addType (X3DConstants .X3DUrlObject);
			
			this .addChildren ("loadState", new SFInt32 (X3DConstants .NOT_STARTED_STATE));
		}

		X3DUrlObject .prototype =
		{
			constructor: X3DUrlObject,
			initialize: function ()
			{
			},
			setLoadState: function (value, notify)
			{
				switch (value)
				{
					case X3DConstants .NOT_STARTED_STATE:
					{
						if (notify !== false)
						{
							if (this .loadState_ .getValue () === X3DConstants .IN_PROGRESS_STATE)
						      this .getBrowser () .removeLoadCount (this);
						}

						break;
					}
					case X3DConstants .IN_PROGRESS_STATE:
					{
						if (notify !== false)
							this .getBrowser () .addLoadCount (this);
						break;
					}
					case X3DConstants .COMPLETE_STATE:
					case X3DConstants .FAILED_STATE:
					{
						if (notify !== false)
							this .getBrowser () .removeLoadCount (this);
						break;
					}
				}

				this .loadState_ = value;
			},
			checkLoadState: function ()
			{
				return this .loadState_ .getValue ();
			},
		};

		return X3DUrlObject;
	}
});



define ('cobweb/Components/Shaders/ShaderPart',[
	"jquery",
	"cobweb/Fields",
	"cobweb/Basic/X3DFieldDefinition",
	"cobweb/Basic/FieldDefinitionArray",
	"cobweb/Components/Core/X3DNode",
	"cobweb/Components/Networking/X3DUrlObject",
	"cobweb/Bits/X3DConstants",
],
function ($,
          Fields,
          X3DFieldDefinition,
          FieldDefinitionArray,
          X3DNode, 
          X3DUrlObject, 
          X3DConstants)
{
	with (Fields)
	{
		var shaderTypes =
		{
			VERTEX:          "VERTEX_SHADER",
			TESS_CONTROL:    "TESS_CONTROL_SHADER",
			TESS_EVALUATION: "TESS_EVALUATION_SHADER",
			GEOMETRY:        "GEOMETRY_SHADER",
			FRAGMENT:        "FRAGMENT_SHADER",
			COMPUTE:         "COMPUTE_SHADER",
		};

		function ShaderPart (executionContext)
		{
			X3DNode      .call (this, executionContext .getBrowser (), executionContext);
			X3DUrlObject .call (this, executionContext .getBrowser (), executionContext);

			this .valid = false;

			this .addType (X3DConstants .ShaderPart);
		}

		ShaderPart .prototype = $.extend (Object .create (X3DNode .prototype),
			X3DUrlObject .prototype,
		{
			constructor: ShaderPart,
			fieldDefinitions: new FieldDefinitionArray ([
				new X3DFieldDefinition (X3DConstants .inputOutput,    "metadata", new SFNode ()),
				new X3DFieldDefinition (X3DConstants .initializeOnly, "type",     new SFString ("VERTEX")),
				new X3DFieldDefinition (X3DConstants .inputOutput,    "url",      new MFString ()),
			]),
			getTypeName: function ()
			{
				return "ShaderPart";
			},
			getComponentName: function ()
			{
				return "Shaders";
			},
			getContainerField: function ()
			{
				return "parts";
			},
			initialize: function ()
			{
				X3DNode      .prototype .initialize .call (this);
				X3DUrlObject .prototype .initialize .call (this);

				var gl = this .getBrowser () .getContext ();

				this .shader = gl .createShader (gl [this .getShaderType ()]);

				this .requestImmediateLoad ();
			},
			isValid: function ()
			{
				return this .valid;
			},
			getShader: function ()
			{
				return this .shader;
			},
			getShaderType: function ()
			{
				var type = shaderTypes [this .type_ .getValue ()];
				
				if (type)
					return type;

				return "VERTEX_SHADER";
			},
			getCDATA: function ()
			{
				return this .url_;
			},
			requestImmediateLoad: function ()
			{
				if (this .checkLoadState () == X3DConstants .COMPLETE_STATE || this .checkLoadState () == X3DConstants .IN_PROGRESS_STATE)
					return;
	
				this .setLoadState (X3DConstants .IN_PROGRESS_STATE);
				
				this .valid = false;

				var gl = this .getBrowser () .getContext ();

				for (var i = 0; i < this .url_. length; ++ i)
				{
					var string = this .url_ [i] .replace (/^data\:.*?,/, "");

					gl .shaderSource (this .shader, string);
					gl .compileShader (this .shader);

					this .valid = gl .getShaderParameter (this .shader, gl .COMPILE_STATUS);

					if (this .valid)
						break;

					this .getBrowser () .print (this .getTypeName () + ": " + gl .getShaderInfoLog (this .shader));
				}

				this .setLoadState (this .valid ? X3DConstants .COMPLETE_STATE : X3DConstants .FAILED_STATE);
			},
		});

		return ShaderPart;
	}
});

/**
 * @license RequireJS text 2.0.2+ Copyright (c) 2010-2012, The Dojo Foundation All Rights Reserved.
 * Available via the MIT or new BSD license.
 * see: http://github.com/requirejs/text for details
 */
/*jslint regexp: true */
/*global require: false, XMLHttpRequest: false, ActiveXObject: false,
  define: false, window: false, process: false, Packages: false,
  java: false, location: false */

define('text/text',['module'], function (module) {
    

    var text, fs,
        progIds = ['Msxml2.XMLHTTP', 'Microsoft.XMLHTTP', 'Msxml2.XMLHTTP.4.0'],
        xmlRegExp = /^\s*<\?xml(\s)+version=[\'\"](\d)*.(\d)*[\'\"](\s)*\?>/im,
        bodyRegExp = /<body[^>]*>\s*([\s\S]+)\s*<\/body>/im,
        hasLocation = typeof location !== 'undefined' && location.href,
        defaultProtocol = hasLocation && location.protocol && location.protocol.replace(/\:/, ''),
        defaultHostName = hasLocation && location.hostname,
        defaultPort = hasLocation && (location.port || undefined),
        buildMap = [],
        masterConfig = (module.config && module.config()) || {};

    text = {
        version: '2.0.2+',

        strip: function (content) {
            //Strips <?xml ...?> declarations so that external SVG and XML
            //documents can be added to a document without worry. Also, if the string
            //is an HTML document, only the part inside the body tag is returned.
            if (content) {
                content = content.replace(xmlRegExp, "");
                var matches = content.match(bodyRegExp);
                if (matches) {
                    content = matches[1];
                }
            } else {
                content = "";
            }
            return content;
        },

        jsEscape: function (content) {
            return content.replace(/(['\\])/g, '\\$1')
                .replace(/[\f]/g, "\\f")
                .replace(/[\b]/g, "\\b")
                .replace(/[\n]/g, "\\n")
                .replace(/[\t]/g, "\\t")
                .replace(/[\r]/g, "\\r")
                .replace(/[\u2028]/g, "\\u2028")
                .replace(/[\u2029]/g, "\\u2029");
        },

        createXhr: masterConfig.createXhr || function () {
            //Would love to dump the ActiveX crap in here. Need IE 6 to die first.
            var xhr, i, progId;
            if (typeof XMLHttpRequest !== "undefined") {
                return new XMLHttpRequest();
            } else if (typeof ActiveXObject !== "undefined") {
                for (i = 0; i < 3; i += 1) {
                    progId = progIds[i];
                    try {
                        xhr = new ActiveXObject(progId);
                    } catch (e) {}

                    if (xhr) {
                        progIds = [progId];  // so faster next time
                        break;
                    }
                }
            }

            return xhr;
        },

        /**
         * Parses a resource name into its component parts. Resource names
         * look like: module/name.ext!strip, where the !strip part is
         * optional.
         * @param {String} name the resource name
         * @returns {Object} with properties "moduleName", "ext" and "strip"
         * where strip is a boolean.
         */
        parseName: function (name) {
            var strip = false, index = name.indexOf("."),
                modName = name.substring(0, index),
                ext = name.substring(index + 1, name.length);

            index = ext.indexOf("!");
            if (index !== -1) {
                //Pull off the strip arg.
                strip = ext.substring(index + 1, ext.length);
                strip = strip === "strip";
                ext = ext.substring(0, index);
            }

            return {
                moduleName: modName,
                ext: ext,
                strip: strip
            };
        },

        xdRegExp: /^((\w+)\:)?\/\/([^\/\\]+)/,

        /**
         * Is an URL on another domain. Only works for browser use, returns
         * false in non-browser environments. Only used to know if an
         * optimized .js version of a text resource should be loaded
         * instead.
         * @param {String} url
         * @returns Boolean
         */
        useXhr: function (url, protocol, hostname, port) {
            var uProtocol, uHostName, uPort,
                match = text.xdRegExp.exec(url);
            if (!match) {
                return true;
            }
            uProtocol = match[2];
            uHostName = match[3];

            uHostName = uHostName.split(':');
            uPort = uHostName[1];
            uHostName = uHostName[0];

            return (!uProtocol || uProtocol === protocol) &&
                   (!uHostName || uHostName.toLowerCase() === hostname.toLowerCase()) &&
                   ((!uPort && !uHostName) || uPort === port);
        },

        finishLoad: function (name, strip, content, onLoad) {
            content = strip ? text.strip(content) : content;
            if (masterConfig.isBuild) {
                buildMap[name] = content;
            }
            onLoad(content);
        },

        load: function (name, req, onLoad, config) {
            //Name has format: some.module.filext!strip
            //The strip part is optional.
            //if strip is present, then that means only get the string contents
            //inside a body tag in an HTML string. For XML/SVG content it means
            //removing the <?xml ...?> declarations so the content can be inserted
            //into the current doc without problems.

            // Do not bother with the work if a build and text will
            // not be inlined.
            if (config.isBuild && !config.inlineText) {
                onLoad();
                return;
            }

            masterConfig.isBuild = config.isBuild;

            var parsed = text.parseName(name),
                nonStripName = parsed.moduleName + '.' + parsed.ext,
                url = req.toUrl(nonStripName),
                useXhr = (masterConfig.useXhr) ||
                         text.useXhr;

            //Load the text. Use XHR if possible and in a browser.
            if (!hasLocation || useXhr(url, defaultProtocol, defaultHostName, defaultPort)) {
                text.get(url, function (content) {
                    text.finishLoad(name, parsed.strip, content, onLoad);
                }, function (err) {
                    if (onLoad.error) {
                        onLoad.error(err);
                    }
                });
            } else {
                //Need to fetch the resource across domains. Assume
                //the resource has been optimized into a JS module. Fetch
                //by the module name + extension, but do not include the
                //!strip part to avoid file system issues.
                req([nonStripName], function (content) {
                    text.finishLoad(parsed.moduleName + '.' + parsed.ext,
                                    parsed.strip, content, onLoad);
                });
            }
        },

        write: function (pluginName, moduleName, write, config) {
            if (buildMap.hasOwnProperty(moduleName)) {
                var content = text.jsEscape(buildMap[moduleName]);
                write.asModule(pluginName + "!" + moduleName,
                               "define(function () { return '" +
                                   content +
                               "';});\n");
            }
        },

        writeFile: function (pluginName, moduleName, req, write, config) {
            var parsed = text.parseName(moduleName),
                nonStripName = parsed.moduleName + '.' + parsed.ext,
                //Use a '.js' file name so that it indicates it is a
                //script that can be loaded across domains.
                fileName = req.toUrl(parsed.moduleName + '.' +
                                     parsed.ext) + '.js';

            //Leverage own load() method to load plugin value, but only
            //write out values that do not have the strip argument,
            //to avoid any potential issues with ! in file names.
            text.load(nonStripName, req, function (value) {
                //Use own write() method to construct full module value.
                //But need to create shell that translates writeFile's
                //write() to the right interface.
                var textWrite = function (contents) {
                    return write(fileName, contents);
                };
                textWrite.asModule = function (moduleName, contents) {
                    return write.asModule(moduleName, fileName, contents);
                };

                text.write(pluginName, nonStripName, textWrite, config);
            }, config);
        }
    };

    if (masterConfig.env === 'node' || (!masterConfig.env &&
            typeof process !== "undefined" &&
            process.versions &&
            !!process.versions.node)) {
        //Using special require.nodeRequire, something added by r.js.
        fs = require.nodeRequire('fs');

        text.get = function (url, callback) {
            var file = fs.readFileSync(url, 'utf8');
            //Remove BOM (Byte Mark Order) from utf8 files if it is there.
            if (file.indexOf('\uFEFF') === 0) {
                file = file.substring(1);
            }
            callback(file);
        };
    } else if (masterConfig.env === 'xhr' || (!masterConfig.env &&
            text.createXhr())) {
        text.get = function (url, callback, errback) {
            var xhr = text.createXhr();
            xhr.open('GET', url, true);

            //Allow overrides specified in config
            if (masterConfig.onXhr) {
                masterConfig.onXhr(xhr, url);
            }

            xhr.onreadystatechange = function (evt) {
                var status, err;
                //Do not explicitly handle errors, those should be
                //visible via console output in the browser.
                if (xhr.readyState === 4) {
                    status = xhr.status;
                    if (status > 399 && status < 600) {
                        //An http 4xx or 5xx error. Signal an error.
                        err = new Error(url + ' HTTP status: ' + status);
                        err.xhr = xhr;
                        errback(err);
                    } else {
                        callback(xhr.responseText);
                    }
                }
            };
            xhr.send(null);
        };
    } else if (masterConfig.env === 'rhino' || (!masterConfig.env &&
            typeof Packages !== 'undefined' && typeof java !== 'undefined')) {
        //Why Java, why is this so awkward?
        text.get = function (url, callback) {
            var stringBuffer, line,
                encoding = "utf-8",
                file = new java.io.File(url),
                lineSeparator = java.lang.System.getProperty("line.separator"),
                input = new java.io.BufferedReader(new java.io.InputStreamReader(new java.io.FileInputStream(file), encoding)),
                content = '';
            try {
                stringBuffer = new java.lang.StringBuffer();
                line = input.readLine();

                // Byte Order Mark (BOM) - The Unicode Standard, version 3.0, page 324
                // http://www.unicode.org/faq/utf_bom.html

                // Note that when we use utf-8, the BOM should appear as "EF BB BF", but it doesn't due to this bug in the JDK:
                // http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4508058
                if (line && line.length() && line.charAt(0) === 0xfeff) {
                    // Eat the BOM, since we've already found the encoding on this file,
                    // and we plan to concatenating this buffer with others; the BOM should
                    // only appear at the top of a file.
                    line = line.substring(1);
                }

                stringBuffer.append(line);

                while ((line = input.readLine()) !== null) {
                    stringBuffer.append(lineSeparator);
                    stringBuffer.append(line);
                }
                //Make sure we return a JavaScript string and not a Java string.
                content = String(stringBuffer.toString()); //String
            } finally {
                input.close();
            }
            callback(content);
        };
    }

    return text;
});

define('text', ['text/text'], function (main) { return main; });

define('text!cobweb/Browser/Rendering/Wireframe.vs',[],function () { return '// -*- Mode: C++; coding: utf-8; tab-width: 3; indent-tabs-mode: tab; c-basic-offset: 3 -*-\nprecision mediump float;\n\nuniform mat4 x3d_ProjectionMatrix;\nuniform mat4 x3d_ModelViewMatrix;\n\nuniform bool  x3d_ColorMaterial;   // true if a X3DColorNode is attached, otherwise false\nuniform bool  x3d_Lighting;        // true if a X3DMaterialNode is attached, otherwise false\nuniform vec3  x3d_EmissiveColor;\nuniform float x3d_Transparency;\n\nattribute vec4 x3d_Color;\nattribute vec4 x3d_Vertex;\n\nvarying vec4  C;  // color\nvarying float dv; // distance to vertex\n\nvoid\nmain ()\n{\n\t//gl_PointSize = 10.0;\n\n\tvec4 p = x3d_ModelViewMatrix * x3d_Vertex;\n\n\tdv          = length (vec3 (p));\n\tgl_Position = x3d_ProjectionMatrix * p;\n\n\tif (x3d_Lighting)\n\t{\n\t\tfloat alpha = 1.0 - x3d_Transparency;\n\n\t\tif (x3d_ColorMaterial)\n\t\t{\n\t\t\tC .rgb = x3d_Color .rgb;\n\t\t\tC .a   = x3d_Color .a * alpha;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tC .rgb = x3d_EmissiveColor;\n\t\t\tC .a   = alpha;\n\t\t}\n\t}\n\telse\n\t{\n\t\tif (x3d_ColorMaterial)\n\t\t\tC = x3d_Color;\n\t\telse\n\t\t\tC = vec4 (1.0, 1.0, 1.0, 1.0);\n\t}\n}\n';});

define('text!cobweb/Browser/Rendering/Wireframe.fs',[],function () { return '// -*- Mode: C++; coding: utf-8; tab-width: 3; indent-tabs-mode: tab; c-basic-offset: 3 -*-\nprecision mediump float;\n\n#define NO_FOG           0\n#define LINEAR_FOG       1\n#define EXPONENTIAL_FOG  2\n#define EXPONENTIAL2_FOG 3\n\nuniform int   x3d_fogType;\nuniform vec3  x3d_fogColor;\nuniform float x3d_fogVisibilityRange;\n\nvarying vec4  C;  // color\nvarying float dv; // distance to vertex\n\nfloat\ngetFogInterpolant ()\n{\n\tif (x3d_fogType == NO_FOG)\n\t\treturn 1.0;\n\n\tif (dv >= x3d_fogVisibilityRange)\n\t\treturn 0.0;\n\n\tif (x3d_fogType == LINEAR_FOG)\n\t\treturn (x3d_fogVisibilityRange - dv) / x3d_fogVisibilityRange;\n\n\tif (x3d_fogType == EXPONENTIAL_FOG)\n\t\treturn exp (-dv / (x3d_fogVisibilityRange - dv));\n\n\treturn 1.0;\n}\n\nvoid\nmain ()\n{\n\tfloat f0 = getFogInterpolant ();\n\n\tgl_FragColor .rgb = mix (x3d_fogColor, C .rgb, f0);\n\tgl_FragColor .a   = C .a;\n}\n';});

define('text!cobweb/Browser/Rendering/Gouraud.vs',[],function () { return '// -*- Mode: C++; coding: utf-8; tab-width: 3; indent-tabs-mode: tab; c-basic-offset: 3 -*-\nprecision mediump float;\n\nuniform mat4 x3d_TextureMatrix;\nuniform mat3 x3d_NormalMatrix;\nuniform mat4 x3d_ProjectionMatrix;\nuniform mat4 x3d_ModelViewMatrix;\n\nuniform bool x3d_Lighting;      // true if a X3DMaterialNode is attached, otherwise false\nuniform bool x3d_ColorMaterial; // true if a X3DColorNode is attached, otherwise false\n\n#define MAX_LIGHTS        8\n#define DIRECTIONAL_LIGHT 0\n#define POINT_LIGHT       1\n#define SPOT_LIGHT        2\n\nuniform int   x3d_LightType [MAX_LIGHTS]; // 0: DirectionalLight, 1: PointLight, 2: SpotLight\nuniform bool  x3d_LightOn [MAX_LIGHTS];\nuniform vec3  x3d_LightColor [MAX_LIGHTS];\nuniform float x3d_LightIntensity [MAX_LIGHTS];\nuniform float x3d_LightAmbientIntensity [MAX_LIGHTS];\nuniform vec3  x3d_LightAttenuation [MAX_LIGHTS];\nuniform vec3  x3d_LightLocation [MAX_LIGHTS];\nuniform vec3  x3d_LightDirection [MAX_LIGHTS];\nuniform float x3d_LightRadius [MAX_LIGHTS];\nuniform float x3d_LightBeamWidth [MAX_LIGHTS];\nuniform float x3d_LightCutOffAngle [MAX_LIGHTS];\n\nuniform float x3d_AmbientIntensity;\nuniform vec3  x3d_DiffuseColor;\nuniform vec3  x3d_SpecularColor;\nuniform vec3  x3d_EmissiveColor;\nuniform float x3d_Shininess;\nuniform float x3d_Transparency;\n\nuniform bool      x3d_Texturing;      // true if a X3DTexture2DNode is attached, otherwise false\nuniform sampler2D x3d_Texture;\n\nattribute vec4 x3d_Color;\nattribute vec4 x3d_TexCoord;\nattribute vec3 x3d_Normal;\nattribute vec4 x3d_Vertex;\n\nvarying vec4  frontColor; // color\nvarying vec4  backColor;  // color\nvarying vec4  t;          // texCoord\nvarying float dv;         // distance to vertex\n\nvoid\nmain ()\n{\n\tvec4 C  = x3d_Color;\n\tvec4 p  = x3d_ModelViewMatrix * x3d_Vertex;\n\tvec3 v  = vec3 (p);\n\n\tif (x3d_Texturing)\n\t\tt = x3d_TextureMatrix * x3d_TexCoord;\n\n\tdv = length (v);\n\n\tgl_Position = x3d_ProjectionMatrix * p;\n\n\tif (x3d_Lighting)\n\t{\n\t\tvec3 N  = normalize (x3d_NormalMatrix * x3d_Normal);\n\t\tvec3 bN = -N;\n\t\tvec3 V  = normalize (-v); // normalized vector from point on geometry to viewer\'s position\n\n\t\t// Calculate diffuseFactor & alpha\n\n\t\tvec3  diffuseFactor = vec3 (1.0, 1.0, 1.0);\n\t\tfloat alpha         = 1.0 - x3d_Transparency;\n\n\t\tif (x3d_ColorMaterial)\n\t\t{\n\t\t\tdiffuseFactor = C .rgb;\n\n\t\t\talpha *= C .a;\n\t\t}\n\t\telse\n\t\t\tdiffuseFactor = x3d_DiffuseColor;\n\n\t\tvec3 ambientTerm = diffuseFactor * x3d_AmbientIntensity;\n\n\t\t// Apply light sources\n\n\t\tvec3 frontFinalColor = vec3 (0.0, 0.0, 0.0);\n\t\tvec3 backFinalColor  = vec3 (0.0, 0.0, 0.0);\n\n\t\tfor (int i = 0; i < MAX_LIGHTS; ++ i)\n\t\t{\n\t\t\tfloat dL = length (x3d_LightLocation [i] - v);\n\n\t\t\tif (x3d_LightOn [i] && (x3d_LightType [i] == DIRECTIONAL_LIGHT || dL <= x3d_LightRadius [i]))\n\t\t\t{\n\t\t\t\tvec3 c = x3d_LightAttenuation [i];\n\t\t\t\tvec3 L = x3d_LightType [i] == DIRECTIONAL_LIGHT ? -x3d_LightDirection [i] : normalize (x3d_LightLocation [i] - v);\n\t\t\t\tvec3 H = normalize (L + V); // specular term\n\n\t\t\t\tvec3  frontDiffuseTerm    = diffuseFactor * max (dot (N, L), 0.0);\n\t\t\t\tfloat frontSpecularFactor = bool (x3d_Shininess) ? pow (max (dot (N, H), 0.0), x3d_Shininess) : 1.0;\n\t\t\t\tvec3  frontSpecularTerm   = x3d_SpecularColor * frontSpecularFactor;\n\n\t\t\t\tvec3  backDiffuseTerm    = diffuseFactor * max (dot (bN, L), 0.0);\n\t\t\t\tfloat backSpecularFactor = bool (x3d_Shininess) ? pow (max (dot (bN, H), 0.0), x3d_Shininess) : 1.0;\n\t\t\t\tvec3  backSpecularTerm   = x3d_SpecularColor * backSpecularFactor;\n\n\t\t\t\tfloat attenuation = x3d_LightType [i] == DIRECTIONAL_LIGHT ? 1.0 : 1.0 / max (c [0] + c [1] * dL + c [2] * (dL * dL), 1.0);\n\t\t\t\tfloat spot        = 1.0;\n\n\t\t\t\tif (x3d_LightType [i] == SPOT_LIGHT)\n\t\t\t\t{\n\t\t\t\t\tfloat spotAngle = acos (dot (-L, x3d_LightDirection [i]));\n\t\t\t\t\t\n\t\t\t\t\tif (spotAngle >= x3d_LightCutOffAngle [i])\n\t\t\t\t\t\tspot = 0.0;\n\t\t\t\t\telse if (spotAngle <= x3d_LightBeamWidth [i])\n\t\t\t\t\t\tspot = 1.0;\n\t\t\t\t\telse\n\t\t\t\t\t\tspot = (spotAngle - x3d_LightCutOffAngle [i]) / (x3d_LightBeamWidth [i] - x3d_LightCutOffAngle [i]);\n\t\t\t\t}\n\n\t\t\t\tvec3 lightFactor  = (attenuation * spot) * x3d_LightColor [i];\n\t\t\t\tvec3 ambientLight = (lightFactor * x3d_LightAmbientIntensity [i]) * ambientTerm;\n\n\t\t\t\tlightFactor *= x3d_LightIntensity [i];\n\n\t\t\t\tfrontFinalColor += ambientLight + lightFactor * (frontDiffuseTerm + frontSpecularTerm);\n\t\t\t\tbackFinalColor  += ambientLight + lightFactor * (backDiffuseTerm  + backSpecularTerm);\n\t\t\t}\n\t\t}\n\n\t\tfrontFinalColor += x3d_EmissiveColor;\n\t\tbackFinalColor  += x3d_EmissiveColor;\n\n\t\tfrontColor = vec4 (clamp (frontFinalColor, 0.0, 1.0), alpha);\n\t\tbackColor  = vec4 (clamp (backFinalColor,  0.0, 1.0), alpha);\n\t}\n\telse\n\t{\n\t\tvec4 finalColor = vec4 (1.0, 1.0, 1.0, 1.0);\n\n\t\tif (x3d_ColorMaterial)\n\t\t\tfinalColor = C;\n\n\t\tfrontColor = finalColor;\n\t\tbackColor  = finalColor;\n\t}\n}\n';});

define('text!cobweb/Browser/Rendering/Gouraud.fs',[],function () { return '// -*- Mode: C++; coding: utf-8; tab-width: 3; indent-tabs-mode: tab; c-basic-offset: 3 -*-\nprecision mediump float;\n\n#define NO_FOG           0\n#define LINEAR_FOG       1\n#define EXPONENTIAL_FOG  2\n#define EXPONENTIAL2_FOG 3\n\nuniform int   x3d_fogType;\nuniform vec3  x3d_fogColor;\nuniform float x3d_fogVisibilityRange;\n\nuniform bool x3d_Lighting;        // true if a X3DMaterialNode is attached, otherwise false\nuniform bool x3d_ColorMaterial;   // true if a X3DColorNode is attached, otherwise false\n\nuniform bool      x3d_Texturing;  // true if a X3DTexture2DNode is attached, otherwise false\nuniform sampler2D x3d_Texture;\n\nvarying vec4  frontColor; // color\nvarying vec4  backColor;  // color\nvarying vec4  t;          // texCoord\nvarying float dv;         // distance to vertex\n\nfloat\ngetFogInterpolant ()\n{\n\tif (x3d_fogType == NO_FOG)\n\t\treturn 1.0;\n\n\tif (dv >= x3d_fogVisibilityRange)\n\t\treturn 0.0;\n\n\tif (x3d_fogType == LINEAR_FOG)\n\t\treturn (x3d_fogVisibilityRange - dv) / x3d_fogVisibilityRange;\n\n\tif (x3d_fogType == EXPONENTIAL_FOG)\n\t\treturn exp (-dv / (x3d_fogVisibilityRange - dv));\n\n\treturn 1.0;\n}\n\nvec4\ngetTextureColor ()\n{\n\treturn texture2D (x3d_Texture, vec2 (t .s, t .t));\n}\n\nvoid\nmain ()\n{\n\tfloat f0 = getFogInterpolant ();\n\n\tvec4 finalColor = gl_FrontFacing ? frontColor : backColor;\n\n\tif (x3d_Lighting)\n\t{\n\t\tif (x3d_Texturing)\n\t\t\tfinalColor *= getTextureColor ();\n\t}\n\telse\n\t{\n\t\tif (x3d_ColorMaterial)\n\t\t{\n\t\t\tif (x3d_Texturing)\n\t\t\t\tfinalColor *= getTextureColor ();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (x3d_Texturing)\n\t\t\t\tfinalColor = getTextureColor ();\n\t\t}\n\t}\n\n\tgl_FragColor .rgb = mix (x3d_fogColor, finalColor .rgb, f0);\n\tgl_FragColor .a   = finalColor .a;\n}\n';});

define('text!cobweb/Browser/Rendering/Phong.vs',[],function () { return '// -*- Mode: C++; coding: utf-8; tab-width: 3; indent-tabs-mode: tab; c-basic-offset: 3 -*-\nprecision mediump float;\n\nuniform mat4 x3d_TextureMatrix;\nuniform mat3 x3d_NormalMatrix;\nuniform mat4 x3d_ProjectionMatrix;\nuniform mat4 x3d_ModelViewMatrix;\n\nuniform bool x3d_Lighting; // true if a X3DMaterialNode is attached, otherwise false\nuniform bool x3d_Texturing; // true if a X3DTexture2DNode is attached, otherwise false\n\nattribute vec4 x3d_Color;\nattribute vec4 x3d_TexCoord;\nattribute vec3 x3d_Normal;\nattribute vec4 x3d_Vertex;\n\nvarying vec4 C;  // color\nvarying vec4 t;  // texCoord\nvarying vec3 vN; // normalized normal vector at this point on geometry\nvarying vec3 v;  // point on geometry\n\nvoid\nmain ()\n{\n\tvec4 p = x3d_ModelViewMatrix * x3d_Vertex;\n\n\tif (x3d_Lighting)\n\t\tvN = normalize (x3d_NormalMatrix * x3d_Normal);\n\n\tif (x3d_Texturing)\n\t\tt = x3d_TextureMatrix * x3d_TexCoord;\n\n\tC = x3d_Color;\n\tv = vec3 (p);\n\n\tgl_Position = x3d_ProjectionMatrix * p;\n}\n';});

define('text!cobweb/Browser/Rendering/Phong.fs',[],function () { return '// -*- Mode: C++; coding: utf-8; tab-width: 3; indent-tabs-mode: tab; c-basic-offset: 3 -*-\nprecision mediump float;\n\n#define NO_FOG           0\n#define LINEAR_FOG       1\n#define EXPONENTIAL_FOG  2\n#define EXPONENTIAL2_FOG 3\n\nuniform int   x3d_fogType;\nuniform vec3  x3d_fogColor;\nuniform float x3d_fogVisibilityRange;\n\nuniform bool x3d_Lighting;      // true if a X3DMaterialNode is attached, otherwise false\nuniform bool x3d_ColorMaterial; // true if a X3DColorNode is attached, otherwise false\n\n#define MAX_LIGHTS        8\n#define DIRECTIONAL_LIGHT 0\n#define POINT_LIGHT       1\n#define SPOT_LIGHT        2\n\nuniform int   x3d_LightType [MAX_LIGHTS]; // 0: DirectionalLight, 1: PointLight, 2: SpotLight\nuniform bool  x3d_LightOn [MAX_LIGHTS];\nuniform vec3  x3d_LightColor [MAX_LIGHTS];\nuniform float x3d_LightIntensity [MAX_LIGHTS];\nuniform float x3d_LightAmbientIntensity [MAX_LIGHTS];\nuniform vec3  x3d_LightAttenuation [MAX_LIGHTS];\nuniform vec3  x3d_LightLocation [MAX_LIGHTS];\nuniform vec3  x3d_LightDirection [MAX_LIGHTS];\nuniform float x3d_LightRadius [MAX_LIGHTS];\nuniform float x3d_LightBeamWidth [MAX_LIGHTS];\nuniform float x3d_LightCutOffAngle [MAX_LIGHTS];\n\nuniform float x3d_AmbientIntensity;\nuniform vec3  x3d_DiffuseColor;\nuniform vec3  x3d_SpecularColor;\nuniform vec3  x3d_EmissiveColor;\nuniform float x3d_Shininess;\nuniform float x3d_Transparency;\n\nuniform bool      x3d_Texturing; // true if a X3DTexture2DNode is attached, otherwise false\nuniform sampler2D x3d_Texture;\n\nvarying vec4 C;  // color\nvarying vec4 t;  // texCoord\nvarying vec3 vN; // normalized normal vector at this point on geometry\nvarying vec3 v;  // point on geometry\n\nfloat\ngetFogInterpolant ()\n{\n\tif (x3d_fogType == NO_FOG)\n\t\treturn 1.0;\n\n\tfloat dv = length (v);\n\n\tif (dv >= x3d_fogVisibilityRange)\n\t\treturn 0.0;\n\n\tif (x3d_fogType == LINEAR_FOG)\n\t\treturn (x3d_fogVisibilityRange - dv) / x3d_fogVisibilityRange;\n\n\tif (x3d_fogType == EXPONENTIAL_FOG)\n\t\treturn exp (-dv / (x3d_fogVisibilityRange - dv));\n\n\treturn 1.0;\n}\n\nvec4\ngetTextureColor ()\n{\n\treturn texture2D (x3d_Texture, vec2 (t .s, t .t));\n}\n\nvoid\nmain ()\n{\n\tfloat f0 = getFogInterpolant ();\n\n\tif (x3d_Lighting)\n\t{\n\t\tvec3  N  = normalize (gl_FrontFacing ? vN : -vN);\n\t\tvec3  V  = normalize (-v); // normalized vector from point on geometry to viewer\'s position\n\t\tfloat dV = length (v);\n\n\t\t// Calculate diffuseFactor & alpha\n\n\t\tvec3  diffuseFactor = vec3 (1.0, 1.0, 1.0);\n\t\tfloat alpha         = 1.0 - x3d_Transparency;\n\n\t\tif (x3d_ColorMaterial)\n\t\t{\n\t\t\tif (x3d_Texturing)\n\t\t\t{\n\t\t\t\tvec4 T = getTextureColor ();\n\n\t\t\t\tdiffuseFactor  = T .rgb * C .rgb;\n\t\t\t\talpha         *= T .a;\n\t\t\t}\n\t\t\telse\n\t\t\t\tdiffuseFactor = C .rgb;\n\n\t\t\talpha *= C .a;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (x3d_Texturing)\n\t\t\t{\n\t\t\t\tvec4 T = getTextureColor ();\n\n\t\t\t\tdiffuseFactor  = T .rgb * x3d_DiffuseColor;\n\t\t\t\talpha         *= T .a;\n\t\t\t}\n\t\t\telse\n\t\t\t\tdiffuseFactor = x3d_DiffuseColor;\n\t\t}\n\n\t\tvec3 ambientTerm = diffuseFactor * x3d_AmbientIntensity;\n\n\t\t// Apply light sources\n\n\t\tvec3 finalColor = vec3 (0.0, 0.0, 0.0);\n\n\t\tfor (int i = 0; i < MAX_LIGHTS; ++ i)\n\t\t{\n\t\t\tfloat dL = length (x3d_LightLocation [i] - v);\n\n\t\t\tif (x3d_LightOn [i] && (x3d_LightType [i] == DIRECTIONAL_LIGHT || dL <= x3d_LightRadius [i]))\n\t\t\t{\n\t\t\t\tvec3 c = x3d_LightAttenuation [i];\n\t\t\t\tvec3 L = x3d_LightType [i] == DIRECTIONAL_LIGHT ? -x3d_LightDirection [i] : normalize (x3d_LightLocation [i] - v);\n\t\t\t\tvec3 H = normalize (L + V); // specular term\n\n\t\t\t\tvec3  diffuseTerm    = diffuseFactor * max (dot (N, L), 0.0);\n\t\t\t\tfloat specularFactor = bool (x3d_Shininess) ? pow (max (dot (N, H), 0.0), x3d_Shininess) : 1.0;\n\t\t\t\tvec3  specularTerm   = x3d_SpecularColor * specularFactor;\n\n\t\t\t\tfloat attenuation = 1.0 / max (c [0] + c [1] * dL + c [2] * (dL * dL), 1.0);\n\t\t\t\tfloat spot        = 1.0;\n\n\t\t\t\tif (x3d_LightType [i] == SPOT_LIGHT)\n\t\t\t\t{\n\t\t\t\t\tfloat spotAngle = acos (dot (-L, x3d_LightDirection [i]));\n\t\t\t\t\t\n\t\t\t\t\tif (spotAngle >= x3d_LightCutOffAngle [i])\n\t\t\t\t\t\tspot = 0.0;\n\t\t\t\t\telse if (spotAngle <= x3d_LightBeamWidth [i])\n\t\t\t\t\t\tspot = 1.0;\n\t\t\t\t\telse\n\t\t\t\t\t\tspot = (spotAngle - x3d_LightCutOffAngle [i]) / (x3d_LightBeamWidth [i] - x3d_LightCutOffAngle [i]);\n\t\t\t\t}\n\n\t\t\t\tfinalColor += (attenuation * spot) * x3d_LightColor [i] *\n\t\t\t\t              (x3d_LightAmbientIntensity [i] * ambientTerm +\n\t\t\t\t               x3d_LightIntensity [i] * (diffuseTerm + specularTerm));\n\t\t\t}\n\t\t}\n\n\t\tfinalColor += x3d_EmissiveColor;\n\n\t\tgl_FragColor = vec4 (finalColor, alpha);\n\t}\n\telse\n\t{\n\t\tvec4 finalColor = vec4 (1.0, 1.0, 1.0, 1.0);\n\t\n\t\tif (x3d_ColorMaterial)\n\t\t{\n\t\t\tif (x3d_Texturing)\n\t\t\t{\n\t\t\t\tvec4 T = getTextureColor ();\n\n\t\t\t\tfinalColor = T * C;\n\t\t\t}\n\t\t\telse\n\t\t\t\tfinalColor = C;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (x3d_Texturing)\n\t\t\t\tfinalColor = getTextureColor ();\n\t\t}\n\n\t\tgl_FragColor = finalColor;\n\t}\n\n\tgl_FragColor .rgb = mix (x3d_fogColor, gl_FragColor .rgb, f0);\n}\n';});


define ('standard/Math/Utility/MatrixStack',[
	"jquery",
],
function ($)
{
	function MatrixStack (Type)
	{
		return $.extend ([ new Type () ],
		{
			top: 0,
			set: function (matrix)
			{
				this [this .top] .assign (matrix);
			},
			get: function (matrix)
			{
				return this [this .top];
			},
			push: function ()
			{
				var top = ++ this .top;
			
				if (top < this .length)
					this [top] .assign (this [top - 1]);
				else
					this [top] = this [top - 1] .copy ();
			},
			pop: function ()
			{
				-- this .top;
			},
			identity: function ()
			{
				this [this .top] .identity ();
			},
			multLeft: function (matrix)
			{
				this [this .top] .multLeft (matrix);
			},
		});
	}

	return MatrixStack;
});


//https://github.com/sdecima/javascript-detect-element-resize

define ('cobweb/Browser/Rendering/X3DRenderingContext',[
	"cobweb/Fields",
	"cobweb/Components/Shaders/ComposedShader",
	"cobweb/Components/Shaders/ShaderPart",
	"text!cobweb/Browser/Rendering/Wireframe.vs",
	"text!cobweb/Browser/Rendering/Wireframe.fs",
	"text!cobweb/Browser/Rendering/Gouraud.vs",
	"text!cobweb/Browser/Rendering/Gouraud.fs",
	"text!cobweb/Browser/Rendering/Phong.vs",
	"text!cobweb/Browser/Rendering/Phong.fs",
	"standard/Math/Numbers/Vector4",
	"standard/Math/Numbers/Matrix4",
	"standard/Math/Utility/MatrixStack",
],
function (Fields,
          ComposedShader,
          ShaderPart,
          wireframeVS,
          wireframeFS,
          gouraudVS,
          gouraudFS,
          phongVS,
          phongFS,
          Vector4,
          Matrix4,
          MatrixStack)
{
	var MFInt32 = Fields .MFInt32;
	
	function getShader (executionContext, vs, fs)
	{
		var vertexShader = new ShaderPart (executionContext);
		vertexShader .type_ = "VERTEX";
		vertexShader .url_ .push (vs);
		vertexShader .setup ();

		var fragmentShader = new ShaderPart (executionContext);
		fragmentShader .type_ = "FRAGMENT";
		fragmentShader .url_ .push (fs);
		fragmentShader .setup ();

		var shader = new ComposedShader (executionContext);
		shader .language_ = "GLSL";
		shader .parts_ .push (vertexShader);
		shader .parts_ .push (fragmentShader);
		shader .setup ();

		return shader;
	}

	function getPointShader (executionContext, lineShader)
	{
		var shader = new ComposedShader (executionContext);
		shader .language_ = "GLSL";
		shader .parts_ = lineShader .parts_;
		shader .setup ();

		return shader;
	}

	function X3DRenderingContext (x3d)
	{
		this .projectionMatrix      = new Matrix4 ();
		this .projectionMatrixArray = new Float32Array (16);
		this .modelViewMatrix       = new MatrixStack (Matrix4);
		this .viewport              = new Vector4 (0, 0, 0, 0);
	}

	X3DRenderingContext .prototype =
	{
		initialize: function ()
		{
			this .addChildren ("viewport", new MFInt32 (0, 0, 100, 100));

			// Configure context.

			var gl = this .getContext ();

			gl .enable (gl .SCISSOR_TEST);
			gl .cullFace (gl .BACK);
			gl .enable (gl .DEPTH_TEST);
			gl .depthFunc (gl .LEQUAL);
			gl .clearDepth (1.0);

			gl .blendFuncSeparate (gl .SRC_ALPHA, gl .ONE_MINUS_SRC_ALPHA, gl .ONE, gl .ONE_MINUS_SRC_ALPHA);
			gl .enable (gl .BLEND);

			// Configure viewport.

			setInterval (this .reshape .bind (this), 401);

			this .reshape ();

			this .lineShader  = getShader (this, wireframeVS, wireframeFS);
			this .pointShader = getPointShader (this, this .lineShader);

			this .setDefaultShader ("GOURAUD");
			this .setShader (this .getDefaultShader ());
		},
		getVendor: function ()
		{
			return this .getContext () .getParameter (this .getContext () .VENDOR);
		},
		getWebGLVersion: function ()
		{
			return this .getContext () .getParameter (this .getContext () .VERSION);
		},
		getAntialiased: function ()
		{
			return this .getContext () .getParameter (this .getContext () .SAMPLES) > 0;
		},
		getColorDepth: function ()
		{
			var gl = this .context;

			var colorDepth = 0;
			colorDepth += gl .getParameter (gl .RED_BITS);
			colorDepth += gl .getParameter (gl .BLUE_BITS);
			colorDepth += gl .getParameter (gl .GREEN_BITS);
			colorDepth += gl .getParameter (gl .ALPHA_BITS);

			return colorDepth;
		},
		setProjectionMatrix: function (value)
		{
			this .projectionMatrix = value;
			this .projectionMatrixArray .set (value);
		},
		getProjectionMatrix: function ()
		{
			return this .projectionMatrix;
		},
		getProjectionMatrixArray: function ()
		{
			return this .projectionMatrixArray;
		},
		getModelViewMatrix: function ()
		{
			return this .modelViewMatrix;
		},
		getViewport: function ()
		{
			return this .viewport_;
		},
		setDefaultShader: function (type)
		{
			var gl = this .context;

			switch (type)
			{
				case "POINTSET":
				{
					if (! this .gouraudShader)
						this .gouraudShader = getShader (this, gouraudVS, gouraudFS, gl .TRIANGLES);

					this .defaultShader = this .gouraudShader;

					this .pointShader   .primitiveMode = gl .POINTS;
					this .lineShader    .primitiveMode = gl .POINTS;
					this .defaultShader .primitiveMode = gl .POINTS;
					
					this .pointShader   .wireframe = true;
					this .lineShader    .wireframe = true;
					this .defaultShader .wireframe = true;					
					break;
				}
				case "WIREFRAME":
				{
					if (! this .gouraudShader)
						this .gouraudShader = getShader (this, gouraudVS, gouraudFS, gl .TRIANGLES);

					this .defaultShader = this .gouraudShader;

					this .pointShader   .primitiveMode = gl .POINTS;
					this .lineShader    .primitiveMode = gl .LINES;
					this .defaultShader .primitiveMode = gl .LINE_LOOP;
					
					this .pointShader   .wireframe = true;
					this .lineShader    .wireframe = true;
					this .defaultShader .wireframe = true;					
					break;
				}
				case "PHONG":
				{
					if (! this .phongShader)
						this .phongShader = getShader (this, phongVS, phongFS, gl .TRIANGLES);

					this .defaultShader = this .phongShader;

					this .pointShader   .primitiveMode = gl .POINTS;
					this .lineShader    .primitiveMode = gl .LINES;
					this .defaultShader .primitiveMode = gl .TRIANGLES;

					this .pointShader   .wireframe = true;
					this .lineShader    .wireframe = true;
					this .defaultShader .wireframe = false;					
					break;
				}
				default:
				{
					// case "GOURAUD":

					if (! this .gouraudShader)
						this .gouraudShader = getShader (this, gouraudVS, gouraudFS, gl .TRIANGLES);

					this .defaultShader = this .gouraudShader;

					this .pointShader   .primitiveMode = gl .POINTS;
					this .lineShader    .primitiveMode = gl .LINES;
					this .defaultShader .primitiveMode = gl .TRIANGLES;

					this .pointShader   .wireframe = true;
					this .lineShader    .wireframe = true;
					this .defaultShader .wireframe = false;					
					break;
				}
			}
		},
		getDefaultShader: function ()
		{
			return this .defaultShader;
		},
		getPointShader: function ()
		{
			return this .pointShader;
		},
		getLineShader: function ()
		{
			return this .lineShader;
		},
		getGouraudShader: function ()
		{
			// There must always be a gouraud shader available.
			return this .gouraudShader;
		},
		setShader: function (value)
		{
			this .shader = value;
		},
		getShader: function ()
		{
			return this .shader;
		},
		reshape: function ()
		{
			var
				width  = this .canvas .width (),
				height = this .canvas .height (),
				canvas = this .canvas [0];

			if (width !== canvas .width || height !== canvas .height)
			{
				this .viewport_ .setValue ([0, 0, width, height]);
				this .context .viewport (0, 0, width, height);
				this .context .scissor (0, 0, width, height);

				canvas .width  = width;
				canvas .height = height;

				this .addBrowserEvent ();
			}
		},
	};

	return X3DRenderingContext;
});


define ('cobweb/Bits/X3DCast',[],function ()
{
	return function (type, node)
	{
		try
		{
			if (node)
			{
				if (node .getValue)
					node = node .getValue ();

				if (node)
				{
					node = node .getInnerNode ();
				
					if (node .getType () .indexOf (type) !== -1)
						return node;
				}
			}
		}
		catch (error)
		{ }

		return null;
	}
});


define ('cobweb/Components/Rendering/X3DComposedGeometryNode',[
	"jquery",
	"cobweb/Components/Rendering/X3DGeometryNode",
	"cobweb/Bits/X3DCast",
	"cobweb/Bits/X3DConstants",
],
function ($,
          X3DGeometryNode,
          X3DCast,
          X3DConstants)
{
	function X3DComposedGeometryNode (browser, executionContext)
	{
		X3DGeometryNode .call (this, browser, executionContext);

		this .addType (X3DConstants .X3DComposedGeometryNode);

		this .attribNodes  = [ ];
		this .colorNode    = null;
		this .texCoordNode = null;
		this .normalNode   = null;
		this .coordNode    = null;
	}

	X3DComposedGeometryNode .prototype = $.extend (Object .create (X3DGeometryNode .prototype),
	{
		constructor: X3DComposedGeometryNode,
		initialize: function ()
		{
			X3DGeometryNode .prototype .initialize .call (this);

			this .attrib_   .addInterest (this, "set_attrib__");
			this .color_    .addInterest (this, "set_color__");
			this .texCoord_ .addInterest (this, "set_texCoord__");
			this .normal_   .addInterest (this, "set_normal__");
			this .coord_    .addInterest (this, "set_coord__");

			this .set_attrib__ ();
			this .set_color__ ();
			this .set_texCoord__ ();
			this .set_normal__ ();
			this .set_coord__ ();
		},
		getAttrib: function ()
		{
			return this .attribNodes;
		},
		getColor: function ()
		{
			return this .colorNode;
		},
		getTexCoord: function ()
		{
			return this .texCoordNode;
		},
		getNormal: function ()
		{
			return this .normalNode;
		},
		getCoord: function ()
		{
			return this .coordNode;
		},
		set_attrib__: function ()
		{
			for (var i = 0; i < this .attribNodes .length; ++ i)
				this .attribNodes [i] .removeInterest (this, "addNodeEvent");

			this .attribNodes .length = 0;

			for (var i = 0, length = this .attrib_ .length; i < length; ++ i)
			{
				var attribNode = X3DCast (X3DConstants .X3DVertexAttributeNode, this .attrib_ [i]);

				if (attribNode)
					this .attribNodes .push (attribNode);
			}

			for (var i = 0; i < this .attribNodes .length; ++ i)
				this .attribNodes [i] .addInterest (this, "addNodeEvent");
		},
		set_color__: function ()
		{
			if (this .colorNode)
			{
				this .colorNode .removeInterest (this, "addNodeEvent");
				this .colorNode .removeInterest (this, "set_transparent__");
			}

			this .colorNode = X3DCast (X3DConstants .X3DColorNode, this .color_);

			if (this .colorNode)
			{
				this .colorNode .addInterest (this, "addNodeEvent");
				this .colorNode .addInterest (this, "set_transparent__");

				this .set_transparent__ ();
			}
			else
				this .transparent_ = false;
		},
		set_transparent__: function ()
		{
			this .transparent_ = this .colorNode .isTransparent ();
		},
		set_texCoord__: function ()
		{
			if (this .texCoordNode)
				this .texCoordNode .removeInterest (this, "addNodeEvent");

			this .texCoordNode = X3DCast (X3DConstants .X3DTextureCoordinateNode, this .texCoord_);

			if (this .texCoordNode)
				this .texCoordNode .addInterest (this, "addNodeEvent");
		},
		set_normal__: function ()
		{
			if (this .normalNode)
				this .normalNode .removeInterest (this, "addNodeEvent");

			this .normalNode = X3DCast (X3DConstants .X3DNormalNode, this .normal_);

			if (this .normalNode)
				this .normalNode .addInterest (this, "addNodeEvent");
		},
		set_coord__: function ()
		{
			if (this .coordNode)
				this .coordNode .removeInterest (this, "addNodeEvent");

			this .coordNode = X3DCast (X3DConstants .X3DCoordinateNode, this .coord_);

			if (this .coordNode)
				this .coordNode .addInterest (this, "addNodeEvent");
		},
	});

	return X3DComposedGeometryNode;
});


!function(e){if("object"==typeof exports)module.exports=e();else if("function"==typeof define&&define.amd)define('poly2tri/dist/poly2tri',e);else{var f;"undefined"!=typeof window?f=window:"undefined"!=typeof global?f=global:"undefined"!=typeof self&&(f=self),f.poly2tri=e()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){
module.exports={"version": "1.3.5"}
},{}],2:[function(_dereq_,module,exports){
/*
 * Poly2Tri Copyright (c) 2009-2014, Poly2Tri Contributors
 * http://code.google.com/p/poly2tri/
 * 
 * poly2tri.js (JavaScript port) (c) 2009-2014, Poly2Tri Contributors
 * https://github.com/r3mi/poly2tri.js
 * 
 * All rights reserved.
 * 
 * Distributed under the 3-clause BSD License, see LICENSE.txt
 */

/* jshint maxcomplexity:11 */




/*
 * Note
 * ====
 * the structure of this JavaScript version of poly2tri intentionally follows
 * as closely as possible the structure of the reference C++ version, to make it 
 * easier to keep the 2 versions in sync.
 */


// -------------------------------------------------------------------------Node

/**
 * Advancing front node
 * @constructor
 * @private
 * @struct
 * @param {!XY} p - Point
 * @param {Triangle=} t triangle (optional)
 */
var Node = function(p, t) {
    /** @type {XY} */
    this.point = p;

    /** @type {Triangle|null} */
    this.triangle = t || null;

    /** @type {Node|null} */
    this.next = null;
    /** @type {Node|null} */
    this.prev = null;

    /** @type {number} */
    this.value = p.x;
};

// ---------------------------------------------------------------AdvancingFront
/**
 * @constructor
 * @private
 * @struct
 * @param {Node} head
 * @param {Node} tail
 */
var AdvancingFront = function(head, tail) {
    /** @type {Node} */
    this.head_ = head;
    /** @type {Node} */
    this.tail_ = tail;
    /** @type {Node} */
    this.search_node_ = head;
};

/** @return {Node} */
AdvancingFront.prototype.head = function() {
    return this.head_;
};

/** @param {Node} node */
AdvancingFront.prototype.setHead = function(node) {
    this.head_ = node;
};

/** @return {Node} */
AdvancingFront.prototype.tail = function() {
    return this.tail_;
};

/** @param {Node} node */
AdvancingFront.prototype.setTail = function(node) {
    this.tail_ = node;
};

/** @return {Node} */
AdvancingFront.prototype.search = function() {
    return this.search_node_;
};

/** @param {Node} node */
AdvancingFront.prototype.setSearch = function(node) {
    this.search_node_ = node;
};

/** @return {Node} */
AdvancingFront.prototype.findSearchNode = function(/*x*/) {
    // TODO: implement BST index
    return this.search_node_;
};

/**
 * @param {number} x value
 * @return {Node}
 */
AdvancingFront.prototype.locateNode = function(x) {
    var node = this.search_node_;

    /* jshint boss:true */
    if (x < node.value) {
        while (node = node.prev) {
            if (x >= node.value) {
                this.search_node_ = node;
                return node;
            }
        }
    } else {
        while (node = node.next) {
            if (x < node.value) {
                this.search_node_ = node.prev;
                return node.prev;
            }
        }
    }
    return null;
};

/**
 * @param {!XY} point - Point
 * @return {Node}
 */
AdvancingFront.prototype.locatePoint = function(point) {
    var px = point.x;
    var node = this.findSearchNode(px);
    var nx = node.point.x;

    if (px === nx) {
        // Here we are comparing point references, not values
        if (point !== node.point) {
            // We might have two nodes with same x value for a short time
            if (point === node.prev.point) {
                node = node.prev;
            } else if (point === node.next.point) {
                node = node.next;
            } else {
                throw new Error('poly2tri Invalid AdvancingFront.locatePoint() call');
            }
        }
    } else if (px < nx) {
        /* jshint boss:true */
        while (node = node.prev) {
            if (point === node.point) {
                break;
            }
        }
    } else {
        while (node = node.next) {
            if (point === node.point) {
                break;
            }
        }
    }

    if (node) {
        this.search_node_ = node;
    }
    return node;
};


// ----------------------------------------------------------------------Exports

module.exports = AdvancingFront;
module.exports.Node = Node;


},{}],3:[function(_dereq_,module,exports){
/*
 * Poly2Tri Copyright (c) 2009-2014, Poly2Tri Contributors
 * http://code.google.com/p/poly2tri/
 *
 * poly2tri.js (JavaScript port) (c) 2009-2014, Poly2Tri Contributors
 * https://github.com/r3mi/poly2tri.js
 *
 * All rights reserved.
 *
 * Distributed under the 3-clause BSD License, see LICENSE.txt
 */



/*
 * Function added in the JavaScript version (was not present in the c++ version)
 */

/**
 * assert and throw an exception.
 *
 * @private
 * @param {boolean} condition   the condition which is asserted
 * @param {string} message      the message which is display is condition is falsy
 */
function assert(condition, message) {
    if (!condition) {
        throw new Error(message || "Assert Failed");
    }
}
module.exports = assert;



},{}],4:[function(_dereq_,module,exports){
/*
 * Poly2Tri Copyright (c) 2009-2014, Poly2Tri Contributors
 * http://code.google.com/p/poly2tri/
 * 
 * poly2tri.js (JavaScript port) (c) 2009-2014, Poly2Tri Contributors
 * https://github.com/r3mi/poly2tri.js
 * 
 * All rights reserved.
 * 
 * Distributed under the 3-clause BSD License, see LICENSE.txt
 */




/*
 * Note
 * ====
 * the structure of this JavaScript version of poly2tri intentionally follows
 * as closely as possible the structure of the reference C++ version, to make it 
 * easier to keep the 2 versions in sync.
 */

var xy = _dereq_('./xy');

// ------------------------------------------------------------------------Point
/**
 * Construct a point
 * @example
 *      var point = new poly2tri.Point(150, 150);
 * @public
 * @constructor
 * @struct
 * @param {number=} x    coordinate (0 if undefined)
 * @param {number=} y    coordinate (0 if undefined)
 */
var Point = function(x, y) {
    /**
     * @type {number}
     * @expose
     */
    this.x = +x || 0;
    /**
     * @type {number}
     * @expose
     */
    this.y = +y || 0;

    // All extra fields added to Point are prefixed with _p2t_
    // to avoid collisions if custom Point class is used.

    /**
     * The edges this point constitutes an upper ending point
     * @private
     * @type {Array.<Edge>}
     */
    this._p2t_edge_list = null;
};

/**
 * For pretty printing
 * @example
 *      "p=" + new poly2tri.Point(5,42)
 *      // ‚Üí "p=(5;42)"
 * @returns {string} <code>"(x;y)"</code>
 */
Point.prototype.toString = function() {
    return xy.toStringBase(this);
};

/**
 * JSON output, only coordinates
 * @example
 *      JSON.stringify(new poly2tri.Point(1,2))
 *      // ‚Üí '{"x":1,"y":2}'
 */
Point.prototype.toJSON = function() {
    return { x: this.x, y: this.y };
};

/**
 * Creates a copy of this Point object.
 * @return {Point} new cloned point
 */
Point.prototype.clone = function() {
    return new Point(this.x, this.y);
};

/**
 * Set this Point instance to the origo. <code>(0; 0)</code>
 * @return {Point} this (for chaining)
 */
Point.prototype.set_zero = function() {
    this.x = 0.0;
    this.y = 0.0;
    return this; // for chaining
};

/**
 * Set the coordinates of this instance.
 * @param {number} x   coordinate
 * @param {number} y   coordinate
 * @return {Point} this (for chaining)
 */
Point.prototype.set = function(x, y) {
    this.x = +x || 0;
    this.y = +y || 0;
    return this; // for chaining
};

/**
 * Negate this Point instance. (component-wise)
 * @return {Point} this (for chaining)
 */
Point.prototype.negate = function() {
    this.x = -this.x;
    this.y = -this.y;
    return this; // for chaining
};

/**
 * Add another Point object to this instance. (component-wise)
 * @param {!Point} n - Point object.
 * @return {Point} this (for chaining)
 */
Point.prototype.add = function(n) {
    this.x += n.x;
    this.y += n.y;
    return this; // for chaining
};

/**
 * Subtract this Point instance with another point given. (component-wise)
 * @param {!Point} n - Point object.
 * @return {Point} this (for chaining)
 */
Point.prototype.sub = function(n) {
    this.x -= n.x;
    this.y -= n.y;
    return this; // for chaining
};

/**
 * Multiply this Point instance by a scalar. (component-wise)
 * @param {number} s   scalar.
 * @return {Point} this (for chaining)
 */
Point.prototype.mul = function(s) {
    this.x *= s;
    this.y *= s;
    return this; // for chaining
};

/**
 * Return the distance of this Point instance from the origo.
 * @return {number} distance
 */
Point.prototype.length = function() {
    return Math.sqrt(this.x * this.x + this.y * this.y);
};

/**
 * Normalize this Point instance (as a vector).
 * @return {number} The original distance of this instance from the origo.
 */
Point.prototype.normalize = function() {
    var len = this.length();
    this.x /= len;
    this.y /= len;
    return len;
};

/**
 * Test this Point object with another for equality.
 * @param {!XY} p - any "Point like" object with {x,y}
 * @return {boolean} <code>true</code> if same x and y coordinates, <code>false</code> otherwise.
 */
Point.prototype.equals = function(p) {
    return this.x === p.x && this.y === p.y;
};


// -----------------------------------------------------Point ("static" methods)

/**
 * Negate a point component-wise and return the result as a new Point object.
 * @param {!XY} p - any "Point like" object with {x,y}
 * @return {Point} the resulting Point object.
 */
Point.negate = function(p) {
    return new Point(-p.x, -p.y);
};

/**
 * Add two points component-wise and return the result as a new Point object.
 * @param {!XY} a - any "Point like" object with {x,y}
 * @param {!XY} b - any "Point like" object with {x,y}
 * @return {Point} the resulting Point object.
 */
Point.add = function(a, b) {
    return new Point(a.x + b.x, a.y + b.y);
};

/**
 * Subtract two points component-wise and return the result as a new Point object.
 * @param {!XY} a - any "Point like" object with {x,y}
 * @param {!XY} b - any "Point like" object with {x,y}
 * @return {Point} the resulting Point object.
 */
Point.sub = function(a, b) {
    return new Point(a.x - b.x, a.y - b.y);
};

/**
 * Multiply a point by a scalar and return the result as a new Point object.
 * @param {number} s - the scalar
 * @param {!XY} p - any "Point like" object with {x,y}
 * @return {Point} the resulting Point object.
 */
Point.mul = function(s, p) {
    return new Point(s * p.x, s * p.y);
};

/**
 * Perform the cross product on either two points (this produces a scalar)
 * or a point and a scalar (this produces a point).
 * This function requires two parameters, either may be a Point object or a
 * number.
 * @param  {XY|number} a - Point object or scalar.
 * @param  {XY|number} b - Point object or scalar.
 * @return {Point|number} a Point object or a number, depending on the parameters.
 */
Point.cross = function(a, b) {
    if (typeof(a) === 'number') {
        if (typeof(b) === 'number') {
            return a * b;
        } else {
            return new Point(-a * b.y, a * b.x);
        }
    } else {
        if (typeof(b) === 'number') {
            return new Point(b * a.y, -b * a.x);
        } else {
            return a.x * b.y - a.y * b.x;
        }
    }
};


// -----------------------------------------------------------------"Point-Like"
/*
 * The following functions operate on "Point" or any "Point like" object 
 * with {x,y} (duck typing).
 */

Point.toString = xy.toString;
Point.compare = xy.compare;
Point.cmp = xy.compare; // backward compatibility
Point.equals = xy.equals;

/**
 * Peform the dot product on two vectors.
 * @public
 * @param {!XY} a - any "Point like" object with {x,y}
 * @param {!XY} b - any "Point like" object with {x,y}
 * @return {number} The dot product
 */
Point.dot = function(a, b) {
    return a.x * b.x + a.y * b.y;
};


// ---------------------------------------------------------Exports (public API)

module.exports = Point;

},{"./xy":11}],5:[function(_dereq_,module,exports){
/*
 * Poly2Tri Copyright (c) 2009-2014, Poly2Tri Contributors
 * http://code.google.com/p/poly2tri/
 * 
 * poly2tri.js (JavaScript port) (c) 2009-2014, Poly2Tri Contributors
 * https://github.com/r3mi/poly2tri.js
 * 
 * All rights reserved.
 * 
 * Distributed under the 3-clause BSD License, see LICENSE.txt
 */



/*
 * Class added in the JavaScript version (was not present in the c++ version)
 */

var xy = _dereq_('./xy');

/**
 * Custom exception class to indicate invalid Point values
 * @constructor
 * @public
 * @extends Error
 * @struct
 * @param {string=} message - error message
 * @param {Array.<XY>=} points - invalid points
 */
var PointError = function(message, points) {
    this.name = "PointError";
    /**
     * Invalid points
     * @public
     * @type {Array.<XY>}
     */
    this.points = points = points || [];
    /**
     * Error message
     * @public
     * @type {string}
     */
    this.message = message || "Invalid Points!";
    for (var i = 0; i < points.length; i++) {
        this.message += " " + xy.toString(points[i]);
    }
};
PointError.prototype = new Error();
PointError.prototype.constructor = PointError;


module.exports = PointError;

},{"./xy":11}],6:[function(_dereq_,module,exports){
(function (global){
/*
 * Poly2Tri Copyright (c) 2009-2014, Poly2Tri Contributors
 * http://code.google.com/p/poly2tri/
 * 
 * poly2tri.js (JavaScript port) (c) 2009-2014, Poly2Tri Contributors
 * https://github.com/r3mi/poly2tri.js
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice,
 *   this list of conditions and the following disclaimer.
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 * * Neither the name of Poly2Tri nor the names of its contributors may be
 *   used to endorse or promote products derived from this software without specific
 *   prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */



/**
 * Public API for poly2tri.js
 * @module poly2tri
 */


/**
 * If you are not using a module system (e.g. CommonJS, RequireJS), you can access this library
 * as a global variable <code>poly2tri</code> i.e. <code>window.poly2tri</code> in a browser.
 * @name poly2tri
 * @global
 * @public
 * @type {module:poly2tri}
 */
var previousPoly2tri = global.poly2tri;
/**
 * For Browser + &lt;script&gt; :
 * reverts the {@linkcode poly2tri} global object to its previous value,
 * and returns a reference to the instance called.
 *
 * @example
 *              var p = poly2tri.noConflict();
 * @public
 * @return {module:poly2tri} instance called
 */
// (this feature is not automatically provided by browserify).
exports.noConflict = function() {
    global.poly2tri = previousPoly2tri;
    return exports;
};

/**
 * poly2tri library version
 * @public
 * @const {string}
 */
exports.VERSION = _dereq_('../dist/version.json').version;

/**
 * Exports the {@linkcode PointError} class.
 * @public
 * @typedef {PointError} module:poly2tri.PointError
 * @function
 */
exports.PointError = _dereq_('./pointerror');
/**
 * Exports the {@linkcode Point} class.
 * @public
 * @typedef {Point} module:poly2tri.Point
 * @function
 */
exports.Point = _dereq_('./point');
/**
 * Exports the {@linkcode Triangle} class.
 * @public
 * @typedef {Triangle} module:poly2tri.Triangle
 * @function
 */
exports.Triangle = _dereq_('./triangle');
/**
 * Exports the {@linkcode SweepContext} class.
 * @public
 * @typedef {SweepContext} module:poly2tri.SweepContext
 * @function
 */
exports.SweepContext = _dereq_('./sweepcontext');


// Backward compatibility
var sweep = _dereq_('./sweep');
/**
 * @function
 * @deprecated use {@linkcode SweepContext#triangulate} instead
 */
exports.triangulate = sweep.triangulate;
/**
 * @deprecated use {@linkcode SweepContext#triangulate} instead
 * @property {function} Triangulate - use {@linkcode SweepContext#triangulate} instead
 */
exports.sweep = {Triangulate: sweep.triangulate};

}).call(this,typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"../dist/version.json":1,"./point":4,"./pointerror":5,"./sweep":7,"./sweepcontext":8,"./triangle":9}],7:[function(_dereq_,module,exports){
/*
 * Poly2Tri Copyright (c) 2009-2014, Poly2Tri Contributors
 * http://code.google.com/p/poly2tri/
 * 
 * poly2tri.js (JavaScript port) (c) 2009-2014, Poly2Tri Contributors
 * https://github.com/r3mi/poly2tri.js
 * 
 * All rights reserved.
 * 
 * Distributed under the 3-clause BSD License, see LICENSE.txt
 */

/* jshint latedef:nofunc, maxcomplexity:9 */



/**
 * This 'Sweep' module is present in order to keep this JavaScript version
 * as close as possible to the reference C++ version, even though almost all
 * functions could be declared as methods on the {@linkcode module:sweepcontext~SweepContext} object.
 * @module
 * @private
 */

/*
 * Note
 * ====
 * the structure of this JavaScript version of poly2tri intentionally follows
 * as closely as possible the structure of the reference C++ version, to make it 
 * easier to keep the 2 versions in sync.
 */

var assert = _dereq_('./assert');
var PointError = _dereq_('./pointerror');
var Triangle = _dereq_('./triangle');
var Node = _dereq_('./advancingfront').Node;


// ------------------------------------------------------------------------utils

var utils = _dereq_('./utils');

/** @const */
var EPSILON = utils.EPSILON;

/** @const */
var Orientation = utils.Orientation;
/** @const */
var orient2d = utils.orient2d;
/** @const */
var inScanArea = utils.inScanArea;
/** @const */
var isAngleObtuse = utils.isAngleObtuse;


// ------------------------------------------------------------------------Sweep

/**
 * Triangulate the polygon with holes and Steiner points.
 * Do this AFTER you've added the polyline, holes, and Steiner points
 * @private
 * @param {!SweepContext} tcx - SweepContext object
 */
function triangulate(tcx) {
    tcx.initTriangulation();
    tcx.createAdvancingFront();
    // Sweep points; build mesh
    sweepPoints(tcx);
    // Clean up
    finalizationPolygon(tcx);
}

/**
 * Start sweeping the Y-sorted point set from bottom to top
 * @param {!SweepContext} tcx - SweepContext object
 */
function sweepPoints(tcx) {
    var i, len = tcx.pointCount();
    for (i = 1; i < len; ++i) {
        var point = tcx.getPoint(i);
        var node = pointEvent(tcx, point);
        var edges = point._p2t_edge_list;
        for (var j = 0; edges && j < edges.length; ++j) {
            edgeEventByEdge(tcx, edges[j], node);
        }
    }
}

/**
 * @param {!SweepContext} tcx - SweepContext object
 */
function finalizationPolygon(tcx) {
    // Get an Internal triangle to start with
    var t = tcx.front().head().next.triangle;
    var p = tcx.front().head().next.point;
    while (!t.getConstrainedEdgeCW(p)) {
        t = t.neighborCCW(p);
    }

    // Collect interior triangles constrained by edges
    tcx.meshClean(t);
}

/**
 * Find closes node to the left of the new point and
 * create a new triangle. If needed new holes and basins
 * will be filled to.
 * @param {!SweepContext} tcx - SweepContext object
 * @param {!XY} point   Point
 */
function pointEvent(tcx, point) {
    var node = tcx.locateNode(point);
    var new_node = newFrontTriangle(tcx, point, node);

    // Only need to check +epsilon since point never have smaller
    // x value than node due to how we fetch nodes from the front
    if (point.x <= node.point.x + (EPSILON)) {
        fill(tcx, node);
    }

    //tcx.AddNode(new_node);

    fillAdvancingFront(tcx, new_node);
    return new_node;
}

function edgeEventByEdge(tcx, edge, node) {
    tcx.edge_event.constrained_edge = edge;
    tcx.edge_event.right = (edge.p.x > edge.q.x);

    if (isEdgeSideOfTriangle(node.triangle, edge.p, edge.q)) {
        return;
    }

    // For now we will do all needed filling
    // TODO: integrate with flip process might give some better performance
    //       but for now this avoid the issue with cases that needs both flips and fills
    fillEdgeEvent(tcx, edge, node);
    edgeEventByPoints(tcx, edge.p, edge.q, node.triangle, edge.q);
}

function edgeEventByPoints(tcx, ep, eq, triangle, point) {
    if (isEdgeSideOfTriangle(triangle, ep, eq)) {
        return;
    }

    var p1 = triangle.pointCCW(point);
    var o1 = orient2d(eq, p1, ep);
    if (o1 === Orientation.COLLINEAR) {
        // TODO integrate here changes from C++ version
        // (C++ repo revision 09880a869095 dated March 8, 2011)
        throw new PointError('poly2tri EdgeEvent: Collinear not supported!', [eq, p1, ep]);
    }

    var p2 = triangle.pointCW(point);
    var o2 = orient2d(eq, p2, ep);
    if (o2 === Orientation.COLLINEAR) {
        // TODO integrate here changes from C++ version
        // (C++ repo revision 09880a869095 dated March 8, 2011)
        throw new PointError('poly2tri EdgeEvent: Collinear not supported!', [eq, p2, ep]);
    }

    if (o1 === o2) {
        // Need to decide if we are rotating CW or CCW to get to a triangle
        // that will cross edge
        if (o1 === Orientation.CW) {
            triangle = triangle.neighborCCW(point);
        } else {
            triangle = triangle.neighborCW(point);
        }
        edgeEventByPoints(tcx, ep, eq, triangle, point);
    } else {
        // This triangle crosses constraint so lets flippin start!
        flipEdgeEvent(tcx, ep, eq, triangle, point);
    }
}

function isEdgeSideOfTriangle(triangle, ep, eq) {
    var index = triangle.edgeIndex(ep, eq);
    if (index !== -1) {
        triangle.markConstrainedEdgeByIndex(index);
        var t = triangle.getNeighbor(index);
        if (t) {
            t.markConstrainedEdgeByPoints(ep, eq);
        }
        return true;
    }
    return false;
}

/**
 * Creates a new front triangle and legalize it
 * @param {!SweepContext} tcx - SweepContext object
 */
function newFrontTriangle(tcx, point, node) {
    var triangle = new Triangle(point, node.point, node.next.point);

    triangle.markNeighbor(node.triangle);
    tcx.addToMap(triangle);

    var new_node = new Node(point);
    new_node.next = node.next;
    new_node.prev = node;
    node.next.prev = new_node;
    node.next = new_node;

    if (!legalize(tcx, triangle)) {
        tcx.mapTriangleToNodes(triangle);
    }

    return new_node;
}

/**
 * Adds a triangle to the advancing front to fill a hole.
 * @param {!SweepContext} tcx - SweepContext object
 * @param node - middle node, that is the bottom of the hole
 */
function fill(tcx, node) {
    var triangle = new Triangle(node.prev.point, node.point, node.next.point);

    // TODO: should copy the constrained_edge value from neighbor triangles
    //       for now constrained_edge values are copied during the legalize
    triangle.markNeighbor(node.prev.triangle);
    triangle.markNeighbor(node.triangle);

    tcx.addToMap(triangle);

    // Update the advancing front
    node.prev.next = node.next;
    node.next.prev = node.prev;


    // If it was legalized the triangle has already been mapped
    if (!legalize(tcx, triangle)) {
        tcx.mapTriangleToNodes(triangle);
    }

    //tcx.removeNode(node);
}

/**
 * Fills holes in the Advancing Front
 * @param {!SweepContext} tcx - SweepContext object
 */
function fillAdvancingFront(tcx, n) {
    // Fill right holes
    var node = n.next;
    while (node.next) {
        // TODO integrate here changes from C++ version
        // (C++ repo revision acf81f1f1764 dated April 7, 2012)
        if (isAngleObtuse(node.point, node.next.point, node.prev.point)) {
            break;
        }
        fill(tcx, node);
        node = node.next;
    }

    // Fill left holes
    node = n.prev;
    while (node.prev) {
        // TODO integrate here changes from C++ version
        // (C++ repo revision acf81f1f1764 dated April 7, 2012)
        if (isAngleObtuse(node.point, node.next.point, node.prev.point)) {
            break;
        }
        fill(tcx, node);
        node = node.prev;
    }

    // Fill right basins
    if (n.next && n.next.next) {
        if (isBasinAngleRight(n)) {
            fillBasin(tcx, n);
        }
    }
}

/**
 * The basin angle is decided against the horizontal line [1,0].
 * @param {Node} node
 * @return {boolean} true if angle < 3*œÄ/4
 */
function isBasinAngleRight(node) {
    var ax = node.point.x - node.next.next.point.x;
    var ay = node.point.y - node.next.next.point.y;
    assert(ay >= 0, "unordered y");
    return (ax >= 0 || Math.abs(ax) < ay);
}

/**
 * Returns true if triangle was legalized
 * @param {!SweepContext} tcx - SweepContext object
 * @return {boolean}
 */
function legalize(tcx, t) {
    // To legalize a triangle we start by finding if any of the three edges
    // violate the Delaunay condition
    for (var i = 0; i < 3; ++i) {
        if (t.delaunay_edge[i]) {
            continue;
        }
        var ot = t.getNeighbor(i);
        if (ot) {
            var p = t.getPoint(i);
            var op = ot.oppositePoint(t, p);
            var oi = ot.index(op);

            // If this is a Constrained Edge or a Delaunay Edge(only during recursive legalization)
            // then we should not try to legalize
            if (ot.constrained_edge[oi] || ot.delaunay_edge[oi]) {
                t.constrained_edge[i] = ot.constrained_edge[oi];
                continue;
            }

            var inside = inCircle(p, t.pointCCW(p), t.pointCW(p), op);
            if (inside) {
                // Lets mark this shared edge as Delaunay
                t.delaunay_edge[i] = true;
                ot.delaunay_edge[oi] = true;

                // Lets rotate shared edge one vertex CW to legalize it
                rotateTrianglePair(t, p, ot, op);

                // We now got one valid Delaunay Edge shared by two triangles
                // This gives us 4 new edges to check for Delaunay

                // Make sure that triangle to node mapping is done only one time for a specific triangle
                var not_legalized = !legalize(tcx, t);
                if (not_legalized) {
                    tcx.mapTriangleToNodes(t);
                }

                not_legalized = !legalize(tcx, ot);
                if (not_legalized) {
                    tcx.mapTriangleToNodes(ot);
                }
                // Reset the Delaunay edges, since they only are valid Delaunay edges
                // until we add a new triangle or point.
                // XXX: need to think about this. Can these edges be tried after we
                //      return to previous recursive level?
                t.delaunay_edge[i] = false;
                ot.delaunay_edge[oi] = false;

                // If triangle have been legalized no need to check the other edges since
                // the recursive legalization will handles those so we can end here.
                return true;
            }
        }
    }
    return false;
}

/**
 * <b>Requirement</b>:<br>
 * 1. a,b and c form a triangle.<br>
 * 2. a and d is know to be on opposite side of bc<br>
 * <pre>
 *                a
 *                +
 *               / \
 *              /   \
 *            b/     \c
 *            +-------+
 *           /    d    \
 *          /           \
 * </pre>
 * <b>Fact</b>: d has to be in area B to have a chance to be inside the circle formed by
 *  a,b and c<br>
 *  d is outside B if orient2d(a,b,d) or orient2d(c,a,d) is CW<br>
 *  This preknowledge gives us a way to optimize the incircle test
 * @param pa - triangle point, opposite d
 * @param pb - triangle point
 * @param pc - triangle point
 * @param pd - point opposite a
 * @return {boolean} true if d is inside circle, false if on circle edge
 */
function inCircle(pa, pb, pc, pd) {
    var adx = pa.x - pd.x;
    var ady = pa.y - pd.y;
    var bdx = pb.x - pd.x;
    var bdy = pb.y - pd.y;

    var adxbdy = adx * bdy;
    var bdxady = bdx * ady;
    var oabd = adxbdy - bdxady;
    if (oabd <= 0) {
        return false;
    }

    var cdx = pc.x - pd.x;
    var cdy = pc.y - pd.y;

    var cdxady = cdx * ady;
    var adxcdy = adx * cdy;
    var ocad = cdxady - adxcdy;
    if (ocad <= 0) {
        return false;
    }

    var bdxcdy = bdx * cdy;
    var cdxbdy = cdx * bdy;

    var alift = adx * adx + ady * ady;
    var blift = bdx * bdx + bdy * bdy;
    var clift = cdx * cdx + cdy * cdy;

    var det = alift * (bdxcdy - cdxbdy) + blift * ocad + clift * oabd;
    return det > 0;
}

/**
 * Rotates a triangle pair one vertex CW
 *<pre>
 *       n2                    n2
 *  P +-----+             P +-----+
 *    | t  /|               |\  t |
 *    |   / |               | \   |
 *  n1|  /  |n3           n1|  \  |n3
 *    | /   |    after CW   |   \ |
 *    |/ oT |               | oT \|
 *    +-----+ oP            +-----+
 *       n4                    n4
 * </pre>
 */
function rotateTrianglePair(t, p, ot, op) {
    var n1, n2, n3, n4;
    n1 = t.neighborCCW(p);
    n2 = t.neighborCW(p);
    n3 = ot.neighborCCW(op);
    n4 = ot.neighborCW(op);

    var ce1, ce2, ce3, ce4;
    ce1 = t.getConstrainedEdgeCCW(p);
    ce2 = t.getConstrainedEdgeCW(p);
    ce3 = ot.getConstrainedEdgeCCW(op);
    ce4 = ot.getConstrainedEdgeCW(op);

    var de1, de2, de3, de4;
    de1 = t.getDelaunayEdgeCCW(p);
    de2 = t.getDelaunayEdgeCW(p);
    de3 = ot.getDelaunayEdgeCCW(op);
    de4 = ot.getDelaunayEdgeCW(op);

    t.legalize(p, op);
    ot.legalize(op, p);

    // Remap delaunay_edge
    ot.setDelaunayEdgeCCW(p, de1);
    t.setDelaunayEdgeCW(p, de2);
    t.setDelaunayEdgeCCW(op, de3);
    ot.setDelaunayEdgeCW(op, de4);

    // Remap constrained_edge
    ot.setConstrainedEdgeCCW(p, ce1);
    t.setConstrainedEdgeCW(p, ce2);
    t.setConstrainedEdgeCCW(op, ce3);
    ot.setConstrainedEdgeCW(op, ce4);

    // Remap neighbors
    // XXX: might optimize the markNeighbor by keeping track of
    //      what side should be assigned to what neighbor after the
    //      rotation. Now mark neighbor does lots of testing to find
    //      the right side.
    t.clearNeighbors();
    ot.clearNeighbors();
    if (n1) {
        ot.markNeighbor(n1);
    }
    if (n2) {
        t.markNeighbor(n2);
    }
    if (n3) {
        t.markNeighbor(n3);
    }
    if (n4) {
        ot.markNeighbor(n4);
    }
    t.markNeighbor(ot);
}

/**
 * Fills a basin that has formed on the Advancing Front to the right
 * of given node.<br>
 * First we decide a left,bottom and right node that forms the
 * boundaries of the basin. Then we do a reqursive fill.
 *
 * @param {!SweepContext} tcx - SweepContext object
 * @param node - starting node, this or next node will be left node
 */
function fillBasin(tcx, node) {
    if (orient2d(node.point, node.next.point, node.next.next.point) === Orientation.CCW) {
        tcx.basin.left_node = node.next.next;
    } else {
        tcx.basin.left_node = node.next;
    }

    // Find the bottom and right node
    tcx.basin.bottom_node = tcx.basin.left_node;
    while (tcx.basin.bottom_node.next && tcx.basin.bottom_node.point.y >= tcx.basin.bottom_node.next.point.y) {
        tcx.basin.bottom_node = tcx.basin.bottom_node.next;
    }
    if (tcx.basin.bottom_node === tcx.basin.left_node) {
        // No valid basin
        return;
    }

    tcx.basin.right_node = tcx.basin.bottom_node;
    while (tcx.basin.right_node.next && tcx.basin.right_node.point.y < tcx.basin.right_node.next.point.y) {
        tcx.basin.right_node = tcx.basin.right_node.next;
    }
    if (tcx.basin.right_node === tcx.basin.bottom_node) {
        // No valid basins
        return;
    }

    tcx.basin.width = tcx.basin.right_node.point.x - tcx.basin.left_node.point.x;
    tcx.basin.left_highest = tcx.basin.left_node.point.y > tcx.basin.right_node.point.y;

    fillBasinReq(tcx, tcx.basin.bottom_node);
}

/**
 * Recursive algorithm to fill a Basin with triangles
 *
 * @param {!SweepContext} tcx - SweepContext object
 * @param node - bottom_node
 */
function fillBasinReq(tcx, node) {
    // if shallow stop filling
    if (isShallow(tcx, node)) {
        return;
    }

    fill(tcx, node);

    var o;
    if (node.prev === tcx.basin.left_node && node.next === tcx.basin.right_node) {
        return;
    } else if (node.prev === tcx.basin.left_node) {
        o = orient2d(node.point, node.next.point, node.next.next.point);
        if (o === Orientation.CW) {
            return;
        }
        node = node.next;
    } else if (node.next === tcx.basin.right_node) {
        o = orient2d(node.point, node.prev.point, node.prev.prev.point);
        if (o === Orientation.CCW) {
            return;
        }
        node = node.prev;
    } else {
        // Continue with the neighbor node with lowest Y value
        if (node.prev.point.y < node.next.point.y) {
            node = node.prev;
        } else {
            node = node.next;
        }
    }

    fillBasinReq(tcx, node);
}

function isShallow(tcx, node) {
    var height;
    if (tcx.basin.left_highest) {
        height = tcx.basin.left_node.point.y - node.point.y;
    } else {
        height = tcx.basin.right_node.point.y - node.point.y;
    }

    // if shallow stop filling
    if (tcx.basin.width > height) {
        return true;
    }
    return false;
}

function fillEdgeEvent(tcx, edge, node) {
    if (tcx.edge_event.right) {
        fillRightAboveEdgeEvent(tcx, edge, node);
    } else {
        fillLeftAboveEdgeEvent(tcx, edge, node);
    }
}

function fillRightAboveEdgeEvent(tcx, edge, node) {
    while (node.next.point.x < edge.p.x) {
        // Check if next node is below the edge
        if (orient2d(edge.q, node.next.point, edge.p) === Orientation.CCW) {
            fillRightBelowEdgeEvent(tcx, edge, node);
        } else {
            node = node.next;
        }
    }
}

function fillRightBelowEdgeEvent(tcx, edge, node) {
    if (node.point.x < edge.p.x) {
        if (orient2d(node.point, node.next.point, node.next.next.point) === Orientation.CCW) {
            // Concave
            fillRightConcaveEdgeEvent(tcx, edge, node);
        } else {
            // Convex
            fillRightConvexEdgeEvent(tcx, edge, node);
            // Retry this one
            fillRightBelowEdgeEvent(tcx, edge, node);
        }
    }
}

function fillRightConcaveEdgeEvent(tcx, edge, node) {
    fill(tcx, node.next);
    if (node.next.point !== edge.p) {
        // Next above or below edge?
        if (orient2d(edge.q, node.next.point, edge.p) === Orientation.CCW) {
            // Below
            if (orient2d(node.point, node.next.point, node.next.next.point) === Orientation.CCW) {
                // Next is concave
                fillRightConcaveEdgeEvent(tcx, edge, node);
            } else {
                // Next is convex
                /* jshint noempty:false */
            }
        }
    }
}

function fillRightConvexEdgeEvent(tcx, edge, node) {
    // Next concave or convex?
    if (orient2d(node.next.point, node.next.next.point, node.next.next.next.point) === Orientation.CCW) {
        // Concave
        fillRightConcaveEdgeEvent(tcx, edge, node.next);
    } else {
        // Convex
        // Next above or below edge?
        if (orient2d(edge.q, node.next.next.point, edge.p) === Orientation.CCW) {
            // Below
            fillRightConvexEdgeEvent(tcx, edge, node.next);
        } else {
            // Above
            /* jshint noempty:false */
        }
    }
}

function fillLeftAboveEdgeEvent(tcx, edge, node) {
    while (node.prev.point.x > edge.p.x) {
        // Check if next node is below the edge
        if (orient2d(edge.q, node.prev.point, edge.p) === Orientation.CW) {
            fillLeftBelowEdgeEvent(tcx, edge, node);
        } else {
            node = node.prev;
        }
    }
}

function fillLeftBelowEdgeEvent(tcx, edge, node) {
    if (node.point.x > edge.p.x) {
        if (orient2d(node.point, node.prev.point, node.prev.prev.point) === Orientation.CW) {
            // Concave
            fillLeftConcaveEdgeEvent(tcx, edge, node);
        } else {
            // Convex
            fillLeftConvexEdgeEvent(tcx, edge, node);
            // Retry this one
            fillLeftBelowEdgeEvent(tcx, edge, node);
        }
    }
}

function fillLeftConvexEdgeEvent(tcx, edge, node) {
    // Next concave or convex?
    if (orient2d(node.prev.point, node.prev.prev.point, node.prev.prev.prev.point) === Orientation.CW) {
        // Concave
        fillLeftConcaveEdgeEvent(tcx, edge, node.prev);
    } else {
        // Convex
        // Next above or below edge?
        if (orient2d(edge.q, node.prev.prev.point, edge.p) === Orientation.CW) {
            // Below
            fillLeftConvexEdgeEvent(tcx, edge, node.prev);
        } else {
            // Above
            /* jshint noempty:false */
        }
    }
}

function fillLeftConcaveEdgeEvent(tcx, edge, node) {
    fill(tcx, node.prev);
    if (node.prev.point !== edge.p) {
        // Next above or below edge?
        if (orient2d(edge.q, node.prev.point, edge.p) === Orientation.CW) {
            // Below
            if (orient2d(node.point, node.prev.point, node.prev.prev.point) === Orientation.CW) {
                // Next is concave
                fillLeftConcaveEdgeEvent(tcx, edge, node);
            } else {
                // Next is convex
                /* jshint noempty:false */
            }
        }
    }
}

function flipEdgeEvent(tcx, ep, eq, t, p) {
    var ot = t.neighborAcross(p);
    assert(ot, "FLIP failed due to missing triangle!");

    var op = ot.oppositePoint(t, p);

    // Additional check from Java version (see issue #88)
    if (t.getConstrainedEdgeAcross(p)) {
        var index = t.index(p);
        throw new PointError("poly2tri Intersecting Constraints",
                [p, op, t.getPoint((index + 1) % 3), t.getPoint((index + 2) % 3)]);
    }

    if (inScanArea(p, t.pointCCW(p), t.pointCW(p), op)) {
        // Lets rotate shared edge one vertex CW
        rotateTrianglePair(t, p, ot, op);
        tcx.mapTriangleToNodes(t);
        tcx.mapTriangleToNodes(ot);

        // XXX: in the original C++ code for the next 2 lines, we are
        // comparing point values (and not pointers). In this JavaScript
        // code, we are comparing point references (pointers). This works
        // because we can't have 2 different points with the same values.
        // But to be really equivalent, we should use "Point.equals" here.
        if (p === eq && op === ep) {
            if (eq === tcx.edge_event.constrained_edge.q && ep === tcx.edge_event.constrained_edge.p) {
                t.markConstrainedEdgeByPoints(ep, eq);
                ot.markConstrainedEdgeByPoints(ep, eq);
                legalize(tcx, t);
                legalize(tcx, ot);
            } else {
                // XXX: I think one of the triangles should be legalized here?
                /* jshint noempty:false */
            }
        } else {
            var o = orient2d(eq, op, ep);
            t = nextFlipTriangle(tcx, o, t, ot, p, op);
            flipEdgeEvent(tcx, ep, eq, t, p);
        }
    } else {
        var newP = nextFlipPoint(ep, eq, ot, op);
        flipScanEdgeEvent(tcx, ep, eq, t, ot, newP);
        edgeEventByPoints(tcx, ep, eq, t, p);
    }
}

/**
 * After a flip we have two triangles and know that only one will still be
 * intersecting the edge. So decide which to contiune with and legalize the other
 *
 * @param {!SweepContext} tcx - SweepContext object
 * @param o - should be the result of an orient2d( eq, op, ep )
 * @param t - triangle 1
 * @param ot - triangle 2
 * @param p - a point shared by both triangles
 * @param op - another point shared by both triangles
 * @return returns the triangle still intersecting the edge
 */
function nextFlipTriangle(tcx, o, t, ot, p, op) {
    var edge_index;
    if (o === Orientation.CCW) {
        // ot is not crossing edge after flip
        edge_index = ot.edgeIndex(p, op);
        ot.delaunay_edge[edge_index] = true;
        legalize(tcx, ot);
        ot.clearDelaunayEdges();
        return t;
    }

    // t is not crossing edge after flip
    edge_index = t.edgeIndex(p, op);

    t.delaunay_edge[edge_index] = true;
    legalize(tcx, t);
    t.clearDelaunayEdges();
    return ot;
}

/**
 * When we need to traverse from one triangle to the next we need
 * the point in current triangle that is the opposite point to the next
 * triangle.
 */
function nextFlipPoint(ep, eq, ot, op) {
    var o2d = orient2d(eq, op, ep);
    if (o2d === Orientation.CW) {
        // Right
        return ot.pointCCW(op);
    } else if (o2d === Orientation.CCW) {
        // Left
        return ot.pointCW(op);
    } else {
        throw new PointError("poly2tri [Unsupported] nextFlipPoint: opposing point on constrained edge!", [eq, op, ep]);
    }
}

/**
 * Scan part of the FlipScan algorithm<br>
 * When a triangle pair isn't flippable we will scan for the next
 * point that is inside the flip triangle scan area. When found
 * we generate a new flipEdgeEvent
 *
 * @param {!SweepContext} tcx - SweepContext object
 * @param ep - last point on the edge we are traversing
 * @param eq - first point on the edge we are traversing
 * @param {!Triangle} flip_triangle - the current triangle sharing the point eq with edge
 * @param t
 * @param p
 */
function flipScanEdgeEvent(tcx, ep, eq, flip_triangle, t, p) {
    var ot = t.neighborAcross(p);
    assert(ot, "FLIP failed due to missing triangle");

    var op = ot.oppositePoint(t, p);

    if (inScanArea(eq, flip_triangle.pointCCW(eq), flip_triangle.pointCW(eq), op)) {
        // flip with new edge op.eq
        flipEdgeEvent(tcx, eq, op, ot, op);
    } else {
        var newP = nextFlipPoint(ep, eq, ot, op);
        flipScanEdgeEvent(tcx, ep, eq, flip_triangle, ot, newP);
    }
}


// ----------------------------------------------------------------------Exports

exports.triangulate = triangulate;

},{"./advancingfront":2,"./assert":3,"./pointerror":5,"./triangle":9,"./utils":10}],8:[function(_dereq_,module,exports){
/*
 * Poly2Tri Copyright (c) 2009-2014, Poly2Tri Contributors
 * http://code.google.com/p/poly2tri/
 * 
 * poly2tri.js (JavaScript port) (c) 2009-2014, Poly2Tri Contributors
 * https://github.com/r3mi/poly2tri.js
 * 
 * All rights reserved.
 * 
 * Distributed under the 3-clause BSD License, see LICENSE.txt
 */

/* jshint maxcomplexity:6 */




/*
 * Note
 * ====
 * the structure of this JavaScript version of poly2tri intentionally follows
 * as closely as possible the structure of the reference C++ version, to make it 
 * easier to keep the 2 versions in sync.
 */

var PointError = _dereq_('./pointerror');
var Point = _dereq_('./point');
var Triangle = _dereq_('./triangle');
var sweep = _dereq_('./sweep');
var AdvancingFront = _dereq_('./advancingfront');
var Node = AdvancingFront.Node;


// ------------------------------------------------------------------------utils

/**
 * Initial triangle factor, seed triangle will extend 30% of
 * PointSet width to both left and right.
 * @private
 * @const
 */
var kAlpha = 0.3;


// -------------------------------------------------------------------------Edge
/**
 * Represents a simple polygon's edge
 * @constructor
 * @struct
 * @private
 * @param {Point} p1
 * @param {Point} p2
 * @throw {PointError} if p1 is same as p2
 */
var Edge = function(p1, p2) {
    this.p = p1;
    this.q = p2;

    if (p1.y > p2.y) {
        this.q = p1;
        this.p = p2;
    } else if (p1.y === p2.y) {
        if (p1.x > p2.x) {
            this.q = p1;
            this.p = p2;
        } else if (p1.x === p2.x) {
            throw new PointError('poly2tri Invalid Edge constructor: repeated points!', [p1]);
        }
    }

    if (!this.q._p2t_edge_list) {
        this.q._p2t_edge_list = [];
    }
    this.q._p2t_edge_list.push(this);
};


// ------------------------------------------------------------------------Basin
/**
 * @constructor
 * @struct
 * @private
 */
var Basin = function() {
    /** @type {Node} */
    this.left_node = null;
    /** @type {Node} */
    this.bottom_node = null;
    /** @type {Node} */
    this.right_node = null;
    /** @type {number} */
    this.width = 0.0;
    /** @type {boolean} */
    this.left_highest = false;
};

Basin.prototype.clear = function() {
    this.left_node = null;
    this.bottom_node = null;
    this.right_node = null;
    this.width = 0.0;
    this.left_highest = false;
};

// --------------------------------------------------------------------EdgeEvent
/**
 * @constructor
 * @struct
 * @private
 */
var EdgeEvent = function() {
    /** @type {Edge} */
    this.constrained_edge = null;
    /** @type {boolean} */
    this.right = false;
};

// ----------------------------------------------------SweepContext (public API)
/**
 * SweepContext constructor option
 * @typedef {Object} SweepContextOptions
 * @property {boolean=} cloneArrays - if <code>true</code>, do a shallow copy of the Array parameters
 *                  (contour, holes). Points inside arrays are never copied.
 *                  Default is <code>false</code> : keep a reference to the array arguments,
 *                  who will be modified in place.
 */
/**
 * Constructor for the triangulation context.
 * It accepts a simple polyline (with non repeating points), 
 * which defines the constrained edges.
 *
 * @example
 *          var contour = [
 *              new poly2tri.Point(100, 100),
 *              new poly2tri.Point(100, 300),
 *              new poly2tri.Point(300, 300),
 *              new poly2tri.Point(300, 100)
 *          ];
 *          var swctx = new poly2tri.SweepContext(contour, {cloneArrays: true});
 * @example
 *          var contour = [{x:100, y:100}, {x:100, y:300}, {x:300, y:300}, {x:300, y:100}];
 *          var swctx = new poly2tri.SweepContext(contour, {cloneArrays: true});
 * @constructor
 * @public
 * @struct
 * @param {Array.<XY>} contour - array of point objects. The points can be either {@linkcode Point} instances,
 *          or any "Point like" custom class with <code>{x, y}</code> attributes.
 * @param {SweepContextOptions=} options - constructor options
 */
var SweepContext = function(contour, options) {
    options = options || {};
    this.triangles_ = [];
    this.map_ = [];
    this.points_ = (options.cloneArrays ? contour.slice(0) : contour);
    this.edge_list = [];

    // Bounding box of all points. Computed at the start of the triangulation, 
    // it is stored in case it is needed by the caller.
    this.pmin_ = this.pmax_ = null;

    /**
     * Advancing front
     * @private
     * @type {AdvancingFront}
     */
    this.front_ = null;

    /**
     * head point used with advancing front
     * @private
     * @type {Point}
     */
    this.head_ = null;

    /**
     * tail point used with advancing front
     * @private
     * @type {Point}
     */
    this.tail_ = null;

    /**
     * @private
     * @type {Node}
     */
    this.af_head_ = null;
    /**
     * @private
     * @type {Node}
     */
    this.af_middle_ = null;
    /**
     * @private
     * @type {Node}
     */
    this.af_tail_ = null;

    this.basin = new Basin();
    this.edge_event = new EdgeEvent();

    this.initEdges(this.points_);
};


/**
 * Add a hole to the constraints
 * @example
 *      var swctx = new poly2tri.SweepContext(contour);
 *      var hole = [
 *          new poly2tri.Point(200, 200),
 *          new poly2tri.Point(200, 250),
 *          new poly2tri.Point(250, 250)
 *      ];
 *      swctx.addHole(hole);
 * @example
 *      var swctx = new poly2tri.SweepContext(contour);
 *      swctx.addHole([{x:200, y:200}, {x:200, y:250}, {x:250, y:250}]);
 * @public
 * @param {Array.<XY>} polyline - array of "Point like" objects with {x,y}
 */
SweepContext.prototype.addHole = function(polyline) {
    this.initEdges(polyline);
    var i, len = polyline.length;
    for (i = 0; i < len; i++) {
        this.points_.push(polyline[i]);
    }
    return this; // for chaining
};

/**
 * For backward compatibility
 * @function
 * @deprecated use {@linkcode SweepContext#addHole} instead
 */
SweepContext.prototype.AddHole = SweepContext.prototype.addHole;


/**
 * Add several holes to the constraints
 * @example
 *      var swctx = new poly2tri.SweepContext(contour);
 *      var holes = [
 *          [ new poly2tri.Point(200, 200), new poly2tri.Point(200, 250), new poly2tri.Point(250, 250) ],
 *          [ new poly2tri.Point(300, 300), new poly2tri.Point(300, 350), new poly2tri.Point(350, 350) ]
 *      ];
 *      swctx.addHoles(holes);
 * @example
 *      var swctx = new poly2tri.SweepContext(contour);
 *      var holes = [
 *          [{x:200, y:200}, {x:200, y:250}, {x:250, y:250}],
 *          [{x:300, y:300}, {x:300, y:350}, {x:350, y:350}]
 *      ];
 *      swctx.addHoles(holes);
 * @public
 * @param {Array.<Array.<XY>>} holes - array of array of "Point like" objects with {x,y}
 */
// Method added in the JavaScript version (was not present in the c++ version)
SweepContext.prototype.addHoles = function(holes) {
    var i, len = holes.length;
    for (i = 0; i < len; i++) {
        this.initEdges(holes[i]);
    }
    this.points_ = this.points_.concat.apply(this.points_, holes);
    return this; // for chaining
};


/**
 * Add a Steiner point to the constraints
 * @example
 *      var swctx = new poly2tri.SweepContext(contour);
 *      var point = new poly2tri.Point(150, 150);
 *      swctx.addPoint(point);
 * @example
 *      var swctx = new poly2tri.SweepContext(contour);
 *      swctx.addPoint({x:150, y:150});
 * @public
 * @param {XY} point - any "Point like" object with {x,y}
 */
SweepContext.prototype.addPoint = function(point) {
    this.points_.push(point);
    return this; // for chaining
};

/**
 * For backward compatibility
 * @function
 * @deprecated use {@linkcode SweepContext#addPoint} instead
 */
SweepContext.prototype.AddPoint = SweepContext.prototype.addPoint;


/**
 * Add several Steiner points to the constraints
 * @example
 *      var swctx = new poly2tri.SweepContext(contour);
 *      var points = [
 *          new poly2tri.Point(150, 150),
 *          new poly2tri.Point(200, 250),
 *          new poly2tri.Point(250, 250)
 *      ];
 *      swctx.addPoints(points);
 * @example
 *      var swctx = new poly2tri.SweepContext(contour);
 *      swctx.addPoints([{x:150, y:150}, {x:200, y:250}, {x:250, y:250}]);
 * @public
 * @param {Array.<XY>} points - array of "Point like" object with {x,y}
 */
// Method added in the JavaScript version (was not present in the c++ version)
SweepContext.prototype.addPoints = function(points) {
    this.points_ = this.points_.concat(points);
    return this; // for chaining
};


/**
 * Triangulate the polygon with holes and Steiner points.
 * Do this AFTER you've added the polyline, holes, and Steiner points
 * @example
 *      var swctx = new poly2tri.SweepContext(contour);
 *      swctx.triangulate();
 *      var triangles = swctx.getTriangles();
 * @public
 */
// Shortcut method for sweep.triangulate(SweepContext).
// Method added in the JavaScript version (was not present in the c++ version)
SweepContext.prototype.triangulate = function() {
    sweep.triangulate(this);
    return this; // for chaining
};


/**
 * Get the bounding box of the provided constraints (contour, holes and 
 * Steinter points). Warning : these values are not available if the triangulation 
 * has not been done yet.
 * @public
 * @returns {{min:Point,max:Point}} object with 'min' and 'max' Point
 */
// Method added in the JavaScript version (was not present in the c++ version)
SweepContext.prototype.getBoundingBox = function() {
    return {min: this.pmin_, max: this.pmax_};
};

/**
 * Get result of triangulation.
 * The output triangles have vertices which are references
 * to the initial input points (not copies): any custom fields in the
 * initial points can be retrieved in the output triangles.
 * @example
 *      var swctx = new poly2tri.SweepContext(contour);
 *      swctx.triangulate();
 *      var triangles = swctx.getTriangles();
 * @example
 *      var contour = [{x:100, y:100, id:1}, {x:100, y:300, id:2}, {x:300, y:300, id:3}];
 *      var swctx = new poly2tri.SweepContext(contour);
 *      swctx.triangulate();
 *      var triangles = swctx.getTriangles();
 *      typeof triangles[0].getPoint(0).id
 *      // ‚Üí "number"
 * @public
 * @returns {array<Triangle>}   array of triangles
 */
SweepContext.prototype.getTriangles = function() {
    return this.triangles_;
};

/**
 * For backward compatibility
 * @function
 * @deprecated use {@linkcode SweepContext#getTriangles} instead
 */
SweepContext.prototype.GetTriangles = SweepContext.prototype.getTriangles;


// ---------------------------------------------------SweepContext (private API)

/** @private */
SweepContext.prototype.front = function() {
    return this.front_;
};

/** @private */
SweepContext.prototype.pointCount = function() {
    return this.points_.length;
};

/** @private */
SweepContext.prototype.head = function() {
    return this.head_;
};

/** @private */
SweepContext.prototype.setHead = function(p1) {
    this.head_ = p1;
};

/** @private */
SweepContext.prototype.tail = function() {
    return this.tail_;
};

/** @private */
SweepContext.prototype.setTail = function(p1) {
    this.tail_ = p1;
};

/** @private */
SweepContext.prototype.getMap = function() {
    return this.map_;
};

/** @private */
SweepContext.prototype.initTriangulation = function() {
    var xmax = this.points_[0].x;
    var xmin = this.points_[0].x;
    var ymax = this.points_[0].y;
    var ymin = this.points_[0].y;

    // Calculate bounds
    var i, len = this.points_.length;
    for (i = 1; i < len; i++) {
        var p = this.points_[i];
        /* jshint expr:true */
        (p.x > xmax) && (xmax = p.x);
        (p.x < xmin) && (xmin = p.x);
        (p.y > ymax) && (ymax = p.y);
        (p.y < ymin) && (ymin = p.y);
    }
    this.pmin_ = new Point(xmin, ymin);
    this.pmax_ = new Point(xmax, ymax);

    var dx = kAlpha * (xmax - xmin);
    var dy = kAlpha * (ymax - ymin);
    this.head_ = new Point(xmax + dx, ymin - dy);
    this.tail_ = new Point(xmin - dx, ymin - dy);

    // Sort points along y-axis
    this.points_.sort(Point.compare);
};

/** @private */
SweepContext.prototype.initEdges = function(polyline) {
    var i, len = polyline.length;
    for (i = 0; i < len; ++i) {
        this.edge_list.push(new Edge(polyline[i], polyline[(i + 1) % len]));
    }
};

/** @private */
SweepContext.prototype.getPoint = function(index) {
    return this.points_[index];
};

/** @private */
SweepContext.prototype.addToMap = function(triangle) {
    this.map_.push(triangle);
};

/** @private */
SweepContext.prototype.locateNode = function(point) {
    return this.front_.locateNode(point.x);
};

/** @private */
SweepContext.prototype.createAdvancingFront = function() {
    var head;
    var middle;
    var tail;
    // Initial triangle
    var triangle = new Triangle(this.points_[0], this.tail_, this.head_);

    this.map_.push(triangle);

    head = new Node(triangle.getPoint(1), triangle);
    middle = new Node(triangle.getPoint(0), triangle);
    tail = new Node(triangle.getPoint(2));

    this.front_ = new AdvancingFront(head, tail);

    head.next = middle;
    middle.next = tail;
    middle.prev = head;
    tail.prev = middle;
};

/** @private */
SweepContext.prototype.removeNode = function(node) {
    // do nothing
    /* jshint unused:false */
};

/** @private */
SweepContext.prototype.mapTriangleToNodes = function(t) {
    for (var i = 0; i < 3; ++i) {
        if (!t.getNeighbor(i)) {
            var n = this.front_.locatePoint(t.pointCW(t.getPoint(i)));
            if (n) {
                n.triangle = t;
            }
        }
    }
};

/** @private */
SweepContext.prototype.removeFromMap = function(triangle) {
    var i, map = this.map_, len = map.length;
    for (i = 0; i < len; i++) {
        if (map[i] === triangle) {
            map.splice(i, 1);
            break;
        }
    }
};

/**
 * Do a depth first traversal to collect triangles
 * @private
 * @param {Triangle} triangle start
 */
SweepContext.prototype.meshClean = function(triangle) {
    // New implementation avoids recursive calls and use a loop instead.
    // Cf. issues # 57, 65 and 69.
    var triangles = [triangle], t, i;
    /* jshint boss:true */
    while (t = triangles.pop()) {
        if (!t.isInterior()) {
            t.setInterior(true);
            this.triangles_.push(t);
            for (i = 0; i < 3; i++) {
                if (!t.constrained_edge[i]) {
                    triangles.push(t.getNeighbor(i));
                }
            }
        }
    }
};

// ----------------------------------------------------------------------Exports

module.exports = SweepContext;

},{"./advancingfront":2,"./point":4,"./pointerror":5,"./sweep":7,"./triangle":9}],9:[function(_dereq_,module,exports){
/*
 * Poly2Tri Copyright (c) 2009-2014, Poly2Tri Contributors
 * http://code.google.com/p/poly2tri/
 * 
 * poly2tri.js (JavaScript port) (c) 2009-2014, Poly2Tri Contributors
 * https://github.com/r3mi/poly2tri.js
 *
 * All rights reserved.
 * 
 * Distributed under the 3-clause BSD License, see LICENSE.txt
 */

/* jshint maxcomplexity:10 */




/*
 * Note
 * ====
 * the structure of this JavaScript version of poly2tri intentionally follows
 * as closely as possible the structure of the reference C++ version, to make it 
 * easier to keep the 2 versions in sync.
 */

var xy = _dereq_("./xy");


// ---------------------------------------------------------------------Triangle
/**
 * Triangle class.<br>
 * Triangle-based data structures are known to have better performance than
 * quad-edge structures.
 * See: J. Shewchuk, "Triangle: Engineering a 2D Quality Mesh Generator and
 * Delaunay Triangulator", "Triangulations in CGAL"
 *
 * @constructor
 * @struct
 * @param {!XY} pa  point object with {x,y}
 * @param {!XY} pb  point object with {x,y}
 * @param {!XY} pc  point object with {x,y}
 */
var Triangle = function(a, b, c) {
    /**
     * Triangle points
     * @private
     * @type {Array.<XY>}
     */
    this.points_ = [a, b, c];

    /**
     * Neighbor list
     * @private
     * @type {Array.<Triangle>}
     */
    this.neighbors_ = [null, null, null];

    /**
     * Has this triangle been marked as an interior triangle?
     * @private
     * @type {boolean}
     */
    this.interior_ = false;

    /**
     * Flags to determine if an edge is a Constrained edge
     * @private
     * @type {Array.<boolean>}
     */
    this.constrained_edge = [false, false, false];

    /**
     * Flags to determine if an edge is a Delauney edge
     * @private
     * @type {Array.<boolean>}
     */
    this.delaunay_edge = [false, false, false];
};

var p2s = xy.toString;
/**
 * For pretty printing ex. <code>"[(5;42)(10;20)(21;30)]"</code>.
 * @public
 * @return {string}
 */
Triangle.prototype.toString = function() {
    return ("[" + p2s(this.points_[0]) + p2s(this.points_[1]) + p2s(this.points_[2]) + "]");
};

/**
 * Get one vertice of the triangle.
 * The output triangles of a triangulation have vertices which are references
 * to the initial input points (not copies): any custom fields in the
 * initial points can be retrieved in the output triangles.
 * @example
 *      var contour = [{x:100, y:100, id:1}, {x:100, y:300, id:2}, {x:300, y:300, id:3}];
 *      var swctx = new poly2tri.SweepContext(contour);
 *      swctx.triangulate();
 *      var triangles = swctx.getTriangles();
 *      typeof triangles[0].getPoint(0).id
 *      // ‚Üí "number"
 * @param {number} index - vertice index: 0, 1 or 2
 * @public
 * @returns {XY}
 */
Triangle.prototype.getPoint = function(index) {
    return this.points_[index];
};

/**
 * For backward compatibility
 * @function
 * @deprecated use {@linkcode Triangle#getPoint} instead
 */
Triangle.prototype.GetPoint = Triangle.prototype.getPoint;

/**
 * Get all 3 vertices of the triangle as an array
 * @public
 * @return {Array.<XY>}
 */
// Method added in the JavaScript version (was not present in the c++ version)
Triangle.prototype.getPoints = function() {
    return this.points_;
};

/**
 * @private
 * @param {number} index
 * @returns {?Triangle}
 */
Triangle.prototype.getNeighbor = function(index) {
    return this.neighbors_[index];
};

/**
 * Test if this Triangle contains the Point object given as parameter as one of its vertices.
 * Only point references are compared, not values.
 * @public
 * @param {XY} point - point object with {x,y}
 * @return {boolean} <code>True</code> if the Point object is of the Triangle's vertices,
 *         <code>false</code> otherwise.
 */
Triangle.prototype.containsPoint = function(point) {
    var points = this.points_;
    // Here we are comparing point references, not values
    return (point === points[0] || point === points[1] || point === points[2]);
};

/**
 * Test if this Triangle contains the Edge object given as parameter as its
 * bounding edges. Only point references are compared, not values.
 * @private
 * @param {Edge} edge
 * @return {boolean} <code>True</code> if the Edge object is of the Triangle's bounding
 *         edges, <code>false</code> otherwise.
 */
Triangle.prototype.containsEdge = function(edge) {
    return this.containsPoint(edge.p) && this.containsPoint(edge.q);
};

/**
 * Test if this Triangle contains the two Point objects given as parameters among its vertices.
 * Only point references are compared, not values.
 * @param {XY} p1 - point object with {x,y}
 * @param {XY} p2 - point object with {x,y}
 * @return {boolean}
 */
Triangle.prototype.containsPoints = function(p1, p2) {
    return this.containsPoint(p1) && this.containsPoint(p2);
};

/**
 * Has this triangle been marked as an interior triangle?
 * @returns {boolean}
 */
Triangle.prototype.isInterior = function() {
    return this.interior_;
};

/**
 * Mark this triangle as an interior triangle
 * @private
 * @param {boolean} interior
 * @returns {Triangle} this
 */
Triangle.prototype.setInterior = function(interior) {
    this.interior_ = interior;
    return this;
};

/**
 * Update neighbor pointers.
 * @private
 * @param {XY} p1 - point object with {x,y}
 * @param {XY} p2 - point object with {x,y}
 * @param {Triangle} t Triangle object.
 * @throws {Error} if can't find objects
 */
Triangle.prototype.markNeighborPointers = function(p1, p2, t) {
    var points = this.points_;
    // Here we are comparing point references, not values
    if ((p1 === points[2] && p2 === points[1]) || (p1 === points[1] && p2 === points[2])) {
        this.neighbors_[0] = t;
    } else if ((p1 === points[0] && p2 === points[2]) || (p1 === points[2] && p2 === points[0])) {
        this.neighbors_[1] = t;
    } else if ((p1 === points[0] && p2 === points[1]) || (p1 === points[1] && p2 === points[0])) {
        this.neighbors_[2] = t;
    } else {
        throw new Error('poly2tri Invalid Triangle.markNeighborPointers() call');
    }
};

/**
 * Exhaustive search to update neighbor pointers
 * @private
 * @param {!Triangle} t
 */
Triangle.prototype.markNeighbor = function(t) {
    var points = this.points_;
    if (t.containsPoints(points[1], points[2])) {
        this.neighbors_[0] = t;
        t.markNeighborPointers(points[1], points[2], this);
    } else if (t.containsPoints(points[0], points[2])) {
        this.neighbors_[1] = t;
        t.markNeighborPointers(points[0], points[2], this);
    } else if (t.containsPoints(points[0], points[1])) {
        this.neighbors_[2] = t;
        t.markNeighborPointers(points[0], points[1], this);
    }
};


Triangle.prototype.clearNeighbors = function() {
    this.neighbors_[0] = null;
    this.neighbors_[1] = null;
    this.neighbors_[2] = null;
};

Triangle.prototype.clearDelaunayEdges = function() {
    this.delaunay_edge[0] = false;
    this.delaunay_edge[1] = false;
    this.delaunay_edge[2] = false;
};

/**
 * Returns the point clockwise to the given point.
 * @private
 * @param {XY} p - point object with {x,y}
 */
Triangle.prototype.pointCW = function(p) {
    var points = this.points_;
    // Here we are comparing point references, not values
    if (p === points[0]) {
        return points[2];
    } else if (p === points[1]) {
        return points[0];
    } else if (p === points[2]) {
        return points[1];
    } else {
        return null;
    }
};

/**
 * Returns the point counter-clockwise to the given point.
 * @private
 * @param {XY} p - point object with {x,y}
 */
Triangle.prototype.pointCCW = function(p) {
    var points = this.points_;
    // Here we are comparing point references, not values
    if (p === points[0]) {
        return points[1];
    } else if (p === points[1]) {
        return points[2];
    } else if (p === points[2]) {
        return points[0];
    } else {
        return null;
    }
};

/**
 * Returns the neighbor clockwise to given point.
 * @private
 * @param {XY} p - point object with {x,y}
 */
Triangle.prototype.neighborCW = function(p) {
    // Here we are comparing point references, not values
    if (p === this.points_[0]) {
        return this.neighbors_[1];
    } else if (p === this.points_[1]) {
        return this.neighbors_[2];
    } else {
        return this.neighbors_[0];
    }
};

/**
 * Returns the neighbor counter-clockwise to given point.
 * @private
 * @param {XY} p - point object with {x,y}
 */
Triangle.prototype.neighborCCW = function(p) {
    // Here we are comparing point references, not values
    if (p === this.points_[0]) {
        return this.neighbors_[2];
    } else if (p === this.points_[1]) {
        return this.neighbors_[0];
    } else {
        return this.neighbors_[1];
    }
};

Triangle.prototype.getConstrainedEdgeCW = function(p) {
    // Here we are comparing point references, not values
    if (p === this.points_[0]) {
        return this.constrained_edge[1];
    } else if (p === this.points_[1]) {
        return this.constrained_edge[2];
    } else {
        return this.constrained_edge[0];
    }
};

Triangle.prototype.getConstrainedEdgeCCW = function(p) {
    // Here we are comparing point references, not values
    if (p === this.points_[0]) {
        return this.constrained_edge[2];
    } else if (p === this.points_[1]) {
        return this.constrained_edge[0];
    } else {
        return this.constrained_edge[1];
    }
};

// Additional check from Java version (see issue #88)
Triangle.prototype.getConstrainedEdgeAcross = function(p) {
    // Here we are comparing point references, not values
    if (p === this.points_[0]) {
        return this.constrained_edge[0];
    } else if (p === this.points_[1]) {
        return this.constrained_edge[1];
    } else {
        return this.constrained_edge[2];
    }
};

Triangle.prototype.setConstrainedEdgeCW = function(p, ce) {
    // Here we are comparing point references, not values
    if (p === this.points_[0]) {
        this.constrained_edge[1] = ce;
    } else if (p === this.points_[1]) {
        this.constrained_edge[2] = ce;
    } else {
        this.constrained_edge[0] = ce;
    }
};

Triangle.prototype.setConstrainedEdgeCCW = function(p, ce) {
    // Here we are comparing point references, not values
    if (p === this.points_[0]) {
        this.constrained_edge[2] = ce;
    } else if (p === this.points_[1]) {
        this.constrained_edge[0] = ce;
    } else {
        this.constrained_edge[1] = ce;
    }
};

Triangle.prototype.getDelaunayEdgeCW = function(p) {
    // Here we are comparing point references, not values
    if (p === this.points_[0]) {
        return this.delaunay_edge[1];
    } else if (p === this.points_[1]) {
        return this.delaunay_edge[2];
    } else {
        return this.delaunay_edge[0];
    }
};

Triangle.prototype.getDelaunayEdgeCCW = function(p) {
    // Here we are comparing point references, not values
    if (p === this.points_[0]) {
        return this.delaunay_edge[2];
    } else if (p === this.points_[1]) {
        return this.delaunay_edge[0];
    } else {
        return this.delaunay_edge[1];
    }
};

Triangle.prototype.setDelaunayEdgeCW = function(p, e) {
    // Here we are comparing point references, not values
    if (p === this.points_[0]) {
        this.delaunay_edge[1] = e;
    } else if (p === this.points_[1]) {
        this.delaunay_edge[2] = e;
    } else {
        this.delaunay_edge[0] = e;
    }
};

Triangle.prototype.setDelaunayEdgeCCW = function(p, e) {
    // Here we are comparing point references, not values
    if (p === this.points_[0]) {
        this.delaunay_edge[2] = e;
    } else if (p === this.points_[1]) {
        this.delaunay_edge[0] = e;
    } else {
        this.delaunay_edge[1] = e;
    }
};

/**
 * The neighbor across to given point.
 * @private
 * @param {XY} p - point object with {x,y}
 * @returns {Triangle}
 */
Triangle.prototype.neighborAcross = function(p) {
    // Here we are comparing point references, not values
    if (p === this.points_[0]) {
        return this.neighbors_[0];
    } else if (p === this.points_[1]) {
        return this.neighbors_[1];
    } else {
        return this.neighbors_[2];
    }
};

/**
 * @private
 * @param {!Triangle} t Triangle object.
 * @param {XY} p - point object with {x,y}
 */
Triangle.prototype.oppositePoint = function(t, p) {
    var cw = t.pointCW(p);
    return this.pointCW(cw);
};

/**
 * Legalize triangle by rotating clockwise around oPoint
 * @private
 * @param {XY} opoint - point object with {x,y}
 * @param {XY} npoint - point object with {x,y}
 * @throws {Error} if oPoint can not be found
 */
Triangle.prototype.legalize = function(opoint, npoint) {
    var points = this.points_;
    // Here we are comparing point references, not values
    if (opoint === points[0]) {
        points[1] = points[0];
        points[0] = points[2];
        points[2] = npoint;
    } else if (opoint === points[1]) {
        points[2] = points[1];
        points[1] = points[0];
        points[0] = npoint;
    } else if (opoint === points[2]) {
        points[0] = points[2];
        points[2] = points[1];
        points[1] = npoint;
    } else {
        throw new Error('poly2tri Invalid Triangle.legalize() call');
    }
};

/**
 * Returns the index of a point in the triangle. 
 * The point *must* be a reference to one of the triangle's vertices.
 * @private
 * @param {XY} p - point object with {x,y}
 * @returns {number} index 0, 1 or 2
 * @throws {Error} if p can not be found
 */
Triangle.prototype.index = function(p) {
    var points = this.points_;
    // Here we are comparing point references, not values
    if (p === points[0]) {
        return 0;
    } else if (p === points[1]) {
        return 1;
    } else if (p === points[2]) {
        return 2;
    } else {
        throw new Error('poly2tri Invalid Triangle.index() call');
    }
};

/**
 * @private
 * @param {XY} p1 - point object with {x,y}
 * @param {XY} p2 - point object with {x,y}
 * @return {number} index 0, 1 or 2, or -1 if errror
 */
Triangle.prototype.edgeIndex = function(p1, p2) {
    var points = this.points_;
    // Here we are comparing point references, not values
    if (p1 === points[0]) {
        if (p2 === points[1]) {
            return 2;
        } else if (p2 === points[2]) {
            return 1;
        }
    } else if (p1 === points[1]) {
        if (p2 === points[2]) {
            return 0;
        } else if (p2 === points[0]) {
            return 2;
        }
    } else if (p1 === points[2]) {
        if (p2 === points[0]) {
            return 1;
        } else if (p2 === points[1]) {
            return 0;
        }
    }
    return -1;
};

/**
 * Mark an edge of this triangle as constrained.
 * @private
 * @param {number} index - edge index
 */
Triangle.prototype.markConstrainedEdgeByIndex = function(index) {
    this.constrained_edge[index] = true;
};
/**
 * Mark an edge of this triangle as constrained.
 * @private
 * @param {Edge} edge instance
 */
Triangle.prototype.markConstrainedEdgeByEdge = function(edge) {
    this.markConstrainedEdgeByPoints(edge.p, edge.q);
};
/**
 * Mark an edge of this triangle as constrained.
 * This method takes two Point instances defining the edge of the triangle.
 * @private
 * @param {XY} p - point object with {x,y}
 * @param {XY} q - point object with {x,y}
 */
Triangle.prototype.markConstrainedEdgeByPoints = function(p, q) {
    var points = this.points_;
    // Here we are comparing point references, not values        
    if ((q === points[0] && p === points[1]) || (q === points[1] && p === points[0])) {
        this.constrained_edge[2] = true;
    } else if ((q === points[0] && p === points[2]) || (q === points[2] && p === points[0])) {
        this.constrained_edge[1] = true;
    } else if ((q === points[1] && p === points[2]) || (q === points[2] && p === points[1])) {
        this.constrained_edge[0] = true;
    }
};


// ---------------------------------------------------------Exports (public API)

module.exports = Triangle;

},{"./xy":11}],10:[function(_dereq_,module,exports){
/*
 * Poly2Tri Copyright (c) 2009-2014, Poly2Tri Contributors
 * http://code.google.com/p/poly2tri/
 * 
 * poly2tri.js (JavaScript port) (c) 2009-2014, Poly2Tri Contributors
 * https://github.com/r3mi/poly2tri.js
 * 
 * All rights reserved.
 * 
 * Distributed under the 3-clause BSD License, see LICENSE.txt
 */



/**
 * Precision to detect repeated or collinear points
 * @private
 * @const {number}
 * @default
 */
var EPSILON = 1e-12;
exports.EPSILON = EPSILON;

/**
 * @private
 * @enum {number}
 * @readonly
 */
var Orientation = {
    "CW": 1,
    "CCW": -1,
    "COLLINEAR": 0
};
exports.Orientation = Orientation;


/**
 * Formula to calculate signed area<br>
 * Positive if CCW<br>
 * Negative if CW<br>
 * 0 if collinear<br>
 * <pre>
 * A[P1,P2,P3]  =  (x1*y2 - y1*x2) + (x2*y3 - y2*x3) + (x3*y1 - y3*x1)
 *              =  (x1-x3)*(y2-y3) - (y1-y3)*(x2-x3)
 * </pre>
 *
 * @private
 * @param {!XY} pa  point object with {x,y}
 * @param {!XY} pb  point object with {x,y}
 * @param {!XY} pc  point object with {x,y}
 * @return {Orientation}
 */
function orient2d(pa, pb, pc) {
    var detleft = (pa.x - pc.x) * (pb.y - pc.y);
    var detright = (pa.y - pc.y) * (pb.x - pc.x);
    var val = detleft - detright;
    if (val > -(EPSILON) && val < (EPSILON)) {
        return Orientation.COLLINEAR;
    } else if (val > 0) {
        return Orientation.CCW;
    } else {
        return Orientation.CW;
    }
}
exports.orient2d = orient2d;


/**
 *
 * @private
 * @param {!XY} pa  point object with {x,y}
 * @param {!XY} pb  point object with {x,y}
 * @param {!XY} pc  point object with {x,y}
 * @param {!XY} pd  point object with {x,y}
 * @return {boolean}
 */
function inScanArea(pa, pb, pc, pd) {
    var oadb = (pa.x - pb.x) * (pd.y - pb.y) - (pd.x - pb.x) * (pa.y - pb.y);
    if (oadb >= -EPSILON) {
        return false;
    }

    var oadc = (pa.x - pc.x) * (pd.y - pc.y) - (pd.x - pc.x) * (pa.y - pc.y);
    if (oadc <= EPSILON) {
        return false;
    }
    return true;
}
exports.inScanArea = inScanArea;


/**
 * Check if the angle between (pa,pb) and (pa,pc) is obtuse i.e. (angle > œÄ/2 || angle < -œÄ/2)
 *
 * @private
 * @param {!XY} pa  point object with {x,y}
 * @param {!XY} pb  point object with {x,y}
 * @param {!XY} pc  point object with {x,y}
 * @return {boolean} true if angle is obtuse
 */
function isAngleObtuse(pa, pb, pc) {
    var ax = pb.x - pa.x;
    var ay = pb.y - pa.y;
    var bx = pc.x - pa.x;
    var by = pc.y - pa.y;
    return (ax * bx + ay * by) < 0;
}
exports.isAngleObtuse = isAngleObtuse;


},{}],11:[function(_dereq_,module,exports){
/*
 * Poly2Tri Copyright (c) 2009-2014, Poly2Tri Contributors
 * http://code.google.com/p/poly2tri/
 * 
 * poly2tri.js (JavaScript port) (c) 2009-2014, Poly2Tri Contributors
 * https://github.com/r3mi/poly2tri.js
 * 
 * All rights reserved.
 * 
 * Distributed under the 3-clause BSD License, see LICENSE.txt
 */



/**
 * The following functions operate on "Point" or any "Point like" object with {x,y},
 * as defined by the {@link XY} type
 * ([duck typing]{@link http://en.wikipedia.org/wiki/Duck_typing}).
 * @module
 * @private
 */

/**
 * poly2tri.js supports using custom point class instead of {@linkcode Point}.
 * Any "Point like" object with <code>{x, y}</code> attributes is supported
 * to initialize the SweepContext polylines and points
 * ([duck typing]{@link http://en.wikipedia.org/wiki/Duck_typing}).
 *
 * poly2tri.js might add extra fields to the point objects when computing the
 * triangulation : they are prefixed with <code>_p2t_</code> to avoid collisions
 * with fields in the custom class.
 *
 * @example
 *      var contour = [{x:100, y:100}, {x:100, y:300}, {x:300, y:300}, {x:300, y:100}];
 *      var swctx = new poly2tri.SweepContext(contour);
 *
 * @typedef {Object} XY
 * @property {number} x - x coordinate
 * @property {number} y - y coordinate
 */


/**
 * Point pretty printing : prints x and y coordinates.
 * @example
 *      xy.toStringBase({x:5, y:42})
 *      // ‚Üí "(5;42)"
 * @protected
 * @param {!XY} p - point object with {x,y}
 * @returns {string} <code>"(x;y)"</code>
 */
function toStringBase(p) {
    return ("(" + p.x + ";" + p.y + ")");
}

/**
 * Point pretty printing. Delegates to the point's custom "toString()" method if exists,
 * else simply prints x and y coordinates.
 * @example
 *      xy.toString({x:5, y:42})
 *      // ‚Üí "(5;42)"
 * @example
 *      xy.toString({x:5,y:42,toString:function() {return this.x+":"+this.y;}})
 *      // ‚Üí "5:42"
 * @param {!XY} p - point object with {x,y}
 * @returns {string} <code>"(x;y)"</code>
 */
function toString(p) {
    // Try a custom toString first, and fallback to own implementation if none
    var s = p.toString();
    return (s === '[object Object]' ? toStringBase(p) : s);
}


/**
 * Compare two points component-wise. Ordered by y axis first, then x axis.
 * @param {!XY} a - point object with {x,y}
 * @param {!XY} b - point object with {x,y}
 * @return {number} <code>&lt; 0</code> if <code>a &lt; b</code>,
 *         <code>&gt; 0</code> if <code>a &gt; b</code>, 
 *         <code>0</code> otherwise.
 */
function compare(a, b) {
    if (a.y === b.y) {
        return a.x - b.x;
    } else {
        return a.y - b.y;
    }
}

/**
 * Test two Point objects for equality.
 * @param {!XY} a - point object with {x,y}
 * @param {!XY} b - point object with {x,y}
 * @return {boolean} <code>True</code> if <code>a == b</code>, <code>false</code> otherwise.
 */
function equals(a, b) {
    return a.x === b.x && a.y === b.y;
}


module.exports = {
    toString: toString,
    toStringBase: toStringBase,
    compare: compare,
    equals: equals
};

},{}]},{},[6])
(6)
});
define('poly2tri', ['poly2tri/dist/poly2tri'], function (main) { return main; });


// https://github.com/r3mi/poly2tri.js

define ('cobweb/Components/Geometry3D/IndexedFaceSet',[
	"jquery",
	"cobweb/Fields",
	"cobweb/Basic/X3DFieldDefinition",
	"cobweb/Basic/FieldDefinitionArray",
	"cobweb/Components/Rendering/X3DComposedGeometryNode",
	"cobweb/Bits/X3DConstants",
	"standard/Math/Numbers/Vector3",
	"standard/Math/Numbers/Matrix4",
	"poly2tri",
],
function ($,
          Fields,
          X3DFieldDefinition,
          FieldDefinitionArray,
          X3DComposedGeometryNode, 
          X3DConstants,
          Vector3,
          Matrix4,
          poly2tri)
{
	with (Fields)
	{
		function IndexedFaceSet (executionContext)
		{
			X3DComposedGeometryNode .call (this, executionContext .getBrowser (), executionContext);

			this .addType (X3DConstants .IndexedFaceSet);
		}

		IndexedFaceSet .prototype = $.extend (Object .create (X3DComposedGeometryNode .prototype),
		{
			constructor: IndexedFaceSet,
			fieldDefinitions: new FieldDefinitionArray ([
				new X3DFieldDefinition (X3DConstants .inputOutput,    "metadata",        new SFNode ()),
				new X3DFieldDefinition (X3DConstants .initializeOnly, "solid",           new SFBool (true)),
				new X3DFieldDefinition (X3DConstants .initializeOnly, "ccw",             new SFBool (true)),
				new X3DFieldDefinition (X3DConstants .initializeOnly, "convex",          new SFBool (true)),
				new X3DFieldDefinition (X3DConstants .initializeOnly, "creaseAngle",     new SFFloat ()),
				new X3DFieldDefinition (X3DConstants .initializeOnly, "colorPerVertex",  new SFBool (true)),
				new X3DFieldDefinition (X3DConstants .initializeOnly, "normalPerVertex", new SFBool (true)),
				new X3DFieldDefinition (X3DConstants .inputOutput,    "colorIndex",      new MFInt32 ()),
				new X3DFieldDefinition (X3DConstants .inputOutput,    "texCoordIndex",   new MFInt32 ()),
				new X3DFieldDefinition (X3DConstants .inputOutput,    "normalIndex",     new MFInt32 ()),
				new X3DFieldDefinition (X3DConstants .inputOutput,    "coordIndex",      new MFInt32 ()),
				new X3DFieldDefinition (X3DConstants .inputOutput,    "attrib",          new MFNode ()),
				new X3DFieldDefinition (X3DConstants .inputOutput,    "fogCoord",        new SFNode ()),
				new X3DFieldDefinition (X3DConstants .inputOutput,    "color",           new SFNode ()),
				new X3DFieldDefinition (X3DConstants .inputOutput,    "texCoord",        new SFNode ()),
				new X3DFieldDefinition (X3DConstants .inputOutput,    "normal",          new SFNode ()),
				new X3DFieldDefinition (X3DConstants .inputOutput,    "coord",           new SFNode ()),
			]),
			getTypeName: function ()
			{
				return "IndexedFaceSet";
			},
			getComponentName: function ()
			{
				return "Geometry3D";
			},
			getContainerField: function ()
			{
				return "geometry";
			},
			getTexCoordPerVertexIndex: function (index)
			{
				if (index < this .texCoordIndex_ .length)
					return this .texCoordIndex_ [index];

				return this .coordIndex_ [index];
			},
			getColorPerVertexIndex: function (index)
			{
				if (index < this .colorIndex_ .length)
					return this .colorIndex_ [index];

				return this .coordIndex_ [index];
			},
			getColorIndex: function (index)
			{
				if (index < this .colorIndex_ .length)
					return this .colorIndex_ [index];

				return index;
			},
			getNormalPerVertexIndex: function (index)
			{
				if (index < this .normalIndex_ .length)
					return this .normalIndex_ [index];

				return this .coordIndex_ [index];
			},
			getNormalIndex: function (index)
			{
				if (index < this .normalIndex_ .length)
					return this .normalIndex_ [index];

				return index;
			},
			build: function ()
			{
				// Triangulate
				var polygons = this .triangulate ();

				// Build arrays

				if (polygons .length === 0)
					return;

				// Fill GeometryNode

				var
					colorPerVertex  = this .colorPerVertex_ .getValue (),
					normalPerVertex = this .normalPerVertex_ .getValue (),
					coordIndex      = this .coordIndex_ .getValue (),
					colorNode       = this .getColor (),
					texCoordNode    = this .getTexCoord (),
					normalNode      = this .getNormal (),
					coordNode       = this .getCoord (),
					face            = 0;

				if (texCoordNode)
					texCoordNode .init (this .getTexCoords ());

				for (var p = 0; p < polygons .length; ++ p)
				{
					var polygon = polygons [p];

					for (var t = 0; t < polygon .triangles .length; ++ t)
					{
						var triangle = polygon .triangles [t];

						for (var v = 0; v < triangle .length; ++ v)
						{
							var i     = triangle [v];
							var index = coordIndex [i] .getValue ();

							if (colorNode)
							{
								if (colorPerVertex)
									this .addColor (colorNode .getColor (this .getColorPerVertexIndex (i)));
								else
									this .addColor (colorNode .getColor (this .getColorIndex (face)));
							}

							if (texCoordNode)
								texCoordNode .addTexCoord (this .getTexCoords (), this .getTexCoordPerVertexIndex (i));

							if (normalNode)
							{
								if (normalPerVertex)
									this .addNormal (normalNode .getVector (this .getNormalPerVertexIndex (i)));

								else
									this .addNormal (normalNode .getVector (this .getNormalIndex (face)));
							}

							this .addVertex (coordNode .getPoint (index));
						}
					}

					++ face;
				}

				// Autogenerate normal if not specified.

				if (! this .getNormal ())
					this .buildNormals (polygons);

				this .setSolid (this .solid_ .getValue ());
				this .setCCW (this .ccw_ .getValue ());
				this .setCurrentTexCoord (this .getTexCoord ());
			},
			triangulate: function ()
			{
				var
					convex     = this .convex_ .getValue (),
					coordIndex = this .coordIndex_ .getValue (),
					polygons   = [ ];

				if (! this .getCoord ())
					return polygons;

				if (this .coordIndex_ .length)
				{
					// Add -1 (polygon end marker) to coordIndex if not present.
					if (this .coordIndex_ [this .coordIndex_ .length - 1] > -1)
						this .coordIndex_ .push (-1);

					// Construct triangle array and determine the number of used points.
					var i = 0;

					polygons .push ({ vertices: [ ], triangles: [ ] });

					for (var c = 0; c < this .coordIndex_ .length; ++ c)
					{
						var
							index    = coordIndex [c] .getValue (),
							vertices = polygons [polygons .length - 1] .vertices;
	
						if (index > -1)
						{
							// Add vertex index.
							vertices .push (i);
						}
						else
						{
							// Negativ index.

							if (vertices .length)
							{
								// Closed polygon.
								if (vertices [0] === vertices [vertices .length - 1])
									vertices .pop ();

								switch (vertices .length)
								{
									case 0:
									case 1:
									case 2:
									{
										vertices .length = 0;
										break;
									}
									case 3:
									{
										// Add polygon with one triangle.
					
										polygons [polygons .length - 1] .triangles .push (vertices);
										polygons .push ({ vertices: [ ], triangles: [ ] });
										break;
									}
									default:
									{
										// Triangulate polygons.
										
										if (convex)
											this .triangulateConvexPolygon (polygons [polygons .length - 1]);
										else
											this .triangulatePolygon (polygons [polygons .length - 1]);

										if (polygons [polygons .length - 1] .triangles .length)
											polygons .push ({ vertices: [ ], triangles: [ ] });
										else
											vertices .length = 0;

										break;
									}
								}
							}
						}

						++ i;
					}

					if (polygons [polygons .length - 1] .triangles .length === 0)
						polygons .pop ();
				}

				return polygons;
			},
			triangulatePolygon: function (polygon)
			{
				try
				{
					// Transform vertices to 2D space.

					var
						vertices   = polygon .vertices,
						triangles  = polygon .triangles,
						coordIndex = this .coordIndex_ .getValue (),
						coord      = this .getCoord ();

					var
						p0 = coord .getPoint (coordIndex [vertices [0]] .getValue ()),
						p1 = coord .getPoint (coordIndex [vertices [1]] .getValue ());

					var
						zAxis = this .getPolygonNormal (vertices, coordIndex, coord),
						xAxis = Vector3 .subtract (p1, p0),
						yAxis = Vector3 .cross (zAxis, xAxis);

					xAxis .normalize ();
					yAxis .normalize ();

					var matrix = new Matrix4 (xAxis .x, xAxis .y, xAxis .z, 0,
					                          yAxis .x, yAxis .y, yAxis .z, 0,
					                          zAxis .x, zAxis .y, zAxis .z, 0,
					                          p0 .x, p0 .y, p0 .z, 1);

					matrix .inverse ();

					var contour = [ ];

					for (var i = 0; i < vertices .length; ++ i)
					{
						var
							index   = vertices [i],
							vertex2 = matrix .multVecMatrix (coord .getPoint (coordIndex [index] .getValue ()) .copy ());

						vertex2 .index = index;
						contour .push (vertex2);
					}

					// Triangulate polygon.

					var
						context = new poly2tri .SweepContext (contour),
						ts      = context .triangulate () .getTriangles ();

					for (var i = 0; i < ts .length; ++ i)
						triangles .push ([ ts [i] .getPoint (0) .index, ts [i] .getPoint (1) .index, ts [i] .getPoint (2) .index ]);
				}
				catch (error)
				{
					//console .warn (error);
					this .triangulateConvexPolygon (polygon);
				}
			},
			triangulateConvexPolygon: function (polygon)
			{
				var vertices  = polygon .vertices;
				var triangles = polygon .triangles;

				// Fallback: Very simple triangulation for convex polygons.
				for (var i = 1, size = vertices .length - 1; i < size; ++ i)
					triangles .push ([ vertices [0], vertices [i], vertices [i + 1] ]);
			},
			buildNormals: function (polygons)
			{
				var normals = this .createNormals (polygons);

				for (var p = 0; p < polygons .length; ++ p)
				{
					var triangles = polygons [p] .triangles;
				
					for (var t = 0; t < triangles .length; ++ t)
					{
						var triangle = triangles [t];
					
						for (var v = 0; v < triangle .length; ++ v)
						{
							this .addNormal (normals [triangle [v]]);
						}
					}
				}
			},
			createNormals: function (polygons)
			{
				var
					cw          = ! this .ccw_ .getValue (),
					normals     = [ ],
					normalIndex = [ ],
					coordIndex  = this .coordIndex_ .getValue (),
					coord       = this .getCoord (),
					normal      = null;

				for (var p = 0; p < polygons .length; ++ p)
				{
					var
						polygon  = polygons [p],
						vertices = polygon .vertices;

					switch (vertices .length)
					{
						case 3:
						{
							normal = coord .getNormal (coordIndex [vertices [0]] .getValue (),
							                           coordIndex [vertices [1]] .getValue (),
							                           coordIndex [vertices [2]] .getValue ());
							break;
						}
						case 4:
						{
							normal = coord .getQuadNormal (coordIndex [vertices [0]] .getValue (),
							                               coordIndex [vertices [1]] .getValue (),
							                               coordIndex [vertices [2]] .getValue (),
							                               coordIndex [vertices [3]] .getValue ());
							break;
						}
						default:
						{
							normal = this .getPolygonNormal (vertices, coordIndex, coord);
							break;
						}
					}

					// Add a normal index for each point.
					for (var i = 0, length = vertices .length; i < length; ++ i)
					{
						var index = coordIndex [vertices [i]] .getValue ();

						if (! normalIndex [index])
							normalIndex [index] = [ ];

						normalIndex [index] .push (normals .length + i);
					}

					if (cw)
						normal .negate ();

					// Add this normal for each vertex and for -1.

					for (var i = 0, length = vertices .length + 1; i < length; ++ i)
						normals .push (normal);
				}

				return this .refineNormals (normalIndex, normals, this .creaseAngle_ .getValue ());
			},
			getPolygonNormal: function (vertices, coordIndex, coord)
			{
				// Determine polygon normal.
				// We use Newell's method https://www.opengl.org/wiki/Calculating_a_Surface_Normal here:

				var
					normal = new Vector3 (0, 0, 0),
					next   = coord .getPoint (coordIndex [vertices [0]] .getValue ());

				for (var i = 0, length = vertices .length; i < length; ++ i)
				{
					var
						current = next,
						next    = coord .getPoint (coordIndex [vertices [(i + 1) % length]] .getValue ());

					normal .x += (current .y - next .y) * (current .z + next .z);
					normal .y += (current .z - next .z) * (current .x + next .x);
					normal .z += (current .x - next .x) * (current .y + next .y);
				}

				return normal .normalize ();
			},
		});

		return IndexedFaceSet;
	}
});



define ('cobweb/Components/Rendering/X3DGeometricPropertyNode',[
	"jquery",
	"cobweb/Components/Core/X3DNode",
	"cobweb/Bits/X3DConstants",
],
function ($,
          X3DNode, 
          X3DConstants)
{
	function X3DGeometricPropertyNode (browser, executionContext)
	{
		X3DNode .call (this, browser, executionContext);

		this .addType (X3DConstants .X3DGeometricPropertyNode);
	}

	X3DGeometricPropertyNode .prototype = $.extend (Object .create (X3DNode .prototype),
	{
		constructor: X3DGeometricPropertyNode,
	});

	return X3DGeometricPropertyNode;
});



define ('cobweb/Components/Rendering/X3DCoordinateNode',[
	"jquery",
	"cobweb/Components/Rendering/X3DGeometricPropertyNode",
	"cobweb/Bits/X3DConstants",
],
function ($,
          X3DGeometricPropertyNode, 
          X3DConstants)
{
	function X3DCoordinateNode (browser, executionContext)
	{
		X3DGeometricPropertyNode .call (this, browser, executionContext);

		this .addType (X3DConstants .X3DCoordinateNode);
	}

	X3DCoordinateNode .prototype = $.extend (Object .create (X3DGeometricPropertyNode .prototype),
	{
		constructor: X3DCoordinateNode,
	});

	return X3DCoordinateNode;
});



define ('standard/Math/Geometry/Triangle3',[
	"standard/Math/Numbers/Vector3",
],
function (Vector3)
{
	var
	   A = new Vector3 (0, 0, 0),
	   B = new Vector3 (0, 0, 0),
	   C = new Vector3 (0, 0, 0);

	return {
	   area: function (a, b, c)
	   {
	      return A .assign (v2) .subtract (v1) .cross (B .assign (v3) .subtract (v1)) .abs () / 2;
	   },
		normal: function (v1, v2, v3)
		{
			var
				x1 = v3 .x - v2 .x,
				y1 = v3 .y - v2 .y,
				z1 = v3 .z - v2 .z,
				x2 = v1 .x - v2 .x,
				y2 = v1 .y - v2 .y,
				z2 = v1 .z - v2 .z;

			var normal = new Vector3 (y1 * z2 - z1 * y2,
			                          z1 * x2 - x1 * z2,
			                          x1 * y2 - y1 * x2);

			return normal .normalize ();
		},
		quadNormal: function (v1, v2, v3, v4)
		{
			var
				x1 = v3 .x - v1 .x,
				y1 = v3 .y - v1 .y,
				z1 = v3 .z - v1 .z,
				x2 = v4 .x - v2 .x,
				y2 = v4 .y - v2 .y,
				z2 = v4 .z - v2 .z;

			var normal = new Vector3 (y1 * z2 - z1 * y2,
			                          z1 * x2 - x1 * z2,
			                          x1 * y2 - y1 * x2);

			return normal .normalize ();
		},
	};
});


define ('cobweb/Components/Rendering/Coordinate',[
	"jquery",
	"cobweb/Fields",
	"cobweb/Basic/X3DFieldDefinition",
	"cobweb/Basic/FieldDefinitionArray",
	"cobweb/Components/Rendering/X3DCoordinateNode",
	"cobweb/Bits/X3DConstants",
	"standard/Math/Geometry/Triangle3",
	"standard/Math/Numbers/Vector3",
],
function ($,
          Fields,
          X3DFieldDefinition,
          FieldDefinitionArray,
          X3DCoordinateNode, 
          X3DConstants,
          Triangle3,
          Vector3)
{
	with (Fields)
	{
		function Coordinate (executionContext)
		{
			X3DCoordinateNode .call (this, executionContext .getBrowser (), executionContext);

			this .addType (X3DConstants .Coordinate);
		}

		Coordinate .prototype = $.extend (Object .create (X3DCoordinateNode .prototype),
		{
			constructor: Coordinate,
			fieldDefinitions: new FieldDefinitionArray ([
				new X3DFieldDefinition (X3DConstants .inputOutput, "metadata", new SFNode ()),
				new X3DFieldDefinition (X3DConstants .inputOutput, "point",    new MFVec3f ()),
			]),
			getTypeName: function ()
			{
				return "Coordinate";
			},
			getComponentName: function ()
			{
				return "Rendering";
			},
			getContainerField: function ()
			{
				return "coord";
			},
			isEmpty: function ()
			{
				return this .point_ .length == 0;
			},
			getPoint: function (index)
			{
				if (index < this .point_ .length)
					return this .point_ [index] .getValue ();

				return new Vector3 (0, 0, 0);
			},
			getNormal: function (index1, index2, index3)
			{
				var length = this .point_ .length;

				if (index1 < length && index2 < length && index3 < length)
					return Triangle3 .normal (this .point_ [index1] .getValue (),
					                          this .point_ [index2] .getValue (),
					                          this .point_ [index3] .getValue ());

				return new Vector3 (0, 0, 0);
			},
			getQuadNormal: function (index1, index2, index3, index4)
			{
				var length = this .point_ .length;

				if (index1 < length && index2 < length && index3 < length && index4 < length)
					return Triangle3 .quadNormal (this .point_ [index1] .getValue (),
					                              this .point_ [index2] .getValue (),
					                              this .point_ [index3] .getValue (),
					                              this .point_ [index4] .getValue ());

				return new Vector3 (0, 0, 0);
			},
		});

		return Coordinate;
	}
});



define ('cobweb/Components/Texturing/X3DTextureCoordinateNode',[
	"jquery",
	"cobweb/Components/Rendering/X3DGeometricPropertyNode",
	"cobweb/Bits/X3DConstants",
],
function ($,
          X3DGeometricPropertyNode, 
          X3DConstants)
{
	function X3DTextureCoordinateNode (browser, executionContext)
	{
		X3DGeometricPropertyNode .call (this, browser, executionContext);

		this .addType (X3DConstants .X3DTextureCoordinateNode);
	}

	X3DTextureCoordinateNode .prototype = $.extend (Object .create (X3DGeometricPropertyNode .prototype),
	{
		constructor: X3DTextureCoordinateNode,
	});

	return X3DTextureCoordinateNode;
});



define ('cobweb/Components/Texturing/TextureCoordinate',[
	"jquery",
	"cobweb/Fields",
	"cobweb/Basic/X3DFieldDefinition",
	"cobweb/Basic/FieldDefinitionArray",
	"cobweb/Components/Texturing/X3DTextureCoordinateNode",
	"cobweb/Bits/X3DConstants",
],
function ($,
          Fields,
          X3DFieldDefinition,
          FieldDefinitionArray,
          X3DTextureCoordinateNode, 
          X3DConstants)
{
	with (Fields)
	{
		function TextureCoordinate (executionContext)
		{
			X3DTextureCoordinateNode .call (this, executionContext .getBrowser (), executionContext);

			this .addType (X3DConstants .TextureCoordinate);
		}

		TextureCoordinate .prototype = $.extend (Object .create (X3DTextureCoordinateNode .prototype),
		{
			constructor: TextureCoordinate,
			fieldDefinitions: new FieldDefinitionArray ([
				new X3DFieldDefinition (X3DConstants .inputOutput, "metadata", new SFNode ()),
				new X3DFieldDefinition (X3DConstants .inputOutput, "point",    new MFVec2f ()),
			]),
			getTypeName: function ()
			{
				return "TextureCoordinate";
			},
			getComponentName: function ()
			{
				return "Texturing";
			},
			getContainerField: function ()
			{
				return "texCoord";
			},
			init: function (texCoords)
			{
				texCoords .push ([ ]);
			},
			addTexCoord: function (texCoord, index)
			{
				this .addTexCoordToChannel (texCoord [0], index);
			},
			addTexCoordToChannel: function (texCoords, index)
			{
				if (index < this .point_ .length)
				{
					var point2 = this .point_ [index];
	
					texCoords .push (point2 .x);
					texCoords .push (point2 .y);
					texCoords .push (0);
					texCoords .push (1);
				}
				else
				{
					texCoords .push (0);
					texCoords .push (0);
					texCoords .push (0);
					texCoords .push (1);
				}
			},
		});

		return TextureCoordinate;
	}
});



define ('cobweb/Browser/Geometry3D/BoxOptions',[
	"jquery",
	"cobweb/Basic/X3DBaseNode",
	"cobweb/Components/Geometry3D/IndexedFaceSet",
	"cobweb/Components/Rendering/Coordinate",
	"cobweb/Components/Texturing/TextureCoordinate",
	"standard/Math/Numbers/Vector2",
	"standard/Math/Numbers/Vector3",
],
function ($,
          X3DBaseNode,
          IndexedFaceSet,
          Coordinate,
          TextureCoordinate,
          Vector2,
          Vector3)
{
	function BoxOptions (executionContext)
	{
		X3DBaseNode .call (this, executionContext .getBrowser (), executionContext);
	}

	BoxOptions .prototype = $.extend (Object .create (X3DBaseNode .prototype),
	{
		constructor: BoxOptions,
		initialize: function ()
		{
			X3DBaseNode .prototype .initialize .call (this);
		},
		getGeometry: function ()
		{
			if (this .geometry)
				return this .geometry;

			this .geometry            = new IndexedFaceSet (this .getExecutionContext ());
			this .geometry .texCoord_ = new TextureCoordinate (this .getExecutionContext ());
			this .geometry .coord_    = new Coordinate (this .getExecutionContext ());

			var
				geometry = this .geometry,
				texCoord = this .geometry .texCoord_ .getValue (),
				coord    = this .geometry .coord_ .getValue ();

			geometry .texCoordIndex_ = [
				0, 1, 2, 3, -1, // front
				0, 1, 2, 3, -1, // back
				0, 1, 2, 3, -1, // left
				0, 1, 2, 3, -1, // right
				0, 1, 2, 3, -1, // top
				0, 1, 2, 3, -1, // bottom
			];

			geometry .coordIndex_ = [
				0, 1, 2, 3, -1, // front
				5, 4, 7, 6, -1, // back
				1, 5, 6, 2, -1, // left
				4, 0, 3, 7, -1, // right
				4, 5, 1, 0, -1, // top
				3, 2, 6, 7, -1, // bottom
			];

			texCoord .point_ = [
				new Vector2 (1, 1), new Vector2 (0, 1), new Vector2 (0, 0), new Vector2 (1, 0), 
			];

			coord .point_ = [
				new Vector3 ( 1,  1,  1), new Vector3 (-1,  1,  1), new Vector3 (-1, -1,  1), new Vector3 ( 1, -1,  1), 
				new Vector3 ( 1,  1, -1), new Vector3 (-1,  1, -1), new Vector3 (-1, -1, -1), new Vector3 ( 1, -1, -1), 
			];

			texCoord .setup ();
			coord    .setup ();
			geometry .setup ();

			return this .geometry;
		},
	});

	return BoxOptions;
});


define ('cobweb/Browser/Geometry3D/ConeOptions',[
	"jquery",
	"cobweb/Fields",
	"cobweb/Basic/X3DBaseNode",
],
function ($,
          Fields,
          X3DBaseNode)
{
	with (Fields)
	{
		function ConeOptions (executionContext)
		{
			X3DBaseNode .call (this, executionContext .getBrowser (), executionContext);
		}

		ConeOptions .prototype = $.extend (Object .create (X3DBaseNode .prototype),
		{
			constructor: ConeOptions,
			initialize: function ()
			{
				X3DBaseNode .prototype .initialize .call (this);

				this .addChildren ("uDimension", new SFInt32 (1),
				                   "vDimension", new SFInt32 (20))
			},
		});

		return ConeOptions;
	}
});


define ('cobweb/Browser/Geometry3D/CylinderOptions',[
	"jquery",
	"cobweb/Fields",
	"cobweb/Basic/X3DBaseNode",
],
function ($,
          Fields,
          X3DBaseNode)
{
	with (Fields)
	{
		function CylinderOptions (executionContext)
		{
			X3DBaseNode .call (this, executionContext .getBrowser (), executionContext);
		}

		CylinderOptions .prototype = $.extend (Object .create (X3DBaseNode .prototype),
		{
			constructor: CylinderOptions,
			initialize: function ()
			{
				X3DBaseNode .prototype .initialize .call (this);

				this .addChildren ("uDimension", new SFInt32 (1),
				                   "vDimension", new SFInt32 (20))
			},
		});

		return CylinderOptions;
	}
});


define ('standard/Math/Numbers/Complex',[
	"jquery",
],
function ($)
{
	function Complex (real, imag)
	{
		switch (arguments .length)
		{
			case 0:
				this .real = 0;
				this .imag = 0;
				return this;
			case 1:
				this .real = real;
				this .imag = 0;
				return this;
			default:
				this .real = real
				this .imag = imag;
				return this;
		}
	}

	Complex .prototype =
	{
		constructor: Complex,
		copy: function ()
		{
			var copy = Object .create (Complex .prototype);
			copy .real = this .real;
			copy .imag = this .imag;
			return copy;
		},
		assign: function (complex)
		{
			this .real = complex .real;
			this .imag = complex .imag;
			return this;
		},
		equals: function (complex)
		{
			return this .real === complex .real &&
			       this .imag === complex .imag;
		},
		setRadius: function (radius)
		{
			return this .setPolar (radius, this .getAngle ());
		},
		getRadius: function ()
		{
			if (this .real)
			{
				if (this .imag)
					return Math .sqrt (this .real * this .real + this .imag * this .imag);

				return Math .abs (this .real);
			}

			return Math .abs (this .imag);
		},
		setAngle: function (angle)
		{
			return this .setPolar (this .getRadius (), angle);
		},
		getAngle: function ()
		{
			return Math .atan2 (this .imag, this .real);
		},
		setPolar: function (radius, angle)
		{
			this .real = radius * Math .cos (angle);
			this .imag = radius * Math .sin (angle);
		},
		conjugate: function ()
		{
			this .imag = -this .imag;
			return this;
		},
		negate: function ()
		{
			this .real = -this .real;
			this .imag = -this .imag;
			return this;
		},
		inverse: function ()
		{
			var d = this .real * this .real + this .imag * this .imag;

			this .real /=  d;
			this .imag /= -d;
			return this;
		},
		add: function (value)
		{
			this .real += value .real;
			this .imag += value .imag;
			return this;
		},
		subtract: function (value)
		{
			this .real -= value .real;
			this .imag -= value .imag;
			return this;
		},
		multiply: function (value)
		{
			this .real *= value;
			this .imag *= value;
			return this;
		},
		multComp: function ()
		{
			var
				real = this .real, imag = this .imag;

			this .real = real * value .real - imag * value .imag;
			this .imag = real * value .imag + imag * value .real;
			return this;
		},
		//divide: function (value)
		//{
		//	return this;
		//},
		divComp: function (value)
		{
			var
				ar = this .real, ai = this .imag,
				br = value .real, bi = value .imag;

			var d = br * br + bi * bi;

			this .real = (ar * br + ai * bi) / d;
			this .imag = (ai * br - ar * bi) / d;
			return this;
		},
		toString: function ()
		{
			if (this .imag)
				return this .real + " " + this .imag + "i";

			return String (this .real);
		},
	};

	$.extend (Complex,
	{
		Polar: function (radius, angle)
		{
			var complex = Object .create (Complex .prototype);
			complex .real = radius * Math .cos (angle);
			complex .imag = radius * Math .sin (angle);
			return complex;
		},
		multiply: function (lhs, rhs)
		{
			var copy = Object .create (this .prototype);
			copy .real = lhs .real * rhs;
			copy .imag = lhs .imag * rhs;
			return copy;
		},
		multComp: function (lhs, rhs)
		{
			var copy = Object .create (this .prototype);
			copy .real = lhs .real * rhs .real - lsh .imag * rhs .imag;
			copy .imag = lhs .real * rhs .imag + lsh .imag * rhs .real;
			return copy;
		},
	});

	return Complex;
});


define ('cobweb/Browser/Geometry3D/QuadSphereOptions',[
	"jquery",
	"cobweb/Fields",
	"cobweb/Basic/X3DBaseNode",
	"cobweb/Components/Geometry3D/IndexedFaceSet",
	"cobweb/Components/Rendering/Coordinate",
	"cobweb/Components/Texturing/TextureCoordinate",
	"standard/Math/Numbers/Complex",
	"standard/Math/Numbers/Vector2",
	"standard/Math/Numbers/Vector3",
],
function ($,
          Fields,
          X3DBaseNode,
          IndexedFaceSet,
          Coordinate,
          TextureCoordinate,
          Complex,
          Vector2,
          Vector3)
{
	with (Fields)
	{
		function QuadSphereOptions (executionContext)
		{
			X3DBaseNode .call (this, executionContext .getBrowser (), executionContext);
		}

		QuadSphereOptions .prototype = $.extend (Object .create (X3DBaseNode .prototype),
		{
			constructor: QuadSphereOptions,
			initialize: function ()
			{
				X3DBaseNode .prototype .initialize .call (this);

				this .addChildren ("uDimension", new SFInt32 (40),
				                   "vDimension", new SFInt32 (20))
			},
			createTexCoordIndex: function ()
			{
				var
					uDimension = this .uDimension_ .getValue (),
					vDimension = this .vDimension_ .getValue (),
					geometry   = this .geometry;

				var p = 0;

				for (var u = 0, uLength = uDimension - 1; u < uLength; ++ u, ++ p)
				{
					geometry .texCoordIndex_ .push (p);
					geometry .texCoordIndex_ .push (p + uDimension - 1);
					geometry .texCoordIndex_ .push (p + uDimension);
					geometry .texCoordIndex_ .push (p);
					geometry .texCoordIndex_ .push (-1);
				}

				for (var v = 1, vLength = vDimension - 2; v < vLength; ++ v, ++ p)
				{
					for (var u = 0, uLength = uDimension - 1; u < uLength; ++ u, ++ p)
					{
						geometry .texCoordIndex_ .push (p);
						geometry .texCoordIndex_ .push (p + uDimension);
						geometry .texCoordIndex_ .push (p + uDimension + 1);
						geometry .texCoordIndex_ .push (p + 1);
						geometry .texCoordIndex_ .push (-1);
					}
				}

				for (var u = 0, uLength = uDimension - 1; u < uLength; ++ u, ++ p)
				{
					geometry .texCoordIndex_ .push (p);
					geometry .texCoordIndex_ .push (p + uDimension);
					geometry .texCoordIndex_ .push (p + uDimension);
					geometry .texCoordIndex_ .push (p + 1);
					geometry .texCoordIndex_ .push (-1);
				}
			},
			createTexCoord: function ()
			{
				var
					uDimension = this .uDimension_ .getValue (),
					vDimension = this .vDimension_ .getValue (),
					texCoord   = this .geometry .texCoord_ .getValue ();

				var polOffset = 1 / (2 * (uDimension - 1));

				for (var u = 0, uLength = uDimension - 1; u < uLength; ++ u)
				{
					var x = u / uLength + polOffset;
					texCoord .point_ .push (new Vector2 (x, 1));
				}

				for (var v = 1, vLength = vDimension - 1; v < vLength; ++ v)
				{
					var y = v / vLength;

					for (var u = 0, uLength = uDimension - 1; u < uLength; ++ u)
					{
						var x = u / uLength;
						texCoord .point_ .push (new Vector2 (x, 1 - y));
					}

					texCoord .point_ .push (new Vector2 (1, 1 - y));
				}

				for (var u = 0, uLength = uDimension - 1; u < uLength; ++ u)
				{
					var x = u / uLength + polOffset;
					texCoord .point_ .push (new Vector2 (x, 0));
				}
			},
			createCoordIndex: function ()
			{
				var
					uDimension = this .uDimension_ .getValue (),
					vDimension = this .vDimension_ .getValue (),
					geometry   = this .geometry;

				for (var p = 0, v = 0, vLength = vDimension - 1; v < vLength; ++ v, ++ p)
				{
					for (var u = 0, uLength = uDimension - 2; u < uLength; ++ u, ++ p)
					{
						geometry .coordIndex_ .push (p);
						geometry .coordIndex_ .push (p + uDimension - 1);
						geometry .coordIndex_ .push (p + uDimension);
						geometry .coordIndex_ .push (p + 1);
						geometry .coordIndex_ .push (-1);
					}

					geometry .coordIndex_ .push (p);
					geometry .coordIndex_ .push (p + uDimension - 1);
					geometry .coordIndex_ .push (p + 1);
					geometry .coordIndex_ .push (p - uDimension + 2);
					geometry .coordIndex_ .push (-1);
				}
			},
			createPoints: function ()
			{
				var
					uDimension = this .uDimension_ .getValue (),
					vDimension = this .vDimension_ .getValue (),
					coord      = this .geometry .coord_ .getValue ();

				// North pole
				for (var u = 0, uLength = uDimension - 1; u < uLength; ++ u)
					coord .point_ .push (new Vector3 (0, 1, 0));

				// Sphere segments
				for (var v = 1, vLength = vDimension - 1; v < vLength; ++ v)
				{
					var zPlane = Complex .Polar (1, -Math .PI * v / vLength);

					for (var u = 0, uLength = uDimension - 1; u < uLength; ++ u)
					{
						var yPlane = Complex .Polar (zPlane .imag, 2 * Math .PI * u / uLength);

						coord .point_ .push (new Vector3 (yPlane .imag, zPlane .real, yPlane .real));
					}
				}

				// South pole
				for (var u = 0, uLength = uDimension - 1; u < uLength; ++ u)
					coord .point_ .push (new Vector3 (0, -1, 0));
			},
			getGeometry: function ()
			{
				if (this .geometry)
					return this .geometry;
	
				this .geometry            = new IndexedFaceSet (this .getExecutionContext ());
				this .geometry .texCoord_ = new TextureCoordinate (this .getExecutionContext ());
				this .geometry .coord_    = new Coordinate (this .getExecutionContext ());

				this .createTexCoordIndex ();
				this .createTexCoord ();
				this .createCoordIndex ();
				this .createPoints ();

				var
					geometry = this .geometry,
					texCoord = this .geometry .texCoord_ .getValue (),
					coord    = this .geometry .coord_ .getValue ();

				geometry .creaseAngle_ = Math .PI;

				texCoord .setup ();
				coord    .setup ();
				geometry .setup ();

				return this .geometry;
			},
		});

		return QuadSphereOptions;
	}
});


define ('cobweb/Browser/Geometry3D/X3DGeometry3DContext',[
	"cobweb/Browser/Geometry3D/BoxOptions",
	"cobweb/Browser/Geometry3D/ConeOptions",
	"cobweb/Browser/Geometry3D/CylinderOptions",
	"cobweb/Browser/Geometry3D/QuadSphereOptions",
],
function (BoxOptions,
          ConeOptions,
          CylinderOptions,
          QuadSphereOptions)
{
	function getOptionNode (name, Type)
	{
		if (this [name])
			return this [name];

		this [name] = new Type (this);
		this [name] .setup ();

		return this [name];
	}

	function X3DGeometry3DContext () { }

	X3DGeometry3DContext .prototype =
	{
		initialize: function ()
		{
		},
		getBoxOptions: function ()
		{
			return getOptionNode .call (this, "boxOptions", BoxOptions);
		},
		getConeOptions: function ()
		{
			return getOptionNode .call (this, "coneOptions", ConeOptions);
		},
		getCylinderOptions: function ()
		{
			return getOptionNode .call (this, "cylinderOptions", CylinderOptions);
		},
		getSphereOptions: function ()
		{
			return getOptionNode .call (this, "sphereOptions", QuadSphereOptions);
		},
	};

	return X3DGeometry3DContext;
});


define ('cobweb/Browser/PointingDeviceSensor/PointingDevice',[
	"jquery",
	"cobweb/Basic/X3DBaseNode",
],
function (jquery,
          X3DBaseNode)
{
	function PointingDevice (executionContext)
	{
		X3DBaseNode .call (this, executionContext .getBrowser (), executionContext);
	}

	PointingDevice .prototype = $.extend (Object .create (X3DBaseNode .prototype),
	{
		constructor: PointingDevice,
		initialize: function ()
		{
			this .cursor     = "DEFAULT";
			this .isOver     = false;
			this .motionTime = 0;

			var browser = this .getBrowser ();

			browser .getCanvas () .bind ("mousedown.PointingDevice", this .mousedown  .bind (this));
			browser .getCanvas () .bind ("mouseup.PointingDevice",   this .mouseup    .bind (this));
			browser .getCanvas () .bind ("mousemove.PointingDevice", this .mousemove  .bind (this));
			browser .getCanvas () .bind ("mouseout.PointingDevice",  this .onmouseout .bind (this));
		},
		mousedown: function (event)
		{
			event .preventDefault ();

			var browser = this .getBrowser ();

			browser .getCanvas () .focus ();

			if (browser .hasShiftKey () && browser .hasCtrlKey ())
				return;

			if (event .button === 0)
			{
				var
					offset = browser .getCanvas () .offset (), 
					x      = event .pageX - offset .left,
					y      = browser .getCanvas () .height () - (event .pageY - offset .top);

				if (browser .buttonPressEvent (x, y))
				{
					event .stopImmediatePropagation (); // Keeps the rest of the handlers from being executed

					browser .setCursor ("HAND");
					browser .finished () .addInterest (this, "onverifymotion", x, y);
				}
			}
		},
		mouseup: function (event)
		{
			event .preventDefault ();
	
			var browser = this .getBrowser ();

			if (event .button === 0)
			{
				browser .buttonReleaseEvent ();

				var
					offset = browser .getCanvas () .offset (), 
					x      = event .pageX - offset .left,
					y      = browser .getCanvas () .height () - (event .pageY - offset .top);

				browser .setCursor (this .isOver ? "HAND" : "DEFAULT");
				browser .finished () .addInterest (this, "onverifymotion", x, y);
				browser .addBrowserEvent ();

				this .cursor = "DEFAULT";
			}
		},
		mousemove: function (event)
		{
			event .preventDefault ();

			var browser = this .getBrowser ();

			if (this .motionTime === browser .getCurrentTime ())
				return;

			this .motionTime = browser .getCurrentTime ();

			var
				offset = browser .getCanvas () .offset (), 
				x      = event .pageX - offset .left,
				y      = browser .getCanvas () .height () - (event .pageY - offset .top);

			this .onmotion (x, y);
		},
		onmotion: function (x, y)
		{
			var browser = this .getBrowser ();

			if (browser .motionNotifyEvent (x, y))
			{
				if (! this .isOver)
				{
					this .isOver = true;
					this .cursor = browser .getCursor ();
					browser .setCursor ("HAND");
				}
			}
			else
			{
				if (this .isOver)
				{
					this .isOver = false;
					browser .setCursor (this .cursor);
				}
			}
		},
		onmouseout: function (event)
		{
			event .preventDefault ();

			this .getBrowser () .leaveNotifyEvent ();
		},
		onverifymotion: function (value, x, y)
		{
			// Veryfy isOver state. This is neccessay if an Switch changes on buttonReleaseEvent
			// and the new child has a sensor node inside. This sensor node must be update to
			// reflect the correct isOver state.

			this .getBrowser () .finished () .removeInterest (this, "onverifymotion");

			this .onmotion (x, y);
		},
	});

	return PointingDevice;
});


define ('standard/Math/Geometry/Line3',[
	"standard/Math/Numbers/Vector3",
],
function (Vector3)
{
	function Line3 (point, direction)
	{
		this .point     = point .copy ();
		this .direction = direction .copy ();
	}

	Line3 .prototype =
	{
		constructor: Line3,
		// Static vectors for line / triangle intersection.
		u: new Vector3 (0, 0, 0),
		pvec: new Vector3 (0, 0, 0),
		tvec: new Vector3 (0, 0, 0),
		copy: function ()
		{
			var copy = Object .create (Line3 .prototype);
			copy .point     = this .point .copy ();
			copy .direction = this .direction .copy ();
			return copy;
		},
		assign: function (line)
		{
			this .point     .assign (line .point);
			this .direction .assign (line .direction);
			return this;
		},
		multMatrixLine: function (matrix)
		{
			matrix .multMatrixVec (this .point);
			matrix .multMatrixDir (this .direction) .normalize ();
			return this;
		},
		multLineMatrix: function (matrix)
		{
			matrix .multVecMatrix (this .point);
			matrix .multDirMatrix (this .direction) .normalize ();
			return this;
		},
		getClosestPointToPoint: function (point)
		{
			var
				r = point .copy () .subtract (this .point),
				d = r .dot (this .direction);

			return r .assign (this .direction) .multiply (d) .add (this .point);
		},
		getClosestPointToLine: function (line, point)
		{
			var
				p1 = this .point,
				p2 = line .point,
				d1 = this .direction,
				d2 = line .direction;

			var t = Vector3 .dot (d1, d2);

			if (Math .abs (t) >= 1)
				return false;  // lines are parallel

			var u = this .u .assign (p2) .subtract (p1);

			t = (Vector3 .dot (u, d1) - t * Vector3 .dot (u, d2)) / (1 - t * t);

			point .assign (d1) .multiply (t) .add (p1);
			return true;
		},
		getPerpendicularVector: function (point)
		{
			var d = Vector3 .subtract (this .point, point);

			return d .subtract (this .direction .copy () .multiply (Vector3 .dot (d, this .direction)));
		},
		intersectsTriangle: function (A, B, C, uvt)
		{
			// Find vectors for two edges sharing vert0.
			var
				edge1 = B .subtract (A),
				edge2 = C .subtract (A);

			// Begin calculating determinant - also used to calculate U parameter.
			var pvec = this .pvec .assign (this .direction) .cross (edge2);

			// If determinant is near zero, ray lies in plane of triangle.
			var det = edge1 .dot (pvec);

			// Non culling intersection.

			if (det === 0)
				return false;

			var inv_det = 1 / det;

			// Calculate distance from vert0 to ray point.
			var tvec = this .tvec .assign (this .point) .subtract (A);

			// Calculate U parameter and test bounds.
			var u = tvec .dot (pvec) * inv_det;

			if (u < 0 || u > 1)
				return false;

			// Prepare to test V parameter.
			var qvec = tvec .cross (edge1);

			// Calculate V parameter and test bounds.
			var v = this .direction .dot (qvec) * inv_det;

			if (v < 0 || u + v > 1)
				return false;

			var t = edge2 .dot (qvec) * inv_det;

			uvt .x = u;
			uvt .y = v;
			uvt .z = t;

			return true;
		},
		toString: function ()
		{
			return this .point + ", " + this .direction;
		},
	};

	Line3 .Points = function (point1, point2)
	{
		var line = Object .create (Line3 .prototype);
		line .point     = point1;
		line .direction = Vector3 .subtract (point2, point1) .normalize ();
		return line;
	};

	return Line3;
});


define ('standard/Math/Geometry/ViewVolume',[
	"jquery",
	"standard/Math/Geometry/Line3",
	"standard/Math/Geometry/Plane3",
	"standard/Math/Geometry/Triangle3",
	"standard/Math/Numbers/Vector3",
	"standard/Math/Numbers/Vector4",
	"standard/Math/Numbers/Matrix4",
],
function ($, Line3, Plane3, Triangle3, Vector3, Vector4, Matrix4)
{
	function ViewVolume (projectionMatrix, viewport, scissor)
	{
		try
		{
			var x1 = scissor [0];
			var x2 = scissor [0] + scissor [2];
			var y1 = scissor [1];
			var y2 = scissor [1] + scissor [3];

			var matrix = Matrix4 .inverse (projectionMatrix);

			this .viewport = viewport;
			this .scissor  = scissor;

			var p1 = ViewVolume .unProjectPointMatrix (x1, y2, 1, matrix, viewport);
			var p2 = ViewVolume .unProjectPointMatrix (x1, y1, 1, matrix, viewport);
			var p3 = ViewVolume .unProjectPointMatrix (x1, y1, 0, matrix, viewport);
			var p4 = ViewVolume .unProjectPointMatrix (x2, y1, 0, matrix, viewport);
			var p5 = ViewVolume .unProjectPointMatrix (x2, y2, 0, matrix, viewport);
			var p6 = ViewVolume .unProjectPointMatrix (x2, y2, 1, matrix, viewport);

			this .planes = [ ];
			this .planes .push (new Plane3 (p4, Triangle3 .normal (p5, p4, p3)));  // front
			this .planes .push (new Plane3 (p2, Triangle3 .normal (p3, p2, p1)));  // left
			this .planes .push (new Plane3 (p5, Triangle3 .normal (p4, p5, p6)));  // right
			this .planes .push (new Plane3 (p6, Triangle3 .normal (p1, p6, p5)));  // top
			this .planes .push (new Plane3 (p3, Triangle3 .normal (p2, p3, p4)));  // bottom
			this .planes .push (new Plane3 (p1, Triangle3 .normal (p6, p1, p2)));  // back

			this .valid = true;
		}
		catch (error)
		{
			this .valid            = false;
			this .viewport         = new Vector3 (0, 0, 0);
			this .scissor          = new Vector3 (0, 0, 0);
			this .intersectsSphere = intersectsSphere;
			console .log (error .message);
		}
	}

	ViewVolume .prototype =
	{
		constructor: ViewVolume,
		getViewport: function ()
		{
			return this .viewport;
		},
		getScissor: function ()
		{
			return this .scissor;
		},
		intersectsSphere: function (radius, center)
		{
			var planes = this .planes;
		
			if (planes [0] .distance (center) + radius < 0)
				return false;

			if (planes [1] .distance (center) + radius < 0)
				return false;

			if (planes [2] .distance (center) + radius < 0)
				return false;

			if (planes [3] .distance (center) + radius < 0)
				return false;

			if (planes [4] .distance (center) + radius < 0)
				return false;

			if (planes [5] .distance (center) + radius < 0)
				return false;

			return true;
		},
	};

	$.extend (ViewVolume,
	{
		unProjectPoint: function (winx, winy, winz, modelview, projection, viewport)
		{
			var matrix = Matrix4 .multRight (modelview, projection) .inverse ();

			return this .unProjectPointMatrix (winx, winy, winz, matrix, viewport);
		},
		unProjectPointMatrix: function (winx, winy, winz, matrix, viewport)
		{
			// Transformation of normalized coordinates between -1 and 1
			var vin = new Vector4 ((winx - viewport [0]) / viewport [2] * 2 - 1,
			                       (winy - viewport [1]) / viewport [3] * 2 - 1,
			                       2 * winz - 1,
			                       1);

			//Objects coordinates
			matrix .multVecMatrix (vin);

			if (vin .w === 0)
				throw Error ("Couldn't unproject point: divisor is 0.");

			var d = 1 / vin .w;

			return new Vector3 (vin .x * d, vin .y * d, vin .z * d);
		},
		unProjectLine: function (winx, winy, modelview, projection, viewport)
		{
			var
				matrix = Matrix4 .multRight (modelview, projection) .inverse (),
				near   = ViewVolume .unProjectPointMatrix (winx, winy, 0.0, matrix, viewport),
				far    = ViewVolume .unProjectPointMatrix (winx, winy, 0.9, matrix, viewport);

			return new Line3 .Points (near, far);
		},
		projectPoint: function (point, modelview, projection, viewport)
		{
			var matrix = Matrix4 .multRight (modelview, projection);

			return this .projectPointMatrix (point, matrix, viewport);
		},
		projectPointMatrix: function (point, matrix, viewport)
		{
			var vin = new Vector4 (point .x, point .y, point .z, 1);

			matrix .multVecMatrix (vin);

			if (vin .w === 0)
				throw Error ("Couldn't project point: divisor is 0.");

			var d = 1 / vin .w;

			return new Vector3 ((vin .x * d / 2 + 0.5) * viewport [2] + viewport [0],
			                    (vin .y * d / 2 + 0.5) * viewport [3] + viewport [1],
			                    (1 + vin .z * d) / 2);
		},
		projectLine: function (line, modelview, projection, viewport)
		{
			var
				matrix = Matrix4 .multRight (modelview, projection),
				point1 = ViewVolume .projectPointMatrix (line .point, matrix, viewport),
				point2 = ViewVolume .projectPointMatrix (Vector3 .multiply (line .direction, 1e9) .add (line .point), matrix, viewport);

			point1 .z = 0;
			point2 .z = 0;

			return new Line3 .Points (point1, point2);
		},
	});

	function intersectsSphere ()
	{
		return true;
	}

	return ViewVolume;
});


define ('standard/Math/Algorithms/MergeSort',[],function ()
{
	function MergeSort (array, compare)
	{
		this .array     = array;
		this .auxiliary = [ ];

		if (compare)
			this .compare = compare;
	}

	MergeSort .prototype =
	{
		compare: function (lhs, rhs)
		{
			return lhs < rhs;
		},
		sort: function (first, last)
		{
			this .mergeSort (first, last - 1);
		},
		mergeSort: function (lo, hi)
		{
			if (lo < hi)
			{
				var m = (lo + hi) >>> 1;
				this .mergeSort (lo, m);   // Recursion
				this .mergeSort (m + 1, hi); // Recursion
				this .merge (lo, m, hi);
			}
		},
		merge: function (lo, m, hi)
		{
			var i, j, k;

			i = 0, j = lo;
			// Copy first half of array a to auxiliary array b.
			while (j <= m)
				this .auxiliary [i++] = this .array [j++];

			i = 0; k = lo;
			// Copy back next-greatest element at each time.
			while (k < j && j <= hi)
			{
				if (this .compare (this .array [j], this .auxiliary [i]))
					this .array [k++] = this .array [j++];
				else
					this .array [k++] = this .auxiliary [i++];
			}

			// Copy back remaining elements of first half (if any).
			while (k < j)
				this .array [k++] = this .auxiliary [i++];
		}
	};

	return MergeSort;
});


define ('cobweb/Browser/PointingDeviceSensor/X3DPointingDeviceSensorContext',[
	"jquery",
	"cobweb/Browser/PointingDeviceSensor/PointingDevice",
	"cobweb/Bits/TraverseType",
	"cobweb/Bits/X3DConstants",
	"standard/Math/Geometry/Line3",
	"standard/Math/Geometry/ViewVolume",
	"standard/Math/Numbers/Vector2",
	"standard/Math/Numbers/Vector3",
	"standard/Math/Numbers/Matrix4",
	"standard/Math/Algorithms/MergeSort",
],
function (jquery,
          PointingDevice,
          TraverseType,
          X3DConstants,
          Line3,
          ViewVolume,
          Vector2,
          Vector3,
          Matrix4,
          MergeSort)
{
	var line = new Line3 (new Vector3 (0, 0, 0), new Vector3 (0, 0, 0));

	function set_difference (lhs, rhs, result)
	{
		for (var key in lhs)
		{
			if (key in rhs)
				continue;

			result [key] = lhs [key];
		}

		return result;
	}

	function X3DPointingDeviceSensorContext ()
	{
	}

	X3DPointingDeviceSensorContext .prototype =
	{
		initialize: function ()
		{
			this .getCanvas () .attr ("tabindex", 8803068);
			this .setCursor ("DEFAULT");
			
			this .pointingDevice = new PointingDevice (this);
			this .pointingDevice .setup ();

			this .pointer        = new Vector2 (0, 0);
			this .hits           = [ ];
			this .enabledSensors = [{ }];
			this .selectedLayer  = null;
			this .overSensors    = { };
			this .activeSensors  = { };

			this .hitPointSorter = new MergeSort (this .hits, function (lhs, rhs) { return lhs .intersection .point .z < rhs .intersection .point .z; });
			this .layerSorter    = new MergeSort (this .hits, function (lhs, rhs) { return lhs .layerNumber < rhs .layerNumber; });

			this .pickingTime = 0;
		},
		setCursor: function (value)
		{
			this .cursorType = value;

			var div = this .getBrowser () .getXML () .find (".canvas");

			switch (value)
			{
				case "HAND": // Hand with finger
					div .css ("cursor", "pointer");
					break;
				case "MOVE": // Hand grabed something
					div .css ("cursor", "move");
					break;
				case "CROSSHAIR":
					div .css ("cursor", "crosshair");
					break;
				default:
				{
					if (this .loadCount_ .getValue ())
						div .css ("cursor", "wait");
					else if (this .pointingDevice && this .pointingDevice .isOver)
						div .css ("cursor", "pointer");
					else
						div .css ("cursor", "default");
					break;
				}
			}
		},
		getCursor: function ()
		{
			return this .cursorType;
		},
		buttonPressEvent: function (x, y)
		{
			this .touch (x, y);

			if (this .hits .length === 0)
				return false;

			var nearestHit = this .hits [this .hits .length - 1];

			this .selectedLayer = nearestHit .layer;
			this .activeSensors = nearestHit .sensors;

			for (var key in this .activeSensors)
				this .activeSensors [key] .set_active__ (nearestHit, true);

			return ! $.isEmptyObject (nearestHit .sensors);
		},
		buttonReleaseEvent: function ()
		{
			this .selectedLayer = null;

			for (var key in this .activeSensors)
				this .activeSensors [key] .set_active__ (null, false);

			this .activeSensors = { };

			// Selection

			return true;
		},
		motionNotifyEvent: function (x, y)
		{
			this .touch (x, y);

			this .motion ();

			return this .hits .length && ! $.isEmptyObject (this .hits [this .hits .length - 1] .sensors);
		},
		leaveNotifyEvent: function ()
		{
		},
		isPointerInRectangle: function (rectangle)
		{
			return this .pointer .x > rectangle .x &&
			       this .pointer .x < rectangle .x + rectangle .z &&
			       this .pointer .y > rectangle .y &&
			       this .pointer .y < rectangle .y + rectangle .w;
		},
		setLayerNumber: function (value)
		{
			this .layerNumber = value;
		},
		getSelectedLayer: function ()
		{
			return this .selectedLayer;
		},
		setHitRay: function (viewport)
		{
			try
			{
				this .hitRay = ViewVolume .unProjectLine (this .pointer .x, this .pointer .y, Matrix4 .Identity, this .getProjectionMatrix (), viewport);
			}
			catch (error)
			{
				this .hitRay = line;
			}

			this .getLayers () [0] .setHitRay (this .hitRay);
		},
		getHitRay: function ()
		{
			return this .hitRay;
		},
		getSensors: function ()
		{
			return this .enabledSensors;
		},
		addHit: function (intersection, layer)
		{
			this .hits .push ({
				pointer:         this .pointer,
				hitRay:          this .hitRay,
				intersection:    intersection,
				sensors:         this .enabledSensors [this .enabledSensors .length - 1],
				layer:           layer,
				layerNumber:     this .layerNumber,
			});
		},
		touch: function (x, y)
		{
			var t0 = performance .now ();
		
			this .pointer .set (x, y);

			// Clear hits.

			this .hits .length = 0;

			// Pick.
			
			this .getWorld () .traverse (TraverseType .POINTER);

			// Picking end.

			this .hitPointSorter .sort (0, this .hits .length);
			this .layerSorter    .sort (0, this .hits .length);

			this .addBrowserEvent ();
			this .pickingTime = performance .now () - t0;
		},
		motion: function ()
		{
			if (this .hits .length)
				var nearestHit = this .hits [this .hits .length - 1];
			else
			{
				var hitRay = this .selectedLayer ? this .selectedLayer .getHitRay () : line;

				var nearestHit = {
					pointer:         this .pointer,
					modelViewMatrix: new Matrix4 (),
					hitRay:          hitRay,
					intersection:    null,
					sensors:         { },
					shape:           null,
					layer:           null,
					layerNumber:     0,
				};
			}

			// Set isOver to FALSE for appropriate nodes

			if (this .hits .length)
				var difference = set_difference (this .overSensors, nearestHit .sensors, { });

			else
				var difference = $.extend ({ }, this .overSensors);

			for (var key in difference)
				difference [key] .set_over__ (nearestHit, false);

			// Set isOver to TRUE for appropriate nodes

			if (this .hits .length)
			{
				this .overSensors = nearestHit .sensors;

				for (var key in this .overSensors)
					this .overSensors [key] .set_over__ (nearestHit, true);
			}
			else
				this .overSensors = { };

			// Forward motion event to active drag sensor nodes

			for (var key in this .activeSensors)
			{
				var dragSensorNode = this .activeSensors [key];

				if (dragSensorNode .getType () .indexOf (X3DConstants .X3DDragSensorNode) === -1)
					continue;

				dragSensorNode .set_motion__ (nearestHit);
			}
		},
	};

	return X3DPointingDeviceSensorContext;
});


define ('cobweb/Browser/KeyDeviceSensor/X3DKeyDeviceSensorContext',[
	"jquery",
],
function ($)
{
	function X3DKeyDeviceSensorContext ()
	{
		this .shiftKey = false;
		this .ctrlKey  = false;
		this .altKey   = false;
		this .altGrKey = false;
	}

	X3DKeyDeviceSensorContext .prototype =
	{
		initialize: function ()
		{
			this .getCanvas () .bind ("keydown.X3DKeyDeviceSensorContext", this .keydown .bind (this));
			this .getCanvas () .bind ("keyup.X3DKeyDeviceSensorContext",   this .keyup   .bind (this));
		},
		hasShiftKey: function ()
		{
			return this .shiftKey;
		},
		hasCtrlKey: function ()
		{
			return this .ctrlKey;
		},
		hasAltKey: function ()
		{
			return this .altKey;
		},
		hasAltGrKey: function ()
		{
			return this .altGrKey;
		},
		keydown: function (event)
		{
			event .preventDefault ();

			//console .log (event .which);

			switch (event .which)
			{
				case 16: // Shift
				{
					this .shiftKey = true;
					break;
				}
				case 17: // Ctrl
				{
					this .ctrlKey = true;
					break;
				}
				case 18: // Alt
				{
					this .altKey = true;
					break;
				}
				case 49: // 1
				{
					if (this .ctrlKey)
					{
						this .setBrowserOption ("Shading", "POINTSET");
						this .getNotification () .string_ = "Shading: Pointset";
					}
					break;
				}
				case 50: // 2
				{
					if (this .ctrlKey)
					{
						this .setBrowserOption ("Shading", "WIREFRAME");
						this .getNotification () .string_ = "Shading: Wireframe";
					}
				break;
				}
				case 51: // 3
				{
					if (this .ctrlKey)
					{
						this .setBrowserOption ("Shading", "FLAT");
						this .getNotification () .string_ = "Shading: Flat";
					}
					break;
				}
				case 52: // 4
				{
					if (this .ctrlKey)
					{
						this .setBrowserOption ("Shading", "GOURAUD");
						this .getNotification () .string_ = "Shading: Gouraud";
					}
					break;
				}
				case 53: // 5
				{
					if (this .ctrlKey)
					{
						this .setBrowserOption ("Shading", "PHONG");
						this .getNotification () .string_ = "Shading: Phong";
					}
					break;
				}
				case 83: // s
				{
					if (this .ctrlKey)
					{
						this .isLive () .setValue (! this .isLive () .getValue ());
						this .getNotification () .string_ = this .isLive () .getValue () ? "Begin Update" : "End Update";
					}
					break;
				}
				case 112: // F1
				{
					this .setBrowserOption ("PrimitiveQuality", "LOW");
					this .getNotification () .string_ = "Primitive Quality: low";
					break;
				}
				case 113: // F2
				{
					this .setBrowserOption ("PrimitiveQuality", "MEDIUM");
					this .getNotification () .string_ = "Primitive Quality: medium";
					break;
				}
				case 114: // F3
				{
					this .setBrowserOption ("PrimitiveQuality", "HIGH");
					this .getNotification () .string_ = "Primitive Quality: high";
					break;
				}
				case 225: // Alt Gr
				{
					this .altGrKey = true;
					break;
				}
				case 171: // Plus
				{
					if (this .ctrlKey)
						this .getRenderingProperties () .setEnabled (!this .getRenderingProperties () .getEnabled ());
					break;
				}
				case 36: // Pos 1
				{
					this .firstViewpoint ();
					break;
				}
				case 35: // End
				{
					this .lastViewpoint ();
					break;
				}
				case 33: // Page Up
				{
					this .previousViewpoint ();
					break;
				}
				case 34: // Page Down
				{
					this .nextViewpoint ();
					break;
				}
			}
		},
		keyup: function (event)
		{
			event .preventDefault ();

			//console .log (event .which);

			switch (event .which)
			{
				case 16: // Shift
				{
					this .shiftKey = false;
					break;
				}
				case 17: // Ctrl
				{
					this .ctrlKey = false;
					break;
				}
				case 18: // Alt
				{
					this .altKey = false;
					break;
				}
				case 225: // Alt Gr
				{
					this .altGrKey = false;
					break;
				}
			}
		},
	};

	return X3DKeyDeviceSensorContext;
});


define ('cobweb/Components/Core/X3DChildNode',[
	"jquery",
	"cobweb/Fields",
	"cobweb/Components/Core/X3DNode",
	"cobweb/Bits/X3DConstants",
],
function ($,
          Fields,
          X3DNode, 
          X3DConstants)
{
	with (Fields)
	{
		function X3DChildNode (browser, executionContext)
		{
			X3DNode .call (this, browser, executionContext);

			try
			{
				this .addChildren ("isCameraObject", new SFBool (false));
				this .addType (X3DConstants .X3DChildNode);
			}
			catch (error)
			{
				//console .log (error);
			}
		}

		X3DChildNode .prototype = $.extend (Object .create (X3DNode .prototype),
		{
			constructor: X3DChildNode,
			setCameraObject: function (value)
			{
				if (value !== this .isCameraObject_ .getValue ())
					this .isCameraObject_ = value;
			},
			getCameraObject: function ()
			{
				return this .isCameraObject_ .getValue ();
			},
		});

		return X3DChildNode;
	}
});



define ('cobweb/Components/Core/X3DBindableNode',[
	"jquery",
	"cobweb/Components/Core/X3DChildNode",
	"cobweb/Bits/X3DConstants",
],
function ($,
          X3DChildNode, 
          X3DConstants)
{
	function X3DBindableNode (browser, executionContext)
	{
		X3DChildNode .call (this, browser, executionContext);

		this .addType (X3DConstants .X3DBindableNode);

		this .layers = { };
	}

	X3DBindableNode .prototype = $.extend (Object .create (X3DChildNode .prototype),
	{
		constructor: X3DBindableNode,
		initialize: function ()
		{
			X3DChildNode .prototype .initialize .call (this);

			this .getExecutionContext () .isLive () .addInterest (this, "set_live__");
			this .isLive () .addInterest (this, "set_live__");

			this .set_live__ ();
		},
		getCameraObject: function ()
		{
		   return true;
		},
		getLayers: function ()
		{
			return this .layers;
		},
		bindToLayer: function (layer)
		{
			this .layers [layer .getId ()] = layer;
		},
		unbindFromLayer: function (layer)
		{
			delete this .layers [layer .getId ()];
		},
		transitionStart: function ()
		{ },
		set_live__: function ()
		{
			if (this .getExecutionContext () .isLive () .getValue () && this .isLive () .getValue ())
				return;

			//for (var id in this .layers)
			//	this .removeFromLayer (this .layers [id]);
		},
	});

	return X3DBindableNode;
});



define ('cobweb/Components/Navigation/X3DViewpointObject',[
	"jquery",
	"cobweb/Bits/X3DConstants",
],
function ($,
          X3DConstants)
{
	function X3DViewpointObject (browser, executionContext)
	{
		this .addType (X3DConstants .X3DViewpointObject);
	}

	X3DViewpointObject .prototype =
	{
		constructor: X3DViewpointObject,
		initialize: function () { },
	};

	return X3DViewpointObject;
});



define ('cobweb/Components/Core/X3DSensorNode',[
	"jquery",
	"cobweb/Components/Core/X3DChildNode",
	"cobweb/Bits/X3DConstants",
],
function ($,
          X3DChildNode, 
          X3DConstants)
{
	function X3DSensorNode (browser, executionContext)
	{
		X3DChildNode .call (this, browser, executionContext);

		this .addType (X3DConstants .X3DSensorNode);
	}

	X3DSensorNode .prototype = $.extend (Object .create (X3DChildNode .prototype),
	{
		constructor: X3DSensorNode,
	});

	return X3DSensorNode;
});



define ('cobweb/Components/Time/X3DTimeDependentNode',[
	"jquery",
	"cobweb/Fields",
	"cobweb/Components/Core/X3DChildNode",
	"cobweb/Bits/X3DConstants",
],
function ($,
          Fields,
          X3DChildNode, 
          X3DConstants)
{
	with (Fields)
	{
		function X3DTimeDependentNode (browser, executionContext)
		{
			this .addType (X3DConstants .X3DTimeDependentNode);

			this .startTimeValue  = 0;
			this .pauseTimeValue  = 0;
			this .resumeTimeValue = 0;
			this .stopTimeValue   = 0;
			this .start           = 0;
			this .pause           = 0;
			this .pauseInterval   = 0;
			this .startTimeout    = null;
			this .pauseTimeout    = null;
			this .resumeTimeout   = null;
			this .stopTimeout     = null;
			this .disabled        = false;
		}

		X3DTimeDependentNode .prototype = $.extend (Object .create (X3DChildNode .prototype),
		{
			constructor: X3DTimeDependentNode,
			initialize: function ()
			{
				X3DChildNode .prototype .initialize .call (this);

				this .addChildren ("initialized", new SFTime (),
				                   "isEvenLive",  new SFBool ());

				this .getExecutionContext () .isLive () .addInterest (this, "set_live__");
				this .isLive ()                         .addInterest (this, "set_live__");
				this .isEvenLive_                       .addInterest (this, "set_live__");

				this .initialized_ .addInterest (this, "set_loop__");
				this .enabled_     .addInterest (this, "set_enabled__");
				this .loop_        .addInterest (this, "set_loop__");
				this .startTime_   .addInterest (this, "set_startTime__");
				this .pauseTime_   .addInterest (this, "set_pauseTime__");
				this .resumeTime_  .addInterest (this, "set_resumeTime__");
				this .stopTime_    .addInterest (this, "set_stopTime__");

				this .startTimeValue  = this .startTime_  .getValue ();
				this .pauseTimeValue  = this .pauseTime_  .getValue ();
				this .resumeTimeValue = this .resumeTime_ .getValue ();
				this .stopTimeValue   = this .stopTime_   .getValue ();

				this .initialized_ = this .getBrowser () .getCurrentTime ();
			},
			getElapsedTime: function ()
			{
				return this .getBrowser () .getCurrentTime () - this .start - this .pauseInterval;
			},
			getLive: function ()
			{
				return (this .getExecutionContext () .isLive () .getValue () || this .isEvenLive_ .getValue ()) && this .isLive () .getValue ();
			},
			set_live__: function ()
			{
				if (this .getLive ())
				{
					if (this .disabled)
					{
						this .disabled = false;

						if (this .isActive_ .getValue () && ! this .isPaused_ .getValue ())
							this .real_resume ();
					}
				}
				else
				{
					if (! this .disabled && this .isActive_ .getValue () && ! this .isPaused_ .getValue ())
					{
						// Only disable if needed, ie. if running!
						this .disabled = true;
						this .real_pause ();
					}
				}
			},
			set_enabled__: function ()
			{
				if (this .enabled_ .getValue ())
					this .set_loop__ ();

				else
					this .stop ();
			},
			set_loop__: function ()
			{
				if (this .enabled_ .getValue ())
				{
					if (this .loop_ .getValue ())
					{
						if (this .stopTimeValue <= this .startTimeValue)
						{
							if (this .startTimeValue <= this .getBrowser () .getCurrentTime ())
								this .do_start ();
						}
					}
				}
			},
			set_startTime__: function ()
			{
				this .startTimeValue = this .startTime_ .getValue ();

				if (this .enabled_ .getValue ())
				{
					this .removeTimeout ("startTimeout");

					if (this .startTimeValue <= this .getBrowser () .getCurrentTime ())
						this .do_start ();

					else
						this .addTimeout ("startTimeout", "do_start", this .startTimeValue);
				}
			},
			set_pauseTime__: function ()
			{
				this .pauseTimeValue = this .pauseTime_ .getValue ();

				if (this .enabled_ .getValue ())
				{
					this .removeTimeout ("pauseTimeout");

					if (this .pauseTimeValue <= this .resumeTimeValue)
						return;

					if (this .pauseTimeValue <= this .getBrowser () .getCurrentTime ())
						this .do_pause ();

					else
						this .addTimeout ("pauseTimeout", "do_pause", this .pauseTimeValue);
				}
			},
			set_resumeTime__: function ()
			{
				this .resumeTimeValue = this .resumeTime_ .getValue ();

				if (this .enabled_ .getValue ())
				{
					this .removeTimeout ("resumeTimeout");

					if (this .resumeTimeValue <= this .pauseTimeValue)
						return;

					if (this .resumeTimeValue <= this .getBrowser () .getCurrentTime ())
						this .do_resume ();

					else
						this .addTimeout ("resumeTimeout", "do_resume", this .resumeTimeValue);
				}
			},
			set_stopTime__: function ()
			{
				this .stopTimeValue = this .stopTime_ .getValue ();

				if (this .enabled_ .getValue ())
				{
					this .removeTimeout ("stopTimeout");

					if (this .stopTimeValue <= this .startTimeValue)
						return;

					if (this .stopTimeValue <= this .getBrowser () .getCurrentTime ())
						this .do_stop ();

					else
						this .addTimeout ("stopTimeout","do_stop", this .stopTimeValue);
				}
			},
			do_start: function ()
			{
				if (! this .isActive_ .getValue ())
				{
					this .start         = this .getBrowser () .getCurrentTime ();
					this .pauseInterval = 0;

					// The event order below is very important.

					this .isActive_ = true;

					this .set_start ();

					if (this .getLive ())
					{
						this .getBrowser () .prepareEvents () .addInterest (this, "prepareEvents");
					}
					else if (! this .disabled)
					{
						this .disabled = true;
						this .real_pause ();
					}

					this .elapsedTime_ = 0;
					this .cycleTime_   = this .getBrowser () .getCurrentTime ();
				}
			},
			do_pause: function ()
			{
				if (this .isActive_ .getValue () && ! this .isPaused_ .getValue ())
				{
					this .isPaused_ = true;

					if (this .pauseTimeValue !== this .getBrowser () .getCurrentTime ())
						this .pauseTimeValue = this .getBrowser () .getCurrentTime ();

					if (this .getLive ())
						this .real_pause ();
				}
			},
			real_pause: function ()
			{
				this .pause = this .getBrowser () .getCurrentTime ();

				this .set_pause ();

				this .getBrowser () .prepareEvents () .removeInterest (this, "prepareEvents");
			},
			do_resume: function ()
			{
				if (this .isActive_ .getValue () && this .isPaused_ .getValue ())
				{
					this .isPaused_ = false;

					if (this .resumeTimeValue !== this .getBrowser () .getCurrentTime ())
						this .resumeTimeValue = this .getBrowser () .getCurrentTime ();

					if (this .getLive ())
						this .real_resume ();
				}
			},
			real_resume: function ()
			{
				var interval = this .getBrowser () .getCurrentTime () - this .pause;

				this .pauseInterval += interval;

				this .set_resume (interval);

				this .getBrowser () .prepareEvents () .addInterest (this, "prepareEvents");
				this .getBrowser () .addBrowserEvent ();
			},
			do_stop: function ()
			{
				this .stop ();
			},
			stop: function ()
			{
				if (this .isActive_ .getValue ())
				{
					// The event order below is very important.

					this .set_stop ();

					this .elapsedTime_ = this .getElapsedTime ();

					if (this .isPaused_ .getValue ())
						this .isPaused_ = false;

					this .isActive_ = false;

					if (this .getLive ())
						this .getBrowser () .prepareEvents () .removeInterest (this, "prepareEvents");
				}
			},
			timeout: function (callback)
			{
				if (this .enabled_ .getValue ())
				{
					this .getBrowser () .advanceTime (performance .now ());

					this [callback] ();
				}
			},
			addTimeout: function (name, callback, time)
			{
				this .removeTimeout (name);
				this [name] = setTimeout (this .timeout .bind (this, callback), (time - this .getBrowser () .getCurrentTime ()) * 1000);
			},
			removeTimeout: function (name)
			{
				clearTimeout (this [name]);
				this [name] = null;
			},
			prepareEvents: function () { },
			set_start: function () { },
			set_pause: function () { },
			set_resume: function () { },
			set_stop: function () { },
		});

		return X3DTimeDependentNode;
	}
});



define ('cobweb/Components/Time/TimeSensor',[
	"jquery",
	"cobweb/Fields",
	"cobweb/Basic/X3DFieldDefinition",
	"cobweb/Basic/FieldDefinitionArray",
	"cobweb/Components/Core/X3DSensorNode",
	"cobweb/Components/Time/X3DTimeDependentNode",
	"cobweb/Bits/X3DConstants",
],
function ($,
          Fields,
          X3DFieldDefinition,
          FieldDefinitionArray,
          X3DSensorNode, 
          X3DTimeDependentNode, 
          X3DConstants)
{
	with (Fields)
	{
		function TimeSensor (executionContext)
		{
			X3DSensorNode        .call (this, executionContext .getBrowser (), executionContext);
			X3DTimeDependentNode .call (this, executionContext .getBrowser (), executionContext);

			this .addType (X3DConstants .TimeSensor);

			this .addChildren ("range", new MFFloat (0, 0, 1));
			
			this .cycle    = 0;
			this .interval = 0;
			this .first    = 0;
			this .last     = 1;
			this .scale    = 1;
		}

		TimeSensor .prototype = $.extend (Object .create (X3DSensorNode .prototype),
			X3DTimeDependentNode .prototype,
		{
			constructor: TimeSensor,
			fieldDefinitions: new FieldDefinitionArray ([
				new X3DFieldDefinition (X3DConstants .inputOutput, "metadata",         new SFNode ()),
				new X3DFieldDefinition (X3DConstants .inputOutput, "enabled",          new SFBool (true)),
				new X3DFieldDefinition (X3DConstants .inputOutput, "cycleInterval",    new SFTime (1)),
				new X3DFieldDefinition (X3DConstants .inputOutput, "loop",             new SFBool (false)),
				new X3DFieldDefinition (X3DConstants .inputOutput, "startTime",        new SFTime ()),
				new X3DFieldDefinition (X3DConstants .inputOutput, "pauseTime",        new SFTime ()),
				new X3DFieldDefinition (X3DConstants .inputOutput, "resumeTime",       new SFTime ()),
				new X3DFieldDefinition (X3DConstants .inputOutput, "stopTime",         new SFTime ()),
				new X3DFieldDefinition (X3DConstants .outputOnly,  "isPaused",         new SFBool ()),
				new X3DFieldDefinition (X3DConstants .outputOnly,  "isActive",         new SFBool ()),
				new X3DFieldDefinition (X3DConstants .outputOnly,  "cycleTime",        new SFTime ()),
				new X3DFieldDefinition (X3DConstants .outputOnly,  "elapsedTime",      new SFTime ()),
				new X3DFieldDefinition (X3DConstants .outputOnly,  "fraction_changed", new SFFloat ()),
				new X3DFieldDefinition (X3DConstants .outputOnly,  "time",             new SFTime ()),
			]),
			getTypeName: function ()
			{
				return "TimeSensor";
			},
			getComponentName: function ()
			{
				return "Time";
			},
			getContainerField: function ()
			{
				return "children";
			},
			initialize: function ()
			{
				X3DSensorNode        .prototype .initialize .call (this);
				X3DTimeDependentNode .prototype .initialize .call (this);
			},
			prepareEvents: function ()
			{
				// The event order below is very important.

				if (this .getBrowser () .getCurrentTime () - this .cycle >= this .interval)
				{
					if (this .loop_ .getValue ())
					{
						this .cycle            += this .interval * Math .floor ((this .getBrowser () .getCurrentTime () - this .cycle) / this .interval);
						this .fraction_changed_ = this .last;
						this .elapsedTime_      = this .getElapsedTime ();
						this .cycleTime_        = this .getBrowser () .getCurrentTime ();
					}
					else
					{
						this .fraction_changed_ = this .last;
						this .stop ();
					}
				}
				else
				{
					var t = (this .getBrowser () .getCurrentTime () - this .cycle) / this .interval;

					this .fraction_changed_ = this .first + (t - Math .floor (t)) * this .scale;
					this .elapsedTime_      = this .getElapsedTime ();
				}

				this .time_ = this .getBrowser () .getCurrentTime ();
			},
			set_start: function ()
			{
				this .first  = this .range_ [0];
				this .last   = this .range_ [2];
				this .scale  = this .last - this .first;

				var offset = (this .range_ [1] -  this .first) *  this .cycleInterval_ .getValue ();

				this .interval = this .cycleInterval_ .getValue () * this .scale;
				this .cycle    = this .getBrowser () .getCurrentTime () - offset;

				this .fraction_changed_ = this .range_ [1];
				this .time_             = this .getBrowser () .getCurrentTime ();
			},			
			set_resume: function (pauseInterval)
			{
				this .cycle += pauseInterval;
			},
		});

		return TimeSensor;
	}
});



define ('cobweb/Components/Interpolation/X3DInterpolatorNode',[
	"jquery",
	"cobweb/Components/Core/X3DChildNode",
	"cobweb/Bits/X3DConstants",
	"standard/Math/Algorithm",
],
function ($,
          X3DChildNode, 
          X3DConstants,
          Algorithm)
{
	function X3DInterpolatorNode (browser, executionContext)
	{
		X3DChildNode .call (this, browser, executionContext);

		this .addType (X3DConstants .X3DInterpolatorNode);
	}

	X3DInterpolatorNode .prototype = $.extend (Object .create (X3DChildNode .prototype),
	{
		constructor: X3DInterpolatorNode,
		setup: function ()
		{
			// If an X3DInterpolatorNode value_changed outputOnly field is read before it receives any inputs,
			// keyValue[0] is returned if keyValue is not empty. If keyValue is empty (i.e., [ ]), the initial
			// value for the respective field type is returned (EXAMPLE  (0, 0, 0) for SFVec3f);

			this .set_key__ ();

			if (this .key_ .length)
				this .interpolate (0, 0, 0);

			X3DChildNode .prototype .setup .call (this);
		},
		initialize: function ()
		{
			X3DChildNode .prototype .initialize .call (this);
			
			this .set_fraction_ .addInterest (this, "set_fraction__");
			this .key_          .addInterest (this, "set_key__");
		},
		set_fraction__: function ()
		{
			var
				key      = this .key_,
				length   = key .length,
				fraction = this .set_fraction_ .getValue ();

			switch (length)
			{
				case 0:
					// Interpolator nodes containing no keys in the key field shall not produce any events.
					return;
				case 1:
					return this .interpolate (0, 0, 0);
				default:
				{
					if (fraction <= key [0])
						return this .interpolate (0, 1, 0);

					if (fraction >= key [length - 1])
						return this .interpolate (length - 2, length - 1, 1);

					var index1 = Algorithm .upperBound (key, 0, length, fraction, Algorithm .less);

					if (index1 !== length)
					{
						var
							index0 = index1 - 1,
							weight = (fraction - key [index0]) / (key [index1] - key [index0]);

						this .interpolate (index0, index1, Algorithm .clamp (weight, 0, 1));
					}
				}
			}
		},
		set_key__: function ()
		{
			this .set_keyValue__ ();
		},
		set_keyValue__: function () { },
		interpolate: function () { },
	});

	return X3DInterpolatorNode;
});



define ('cobweb/Components/Interpolation/EaseInEaseOut',[
	"jquery",
	"cobweb/Fields",
	"cobweb/Basic/X3DFieldDefinition",
	"cobweb/Basic/FieldDefinitionArray",
	"cobweb/Components/Interpolation/X3DInterpolatorNode",
	"cobweb/Bits/X3DConstants",
],
function ($,
          Fields,
          X3DFieldDefinition,
          FieldDefinitionArray,
          X3DInterpolatorNode, 
          X3DConstants)
{
	with (Fields)
	{
		function EaseInEaseOut (executionContext)
		{
			X3DInterpolatorNode .call (this, executionContext .getBrowser (), executionContext);

			this .addType (X3DConstants .EaseInEaseOut);
		}

		EaseInEaseOut .prototype = $.extend (Object .create (X3DInterpolatorNode .prototype),
		{
			constructor: EaseInEaseOut,
			fieldDefinitions: new FieldDefinitionArray ([
				new X3DFieldDefinition (X3DConstants .inputOutput, "metadata",                 new SFNode ()),
				new X3DFieldDefinition (X3DConstants .inputOnly,   "set_fraction",             new SFFloat ()),
				new X3DFieldDefinition (X3DConstants .inputOutput, "key",                      new MFFloat ()),
				new X3DFieldDefinition (X3DConstants .inputOutput, "easeInEaseOut",            new MFVec2f ()),
				new X3DFieldDefinition (X3DConstants .outputOnly,  "modifiedFraction_changed", new SFFloat ()),
			]),
			getTypeName: function ()
			{
				return "EaseInEaseOut";
			},
			getComponentName: function ()
			{
				return "Interpolation";
			},
			getContainerField: function ()
			{
				return "children";
			},
			initialize: function ()
			{
				X3DInterpolatorNode .prototype .initialize .call (this);

				this .easeInEaseOut_ .addInterest (this, "set_keyValue__");
			},
			set_keyValue__: function ()
			{
				if (this .easeInEaseOut_ .length < this .key_ .length)
					this .easeInEaseOut_ .resize (this .key_ .length, this .easeInEaseOut_ .length ? this .easeInEaseOut_ [this .easeInEaseOut_ .length - 1] : new SFVec2f ());
			},
			interpolate: function (index0, index1, weight)
			{
				var easeOut = this .easeInEaseOut_ [index0] .y;
				var easeIn  = this .easeInEaseOut_ [index1] .x;
				var sum     = easeOut + easeIn;

				if (sum < 0)
					this .modifiedFraction_changed_ = weight;

				else
				{
					if (sum > 1)
					{
						easeIn  /= sum;
						easeOut /= sum;
					}

					var t = 1 / (2 - easeOut - easeIn);

					if (weight < easeOut)
					{
						this .modifiedFraction_changed_ = (t / easeOut) * weight * weight;
					}
					else if (weight <= 1 - easeIn) // Spec says (weight < 1 - easeIn), but then we get a NaN below if easeIn == 0.
					{
						this .modifiedFraction_changed_ = t * (2 * weight - easeOut);
					}
					else
					{
						var w = 1 - weight;

						this .modifiedFraction_changed_ = 1 - ((t * w * w) / easeIn);
					}
				}
			},
		});

		return EaseInEaseOut;
	}
});



define ('cobweb/Components/Interpolation/PositionInterpolator',[
	"jquery",
	"cobweb/Fields",
	"cobweb/Basic/X3DFieldDefinition",
	"cobweb/Basic/FieldDefinitionArray",
	"cobweb/Components/Interpolation/X3DInterpolatorNode",
	"cobweb/Bits/X3DConstants",
	"standard/Math/Numbers/Vector3",
],
function ($,
          Fields,
          X3DFieldDefinition,
          FieldDefinitionArray,
          X3DInterpolatorNode, 
          X3DConstants,
          Vector3)
{
	with (Fields)
	{
		function PositionInterpolator (executionContext)
		{
			X3DInterpolatorNode .call (this, executionContext .getBrowser (), executionContext);

			this .addType (X3DConstants .PositionInterpolator);
		}

		PositionInterpolator .prototype = $.extend (Object .create (X3DInterpolatorNode .prototype),
		{
			constructor: PositionInterpolator,
			fieldDefinitions: new FieldDefinitionArray ([
				new X3DFieldDefinition (X3DConstants .inputOutput, "metadata",      new SFNode ()),
				new X3DFieldDefinition (X3DConstants .inputOnly,   "set_fraction",  new SFFloat ()),
				new X3DFieldDefinition (X3DConstants .inputOutput, "key",           new MFFloat ()),
				new X3DFieldDefinition (X3DConstants .inputOutput, "keyValue",      new MFVec3f ()),
				new X3DFieldDefinition (X3DConstants .outputOnly,  "value_changed", new SFVec3f ()),
			]),
			keyValue: new Vector3 (0, 0, 0),
			getTypeName: function ()
			{
				return "PositionInterpolator";
			},
			getComponentName: function ()
			{
				return "Interpolation";
			},
			getContainerField: function ()
			{
				return "children";
			},
			initialize: function ()
			{
				X3DInterpolatorNode .prototype .initialize .call (this);

				this .keyValue_ .addInterest (this, "set_keyValue__");
			},
			set_keyValue__: function ()
			{
				var
					key      = this .key_,
					keyValue = this .keyValue_;

				if (keyValue .length < key .length)
					keyValue .resize (key .length, keyValue .length ? keyValue [keyValue .length - 1] : new SFVec3f ());
			},
			interpolate: function (index0, index1, weight)
			{
				this .value_changed_ = this .keyValue .assign (this .keyValue_ [index0] .getValue ()) .lerp (this .keyValue_ [index1] .getValue (), weight);
			},
		});

		return PositionInterpolator;
	}
});



define ('cobweb/Components/Interpolation/OrientationInterpolator',[
	"jquery",
	"cobweb/Fields",
	"cobweb/Basic/X3DFieldDefinition",
	"cobweb/Basic/FieldDefinitionArray",
	"cobweb/Components/Interpolation/X3DInterpolatorNode",
	"cobweb/Bits/X3DConstants",
	"standard/Math/Numbers/Rotation4"
],
function ($,
          Fields,
          X3DFieldDefinition,
          FieldDefinitionArray,
          X3DInterpolatorNode, 
          X3DConstants,
          Rotation4)
{
	with (Fields)
	{
		function OrientationInterpolator (executionContext)
		{
			X3DInterpolatorNode .call (this, executionContext .getBrowser (), executionContext);

			this .addType (X3DConstants .OrientationInterpolator);
		}

		OrientationInterpolator .prototype = $.extend (Object .create (X3DInterpolatorNode .prototype),
		{
			constructor: OrientationInterpolator,
			fieldDefinitions: new FieldDefinitionArray ([
				new X3DFieldDefinition (X3DConstants .inputOutput, "metadata",      new SFNode ()),
				new X3DFieldDefinition (X3DConstants .inputOnly,   "set_fraction",  new SFFloat ()),
				new X3DFieldDefinition (X3DConstants .inputOutput, "key",           new MFFloat ()),
				new X3DFieldDefinition (X3DConstants .inputOutput, "keyValue",      new MFRotation ()),
				new X3DFieldDefinition (X3DConstants .outputOnly,  "value_changed", new SFRotation ()),
			]),
			keyValue: new Rotation4 (),
			getTypeName: function ()
			{
				return "OrientationInterpolator";
			},
			getComponentName: function ()
			{
				return "Interpolation";
			},
			getContainerField: function ()
			{
				return "children";
			},
			initialize: function ()
			{
				X3DInterpolatorNode .prototype .initialize .call (this);

				this .keyValue_ .addInterest (this, "set_keyValue__");
			},
			set_keyValue__: function ()
			{
				var
					key      = this .key_,
					keyValue = this .keyValue_;

				if (keyValue .length < key .length)
					keyValue .resize (key .length, keyValue .length ? keyValue [keyValue .length - 1] : new SFRotation ());
			},
			interpolate: function (index0, index1, weight)
			{
				try
				{
					this .value_changed_ = this .keyValue .assign (this .keyValue_ [index0] .getValue ()) .slerp (this .keyValue_ [index1] .getValue (), weight);
				}
				catch (error)
				{ }
			},
		});

		return OrientationInterpolator;
	}
});



define ('cobweb/Components/Navigation/X3DViewpointNode',[
	"jquery",
	"cobweb/Fields",
	"cobweb/Components/Core/X3DBindableNode",
	"cobweb/Components/Navigation/X3DViewpointObject",
	"cobweb/Components/Time/TimeSensor",
	"cobweb/Components/Interpolation/EaseInEaseOut",
	"cobweb/Components/Interpolation/PositionInterpolator",
	"cobweb/Components/Interpolation/OrientationInterpolator",
	"cobweb/Bits/TraverseType",
	"cobweb/Bits/X3DConstants",
	"standard/Math/Numbers/Vector2",
	"standard/Math/Numbers/Vector3",
	"standard/Math/Numbers/Rotation4",
	"standard/Math/Numbers/Matrix4",
],
function ($,
          Fields,
          X3DBindableNode, 
          X3DViewpointObject,
          TimeSensor,
          EaseInEaseOut,
          PositionInterpolator,
          OrientationInterpolator,
          TraverseType,
          X3DConstants,
          Vector2,
          Vector3,
          Rotation4,
          Matrix4)
{
	with (Fields)
	{
		var upVector = new Vector3 (0, 1, 0);

		function X3DViewpointNode (browser, executionContext)
		{
			X3DBindableNode    .call (this, browser, executionContext);
			X3DViewpointObject .call (this, browser, executionContext);

			this .addType (X3DConstants .X3DViewpointNode);

			this .parentMatrix             = new Matrix4 ();
			this .cameraSpaceMatrix        = new Matrix4 (1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 10, 1);
			this .inverseCameraSpaceMatrix = new Matrix4 (1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, -10, 1);
		}

		X3DViewpointNode .prototype = $.extend (Object .create (X3DBindableNode .prototype),
			X3DViewpointObject .prototype,
		{
			constructor: X3DViewpointNode,
			initialize: function ()
			{
				X3DBindableNode    .prototype .initialize .call (this);
				X3DViewpointObject .prototype .initialize .call (this);

				this .addChildren ("positionOffset",         new SFVec3f (),
			                      "orientationOffset",      new SFRotation (),
			                      "scaleOffset",            new SFVec3f (1, 1, 1),
			                      "scaleOrientationOffset", new SFRotation (),
			                      "centerOfRotationOffset", new SFVec3f (),
			                      "fieldOfViewScale",       new SFFloat (1));

				this .timeSensor                   = new TimeSensor              (this .getBrowser () .getPrivateScene ());
				this .easeInEaseOut                = new EaseInEaseOut           (this .getBrowser () .getPrivateScene ());
				this .positionInterpolator         = new PositionInterpolator    (this .getBrowser () .getPrivateScene ());
				this .orientationInterpolator      = new OrientationInterpolator (this .getBrowser () .getPrivateScene ());
				this .scaleInterpolator            = new PositionInterpolator    (this .getBrowser () .getPrivateScene ());
				this .scaleOrientationInterpolator = new OrientationInterpolator (this .getBrowser () .getPrivateScene ());
			
				this .timeSensor .stopTime_ = 1;
				this .timeSensor .setup ();

				this .easeInEaseOut .key_           = [ 0, 1 ];
				this .easeInEaseOut .easeInEaseOut_ = [ new Vector2 (0, 0), new Vector2 (0, 0) ];
				this .easeInEaseOut .setup ();

				this .positionInterpolator         .key_ = [ 0, 1 ];
				this .orientationInterpolator      .key_ = [ 0, 1 ];
				this .scaleInterpolator            .key_ = [ 0, 1 ];
				this .scaleOrientationInterpolator .key_ = [ 0, 1 ];

				this .positionInterpolator         .setup ();
				this .orientationInterpolator      .setup ();
				this .scaleInterpolator            .setup ();
				this .scaleOrientationInterpolator .setup ();

				this .timeSensor .fraction_changed_ .addFieldInterest (this .easeInEaseOut .set_fraction_);

				this .easeInEaseOut .modifiedFraction_changed_ .addFieldInterest (this .positionInterpolator         .set_fraction_);
				this .easeInEaseOut .modifiedFraction_changed_ .addFieldInterest (this .orientationInterpolator      .set_fraction_);
				this .easeInEaseOut .modifiedFraction_changed_ .addFieldInterest (this .scaleInterpolator            .set_fraction_);
				this .easeInEaseOut .modifiedFraction_changed_ .addFieldInterest (this .scaleOrientationInterpolator .set_fraction_);

				this .positionInterpolator         .value_changed_ .addFieldInterest (this .positionOffset_);
				this .orientationInterpolator      .value_changed_ .addFieldInterest (this .orientationOffset_);
				this .scaleInterpolator            .value_changed_ .addFieldInterest (this .scaleOffset_);
				this .scaleOrientationInterpolator .value_changed_ .addFieldInterest (this .scaleOrientationOffset_);

				this .isBound_ .addInterest (this, "set_bind__");
			},
			bindToLayer: function (layer)
			{
				X3DBindableNode .prototype .bindToLayer .call (this, layer);
			
				layer .getViewpointStack () .push (this);
			},
			unbindFromLayer: function (layer)
			{
				X3DBindableNode .prototype .unbindFromLayer .call (this, layer);

				layer .getViewpointStack () .pop (this);
			},
			removeFromLayer: function (layer)
			{
				layer .getViewpointStack () .remove (this);
			},
			getUserPosition: function ()
			{
				return Vector3 .add (this .position_ .getValue (), this .positionOffset_ .getValue ());
			},
			getUserOrientation: function ()
			{
				return Rotation4 .multRight (this .orientation_ .getValue (), this .orientationOffset_ .getValue ());
			},
			getUserCenterOfRotation: function ()
			{
				return Vector3 .add (this .centerOfRotation_ .getValue (), this .centerOfRotationOffset_ .getValue ());
			},
			getParentMatrix: function ()
			{
				return this .parentMatrix;
			},
			getCameraSpaceMatrix: function ()
			{
				return this .cameraSpaceMatrix;
			},
			setInverseCameraSpaceMatrix: function (value)
			{
				try
				{
					this .inverseCameraSpaceMatrix = value .copy () .inverse ();
				}
				catch (error)
				{ }
			},
			getInverseCameraSpaceMatrix: function ()
			{
				return this .inverseCameraSpaceMatrix;
			},
			getUpVector: function ()
			{
				return upVector;
			},
			getMaxZFar: function ()
			{
				return 1e5;
			},
			transitionStart: function (layer, fromViewpoint)
			{
				try
				{
					if (! layer)
					{
						for (var id in this .getLayers ())
						{
							layer = this .getLayers () [id];
							break;
						}
					}

					if (this .jump_ .getValue ())
					{
						if (! this .retainUserOffsets_ .getValue ())
							this .resetUserOffsets ();

						if (layer)
						{
							var navigationInfo = layer .getNavigationInfo ();

							navigationInfo .transitionStart_ = true;

							var
								transitionType = navigationInfo .getTransitionType (),
								transitionTime = navigationInfo .transitionTime_ .getValue ();
						}
						else
						{
							var
								transitionType = "LINEAR",
								transitionTime = 1;
						}

						switch (transitionType)
						{
							case "TELEPORT":
							{
								if (layer)
									layer .getNavigationInfo () .transitionComplete_ = true;

								return;
							}
							case "ANIMATE":
							{
								this .easeInEaseOut .easeInEaseOut_ = [ new Vector2 (0, 1), new Vector2 (1, 0) ];
								break;
							}
							default:
							{
								// LINEAR
								this .easeInEaseOut .easeInEaseOut_ = [ new Vector2 (0, 0), new Vector2 (0, 0) ];
								break;
							}
						}
						
						this .timeSensor .cycleInterval_ = transitionTime;
						this .timeSensor .stopTime_      = this .getBrowser () .getCurrentTime ();
						this .timeSensor .startTime_     = this .getBrowser () .getCurrentTime ();
						this .timeSensor .isActive_ .addInterest (this, "set_active__");

						var
							relativePosition         = new Vector3 (0, 0, 0),
							relativeOrientation      = new Rotation4 (),
							relativeScale            = new Vector3 (0, 0, 0),
							relativeScaleOrientation = new Rotation4 ();

						this .getRelativeTransformation (fromViewpoint, relativePosition, relativeOrientation, relativeScale, relativeScaleOrientation);

						var
							startPosition         = relativePosition,
							startOrientation      = relativeOrientation,
							startScale            = relativeScale,
							startScaleOrientation = relativeScaleOrientation;

						var
							endPosition         = this .positionOffset_         .getValue () .copy ();
							endOrientation      = this .orientationOffset_      .getValue () .copy ();
							endScale            = this .scaleOffset_            .getValue () .copy ();
							endScaleOrientation = this .scaleOrientationOffset_ .getValue () .copy ();

						this .positionOffset_         = startPosition;
						this .orientationOffset_      = startOrientation;
						this .scaleOffset_            = startScale;
						this .scaleOrientationOffset_ = startScaleOrientation;

						this .positionInterpolator         .keyValue_ = [ startPosition, endPosition ];
						this .orientationInterpolator      .keyValue_ = [ startOrientation, endOrientation ];
						this .scaleInterpolator            .keyValue_ = [ startScale, endScale ];
						this .scaleOrientationInterpolator .keyValue_ = [ startScaleOrientation, endScaleOrientation ];
					}
					else
					{
						var
							relativePosition         = new Vector3 (0, 0, 0),
							relativeOrientation      = new Rotation4 (),
							relativeScale            = new Vector3 (0, 0, 0),
							relativeScaleOrientation = new Rotation4 ();

						this .getRelativeTransformation (fromViewpoint, relativePosition, relativeOrientation, relativeScale, relativeScaleOrientation);
		 
						this .positionOffset_         = relativePosition;
						this .orientationOffset_      = relativeOrientation;
						this .scaleOffset_            = relativeScale;
						this .scaleOrientationOffset_ = relativeScaleOrientation;
					}
				}
				catch (error)
				{
					console .log (error);
				}
			},
			transitionStop: function ()
			{
				this .timeSensor .stopTime_ = this .getBrowser () .getCurrentTime ();
				this .timeSensor .isActive_ .removeInterest (this, "set_active__");
			},
			resetUserOffsets: function ()
			{
				this .positionOffset_         = new Vector3 (0, 0, 0);
				this .orientationOffset_      = new Rotation4 ();
				this .scaleOffset_            = new Vector3 (1, 1, 1);
				this .scaleOrientationOffset_ = new Rotation4 ();
				this .centerOfRotationOffset_ = new Vector3 (0, 0, 0);
				this .fieldOfViewScale_       = 1;
			},
			getRelativeTransformation: function (fromViewpoint, relativePosition, relativeOrientation, relativeScale, relativeScaleOrientation)
			// throw
			{
				var differenceMatrix = this .parentMatrix .copy () .multRight (fromViewpoint .getInverseCameraSpaceMatrix ()) .inverse ();

				differenceMatrix .get (relativePosition, relativeOrientation, relativeScale, relativeScaleOrientation);

				relativePosition .subtract (this .position_ .getValue ());
				relativeOrientation .assign (this .orientation_ .getValue () .copy () .inverse () .multRight (relativeOrientation)); // mit gepuffereter location matrix
			},
			set_active__: function (value)
			{
				if (! value .getValue () && this .timeSensor .fraction_changed_ .getValue () === 1)
				{
					for (var id in this .getLayers ())
					{
						var navigationInfo = this .getLayers () [id] .getNavigationInfo ();

						navigationInfo .transitionComplete_ = true;
					}

					this .easeInEaseOut .set_fraction_ = 1;
				}
			},
			set_bind__: function ()
			{
				if (! this .isBound_ .getValue ())
					this .timeSensor .stopTime_ = this .getBrowser () .getCurrentTime ();
			},
			reshape: function ()
			{
				var navigationInfo = this .getCurrentNavigationInfo ();
	
				this .reshapeWithLimits (navigationInfo .getNearPlane (), navigationInfo .getFarPlane (this));
			},
			reshapeWithLimits: function (zNear, zFar)
			{
				this .getBrowser () .setProjectionMatrix (this .getProjectionMatrix (zNear, zFar, this .getCurrentViewport () .getRectangle ()));
			},
			transform: function ()
			{
				this .getBrowser () .getModelViewMatrix () .set (this .inverseCameraSpaceMatrix);
			},
			traverse: function (type)
			{
				if (type === TraverseType .CAMERA)
				{
					this .getCurrentLayer () .getViewpoints () .push (this);

					this .parentMatrix .assign (this .getBrowser () .getModelViewMatrix () .get ());

					if (this .isBound_ .getValue ())
					{
						this .cameraSpaceMatrix .set (this .getUserPosition (),
						                              this .getUserOrientation (),
						                              this .scaleOffset_ .getValue (),
						                              this .scaleOrientationOffset_ .getValue ());

						this .cameraSpaceMatrix .multRight (this .parentMatrix);

						this .setInverseCameraSpaceMatrix (this .cameraSpaceMatrix);
					}
				}
			},
		});

		return X3DViewpointNode;
	}
});



define ('cobweb/Components/Navigation/OrthoViewpoint',[
	"jquery",
	"cobweb/Fields",
	"cobweb/Basic/X3DFieldDefinition",
	"cobweb/Basic/FieldDefinitionArray",
	"cobweb/Components/Navigation/X3DViewpointNode",
	"cobweb/Bits/X3DConstants",
],
function ($,
          Fields,
          X3DFieldDefinition,
          FieldDefinitionArray,
          X3DViewpointNode, 
          X3DConstants)
{
	with (Fields)
	{
		function OrthoViewpoint (executionContext)
		{
			X3DViewpointNode .call (this, executionContext .getBrowser (), executionContext);

			this .addType (X3DConstants .OrthoViewpoint);
		}

		OrthoViewpoint .prototype = $.extend (Object .create (X3DViewpointNode .prototype),
		{
			constructor: OrthoViewpoint,
			fieldDefinitions: new FieldDefinitionArray ([
				new X3DFieldDefinition (X3DConstants .inputOutput, "metadata",          new SFNode ()),
				new X3DFieldDefinition (X3DConstants .inputOnly,   "set_bind",          new SFBool ()),
				new X3DFieldDefinition (X3DConstants .inputOutput, "description",       new SFString ("")),
				new X3DFieldDefinition (X3DConstants .inputOutput, "position",          new SFVec3f (0, 0, 10)),
				new X3DFieldDefinition (X3DConstants .inputOutput, "orientation",       new SFRotation (0, 0, 1, 0)),
				new X3DFieldDefinition (X3DConstants .inputOutput, "centerOfRotation",  new SFVec3f (0, 0, 0)),
				new X3DFieldDefinition (X3DConstants .inputOutput, "fieldOfView",       new MFFloat ([ -1, -1, 1, 1 ])),
				new X3DFieldDefinition (X3DConstants .inputOutput, "jump",              new SFBool (true)),
				new X3DFieldDefinition (X3DConstants .inputOutput, "retainUserOffsets", new SFBool (false)),
				new X3DFieldDefinition (X3DConstants .outputOnly,  "isBound",           new SFBool ()),
				new X3DFieldDefinition (X3DConstants .outputOnly,  "bindTime",          new SFTime ()),
			]),
			getTypeName: function ()
			{
				return "OrthoViewpoint";
			},
			getComponentName: function ()
			{
				return "Navigation";
			},
			getContainerField: function ()
			{
				return "children";
			},
		});

		return OrthoViewpoint;
	}
});



define ('cobweb/Browser/Navigation/X3DViewer',[
	"jquery",
	"cobweb/Basic/X3DBaseNode",
	"cobweb/Components/Navigation/OrthoViewpoint",
	"standard/Math/Geometry/ViewVolume",
	"standard/Math/Numbers/Vector3",
	"standard/Math/Numbers/Matrix4",
],
function ($, X3DBaseNode, OrthoViewpoint, ViewVolume, Vector3, Matrix4)
{
	function X3DViewer (browser, executionContext)
	{
		X3DBaseNode .call (this, browser, executionContext);
	}

	X3DViewer .prototype = $.extend (Object .create (X3DBaseNode .prototype),
	{
		constructor: X3DViewer,
		initialize: function ()
		{
		},
		getViewport: function ()
		{
			return this .getBrowser () .getActiveLayer () .getViewport ();
		},
		getNavigationInfo: function ()
		{
			return this .getBrowser () .getActiveLayer () .getNavigationInfo ();
		},
		getActiveViewpoint: function ()
		{
			return this .getBrowser () .getActiveLayer () .getViewpoint ();
		},
		getPointOnCenterPlane: function (x, y)
		{
			try
			{
				var viewport       = this .getViewport () .getRectangle ();
				var navigationInfo = this .getNavigationInfo ();
				var viewpoint      = this .getActiveViewpoint ();
				var projection     = viewpoint .getProjectionMatrix (navigationInfo .getNearPlane (), navigationInfo .getFarPlane (viewpoint), viewport);
				var modelview      = new Matrix4 (); // Use identity

				// Far plane point
				var far = ViewVolume .unProjectPoint (x, this .getBrowser () .getViewport () [3] - y, 0.9, modelview, projection, viewport);

				if (viewpoint instanceof OrthoViewpoint)
					return new Vector3 (far .x, far .y, -this .getDistanceToCenter () .abs ());

				var direction = far .normalize ();

				return Vector3 .multiply (direction, this .getDistanceToCenter () .abs () / direction .dot (new Vector3 (0, 0, -1)));
			}
			catch (error)
			{
				console .log (error);
				return new Vector3 (0, 0, 0);
			}
		},
		getDistanceToCenter: function ()
		{
			var viewpoint = this .getActiveViewpoint ();

			return Vector3 .subtract (viewpoint .getUserPosition (), viewpoint .getUserCenterOfRotation ());
		},
		trackballProjectToSphere: function (x, y)
		{
			x =  x / this .getBrowser () .getViewport () [2] - 0.5;
			y = -y / this .getBrowser () .getViewport () [3] + 0.5;

			return new Vector3 (x, y, tbProjectToSphere (0.5, x, y));
		},
		dispose: function () { },
	});

	function tbProjectToSphere (r, x, y)
	{
		var d = Math .sqrt (x * x + y * y);

		if (d < r * Math .sqrt (0.5)) // Inside sphere
		{
			return Math .sqrt (r * r - d * d);
		}

		// On hyperbola

		var t = r / Math .sqrt (2);
		return t * t / d;
	}

	return X3DViewer;
});

/*! Copyright (c) 2011 Brandon Aaron (http://brandonaaron.net)
 * Licensed under the MIT License (LICENSE.txt).
 *
 * Thanks to: http://adomas.org/javascript-mouse-wheel/ for some pointers.
 * Thanks to: Mathias Bank(http://www.mathias-bank.de) for a scope bug fix.
 * Thanks to: Seamus Leahy for adding deltaX and deltaY
 *
 * Version: 3.0.6
 * 
 * Requires: 1.2.2+
 */

var jQueryMouseWheel = function($) {

var types = ['DOMMouseScroll', 'mousewheel'];

if ($.event.fixHooks) {
    for ( var i=types.length; i; ) {
        $.event.fixHooks[ types[--i] ] = $.event.mouseHooks;
    }
}

$.event.special.mousewheel = {
    setup: function() {
        if ( this.addEventListener ) {
            for ( var i=types.length; i; ) {
                this.addEventListener( types[--i], handler, false );
            }
        } else {
            this.onmousewheel = handler;
        }
    },
    
    teardown: function() {
        if ( this.removeEventListener ) {
            for ( var i=types.length; i; ) {
                this.removeEventListener( types[--i], handler, false );
            }
        } else {
            this.onmousewheel = null;
        }
    }
};

$.fn.extend({
    mousewheel: function(fn) {
        return fn ? this.bind("mousewheel", fn) : this.trigger("mousewheel");
    },
    
    unmousewheel: function(fn) {
        return this.unbind("mousewheel", fn);
    }
});


function handler(event) {
    var orgEvent = event || window.event, args = [].slice.call( arguments, 1 ), delta = 0, returnValue = true, deltaX = 0, deltaY = 0;
    event = $.event.fix(orgEvent);
    event.type = "mousewheel";
    
    // Old school scrollwheel delta
    if ( orgEvent.wheelDelta ) { delta = orgEvent.wheelDelta/120; }
    if ( orgEvent.detail     ) { delta = -orgEvent.detail/3; }
    
    // New school multidimensional scroll (touchpads) deltas
    deltaY = delta;
    
    // Gecko
    if ( orgEvent.axis !== undefined && orgEvent.axis === orgEvent.HORIZONTAL_AXIS ) {
        deltaY = 0;
        deltaX = -1*delta;
    }
    
    // Webkit
    if ( orgEvent.wheelDeltaY !== undefined ) { deltaY = orgEvent.wheelDeltaY/120; }
    if ( orgEvent.wheelDeltaX !== undefined ) { deltaX = -1*orgEvent.wheelDeltaX/120; }
    
    // Add event and delta to the front of the arguments
    args.unshift(event, delta, deltaX, deltaY);
    
    return ($.event.dispatch || $.event.handle).apply(this, args);
}

};

if (window.define !== undefined){
    define('jquery-mousewheel/jquery.mousewheel',["jquery"], jQueryMouseWheel);
} else {
    jQueryMouseWheel(jQuery);
}
;
define('jquery-mousewheel', ['jquery-mousewheel/jquery.mousewheel'], function (main) { return main; });


define ('cobweb/Browser/Navigation/ExamineViewer',[
	"jquery",
	"cobweb/Browser/Navigation/X3DViewer",
	"standard/Math/Numbers/Vector3",
	"standard/Math/Numbers/Rotation4",
	"jquery-mousewheel",
],
function ($, X3DViewer, Vector3, Rotation4)
{
	var
		MOTION_TIME       = 0.05 * 1000,
		SPIN_RELEASE_TIME = 0.01 * 1000,
		SPIN_ANGLE        = 0.006,
		SPIN_FACTOR       = 0.6,
		SCROLL_FACTOR     = 1.0 / 50.0,
		FRAME_RATE        = 60;

	function ExamineViewer (executionContext)
	{
		X3DViewer .call (this, executionContext .getBrowser (), executionContext);

		this .button            = -1;
		this .orientationOffset = new Rotation4 ();
		this .rotation          = new Rotation4 ();
		this .fromVector        = new Vector3 (0, 0, 0);
		this .fromPoint         = new Vector3 (0, 0, 0);
		this .pressTime         = 0;
		this .motionTime        = 0;
		this .spinId            = undefined;
	}

	ExamineViewer .prototype = $.extend (Object .create (X3DViewer .prototype),
	{
		constructor: ExamineViewer,
		initialize: function ()
		{
			X3DViewer .prototype .initialize .call (this);

			this .getBrowser () .getCanvas () .bind ("mousedown.ExamineViewer",  this .mousedown .bind (this));
			this .getBrowser () .getCanvas () .bind ("mouseup.ExamineViewer",    this .mouseup .bind (this));
			this .getBrowser () .getCanvas () .bind ("mousemove.ExamineViewer",  this .mousemove .bind (this));
			this .getBrowser () .getCanvas () .bind ("mousewheel.ExamineViewer", this .mousewheel .bind (this));
		},
		mousedown: function (event)
		{
			if (this .button >= 0)
				return;

			this .button    = event .button;
			this .pressTime = performance .now ();

			var
				offset = this .getBrowser () .getCanvas () .offset (),
				x      = event .pageX - offset .left,
				y      = event .pageY - offset .top;

			switch (this .button)
			{
				case 0:
				{
					event .preventDefault ();
					this .disconnect ();
					this .getActiveViewpoint () .transitionStop ();
					this .getBrowser () .setCursor ("MOVE");

					this .fromVector = this .trackballProjectToSphere (x, y);
					this .rotation   = new Rotation4 ();

					this .motionTime = 0;			
					break;
				}
				case 1:
				{
					event .preventDefault ();
					this .disconnect ();
					this .getActiveViewpoint () .transitionStop ();
					this .getBrowser () .setCursor ("MOVE");

					this .fromPoint = this .getPointOnCenterPlane (x, y);
					break;
				}
			}
		},
		mouseup: function (event)
		{
			if (event .button !== this .button)
				return;

			switch (this .button)
			{
				case 0:
				{
					event .preventDefault ();
					this .getBrowser () .setCursor ("DEFAULT");

					if (Math .abs (this .rotation .angle) > SPIN_ANGLE && performance .now () - this .motionTime < SPIN_RELEASE_TIME)
					{
						try
						{
							this .rotation = new Rotation4 () .slerp (this .rotation, SPIN_FACTOR);
							this .addSpinning ();
						}
						catch (error)
						{ }
					}

					break;
				}
				case 1:
				{
					event .preventDefault ();
					this .getBrowser () .setCursor ("DEFAULT");
					break;
				}
			}

			this .button = -1;
		},
		mousemove: function (event)
		{
			if (this .button < 0)
				return;

			var
				offset = this .getBrowser () .getCanvas () .offset (),
				x      = event .pageX - offset .left,
				y      = event .pageY - offset .top;

			switch (this .button)
			{
				case 0:
				{
					var
						viewpoint = this .getActiveViewpoint (),
						toVector  = this .trackballProjectToSphere (x, y);

					this .rotation = new Rotation4 (toVector, this .fromVector);

					if (Math .abs (this .rotation .angle) < SPIN_ANGLE && performance .now () - this .pressTime < MOTION_TIME)
						return false;

					viewpoint .orientationOffset_ = this .getOrientationOffset ();
					viewpoint .positionOffset_    = this .getPositionOffset ();

					this .fromVector = toVector;
					this .motionTime = performance .now ();
					break;
				}
				case 1:
				{
					// Stop event propagation.

					event .preventDefault ();

		         // Move.

					var
						viewpoint   = this .getActiveViewpoint (),
						toPoint     = this .getPointOnCenterPlane (x, y),
						translation = viewpoint .getUserOrientation () .multVecRot (Vector3 .subtract (this .fromPoint, toPoint));

					viewpoint .positionOffset_         = Vector3 .add (viewpoint .positionOffset_         .getValue (), translation);
					viewpoint .centerOfRotationOffset_ = Vector3 .add (viewpoint .centerOfRotationOffset_ .getValue (), translation);

					this .fromPoint = toPoint;
					break;
				}
			}
		},
		mousewheel: function (event)
		{
			// Stop event propagation.

			event .preventDefault ();

         // Determine scroll direction.

			var direction = 0;

			// IE & Opera
			if (event .originalEvent .wheelDelta)
				direction = -event .originalEvent .wheelDelta / 120;

			// Mozilla
			else if (event .originalEvent .detail)
				direction = event .originalEvent .detail / 3;

			// Change viewpoint position.

			var viewpoint = this .getActiveViewpoint ();

			//viewpoint .transitionStop ();

			var
				step           = this .getDistanceToCenter () .multiply (SCROLL_FACTOR),
				positionOffset = viewpoint .getUserOrientation () .multVecRot (new Vector3 (0, 0, step .abs ()));

			if (direction > 0)
				viewpoint .positionOffset_ .setValue (viewpoint .positionOffset_ .getValue () .add (positionOffset));

			else if (direction < 0)
				viewpoint .positionOffset_ .setValue (viewpoint .positionOffset_ .getValue () .subtract (positionOffset));		
		},
		getPositionOffset: function ()
		{
			var
				viewpoint = this .getActiveViewpoint (),
				distance  = this .getDistanceToCenter ();

			return (this .orientationOffset .copy () .inverse ()
			        .multRight (viewpoint .orientationOffset_ .getValue ())
			        .multVecRot (distance .copy ())
			        .subtract (distance)
			        .add (viewpoint .positionOffset_ .getValue ()));
		},
		getOrientationOffset: function ()
		{
			var viewpoint = this .getActiveViewpoint ();

			this .orientationOffset .assign (viewpoint .orientationOffset_ .getValue ());

			return Rotation4 .inverse (viewpoint .orientation_ .getValue ()) .multRight (this .rotation) .multRight (viewpoint .getUserOrientation ());
		},
		spin: function ()
		{
			var viewpoint = this .getActiveViewpoint ();

			viewpoint .orientationOffset_ = this .getOrientationOffset ();
			viewpoint .positionOffset_    = this .getPositionOffset ();
		},
		addSpinning: function ()
		{
			if (! this .spinId)
				this .spinId = setInterval (this .spin .bind (this), 1000.0 / FRAME_RATE);
		},
		disconnect: function ()
		{
			clearInterval (this .spinId);

			this .spinId = undefined;
		},
		dispose: function ()
		{
			this .disconnect ();
			this .getBrowser () .getCanvas () .unbind (".ExamineViewer");
		},
	});

	return ExamineViewer;
});


define ('cobweb/Browser/Navigation/NoneViewer',[
	"jquery",
	"cobweb/Browser/Navigation/X3DViewer"
],
function ($, X3DViewer)
{
	function NoneViewer (executionContext)
	{
		X3DViewer .call (this, executionContext .getBrowser (), executionContext);
	}

	NoneViewer .prototype = $.extend (Object .create (X3DViewer .prototype),
	{
		constructor: NoneViewer,
	});

	return NoneViewer;
});


define ('cobweb/Components/Lighting/X3DLightNode',[
	"jquery",
	"cobweb/Components/Core/X3DChildNode",
	"cobweb/Bits/TraverseType",
	"cobweb/Bits/X3DConstants",
],
function ($,
          X3DChildNode,
          TraverseType,
          X3DConstants)
{
	function X3DLightNode (browser, executionContext)
	{
		X3DChildNode .call (this, browser, executionContext);

		this .addType (X3DConstants .X3DLightNode);
	}

	X3DLightNode .prototype = $.extend (Object .create (X3DChildNode .prototype),
	{
		constructor: X3DLightNode,
		traverse: function (type)
		{
			if (type !== TraverseType .DISPLAY)
				return;

			if (this .on_ .getValue ())
			{
				if (this .global_ .getValue ())
					this .getBrowser () .getGlobalLights () .push (this .getContainer ());

				//else
				//	this .getCurrentLayer () .getLocalObjects () .push (new DirectionalLightContainer (this));
			}
		},
	});

	return X3DLightNode;
});



define ('cobweb/Components/Lighting/DirectionalLight',[
	"jquery",
	"cobweb/Fields",
	"cobweb/Basic/X3DFieldDefinition",
	"cobweb/Basic/FieldDefinitionArray",
	"cobweb/Components/Lighting/X3DLightNode",
	"cobweb/Bits/X3DConstants",
],
function ($,
          Fields,
          X3DFieldDefinition,
          FieldDefinitionArray,
          X3DLightNode,
          X3DConstants)
{
	function DirectionalLightContainer (light)
	{
		this .light     = light;
		this .direction = light .getBrowser () .getModelViewMatrix () .get () .multDirMatrix (light .direction_ .getValue () .copy ()) .normalize ();
	}

	DirectionalLightContainer .prototype =
	{
		use: function (gl, shader, i)
		{
			var light = this .light;
		
			gl .uniform1i (shader .lightType [i],             0);
			gl .uniform1i (shader .lightOn [i],               true);
			gl .uniform3f (shader .lightColor [i],            light .color_ .r, light .color_ .g, light .color_ .b);
			gl .uniform1f (shader .lightIntensity [i],        light .intensity_ .getValue ()); // clamp
			gl .uniform1f (shader .lightAmbientIntensity [i], light .ambientIntensity_ .getValue ()); // clamp
			gl .uniform3f (shader .lightDirection [i],        this .direction .x, this .direction .y, this .direction .z);
			gl .uniform3f (shader .lightAttenuation [i],      1, 0, 0);
		},
	};

	with (Fields)
	{
		function DirectionalLight (executionContext)
		{
			X3DLightNode .call (this, executionContext .getBrowser (), executionContext);

			this .addType (X3DConstants .DirectionalLight);
		}

		DirectionalLight .prototype = $.extend (Object .create (X3DLightNode .prototype),
		{
			constructor: DirectionalLight,
			fieldDefinitions: new FieldDefinitionArray ([
				new X3DFieldDefinition (X3DConstants .inputOutput, "metadata",         new SFNode ()),
				new X3DFieldDefinition (X3DConstants .inputOutput, "global",           new SFBool (true)),
				new X3DFieldDefinition (X3DConstants .inputOutput, "on",               new SFBool (true)),
				new X3DFieldDefinition (X3DConstants .inputOutput, "color",            new SFColor (1, 1, 1)),
				new X3DFieldDefinition (X3DConstants .inputOutput, "intensity",        new SFFloat (1)),
				new X3DFieldDefinition (X3DConstants .inputOutput, "ambientIntensity", new SFFloat ()),
				new X3DFieldDefinition (X3DConstants .inputOutput, "direction",        new SFVec3f (0, 0, -1)),
			]),
			getTypeName: function ()
			{
				return "DirectionalLight";
			},
			getComponentName: function ()
			{
				return "Lighting";
			},
			getContainerField: function ()
			{
				return "children";
			},
			getContainer: function ()
			{
				return new DirectionalLightContainer (this);
			},
		});

		return DirectionalLight;
	}
});



define ('cobweb/Browser/Navigation/X3DNavigationContext',[
	"cobweb/Fields",
	"cobweb/Browser/Navigation/ExamineViewer",
	"cobweb/Browser/Navigation/NoneViewer",
	"cobweb/Components/Lighting/DirectionalLight",
],
function (Fields,
	       ExamineViewer,
	       NoneViewer,
	       DirectionalLight)
{
	with (Fields)
	{
		var noneViewer = new MFString ("NONE");

		function X3DNavigationContext ()
		{
			this .addChildren ("availableViewers", new MFString (),
			                   "viewer",           new SFString ("EXAMINE"));
		}

		X3DNavigationContext .prototype =
		{
			initialize: function ()
			{
			   this .initialized () .addInterest (this, "set_world__");
			   this .shutdown () .addInterest (this, "remove_world__");
			   this .viewer_ .addInterest (this, "set_viewer__");

				this .activeLayerNode    = null;
				this .navigationInfoNode = null;
				this .viewer             = null;
				
				var headlight = new DirectionalLight (this);
				headlight .setup ();
				this .headlight = headlight .getContainer ();
			},
			getHeadlight: function ()
			{
				return this .headlight;
			},
			getActiveLayer: function ()
			{
			   return this .activeLayerNode;
			},
			remove_world__: function ()
			{
			   this .getWorld () .activeLayer_ .removeInterest (this, "set_activeLayer__");
			},
			set_world__: function ()
			{
			   this .getWorld () .activeLayer_ .addInterest (this, "set_activeLayer__");

			   this .set_activeLayer__ ();
			},
			set_activeLayer__: function ()
			{
			   if (this .activeLayerNode)
			       this .activeLayerNode .getNavigationInfoStack () .removeInterest (this, "set_navigationInfo__");

			   this .activeLayerNode = this .getWorld () .getActiveLayer ();

			   if (this .activeLayerNode)
			       this .activeLayerNode .getNavigationInfoStack () .addInterest (this, "set_navigationInfo__");

			   this .set_navigationInfo__ ();
			},
			set_navigationInfo__: function ()
			{
			   if (this .navigationInfoNode)
			      this .navigationInfoNode .type_ .removeInterest (this, "set_viewerType__");

			   if (! this .activeLayerNode)
			   {
			      this .navigationInfoNode = null;

					this .set_viewerType__ (noneViewer);
					return;
				}

				this .navigationInfoNode = this .activeLayerNode .getNavigationInfo ();

			   this .navigationInfoNode .type_ .addInterest (this, "set_viewerType__");

			   this .set_viewerType__ (this .navigationInfoNode .type_);
			},
			set_viewerType__: function (type)
			{
				this .availableViewers_ .length = 0;;

				var
					examineViewer = false,
					walkViewer    = false,
					flyViewer     = false,
					planeViewer   = false,
					noneViewer    = false,
					lookAt        = false;

				// Determine active viewer.

				this .viewer_ = "EXAMINE";

				for (var i = 0; i < type .length; ++ i)
				{
				   var string = type [i];

					switch (string)
					{
						case "LOOKAT":
							// Continue with next type.
							continue;
						case "EXAMINE":
						case "WALK":
						case "FLY":
						case "NONE":
							this .viewer_ = string;
							break;
						case "PLANE_create3000.de":
							this .viewer_ = "PLANE";
							break;
						default:
							continue;
					}

					// Leave for loop.
					break;
				}

				// Determine available viewers.

				if (! type .length)
				{
					examineViewer = true;
					walkViewer    = true;
					flyViewer     = true;
					planeViewer   = true;
					noneViewer    = true;
					lookAt        = true;
				}
				else
				{
					for (var i = 0; i < type .length; ++ i)
					{
					   var string = type [i];

						switch (string)
						{
							case "EXAMINE":
								examineViewer = true;
								continue;
							case "WALK":
								walkViewer = true;
								continue;
							case "FLY":
								flyViewer = true;
								continue;
							case "PLANE":
								planeViewer = true;
								continue;
							case "NONE":
								noneViewer = true;
								continue;
							case "LOOKAT":
								lookAt = true;
								continue;
						}

						if (string == "ANY")
						{
							examineViewer = true;
							walkViewer    = true;
							flyViewer     = true;
							planeViewer   = true;
							noneViewer    = true;
							lookAt        = true;

							// Leave for loop.
							break;
						}

						// Some string defaults to EXAMINE.
						examineViewer = true;
					}

					if (examineViewer)
						this .availableViewers_ .push ("EXAMINE");

					if (walkViewer)
						this .availableViewers_ .push ("WALK");

					if (flyViewer)
						this .availableViewers_ .push ("FLY");

					if (planeViewer)
						this .availableViewers_ .push ("PLANE");

					if (noneViewer)
						this .availableViewers_ .push ("NONE");

					if (lookAt)
					{
						if (! this .availableViewers_ .length)
						{
							this .viewer_ = "NONE";
							this .availableViewers_ .push ("NONE");
						}

						this .availableViewers_ .push ("LOOKAT");
					}
				}
			},
			set_viewer__: function ()
			{
			   if (this .viewer)
			      this .viewer .dispose ();

				switch (this .viewer_ .getValue ())
				{
					case "EXAMINE":
					   this .viewer = new ExamineViewer (this);
						break;
					case "WALK":
					   this .viewer = new NoneViewer (this);
						break;
					case "FLY":
					   this .viewer = new NoneViewer (this);
						break;
					case "PLANE":
					   this .viewer = new NoneViewer (this);
						break;
					case "NONE":
					   this .viewer = new NoneViewer (this);
						break;
					default:
					   this .viewer = new ExamineViewer (this);
						break;
				}

				this .viewer .setup ();
			},
		};

		return X3DNavigationContext;
	}
});


define ('cobweb/Components/Grouping/X3DBoundedObject',[
	"jquery",
	"cobweb/Bits/X3DCast",
	"cobweb/Bits/X3DConstants",
	"standard/Math/Numbers/Vector3",
	"standard/Math/Geometry/Box3",
],
function ($,
          X3DCast,
          X3DConstants,
          Vector3,
          Box3)
{
	function X3DBoundedObject (browser, executionContext)
	{
		this .addType (X3DConstants .X3DBoundedObject);
	}

	X3DBoundedObject .prototype =
	{
		constructor: X3DBoundedObject,
		defaultBBoxSize: new Vector3 (-1, -1, -1),
		initialize: function () { },
	};

	X3DBoundedObject .getBBox = function (nodes)
	{
		var bbox = new Box3 ();

		// Add bounding boxes

		for (var i = 0; i < nodes .length; ++ i)
		{
			var boundedObject = X3DCast (X3DConstants .X3DBoundedObject, nodes [i]);

			if (boundedObject)
			{
				if (!boundedObject .getBBox ())
					console .log (boundedObject .getTypeName ());
			
				bbox .add (boundedObject .getBBox ());
			}
		}

		return bbox;
	};

	return X3DBoundedObject;
});



define ('cobweb/Components/Grouping/X3DGroupingNode',[
	"jquery",
	"cobweb/Components/Core/X3DChildNode",
	"cobweb/Components/Grouping/X3DBoundedObject",
	"cobweb/Bits/TraverseType",
	"cobweb/Bits/X3DConstants",
	"standard/Math/Geometry/Box3",
],
function ($,
          X3DChildNode, 
          X3DBoundedObject, 
          TraverseType,
          X3DConstants,
          Box3)
{
	function remove (array, first, last, range, rfirst, rlast, getId)
	{
		if (! getId)
			getId = remove .getId ;

		var set = { };

		for (var i = rfirst; i < rlast; ++ i)
			set [getId (range [i])] = true;

		return remove_impl (array, first, last, set, getId);
	}

	function remove_impl (array, first, last, set, getId)
	{
		if ($.isEmptyObject (set))
			return last;

		var count = 0;

		for (; first !== last; ++ first)
		{
			if (set [getId (array [first])])
			{
				++ count;
				break;
			}
		}

		LOOP:
		for (; ;)
		{
			var second = first + count;

			for (; second !== last; ++ first, ++ second)
			{
				if (set [getId (array [second])])
				{
					++ count;
					continue LOOP;
				}

				array [first] = array [second];
			}

			break;
		}

		for (var second = first + count; second !== last; ++ first, ++ second)
		{
			array [first] = array [second];
		}

		return first;
	}

	remove .getId = function (value) { return value; };

	//

	function getId (value) { return value ? value .getId () : -1; };
	function getNodeId (value) { return value ? value .getValue () .getId () : -1; }

	function X3DGroupingNode (browser, executionContext)
	{
		X3DChildNode     .call (this, browser, executionContext);
		X3DBoundedObject .call (this, browser, executionContext);

		this .addType (X3DConstants .X3DGroupingNode);
	               
		this .hidden                = false;
		this .visible               = [ ];
		this .pointingDeviceSensors = [ ];
		this .cameraObjects         = [ ];
		this .localFogs             = [ ];
		this .clipPlanes            = [ ];
		this .childNodes            = [ ];
	}

	X3DGroupingNode .prototype = $.extend (Object .create (X3DChildNode .prototype),
		X3DBoundedObject .prototype,
	{
		constructor: X3DGroupingNode,
		initialize: function ()
		{
			X3DChildNode     .prototype .initialize .call (this);
			X3DBoundedObject .prototype .initialize .call (this);

			this .addChildren_    .addInterest (this, "set_addChildren__");
			this .removeChildren_ .addInterest (this, "set_removeChildren__");
			this .children_       .addInterest (this, "set_children__");

			this .set_children__ ();
		},
		getBBox: function ()
		{
			if (this .bboxSize_ .getValue () .equals (this .defaultBBoxSize))
				return X3DBoundedObject .getBBox (this .children_);

			return new Box3 (this .bboxSize_ .getValue (), this .bboxCenter_ .getValue ());
		},
		setHidden: function (value)
		{
			if (value !== this .hidden)
			{
				this .hidden = value;

				this .set_children__ ();
			}
		},
		setVisible: function (value)
		{
			visible = value;

			this .set_children__ ();
		},
		getChild: function (index)
		{
			// Used in LOD and Switch.
			
			try
			{
				if (index >= 0 && index < this .children_ .length)
				{
					var child = this .children_ [index];

					if (child)
						return child .getValue () .getInnerNode ();
				}
			}
			catch (error)
			{ }

			return null;
		},
		set_addChildren__: function ()
		{
			if (this .addChildren_ .length === 0)
				return;

			this .addChildren_ .setTainted (true);
			this .addChildren_ .erase (remove (this .addChildren_, 0, this .addChildren_ .length,
			                                   this .children_,    0, this .children_    .length,
			                                   getNodeId),
			                           this .addChildren_ .length);

			if (! this .children_ .getTainted ())
			{
				this .children_ .removeInterest (this, "set_children__");
				this .children_ .addInterest (this, "connectChildren");
			}

			this .children_ .insert (this .children_ .length, this .addChildren_, 0, this .addChildren_ .length);
			this .add (this .addChildren_);

			this .addChildren_ .set ([ ]);
			this .addChildren_ .setTainted (false);
		},
		set_removeChildren__: function ()
		{
			if (this .removeChildren_ .length === 0)
				return;

			if (this .children_ .length === 0)
				return;

			var innerNodes = [ ];

			for (var i = 0; i < this .removeChildren_ .length; ++ i)
			{
				try
				{
					var node = this .removeChildren_ [i];

					if (node)
						innerNodes .push (node .getValue () .getInnerNode ());
				}
				catch (error)
				{ }
			}

			innerNode .isCameraObject_ .removeInterest (this, "set_cameraObjects__");

			if (this .localFogs .length)
			{
				this .localFogs .splice (remove (localFogs,  0, localFogs  .length,
				                                 innerNodes, 0, innerNodes .length,
				                                 getId));
			}

			if (this .pointingDeviceSensors .length)
			{
				this .pointingDeviceSensors .splice (remove (pointingDeviceSensors, 0, pointingDeviceSensors .length,
				                                             innerNodes,            0, innerNodes .length,
				                                             getId));
			}

			if (this .clipPlanes .length)
			{
				this .clipPlanes .splice (remove (clipPlanes, 0, clipPlanes .length,
				                                  innerNodes, 0, innerNodes .length,
				                                  getId));
			}

			if (this .childNodes .length)
			{
				this .childNodes .splice (remove (childNodes, 0, childNodes .length,
				                                  innerNodes, 0, innerNodes .length,
				                                  getId));
			}

			if (! this .children_ .getTainted ())
			{
				this .children_ .removeInterest (this, "set_children__");
				this .children_ .addInterest (this, "connectChildren");
			}

			this .children_ .erase (remove (this .children_,       0, this .children_ .length,
			                                this .removeChildren_, 0, this .removeChildren_ .length,
			                                getNodeId),
			                        this .children_ .length);

			this .removeChildren_ .set ([ ]);
		},
		set_children__: function ()
		{
			this .clear ();
			this .add (this .children_);
		},
		connectChildren: function ()
		{
			this .children_ .removeInterest (this, "connectChildren");
			this .children_ .addInterest (this, "set_children__");
		},
		add: function (children)
		{
			if (this .hidden)
				return;

			for (var i = 0; i < children .length; ++ i)
			{
				var child = children [i];
			
				if (child && (i >= this .visible .length || this .visible [i] .getValue ()))
				{
					try
					{
						var innerNode = child .getValue () .getInnerNode ();
						var type      = Array .prototype .slice .call (innerNode .getType (), 0) .reverse ();

						for (var t = 0; t < type .length; ++ t)
						{
							switch (type [t])
							{
								case X3DConstants .X3DPointingDeviceSensorNode:
								{
									this .pointingDeviceSensors .push (innerNode);
									break;
								}
								case X3DConstants .LocalFog:
								{
									this .localFogs .push (innerNode);
									break;
								}
								case X3DConstants .ClipPlane:
								{
									this .clipPlanes .push (innerNode);
									break;
								}
								case X3DConstants .X3DChildNode:
								{
									this .childNodes .push (innerNode);

									innerNode .isCameraObject_ .addInterest (this, "set_cameraObjects__");
									break;
								}
								case X3DConstants .BooleanFilter:
								case X3DConstants .BooleanToggle:
								case X3DConstants .NurbsOrientationInterpolator:
								case X3DConstants .NurbsPositionInterpolator:
								case X3DConstants .NurbsSurfaceInterpolator:
								case X3DConstants .TimeSensor:
								case X3DConstants .X3DFollowerNode:
								case X3DConstants .X3DInfoNode:
								case X3DConstants .X3DInterpolatorNode:
								case X3DConstants .X3DLayoutNode:
								case X3DConstants .X3DScriptNode:
								case X3DConstants .X3DSequencerNode:
								case X3DConstants .X3DTriggerNode:
									break;
								default:
									continue;
							}

							break;
						}
					}
					catch (error)
					{ }
				}
			}

			this .set_cameraObjects__ ();
		},
		clear: function ()
		{
			this .pointingDeviceSensors .length = 0;
			this .cameraObjects         .length = 0;
			this .localFogs             .length = 0;
			this .clipPlanes            .length = 0;
			this .childNodes            .length = 0;
		},
		set_cameraObjects__: function ()
		{
			this .cameraObjects .length = 0;

			for (var i = 0; i < this .childNodes .length; ++ i)
			{
				var childNode = this .childNodes [i];

				if (childNode .getCameraObject ())
					this .cameraObjects .push (childNode);
			}

			this .setCameraObject (this .cameraObjects .length);
		},
		traverse: function (type)
		{
			switch (type)
			{
				case TraverseType .POINTER:
				{
					if (this .pointingDeviceSensors .length)
					{
						var sensors = { };
						
						this .getBrowser () .getSensors () .push (sensors);
					
						for (var i = 0; i < this .pointingDeviceSensors .length; ++ i)
							this .pointingDeviceSensors [i] .push ();
					}

					//for (var i = 0; i < this .clipPlanes .length; ++ i)
					//	this .clipPlanes [i] .push ();

					for (var i = 0; i < this .childNodes .length; ++ i)
						this .childNodes [i] .traverse (type);

					//for (var i = 0; i < this .clipPlanes .length; ++ i)
					//	this .clipPlanes [i] .pop ();

					if (this .pointingDeviceSensors .length)
						this .getBrowser () .getSensors () .pop ();

					return;
				}
				case TraverseType .CAMERA:
				{
					for (var i = 0; i < this .cameraObjects .length; ++ i)
						this .cameraObjects [i] .traverse (type);

					return;
				}
				case TraverseType .DISPLAY:
				{
					for (var i = 0; i < this .childNodes .length; ++ i)
						this .childNodes [i] .traverse (type);

					return;
				}
			}
		},
	});

	return X3DGroupingNode;
});



define ('cobweb/Components/Layering/X3DViewportNode',[
	"jquery",
	"cobweb/Components/Grouping/X3DGroupingNode",
	"cobweb/Bits/X3DConstants",
],
function ($,
          X3DGroupingNode, 
          X3DConstants)
{
	function X3DViewportNode (browser, executionContext)
	{
		X3DGroupingNode .call (this, browser, executionContext);

		this .addType (X3DConstants .X3DViewportNode);
	}

	X3DViewportNode .prototype = $.extend (Object .create (X3DGroupingNode .prototype),
	{
		constructor: X3DViewportNode,
	});

	return X3DViewportNode;
});



define ('cobweb/Components/Layering/Viewport',[
	"jquery",
	"cobweb/Fields",
	"cobweb/Basic/X3DFieldDefinition",
	"cobweb/Basic/FieldDefinitionArray",
	"cobweb/Components/Layering/X3DViewportNode",
	"cobweb/Bits/X3DConstants",
	"standard/Math/Geometry/ViewVolume",
	"standard/Math/Numbers/Vector4",
],
function ($,
          Fields,
          X3DFieldDefinition,
          FieldDefinitionArray,
          X3DViewportNode, 
          X3DConstants,
          ViewVolume,
          Vector4)
{
	with (Fields)
	{
		function Viewport (executionContext)
		{
			X3DViewportNode .call (this, executionContext .getBrowser (), executionContext);

			this .addType (X3DConstants .Viewport);
		}

		Viewport .prototype = $.extend (Object .create (X3DViewportNode .prototype),
		{
			constructor: Viewport,
			fieldDefinitions: new FieldDefinitionArray ([
				new X3DFieldDefinition (X3DConstants .inputOutput,    "metadata",       new SFNode ()),
				new X3DFieldDefinition (X3DConstants .inputOutput,    "clipBoundary",   new MFFloat (0, 1, 0, 1)),
				new X3DFieldDefinition (X3DConstants .initializeOnly, "bboxSize",       new SFVec3f (-1, -1, -1)),
				new X3DFieldDefinition (X3DConstants .initializeOnly, "bboxCenter",     new SFVec3f (0, 0, 0)),
				new X3DFieldDefinition (X3DConstants .inputOnly,      "addChildren",    new MFNode ()),
				new X3DFieldDefinition (X3DConstants .inputOnly,      "removeChildren", new MFNode ()),
				new X3DFieldDefinition (X3DConstants .inputOutput,    "children",       new MFNode ()),
			]),
			getTypeName: function ()
			{
				return "Viewport";
			},
			getComponentName: function ()
			{
				return "Layering";
			},
			getContainerField: function ()
			{
				return "viewport";
			},
			initialize: function ()
			{
				X3DViewportNode .prototype .initialize .call (this);
				
				this .getBrowser () .getViewport () .addInterest (this, "set_rectangle__");
				this .clipBoundary_                 .addInterest (this, "set_rectangle__");

				this .set_rectangle__ ();
			},
			set_rectangle__: function ()
			{
				var viewport = this .getBrowser () .getViewport ();

				var left   = Math .floor (viewport [2] * this .getLeft ());
				var right  = Math .floor (viewport [2] * this .getRight ());
				var bottom = Math .floor (viewport [3] * this .getBottom ());
				var top    = Math .floor (viewport [3] * this .getTop ());

				this .rectangle = new Vector4 (left,
				                               bottom,
				                               Math .max (0, right - left),
				                               Math .max (0, top - bottom));
			},
			getRectangle: function ()
			{
				return this .rectangle;
			},
			getLeft: function ()
			{
				return this .clipBoundary_ .length > 0 ? this .clipBoundary_ [0] : 0;
			},
			getRight: function ()
			{
				return this .clipBoundary_ .length > 1 ? this .clipBoundary_ [1] : 1;
			},
			getBottom: function ()
			{
				return this .clipBoundary_ .length > 2 ? this .clipBoundary_ [2] : 0;
			},
			getTop: function ()
			{
				return this .clipBoundary_ .length > 3 ? this .clipBoundary_ [3] : 1;
			},
			traverse: function (type)
			{
				this .push ();

				switch (type)
				{
					case TraverseType .POINTER:
					{
						var
							viewVolumes = this .getCurrentLayer () .getViewVolumeStack (),
							viewVolume  = viewVolumes [viewVolumes .length - 1];

						if (! this .getBrowser () .isPointerInRectangle (viewVolume .getScissor ()))
							return;

						X3DGroupingNode .prototype .traverse .call (this, type);
						break;
					}
					default:
						X3DGroupingNode .prototype .traverse .call (this, type);
						break;
				}

				this .pop ();
			},
			push: function ()
			{
				var viewVolumes = this .getCurrentLayer () .getViewVolumeStack ();
				var viewport    = viewVolumes .length ? viewVolumes [0] .getViewport () : this .rectangle;

				this .getCurrentLayer () .getViewVolumeStack () .push (new ViewVolume (this .getBrowser () .getProjectionMatrix (),
				                                                                   viewport,
				                                                                   this .rectangle));
			},
			pop: function ()
			{
				this .getCurrentLayer () .getViewVolumeStack () .pop ();
			},
		});

		return Viewport;
	}
});



define ('cobweb/Browser/Layering/X3DLayeringContext',[
	"cobweb/Components/Layering/Viewport",
],
function (Viewport)
{
	function X3DLayeringContext ()
	{
		this .defaultViewport = new Viewport (this);
		this .layers          = [ ];
	}

	X3DLayeringContext .prototype =
	{
		initialize: function ()
		{
			this .defaultViewport .setup ();
		},
		getDefaultViewport: function ()
		{
			return this .defaultViewport;
		},
		getLayers: function ()
		{
			return this .layers;
		},
	};

	return X3DLayeringContext;
});


define ('cobweb/Components/Texturing/TextureProperties',[
	"jquery",
	"cobweb/Fields",
	"cobweb/Basic/X3DFieldDefinition",
	"cobweb/Basic/FieldDefinitionArray",
	"cobweb/Components/Core/X3DNode",
	"cobweb/Bits/X3DConstants",
],
function ($,
          Fields,
          X3DFieldDefinition,
          FieldDefinitionArray,
          X3DNode, 
          X3DConstants)
{
	with (Fields)
	{
		/*
		 *  Static members
		 */

		var boundaryModes = 
		{
			CLAMP:             "CLAMP_TO_EDGE", // "CLAMP"
			CLAMP_TO_EDGE:     "CLAMP_TO_EDGE", 
			CLAMP_TO_BOUNDARY: "CLAMP_TO_EDGE", // "CLAMP_TO_BORDER"
			MIRRORED_REPEAT:   "MIRRORED_REPEAT",
			REPEAT:            "REPEAT",
		};

		var minificationFilters =
		{
			AVG_PIXEL_AVG_MIPMAP:         "LINEAR_MIPMAP_LINEAR",
			AVG_PIXEL:                    "LINEAR",
			AVG_PIXEL_NEAREST_MIPMAP:     "LINEAR_MIPMAP_NEAREST",
			NEAREST_PIXEL_AVG_MIPMAP:     "NEAREST_MIPMAP_LINEAR",
			NEAREST_PIXEL_NEAREST_MIPMAP: "NEAREST_MIPMAP_NEAREST",
			NEAREST_PIXEL:                "NEAREST",
			NICEST:                       "LINEAR_MIPMAP_LINEAR",
			FASTEST:                      "NEAREST",
		};

		var magnificationFilters =
		{
			AVG_PIXEL:     "LINEAR",
			NEAREST_PIXEL: "NEAREST",
			NICEST:        "LINEAR",
			FASTEST:       "NEAREST",
		};

		/*
		 *  TextureProperties
		 */

		function TextureProperties (executionContext)
		{
			X3DNode .call (this, executionContext .getBrowser (), executionContext);

			this .addType (X3DConstants .TextureProperties);
		}

		TextureProperties .prototype = $.extend (Object .create (X3DNode .prototype),
		{
			constructor: TextureProperties,
			fieldDefinitions: new FieldDefinitionArray ([
				new X3DFieldDefinition (X3DConstants .inputOutput,    "metadata",            new SFNode ()),
				new X3DFieldDefinition (X3DConstants .inputOutput,    "borderColor",         new SFColorRGBA (0, 0, 0, 0)),
				new X3DFieldDefinition (X3DConstants .inputOutput,    "borderWidth",         new SFInt32 ()),
				new X3DFieldDefinition (X3DConstants .inputOutput,    "anisotropicDegree",   new SFFloat (1)),
				new X3DFieldDefinition (X3DConstants .initializeOnly, "generateMipMaps",     new SFBool (false)),
				new X3DFieldDefinition (X3DConstants .inputOutput,    "minificationFilter",  new SFString ("FASTEST")),
				new X3DFieldDefinition (X3DConstants .inputOutput,    "magnificationFilter", new SFString ("FASTEST")),
				new X3DFieldDefinition (X3DConstants .inputOutput,    "boundaryModeS",       new SFString ("REPEAT")),
				new X3DFieldDefinition (X3DConstants .inputOutput,    "boundaryModeT",       new SFString ("REPEAT")),
				new X3DFieldDefinition (X3DConstants .inputOutput,    "boundaryModeR",       new SFString ("REPEAT")),
				new X3DFieldDefinition (X3DConstants .inputOutput,    "textureCompression",  new SFString ("FASTEST")),
				new X3DFieldDefinition (X3DConstants .inputOutput,    "texturePriority",     new SFFloat ()),
			]),
			getTypeName: function ()
			{
				return "TextureProperties";
			},
			getComponentName: function ()
			{
				return "Texturing";
			},
			getContainerField: function ()
			{
				return "textureProperties";
			},
			getBoundaryMode: function (string)
			{
				var boundaryMode = boundaryModes [string];
				
				if (boundaryMode !== undefined)
					return boundaryMode;

				return "REPEAT";
			},
			getBoundaryModeS: function ()
			{
				return this .getBoundaryMode (this .boundaryModeS_ .getValue ());
			},
			getBoundaryModeT: function ()
			{
				return this .getBoundaryMode (this .boundaryModeT_ .getValue ());
			},
			getBoundaryModeR: function ()
			{
				return this .getBoundaryMode (this .boundaryModeR_ .getValue ());
			},
			getMinificationFilter: function ()
			{
				if (this .generateMipMaps_ .getValue ())
				{
					var minificationFilter = minificationFilters [this .minificationFilter_ .getValue ()];
				
					if (minificationFilter !== undefined)
						return minificationFilter;
				
					return this .getBrowser () .getDefaultTextureProperties () .getMinificationFilter ();
				}

				return "LINEAR";
			},
			getMagnificationFilter: function ()
			{
				var magnificationFilter = magnificationFilters [this .magnificationFilter_ .getValue ()];
			
				if (magnificationFilter !== undefined)
					return magnificationFilter;

				// DEFAULT
				return this .getBrowser () .getDefaultTextureProperties () .getMagnificationFilter ();
			},
		});

		return TextureProperties;
	}
});


define('text!cobweb/Browser/EnvironmentalEffects/SphereVertexShader.vs',[],function () { return '// -*- Mode: C++; coding: utf-8; tab-width: 3; indent-tabs-mode: tab; c-basic-offset: 3 -*-\nprecision mediump float;\n\nuniform mat4 x3d_ProjectionMatrix;\nuniform mat4 x3d_ModelViewMatrix;\n\nattribute vec4 x3d_Color;\nattribute vec4 x3d_Vertex;\n\nvarying vec4 C;\n\nvoid\nmain ()\n{\n\tC           = x3d_Color;\n\tgl_Position = x3d_ProjectionMatrix * x3d_ModelViewMatrix * x3d_Vertex;\n}\n';});

define('text!cobweb/Browser/EnvironmentalEffects/SphereFragmentShader.fs',[],function () { return '// -*- Mode: C++; coding: utf-8; tab-width: 3; indent-tabs-mode: tab; c-basic-offset: 3 -*-\nprecision mediump float;\n\nvarying vec4 C;\n\nvoid\nmain ()\n{\n\tgl_FragColor = C;\n}\n';});


define ('cobweb/Browser/EnvironmentalEffects/X3DEnvironmentalEffectsContext',[
	"cobweb/Components/Shaders/ComposedShader",
	"cobweb/Components/Shaders/ShaderPart",
	"cobweb/Components/Texturing/TextureProperties",
	"text!cobweb/Browser/EnvironmentalEffects/SphereVertexShader.vs",
	"text!cobweb/Browser/EnvironmentalEffects/SphereFragmentShader.fs",
],
function (ComposedShader,
          ShaderPart,
          TextureProperties,
          vertexShaderText,
          fragmentShaderText)
{
	function X3DEnvironmentalEffectsContext () { }

	X3DEnvironmentalEffectsContext .prototype =
	{
		initialize: function ()
		{
			// Create default shader.

			var vertexShader = new ShaderPart (this);
			vertexShader .type_ = "VERTEX";
			vertexShader .url_ .push (vertexShaderText);
			vertexShader .setup ();

			var fragmentShader = new ShaderPart (this);
			fragmentShader .type_ = "FRAGMENT";
			fragmentShader .url_ .push (fragmentShaderText);
			fragmentShader .setup ();

			this .backgroundSphereShader = new ComposedShader (this);
			this .backgroundSphereShader .language_ = "GLSL";
			this .backgroundSphereShader .parts_ .push (vertexShader);
			this .backgroundSphereShader .parts_ .push (fragmentShader);
			this .backgroundSphereShader .setup ();

			this .backgroundTextureProperties = new TextureProperties (this);
			this .backgroundTextureProperties .boundaryModeS_       = "CLAMP_TO_EDGE";
			this .backgroundTextureProperties .boundaryModeT_       = "CLAMP_TO_EDGE";
			this .backgroundTextureProperties .boundaryModeR_       = "CLAMP_TO_EDGE";
			this .backgroundTextureProperties .minificationFilter_  = "NICEST";
			this .backgroundTextureProperties .magnificationFilter_ = "NICEST";
			this .backgroundTextureProperties .setup ();
		},
		getBackgroundSphereShader: function ()
		{
			return this .backgroundSphereShader;
		},
		getBackgroundTextureProperties: function ()
		{
			return this .backgroundTextureProperties;
		},
	};

	return X3DEnvironmentalEffectsContext;
});


define ('cobweb/Browser/Lighting/X3DLightingContext',[
	"cobweb/Components/Layering/Viewport",
],
function (Viewport)
{
	function X3DLightingContext ()
	{
		this .globalLights = [ ];
	}

	X3DLightingContext .prototype =
	{
		initialize: function () { },
		getGlobalLights: function ()
		{
			return this .globalLights;
		},
	};

	return X3DLightingContext;
});


define ('cobweb/Browser/Scripting/X3DScriptingContext',[
],
function ()
{
	function X3DScriptingContext ()
	{
		this .scripts = [ this ];
	}

	X3DScriptingContext .prototype =
	{
		initialize: function ()
		{
		},
		isExternal: function ()
		{
		   return this .scripts .length === 1;
		},
		getScriptStack: function ()
		{
			return this .scripts;
		}
	};

	return X3DScriptingContext;
});


define ('cobweb/Browser/Shaders/X3DShadersContext',[],function ()
{
	function X3DShadersContext () { }

	X3DShadersContext .prototype =
	{
		initialize: function () { },
		getShadingLanguageVersion: function ()
		{
			return this .getContext () .getParameter (this .getContext () .SHADING_LANGUAGE_VERSION);
		},
		getMaxVertexUniformVectors: function ()
		{
			return this .getContext () .getParameter (this .getContext () .MAX_VERTEX_UNIFORM_VECTORS);
		},
		getMaxFragmentUniformVectors: function ()
		{
			return this .getContext () .getParameter (this .getContext () .MAX_FRAGMENT_UNIFORM_VECTORS);
		},
		getMaxVertexAttribs: function ()
		{
			return this .getContext () .getParameter (this .getContext () .MAX_VERTEX_ATTRIBS);
		},
	};

	return X3DShadersContext;
});


define ('cobweb/Components/Shape/X3DAppearanceNode',[
	"jquery",
	"cobweb/Fields",
	"cobweb/Components/Core/X3DNode",
	"cobweb/Bits/X3DConstants",
],
function ($,
          Fields,
          X3DNode, 
          X3DConstants)
{
	with (Fields)
	{
		function X3DAppearanceNode (browser, executionContext)
		{
			X3DNode .call (this, browser, executionContext);

			this .addType (X3DConstants .X3DAppearanceNode);
		}

		X3DAppearanceNode .prototype = $.extend (Object .create (X3DNode .prototype),
		{
			constructor: X3DAppearanceNode,
			initialize: function ()
			{
				X3DNode .prototype .initialize .call (this);
				
				this .addChildren ("transparent", new SFBool (false));
			},
		});

		return X3DAppearanceNode;
	}
});



define ('cobweb/Components/Shape/Appearance',[
	"jquery",
	"cobweb/Fields",
	"cobweb/Basic/X3DFieldDefinition",
	"cobweb/Basic/FieldDefinitionArray",
	"cobweb/Components/Shape/X3DAppearanceNode",
	"cobweb/Bits/X3DCast",
	"cobweb/Bits/X3DConstants",
],
function ($,
          Fields,
          X3DFieldDefinition,
          FieldDefinitionArray,
          X3DAppearanceNode,
          X3DCast,
          X3DConstants)
{
	with (Fields)
	{
		function Appearance (executionContext)
		{
			X3DAppearanceNode .call (this, executionContext .getBrowser (), executionContext);

			this .addType (X3DConstants .Appearance);
		}

		Appearance .prototype = $.extend (Object .create (X3DAppearanceNode .prototype),
		{
			constructor: Appearance,
			fieldDefinitions: new FieldDefinitionArray ([
				new X3DFieldDefinition (X3DConstants .inputOutput, "metadata",         new SFNode ()),
				new X3DFieldDefinition (X3DConstants .inputOutput, "fillProperties",   new SFNode ()),
				new X3DFieldDefinition (X3DConstants .inputOutput, "lineProperties",   new SFNode ()),
				new X3DFieldDefinition (X3DConstants .inputOutput, "material",         new SFNode ()),
				new X3DFieldDefinition (X3DConstants .inputOutput, "texture",          new SFNode ()),
				new X3DFieldDefinition (X3DConstants .inputOutput, "textureTransform", new SFNode ()),
				new X3DFieldDefinition (X3DConstants .inputOutput, "shaders",          new MFNode ()),
			]),
			getTypeName: function ()
			{
				return "Appearance";
			},
			getComponentName: function ()
			{
				return "Shape";
			},
			getContainerField: function ()
			{
				return "appearance";
			},
			initialize: function ()
			{
				X3DAppearanceNode .prototype .initialize .call (this);

				this .material_         .addInterest (this, "set_material__");
				this .texture_          .addInterest (this, "set_texture__");
				this .textureTransform_ .addInterest (this, "set_textureTransform__");
				this .shaders_          .addInterest (this, "set_shaders__");

				this .set_material__ ();
				this .set_texture__ ();
				this .set_textureTransform__ ();
				this .set_shaders__ ();
				this .set_transparent__ ()
			},
			set_material__: function ()
			{
				if (this .materialNode)
					this .materialNode .transparent_ .removeInterest (this, "set_transparent__");

				this .materialNode = X3DCast (X3DConstants .X3DMaterialNode, this .material_);

				if (this .materialNode)
					this .materialNode .transparent_ .addInterest (this, "set_transparent__");
			},
			set_transparent__: function ()
			{
				this .transparent_ = (this .materialNode && this .materialNode .transparent_ .getValue ()) ||
				                     (this .textureNode && this .textureNode .transparent_ .getValue ());
			},
			set_texture__: function ()
			{
				if (this .textureNode)
					this .textureNode .transparent_ .removeInterest (this, "set_transparent__");

				this .textureNode = X3DCast (X3DConstants .X3DTextureNode, this .texture_);

				if (this .textureNode)
					this .textureNode .transparent_ .addInterest (this, "set_transparent__");
			},
			set_textureTransform__: function ()
			{
				this .textureTransformNode = X3DCast (X3DConstants .X3DTextureTransformNode, this .textureTransform_);
				
				if (this .textureTransformNode)
					return;

				this .textureTransformNode = this .getBrowser () .getDefaultTextureTransform ();
			},
			set_shaders__: function ()
			{
			},
			traverse: function ()
			{
				var browser = this .getBrowser ();

				browser .setMaterial (this .materialNode);
				browser .setTexture (this .textureNode);
				browser .setShader (browser .getDefaultShader ());

				this .textureTransformNode .traverse ();
			},
		});

		return Appearance;
	}
});



define ('cobweb/Browser/Shape/X3DShapeContext',[
	"cobweb/Components/Shape/Appearance",
],
function (Appearance)
{
	function X3DShapeContext ()
	{
		this .defaultAppearance = new Appearance (this);
	}

	X3DShapeContext .prototype =
	{
		initialize: function ()
		{
			this .defaultAppearance .setup ();
		},
		getDefaultAppearance: function ()
		{
			return this .defaultAppearance;
		},
		setMaterial: function (value)
		{
			this .material = value;
		},
		getMaterial: function ()
		{
			return this .material;
		},
	};

	return X3DShapeContext;
});


define ('cobweb/Parser/Parser',[
	"jquery",
	"cobweb/Fields",
],
function ($, Fields)
{
	with (Fields)
	{
		/*
		 *  Grammar
		 */

		// VRML lexical elements
		var Grammar =
		{
			// General
			Whitespaces: new RegExp ('^([\\x20\\n,\\t\\r]+)', 'y'),

			// Header

			// Keywords
			FALSE: new RegExp ('^FALSE', 'y'),
			TRUE:  new RegExp ('^TRUE', 'y'),
			false: new RegExp ('^false', 'y'),
			true:  new RegExp ('^true', 'y'),

			// Terminal symbols
			OpenBrace:    new RegExp ('^\\{', 'y'),
			CloseBrace:   new RegExp ('^\\}', 'y'),
			OpenBracket:  new RegExp ('^\\[', 'y'),
			CloseBracket: new RegExp ('^\\]', 'y'),
			Period:       new RegExp ('^\\.', 'y'),
			Colon:        new RegExp ('^\\:', 'y'),

			// Values
			int32:  new RegExp ('^((?:0[xX][\\da-fA-F]+)|(?:[+-]?\\d+))', 'y'),
			double: new RegExp ('^([+-]?(?:(?:(?:\\d*\\.\\d+)|(?:\\d+(?:\\.)?))(?:[eE][+-]?\\d+)?))', 'y'),
			string: new RegExp ('^"((?:[^\\\\"]|\\\\\\\\|\\\\\\")*)"', 'y'),
			
			Inf:         new RegExp ('^[+]?inf', 'y'),
			NegativeInf: new RegExp ('^-inf', 'y'),
			NaN:         new RegExp ('^[+-]?nan', 'y'),

			// Misc
			Break: new RegExp ('\\n', 'g'),
		};

		function parse (parser)
		{
			this .lastIndex = parser .lastIndex;

			parser .result = this .exec (parser .input);
	
			if (parser .result)
			{
				parser .lastIndex = this .lastIndex;
				return true;
			}

			return false;
		}

		for (var key in Grammar)
			Grammar [key] .parse = parse;

		Object .preventExtensions (Grammar);
		Object .freeze (Grammar);
		Object .seal (Grammar);

		/*
		 *  Parser
		 */

		function Parser (scene, input, xml)
		{
			this .scene = scene;
			this .xml   = xml;
			this .setInput (input);
		}

		Parser .prototype =
		{
			setInput: function (value)
			{
				this .input      = value;
				this .lineNumber = 1;
				this .lastIndex  = 0;
			},
			comments: function ()
			{
				while (this .comment ())
					;
			},
			comment: function ()
			{
				return this .whitespaces ();
			},
			whitespaces: function ()
			{
				if (Grammar .Whitespaces .parse (this))
				{
					if (!this .xml)
						this .lines (this .result [1]);
					return true;
				}

				return false;	
			},
			lines: function (string)
			{
				this .lineNumber += string .match (Grammar .Break);
			},
			double: function ()
			{
				this .comments ();
				
				if (Grammar .double .parse (this))
				{
					this .value = parseFloat (this .result [1]);
					return true;
				}

				if (Grammar .Inf .parse (this))
				{
					this .value = Number .POSITIVE_INFINITY;
					return true;
				}

				if (Grammar .NegativeInf .parse (this))
				{
					this .value = Number .NEGATIVE_INFINITY;
					return true;
				}

				if (Grammar .NaN .parse (this))
				{
					this .value = Number .NaN;
					return true;
				}

				return false;
			},
			int32: function ()
			{
				this .comments ();

				if (Grammar .int32 .parse (this))
				{
					this .value = parseInt (this .result [1]);
					return true;
				}

				return false;
			},
			string: function ()
			{
				this .comments ();

				if (Grammar .string .parse (this))
				{
					this .value = SFString .unescape (this .result [1]);

					if (!this .xml)
						this .lines (this .value);

					return true;
				}

				return false;
			},
			sfboolValue: function (field)
			{
				if (this .xml)
				{
					if (Grammar .true .parse (this))
					{
						field .set (true);
						return true;
					}

					if (Grammar .false .parse (this))
					{
						field .set (false);
						return true;
					}
				}
				else
				{
					if (Grammar .TRUE .parse (this))
					{
						field .set (true);
						return true;
					}

					if (Grammar .FALSE .parse (this))
					{
						field .set (false);
						return true;
					}
				}

				return false;
			},
			mfboolValue: function (field)
			{
				return false;
			},
			mfboolValues: function (field)
			{
				field .length = 0;

				var array = field .getValue ();
				var value = new SFBool ();

				while (this .sfboolValue (value))
				{
					value .addParent (field);
					array .push (value);
					value = new SFBool ();
				}
			},
			sfcolorValue: function (field)
			{
				if (this .double ())
				{
					var r = this .value;
					
					if (this .double ())
					{
						var g = this .value;
						
						if (this .double ())
						{
							var b = this .value;

							field .getValue () .set (r, g, b);
							return true;
						}
					}
				}

				return false;
			},
			mfcolorValue: function (field)
			{
				return false;
			},
			mfcolorValues: function (field)
			{
				field .length = 0;

				var array = field .getValue ();
				var value = new SFColor ();

				while (this .sfcolorValue (value))
				{
					value .addParent (field);
					array .push (value);
					value = new SFColor ();
				}
			},
			sfcolorrgbaValue: function (field)
			{
				if (this .double ())
				{
					var r = this .value;
					
					if (this .double ())
					{
						var g = this .value;
						
						if (this .double ())
						{
							var b = this .value;

							if (this .double ())
							{
								var a = this .value;

								field .getValue () .set (r, g, b, a);
								return true;
							}
						}
					}
				}

				return false;
			},
			mfcolorrgbaValue: function (field)
			{
				return false;
			},
			mfcolorrgbaValues: function (field)
			{
				field .length = 0;

				var array = field .getValue ();
				var value = new SFColorRGBA ();

				while (this .sfcolorrgbaValue (value))
				{
					value .addParent (field);
					array .push (value);
					value = new SFColorRGBA ();
				}
			},
			sfdoubleValue: function (field)
			{
				if (this .double ())
				{
					field .set (this .value);
					return true;
				}

				return false;
			},
			mfdoubleValue: function (field)
			{
				return false;
			},
			mfdoubleValues: function (field)
			{
				field .length = 0;

				var array = field .getValue ();
				var value = new SFDouble ();

				while (this .sfdoubleValue (value))
				{
					value .addParent (field);
					array .push (value);
					value = new SFDouble ();
				}
			},
			sffloatValue: function (field)
			{
				return this .sfdoubleValue (field);
			},
			mffloatValue: function (field)
			{
				return false;
			},
			mffloatValues: function (field)
			{
				field .length = 0;

				var array = field .getValue ();
				var value = new SFFloat ();

				while (this .sffloatValue (value))
				{
					value .addParent (field);
					array .push (value);
					value = new SFFloat ();
				}
			},
			sfimageValue: function (field)
			{
				if (this .int32 ())
				{
					var width = this .value;

					if (this .int32 ())
					{
						var height = this .value;
						
						if (this .int32 ())
						{
							var comp  = this .value;
							var array = [ ];
							var size  = width * height;

							for (var i = 0; i < size; ++ i)
							{
								if (this .int32 ())
								{
									array .push (this .value);
									continue;
								}

								return false;
							}

							field .getValue () .set (width, height, comp, array);
							return true;
						}
					}
				}

				return false;
			},
			mfimageValue: function (field)
			{
				return false;
			},
			mfimageValues: function (field)
			{
				field .length = 0;

				var array = field .getValue ();
				var value = new SFImage ();

				while (this .sfimageValue (value))
				{
					value .addParent (field);
					array .push (value);
					value = new SFImage ();
				}
			},
			sfint32Value: function (field)
			{
				if (this .int32 ())
				{
					field .set (this .value);
					return true;
				}

				return false;
			},
			mfint32Value: function (field)
			{
				return false;
			},
			mfint32Values: function (field)
			{
				field .length = 0;

				var array = field .getValue ();
				var value = new SFInt32 ();

				while (this .sfint32Value (value))
				{
					value .addParent (field);
					array .push (value);
					value = new SFInt32 ();
				}
			},			
			sfmatrix3dValue: function (field)
			{
				if (this .double ())
				{
					var m00 = this .value;
					
					if (this .double ())
					{
						var m01 = this .value;
						
						if (this .double ())
						{
							var m02 = this .value;

								if (this .double ())
								{
									var m10 = this .value;
									
									if (this .double ())
									{
										var m11 = this .value;
										
										if (this .double ())
										{
											var m12 = this .value;

											if (this .double ())
											{
												var m20 = this .value;
												
												if (this .double ())
												{
													var m21 = this .value;
													
													if (this .double ())
													{
														var m22 = this .value;

														field .getValue () .set (m00, m01, m02,
														                         m10, m11, m12,
														                         m20, m21, m22);
														return true;
												}
											}
										}
									}
								}
							}
						}
					}
				}								
								
				return false;
			},
			mfmatrix3dValue: function (field)
			{
				return false;
			},
			mfmatrix3dValues: function (field)
			{
				field .length = 0;

				var array = field .getValue ();
				var value = new SFMatrix3d ();

				while (this .sfmatrix3dValue (value))
				{
					value .addParent (field);
					array .push (value);
					value = new SFMatrix3d ();
				}
			},
			sfmatrix3fValue: function (field)
			{
				return this .sfmatrix3dValue (field);
			},
			mfmatrix3fValue: function (field)
			{
				return false;
			},
			mfmatrix3fValues: function (field)
			{
				field .length = 0;

				var array = field .getValue ();
				var value = new SFMatrix3f ();

				while (this .sfmatrix3fValue (value))
				{
					value .addParent (field);
					array .push (value);
					value = new SFMatrix3f ();
				}
			},
			sfmatrix4dValue: function (field)
			{
				if (this .double ())
				{
					var m00 = this .value;
					
					if (this .double ())
					{
						var m01 = this .value;
						
						if (this .double ())
						{
							var m02 = this .value;

							if (this .double ())
							{
								var m03 = this .value;
	
								if (this .double ())
								{
									var m10 = this .value;
									
									if (this .double ())
									{
										var m11 = this .value;
										
										if (this .double ())
										{
											var m12 = this .value;

											if (this .double ())
											{
												var m13 = this .value;

												if (this .double ())
												{
													var m20 = this .value;
													
													if (this .double ())
													{
														var m21 = this .value;
														
														if (this .double ())
														{
															var m22 = this .value;

															if (this .double ())
															{
																var m23 = this .value;

																if (this .double ())
																{
																	var m30 = this .value;
																	
																	if (this .double ())
																	{
																		var m31 = this .value;
																		
																		if (this .double ())
																		{
																			var m32 = this .value;

																			if (this .double ())
																			{
																				var m33 = this .value;

																				field .getValue () .set (m00, m01, m02, m03,
																				                         m10, m11, m12, m13,
																				                         m20, m21, m22, m23,
																				                         m30, m31, m32, m33);
																				return true;
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}								
								
				return false;
			},
			mfmatrix4dValue: function (field)
			{
				return false;
			},
			mfmatrix4dValues: function (field)
			{
				field .length = 0;

				var array = field .getValue ();
				var value = new SFMatrix4d ();

				while (this .sfmatrix4dValue (value))
				{
					value .addParent (field);
					array .push (value);
					value = new SFMatrix4d ();
				}
			},
			sfmatrix4fValue: function (field)
			{
				return this .sfmatrix4dValue (field);
			},
			mfmatrix4fValue: function (field)
			{
				return false;
			},
			mfmatrix4fValues: function (field)
			{
				field .length = 0;

				var array = field .getValue ();
				var value = new SFMatrix4f ();

				while (this .sfmatrix4fValue (value))
				{
					value .addParent (field);
					array .push (value);
					value = new SFMatrix4f ();
				}
			},
			sfrotationValue: function (field)
			{
				if (this .double ())
				{
					var x = this .value;
					
					if (this .double ())
					{
						var y = this .value;
						
						if (this .double ())
						{
							var z = this .value;

							if (this .double ())
							{
								var angle = this .value;

								field .getValue () .set (x, y, z, angle);
								return true;
							}
						}
					}
				}

				return false;
			},
			mfrotationValue: function (field)
			{
				return false;
			},
			mfrotationValues: function (field)
			{
				field .length = 0;

				var array = field .getValue ();
				var value = new SFRotation ();

				while (this .sfrotationValue (value))
				{
					value .addParent (field);
					array .push (value);
					value = new SFRotation ();
				}
			},
			sfstringValue: function (field)
			{
				if (this .string ())
				{
					field .set (this .value);
					return true;
				}

				return false;
			},
			mfstringValue: function (field)
			{
				return false;
			},
			mfstringValues: function (field)
			{
				field .length = 0;

				var array = field .getValue ();
				var value = new SFString ();

				while (this .sfstringValue (value))
				{
					value .addParent (field);
					array .push (value);
					value = new SFString ();
				}
			},
			sftimeValue: function (field)
			{
				return this .sfdoubleValue (field);
			},
			mftimeValue: function (field)
			{
				return false;
			},
			mftimeValues: function (field)
			{
				field .length = 0;

				var array = field .getValue ();
				var value = new SFTime ();

				while (this .sftimeValue (value))
				{
					value .addParent (field);
					array .push (value);
					value = new SFTime ();
				}
			},
			sfvec2dValue: function (field)
			{
				if (this .double ())
				{
					var x = this .value;
					
					if (this .double ())
					{
						var y = this .value;
						
						field .getValue () .set (x, y);
						return true;
					}
				}

				return false;
			},
			mfvec2dValue: function (field)
			{
				return false;
			},
			mfvec2dValues: function (field)
			{
				field .length = 0;

				var array = field .getValue ();
				var value = new SFVec2d ();

				while (this .sfvec2dValue (value))
				{
					value .addParent (field);
					array .push (value);
					value = new SFVec2d ();
				}
			},
			sfvec2fValue: function (field)
			{
				return this .sfvec2dValue (field);
			},
			mfvec2fValue: function (field)
			{
				return false;
			},
			mfvec2fValues: function (field)
			{
				field .length = 0;

				var array = field .getValue ();
				var value = new SFVec2f ();

				while (this .sfvec2fValue (value))
				{
					value .addParent (field);
					array .push (value);
					value = new SFVec2f ();
				}
			},
			sfvec3dValue: function (field)
			{
				if (this .double ())
				{
					var x = this .value;
					
					if (this .double ())
					{
						var y = this .value;
						
						if (this .double ())
						{
							var z = this .value;

							field .getValue () .set (x, y, z);
							return true;
						}
					}
				}

				return false;
			},
			mfvec3dValue: function (field)
			{
				return false;
			},
			mfvec3dValues: function (field)
			{
				field .length = 0;

				var array = field .getValue ();
				var value = new SFVec3d ();

				while (this .sfvec3dValue (value))
				{
					value .addParent (field);
					array .push (value);
					value = new SFVec3d ();
				}
			},
			sfvec3fValue: function (field)
			{
				return this .sfvec3dValue (field);
			},
			mfvec3fValue: function (field)
			{
				return false;
			},
			mfvec3fValues: function (field)
			{
				field .length = 0;

				var array = field .getValue ();
				var value = new SFVec3f ();

				while (this .sfvec3fValue (value))
				{
					value .addParent (field);
					array .push (value);
					value = new SFVec3f ();
				}
			},
			sfvec4dValue: function (field)
			{
				if (this .double ())
				{
					var x = this .value;
					
					if (this .double ())
					{
						var y = this .value;
						
						if (this .double ())
						{
							var z = this .value;

							if (this .double ())
							{
								var w = this .value;

								field .getValue () .set (x, y, z);
								return true;
							}
						}
					}
				}

				return false;
			},
			mfvec4dValue: function (field)
			{
				return false;
			},
			mfvec4dValues: function (field)
			{
				field .length = 0;

				var array = field .getValue ();
				var value = new SFVec4d ();

				while (this .sfvec4dValue (value))
				{
					value .addParent (field);
					array .push (value);
					value = new SFVec4d ();
				}
			},
			sfvec4fValue: function (field)
			{
				return this .sfvec4dValue (field);
			},
			mfvec4fValue: function (field)
			{
				field .length = 0;

				if (this .sfvec4fValue (this .SFVec4f))
				{
					field .push (this .SFVec4f);
					return true;
				}			

				if (Grammar .OpenBracket .parse (this))
				{
					this .sfvec4fValues (field);

					this .comments ();

					if (Grammar .CloseBracket .parse (this))
						return true;

					throw Error ("Expected ']'.", this .scene .getWorldURL (), this .lineNumber);
				}

				return false;
			},
			mfvec4fValues: function (field)
			{
				field .length = 0;

				var array = field .getValue ();
				var value = new SFVec4f ();

				while (this .sfvec4Value (value))
				{
					value .addParent (field);
					array .push (value);
					value = new SFVec4f ();
				}
			},
		};

		return Parser;
	}
});


define ('cobweb/Prototype/ExternProtoDeclarationArray',[
	"jquery",
],
function ($)
{
	var handler =
	{
		get: function (target, key)
		{
			if (key in target)
				return target [key];

			if (parseInt (key) == key)
				return target .array [key];

			return target .index [key];
		},
		set: function (target, key, value)
		{
			var X3DExternProtoDeclaration = require ("cobweb/Prototype/X3DExternProtoDeclaration");

			if (value instanceof X3DExternProtoDeclaration)
			{
				target .array [key] = value;
				target .index       = { };

				for (var i = 0; i < target .array .length; ++ i)
				{
					var proto = target .array [i];
					target .index [proto .getName ()] = proto;
				}

				return true;
			}

			return false;
		},
	};

	function ExternProtoDeclarationArray ()
	{
		this .array = [ ];
		this .index = { };

		return new Proxy (this, handler);
	}

	$.extend (ExternProtoDeclarationArray .prototype,
	{
		constructor: ExternProtoDeclarationArray,
		push: function (value)
		{
			var X3DExternProtoDeclaration = require ("cobweb/Prototype/X3DExternProtoDeclaration");

			if (value instanceof X3DExternProtoDeclaration)
			{
				this .index [value .getName ()] = value;
				return this .array .push (value);
			}

			return this .array .length;
		},
	});

	return ExternProtoDeclarationArray;
});


define ('cobweb/Prototype/ProtoDeclarationArray',[
	"jquery",
],
function ($)
{
	var handler =
	{
		get: function (target, key)
		{
			if (key in target)
				return target [key];

			if (parseInt (key) == key)
				return target .array [key];

			return target .index [key];
		},
		set: function (target, key, value)
		{
			var X3DProtoDeclaration = require ("cobweb/Prototype/X3DProtoDeclaration");
		
			if (value instanceof X3DProtoDeclaration)
			{
				target .array [key] = value;
				target .index       = { };

				for (var i = 0; i < target .array .length; ++ i)
				{
					var proto = target .array [i];
					target .index [proto .getName ()] = proto;
				}

				return true;
			}

			return false;
		},
	};

	function ProtoDeclarationArray ()
	{
		this .array = [ ];
		this .index = { };

		return new Proxy (this, handler);
	}

	$.extend (ProtoDeclarationArray .prototype,
	{
		constructor: ProtoDeclarationArray,
		push: function (value)
		{
			var X3DProtoDeclaration = require ("cobweb/Prototype/X3DProtoDeclaration");

			if (value instanceof X3DProtoDeclaration)
			{
				this .index [value .getName ()] = value;
				return this .array .push (value);
			}

			return this .array .length;
		},
	});

	return ProtoDeclarationArray;
});


define ('cobweb/Routing/RouteArray',[
	"jquery",
],
function ($)
{
	var handler =
	{
		get: function (target, key)
		{
			if (key in target)
				return target [key];

			return target .array [key];
		},
		set: function (target, key, value)
		{
			return false;
		},
	};

	function RouteArray ()
	{
		this .array = [ ];
		
		return new Proxy (this, handler);
	}

	$.extend (RouteArray .prototype,
	{
		constructor: RouteArray,
		getValue: function ()
		{
			return this .array;
		},
	});

	return RouteArray;
});


define ('cobweb/Routing/X3DRoute',[
	"jquery",
	"cobweb/Basic/X3DBaseNode"
],
function ($, X3DBaseNode)
{
	function X3DRoute (/* executionContext, */ sourceNode, sourceField, destinationNode, destinationField)
	{
		//X3DBaseNode .call (this, executionContext .getBrowser (), executionContext);
		
		this .sourceNode_       = sourceNode;
		this .sourceField_      = sourceField;
		this .destinationNode_  = destinationNode;
		this .destinationField_ = destinationField;

		//if (! (this .getExecutionContext () instanceof X3DProtoDeclaration))
			sourceField .addFieldInterest (destinationField);
	}

	X3DRoute .prototype =
	{
		toString: function ()
		{
			return Object .prototype .toString (this);
		},
	};

	Object .defineProperty (X3DRoute .prototype, "sourceNode",
	{
		get: function ()
		{
			return this .sourceNode_;
		},
		enumerable: true,
		configurable: false
	});

	Object .defineProperty (X3DRoute .prototype, "sourceField",
	{
		get: function ()
		{
			return this .sourceField_ .getName ();
		},
		enumerable: true,
		configurable: false
	});

	Object .defineProperty (X3DRoute .prototype, "destinationNode",
	{
		get: function ()
		{
			return this .destinationNode_;
		},
		enumerable: true,
		configurable: false
	});

	Object .defineProperty (X3DRoute .prototype, "destinationField",
	{
		get: function ()
		{
			return this .destinationField_ .getName ();
		},
		enumerable: true,
		configurable: false
	});

	return X3DRoute;
});

define ('cobweb/Execution/X3DExecutionContext',[
	"jquery",
	"cobweb/Fields",
	"cobweb/Basic/X3DFieldDefinition",
	"cobweb/Basic/FieldDefinitionArray",
	"cobweb/Basic/X3DBaseNode",
	"cobweb/Prototype/ExternProtoDeclarationArray",
	"cobweb/Prototype/ProtoDeclarationArray",
	"cobweb/Routing/RouteArray",
	"cobweb/Routing/X3DRoute",
	"cobweb/Bits/X3DCast",
	"cobweb/Bits/X3DConstants",
	"standard/Networking/URI",
],
function ($,
          Fields,
          X3DFieldDefinition,
          FieldDefinitionArray,
          X3DBaseNode,
          ExternProtoDeclarationArray,
          ProtoDeclarationArray,
          RouteArray,
          X3DRoute,
          X3DCast,
          X3DConstants,
          URI)
{
	with (Fields)
	{
		function X3DExecutionContext (browser, executionContext)
		{
			X3DBaseNode .call (this, browser, executionContext);

			this .addChildren ("rootNodes", new MFNode ());

			this .url                = new URI (window .location);
			this .uninitializedNodes = [ ];
			this .namedNodes         = { };
			this .protos             = new ProtoDeclarationArray ();
			this .externprotos       = new ExternProtoDeclarationArray ();
			this .routes             = new RouteArray ();
			this .routeIndex         = { };

			this .endUpdate ();
		}

		X3DExecutionContext .prototype = $.extend (Object .create (X3DBaseNode .prototype),
		{
			constructor: X3DExecutionContext,
			setup: function ()
			{
				X3DBaseNode .prototype .setup .call (this);

				for (var i = 0; i < this .uninitializedNodes .length; ++ i)
					this .uninitializedNodes [i] .setup ();

				this .uninitializedNodes .length = 0;
			},
			isRootContext: function ()
			{
				return false;
			},
			setWorldURL: function (url)
			{
				this .url = url;
			},
			getWorldURL: function ()
			{
				return this .url;
			},
			createNode: function (typeName, xml)
			{
				var node = new (this .getBrowser () .supportedNodes .xml [typeName]) (this);

				if (xml)
					return node;
				
				node .setup ();
				return new SFNode (node);
			},
			createProto: function (name, setup)
			{
				var executionContext = this;

				do
				{
					var proto = executionContext .protos [name];
	
					if (proto)
						return proto .createInstance (setup);

					var externproto = executionContext .externprotos [name];

					if (externproto)
						return externproto .createInstance (setup);

					executionContext = executionContext .getExecutionContext ();
				}
				while (! executionContext .isRootContext ());

				throw new Error ("Unknown proto or externproto type '" + name + "'.");
			},
			addUninitializedNode: function (node)
			{
				this .uninitializedNodes .push (node);
			},
			addNamedNode: function (name, node)
			{
				if (this .namedNodes [name] !== undefined)
					throw Error ("Couldn't add named node: node name '" + name + "' is already in use.");

				this .updateNamedNode (name, node);
			},
			updateNamedNode: function (name, node)
			{
				name = String (name);
				
				if (node instanceof X3DBaseNode)
					node = new SFNode (node);				

				if (! (node instanceof SFNode))
					throw Error ("Couldn't update named node: node must be of type SFNode.");

				if (! node .getValue ())
					throw Error ("Couldn't update named node: node IS NULL.");

				if (node .getValue () .getExecutionContext () !== this)
					throw Error ("Couldn't update named node: the node does not belong to this execution context.");

				if (name .length === 0)
					throw Error ("Couldn't update named node: node name is empty.");

				// Remove named node.

				this .removeNamedNode (node .getValue () .getName ());
				this .removeNamedNode (name);

				// Update named node.

				node .getValue () .setName (name);

				this .namedNodes [name] = new SFNode (node .getValue ());
			},
			removeNamedNode: function (name)
			{
				delete this .namedNodes [name];
			},
			getNamedNode: function (name)
			{
				var node = this .namedNodes [name];

				if (node !== undefined)
					return node;

				throw Error ("Named node '" + name + "' not found.");
			},
			setRootNodes: function () { },
			getRootNodes: function ()
			{
				return this .rootNodes_;
			},
			addRoute: function (sourceNode, fromField, destinationNode, toField)
			{
				try
				{
					if (! sourceNode .getValue ())
						throw new Error ("Bad ROUTE specification: sourceNode is NULL.");

					if (! destinationNode .getValue ())
						throw new Error ("Bad ROUTE specification: destinationNode is NULL.");

					var
						sourceField      = sourceNode .getValue () .getField (fromField),
						destinationField = destinationNode .getValue () .getField (toField);

					if (! sourceField .isOutput ())
						throw new Error ("Bad ROUTE specification: Field named '" + sourceField .getName () + "' in node named '" + sourceNode .getNodeName () + "' of type " + sourceNode .getNodeTypeName () + " is not an output field.");

					if (! destinationField .isInput ())
						throw new Error ("Bad ROUTE specification: Field named '" + destinationField .getName () + "' in node named '" + destinationNode .getName () + "' of type " + destinationNode .getNodeTypeName () + " is not an input field.");

					var
						id    = sourceField .getId () + "." + destinationField .getId (),
						route = new X3DRoute (sourceNode, sourceField, destinationNode, destinationField);

					this .routes .getValue () .push (route);
					this .routeIndex [id] = route;

					return route;
				}
				catch (error)
				{
					throw new Error ("Bad ROUTE specification: " + error .message); 
				}
			},
			deleteRoute: function (route)
			{
				try
				{
					var
						sourceField      = route .sourceField_,
						destinationField = route .destinationField_;
						id               = sourceField .getId () + "." + destinationField .getId (),
						index            = this .routes .getValue () .indexOf (route);

					if (index !== -1)
						this .routes .getValue () .splice (index, 1);

					delete this .routeIndex [id];
				}
				catch (error)
				{
					console .log (error);
				}
			},
			getRoute: function (sourceNode, fromField, destinationNode, toField)
			{
				if (! sourceNode .getValue ())
					throw new Error ("Bad ROUTE specification: sourceNode is NULL.");

				if (! destinationNode .getValue ())
					throw new Error ("Bad ROUTE specification: destinationNode is NULL.");

				var
					sourceField      = sourceNode .getValue () .getField (fromField),
					destinationField = destinationNode .getValue () .getField (toField),
					id               = sourceField .getId () + "." + destinationField .getId ();

				return this .routeIndex [id];
			},
			changeViewpoint: function (name)
			{
				try
				{
					var namedNode = this .getNamedNode (name);
					var viewpoint = X3DCast (X3DConstants .X3DViewpointNode, namedNode);

					if (! viewpoint)
						throw Error ("Node named '" + name + "' is not a viewpoint node.");

					if (viewpoint .isBound_ .getValue ())
						viewpoint .transitionStart (null, viewpoint);

					else
						viewpoint .set_bind_ = true;
				}
				catch (error)
				{
					if (! this .isRootContext ())
						this .getExecutionContext () .changeViewpoint (name);
					else
						throw error;
				}
			},
		});

		Object .defineProperty (X3DExecutionContext .prototype, "worldURL",
		{
			get: function () { return this .url .location; },
			enumerable: true,
			configurable: false
		});

		Object .defineProperty (X3DExecutionContext .prototype, "rootNodes",
		{
			get: function () { return this .getRootNodes (); },
			set: function (value) { this .setRootNodes (value); },
			enumerable: true,
			configurable: false
		});

		return X3DExecutionContext;
	}
});


define ('cobweb/Components/Core/X3DPrototypeInstance',[
	"jquery",
	"cobweb/Basic/FieldDefinitionArray",
	"cobweb/Fields",
	"cobweb/Components/Core/X3DNode",
	"cobweb/Execution/X3DExecutionContext",
	"cobweb/Bits/X3DConstants",
],
function ($,
          FieldDefinitionArray,
          Fields,
          X3DNode,
          X3DExecutionContext,
          X3DConstants)
{
   with (Fields)
	{
		function X3DPrototypeInstance (executionContext, protoNode)
		{
			this .protoNode        = protoNode;
			this .fieldDefinitions = new FieldDefinitionArray (protoNode .getFieldDefinitions () .getValue () .slice (0));

			this .addChildren ("isLiveX3DPrototypeInstance", new SFBool (true));

			X3DNode             .call (this, executionContext .getBrowser (), executionContext);
			X3DExecutionContext .call (this, executionContext .getBrowser (), executionContext);

			this .addType (X3DConstants .X3DPrototypeInstance);

			if (protoNode .isExternProto ())
				protoNode .requestAsyncLoad (this .construct .bind (this));

			else
				this .construct (protoNode);
		}

		X3DPrototypeInstance .prototype = $.extend (Object .create (X3DExecutionContext .prototype),
			X3DNode .prototype,
		{
			constructor: X3DPrototypeInstance,
			create: function (executionContext)
			{
				return new X3DPrototypeInstance (executionContext, this .protoNode);
			},
			getTypeName: function ()
			{
				return this .protoNode .getName ();
			},
			getComponentName: function ()
			{
				return "Core";
			},
			getContainerField: function ()
			{
				return "children";
			},
			construct: function (proto)
			{
				this .proto = proto;

				if (proto)
				{
					if (this .protoNode .isExternProto ())
					{
						var fieldDefinitions = proto .getFieldDefinitions ();

						for (var i = 0, length = fieldDefinitions .length; i < length; ++ i)
						{
							var
								fieldDefinition = fieldDefinitions [i],
								protoField      = proto .getField (fieldDefinition .name);

							try
							{
								var field = this .getField (fieldDefinition .name);

								// Return if something is wrong.
								if (field .getAccessType () !== protoField .getAccessType ())
									return;

								// Return if something is wrong.
								if (field .getType () !== protoField .getType ())
									return;

								if (! (field .getAccessType () & X3DConstants .initializeOnly))
									continue;

								if (field .getFieldValue () === true)
									continue;

								field .set (protoField .getValue ());
							}
							catch (error)
							{
								// Definition exists in proto but does not has exist in extern proto.
								this .addField (fieldDefinition);
							}
						}
					}

					// Assign metadata.

					this .setWorldURL (proto .getWorldURL ());
					this .metadata_ = proto .metadata_;

					// Assign extern protos.
					
					for (var i = 0, length = proto .externprotos .length; i < length; ++ i)
						this .externprotos .push (proto .externprotos [i]);

					// Assign protos.

					for (var i = 0, length = proto .protos .length; i < length; ++ i)
						this .protos .push (proto .protos [i]);

					// Assign root nodes.

					var
						rootNodes1 = proto .getRootNodes () .getValue (),
						rootNodes2 = this  .getRootNodes () .getValue ();

					for (var i = 0, length = rootNodes1 .length; i < length; ++ i)
					{
						var value = rootNodes1 [i] .copy (this);
						value .addParent (this .getRootNodes ());
						rootNodes2 .push (value);
					}
				}
			},
			setup: function ()
			{
				X3DNode             .prototype .setup .call (this);
				X3DExecutionContext .prototype .setup .call (this);
			},
			initialize: function ()
			{
				if (this .proto)
				{
					// Copy imported nodes.

					// ...

					// Copy routes.

					var routes = this .proto .routes;

					for (var i = 0, length = routes .length; i < length; ++ i)
					{
						try
						{
							var route = routes [i];

							// new Route ... addUninitializedNode ...
							this .addRoute (this .getNamedNode (route .sourceNode .getNodeName ()),
							                route .sourceField,
							                this .getNamedNode (route .destinationNode .getNodeName ()),
							                route .destinationField);
						}
						catch (error)
						{
							console .log (error .message);
						}
					}
				}
				
				this .getExecutionContext () .isLive () .addInterest (this, "set_live__");
				this .isLive () .addInterest (this, "set_live__");

				this .set_live__ ();

				// Now initialize bases.

				X3DExecutionContext .prototype .initialize .call (this);
				X3DNode             .prototype .initialize .call (this);
			},
			getExtendedEventHandling: function ()
			{
				return false;
			},
			isLive: function ()
			{
			   return this .isLiveX3DPrototypeInstance_;
			},
			getInnerNode: function ()
			{
				var rootNodes = this .getRootNodes ();
				
				if (rootNodes .length)
				{
					var rootNode = rootNodes [0];
					
					if (rootNode)
						return rootNode .getValue () .getInnerNode ();
				}

				throw new Error ("Root node not available.");
			},
			set_live__: function ()
			{
			   var live = this .getExecutionContext () .isLive () .getValue () && X3DNode .prototype .isLive .call (this) .getValue ();

			   if (live !== this .isLive () .getValue ())
			      this .isLive () .setValue (live);
			},
		});

		return X3DPrototypeInstance;
	}
});



define ('cobweb/Prototype/X3DProtoDeclarationNode',[
	"jquery",
	"cobweb/Fields",
	"cobweb/Components/Core/X3DNode",
	"cobweb/Components/Core/X3DPrototypeInstance",
	"cobweb/Bits/X3DConstants",
],
function ($,
          Fields,
          X3DNode,
          X3DPrototypeInstance,
          X3DConstants)
{
	function X3DProtoDeclarationNode (browser, executionContext)
	{
		X3DNode .call (this, browser, executionContext);

		this .addType (X3DConstants .X3DProtoDeclarationNode);
	}

	X3DProtoDeclarationNode .prototype = $.extend (Object .create (X3DNode .prototype),
	{
		constructor: X3DProtoDeclarationNode,
		hasUserDefinedFields: function ()
		{
			return true;
		},
		createInstance: function (setup)
		{
			var instance = new X3DPrototypeInstance (this .getExecutionContext (), this);

			if (setup === undefined)
				instance .setup ();

			return instance;
		},
	});

	return X3DProtoDeclarationNode;
});


define ('cobweb/Prototype/X3DExternProtoDeclaration',[
	"jquery",
	"cobweb/Fields",
	"cobweb/Basic/X3DFieldDefinition",
	"cobweb/Basic/FieldDefinitionArray",
	"cobweb/Components/Networking/X3DUrlObject",
	"cobweb/Prototype/X3DProtoDeclarationNode",
	"cobweb/Bits/X3DConstants",
],
function ($,
          Fields,
          X3DFieldDefinition,
          FieldDefinitionArray,
          X3DUrlObject,
          X3DProtoDeclarationNode, 
          X3DConstants)
{
	with (Fields)
	{
		var fieldDefinitions = [
			new X3DFieldDefinition (X3DConstants .inputOutput, "metadata", new SFNode ()),
		];

		function X3DExternProtoDeclaration (executionContext)
		{
			this .fieldDefinitions = new FieldDefinitionArray (fieldDefinitions .slice (0));

			X3DProtoDeclarationNode .call (this, executionContext .getBrowser (), executionContext);
			X3DUrlObject            .call (this, executionContext .getBrowser (), executionContext);

			this .addType (X3DConstants .X3DExternProtoDeclaration);

			this .addChildren ("url", new MFString ());

			this .callbacks = [ ];
		}

		X3DExternProtoDeclaration .prototype = $.extend (Object .create (X3DProtoDeclarationNode .prototype),
			X3DUrlObject .prototype,
		{
			constructor: X3DExternProtoDeclaration,
			getTypeName: function ()
			{
				return "EXTERNPROTO";
			},
			/*
			getComponentName: function ()
			{
				return "Cobweb";
			},
			getContainerField: function ()
			{
				return "externprotos";
			},
			*/
			initialize: function ()
			{
				X3DProtoDeclarationNode .prototype .initialize .call (this);
				X3DUrlObject            .prototype .initialize .call (this);
			},
			isExternProto: function ()
			{
				return true;
			},
			requestAsyncLoad: function (callback)
			{
				if (this .checkLoadState () === X3DConstants .COMPLETE_STATE || this .checkLoadState () === X3DConstants .FAILED_STATE)
				{
					callback (this .getProto ());
					return;
				}

				this .callbacks .push (callback);

				if (! this .inlineNode)
				{
					var Inline = require ("cobweb/Components/Networking/Inline");

					this .inlineNode       = new Inline (this .getExecutionContext ());
					this .inlineNode .url_ = this .url_;
					this .inlineNode .loadState_ .addInterest (this, "set_loadState__");
					this .inlineNode .setup ();
					
					this .getExecutionContext () .getScene () .addLoadCount (this);
				}
			},
			set_loadState__: function (field)
			{
				var loadState = field .getValue ();

				switch (loadState)
				{
					case X3DConstants .NOT_STARTED_STATE:
					case X3DConstants .IN_PROGRESS_STATE:
						this .setLoadState (loadState);
						break;
					case X3DConstants .COMPLETE_STATE:
					case X3DConstants .FAILED_STATE:
					{
						this .setLoadState (loadState);
						this .getExecutionContext () .getScene () .removeLoadCount (this);

						var proto = this .getProto ();

						for (var i = 0; i < this .callbacks .length; ++ i)
							this .callbacks [i] (proto);

						this .callbacks .length = 0;
						break;
					}
				}
			},
			getProto: function ()
			{
				var
					name  = this .inlineNode .getScene () .getWorldURL () .fragment || this .getName (),
					proto = this .inlineNode .getScene () .protos [name];

				return proto || null;
			},
		});

		return X3DExternProtoDeclaration;
	}
});



define ('cobweb/Prototype/X3DProtoDeclaration',[
	"jquery",
	"cobweb/Fields",
	"cobweb/Basic/X3DFieldDefinition",
	"cobweb/Basic/FieldDefinitionArray",
	"cobweb/Execution/X3DExecutionContext",
	"cobweb/Prototype/X3DProtoDeclarationNode",
	"cobweb/Bits/X3DConstants",
],
function ($,
          Fields,
          X3DFieldDefinition,
          FieldDefinitionArray,
          X3DExecutionContext,
          X3DProtoDeclarationNode, 
          X3DConstants)
{
	with (Fields)
	{
		var fieldDefinitions = [
			new X3DFieldDefinition (X3DConstants .inputOutput, "metadata", new SFNode ()),
		];

		function X3DProtoDeclaration (executionContext)
		{
			this .fieldDefinitions = new FieldDefinitionArray (fieldDefinitions .slice (0));

			X3DProtoDeclarationNode .call (this, executionContext .getBrowser (), executionContext);
			X3DExecutionContext     .call (this, executionContext .getBrowser (), executionContext);

			this .addType (X3DConstants .X3DProtoDeclaration);
		}

		X3DProtoDeclaration .prototype = $.extend (Object .create (X3DExecutionContext .prototype),
			X3DProtoDeclarationNode .prototype,
		{
			constructor: X3DProtoDeclaration,
			getTypeName: function ()
			{
				return "PROTO";
			},
			/*
			getComponentName: function ()
			{
				return "Cobweb";
			},
			getContainerField: function ()
			{
				return "protos";
			},
			*/
			isExternProto: function ()
			{
				return false;
			},
			getWorldURL: function ()
			{
				return this .getExecutionContext () .getWorldURL ();
			},
		});

		return X3DProtoDeclaration;
	}
});



define ('cobweb/Parser/XMLParser',[
	"jquery",
	"cobweb/Basic/X3DField",
	"cobweb/Basic/X3DArrayField",
	"cobweb/Fields",
	"cobweb/Parser/Parser",
	"cobweb/Prototype/X3DExternProtoDeclaration",
	"cobweb/Prototype/X3DProtoDeclaration",
	"cobweb/Bits/X3DConstants",
],
function ($,
          X3DField,
          X3DArrayField,
          Fields,
          Parser,
          X3DExternProtoDeclaration,
          X3DProtoDeclaration,
          X3DConstants)
{
	with (Fields)
	{
		var AccessType =
		{
			initializeOnly: X3DConstants .initializeOnly,
			inputOnly:      X3DConstants .inputOnly,
			outputOnly:     X3DConstants .outputOnly,
			inputOutput:    X3DConstants .inputOutput,
		};
	
		function XMLParser (scene, xml)
		{
			this .xml               = xml;
			this .executionContexts = [ scene ];
			this .protoDeclarations = [ ];
			this .parents           = [ ];
			this .parser            = new Parser (this .scene, "", true);
			this .url               = new MFString ();
		}

		XMLParser .prototype =
		{
			constructor: XMLParser,
			getExecutionContext: function ()
			{
				return this .executionContexts [this .executionContexts .length - 1];
			},
			pushExecutionContext: function (executionContext)
			{
				return this .executionContexts .push (executionContext);
			},
			popExecutionContext: function ()
			{
				this .executionContexts .pop ();
			},
			getParent: function ()
			{
				return this .parents [this .parents .length - 1];
			},
			pushParent: function (parent)
			{
				return this .parents .push (parent);
			},
			popParent: function ()
			{
				this .parents .pop ();
			},
			parseIntoScene: function ()
			{
				var t0 = performance .now ();

				switch (this .xml .nodeName)
				{
					case "#document":
					{
						var x3d = $(this .xml) .children ("X3D");
	
						if (x3d .length)
						{
							for (var i = 0; i < x3d .length; ++ i)
								this .x3d (x3d [i]);
						}
						else
							this .scene (this .xml);

						break;
					}
					case "X3D":
						this .x3d (this .xml);
						break;
					case "Scene":
						this .scene (this .xml);
						break;
					default:
						this .statement (this .xml);
						break;
				}

				//console .log ("'" + this .getExecutionContext () .getWorldURL () .toString () + "' parsed in " + (performance .now () - t0) .toFixed (2) + " ms.");
			},
			x3d: function (x3d)
			{
				var childNodes = x3d .childNodes;
		
				for (var i = 0; i < childNodes .length; ++ i)
				{
					var element = childNodes [i];
				
					switch (element .nodeName)
					{
						case "Scene":
							this .scene (element);
							continue;
					}
				}
			},
			scene: function (element)
			{
				this .statements (element .childNodes);
			},
			statements: function (childNodes)
			{
				for (var i = 0; i < childNodes .length; ++ i)
					this .statement (childNodes [i]);
			},
			statement: function (child)
			{
				switch (child .nodeName)
				{
					case "#comment":
					case "#text":
					case "#cdata-section":
						return;
					
					case "ExternProtoDeclare":
						this .externProtoDeclare (child);
						return;

					case "ProtoDeclare":
						this .protoDeclare (child);
						return;

					case "ProtoInstance":
						this .protoInstance (child);
						return;

					case "ROUTE":
						this .route (child);
						return;

					default:
						this .node (child);
						return;
				}
			},
			node: function (element)
			{
				try
				{
					if (this .USE (element))
						return;
				
					var node = this .getExecutionContext () .createNode (element .nodeName, true);

					this .DEF (element, node);
					this .addNode (element, node);
					this .pushParent (node);
					this .attributes (element .attributes, node);
					this .children (element .childNodes, false);
					this .getExecutionContext () .addUninitializedNode (node);
					this .popParent ();
				}
				catch (error)
				{
					//if (element .nodeName === "VisibilitySensor")
					//	console .warn (error);

					console .warn ("XML Parser Error: Unknown node type '" + element .nodeName + "'.");
				}
			},
			protoInstance: function (element)
			{
				try
				{
					if (this .USE (element))
						return;

					var name = element .getAttribute ("name");

					if (this .id (name))
					{
						var node = this .getExecutionContext () .createProto (name, false);

						this .DEF (element, node);
						this .addNode (element, node);
						this .pushParent (node);
						this .children (element .childNodes, true);
						this .getExecutionContext () .addUninitializedNode (node);
						this .popParent ();
					}
				}
				catch (error)
				{
					console .warn ("XML Parser Error: ", + error .message);
					//console .warn (error);
				}
			},
			children: function (childNodes, protoInstance)
			{
				for (var i = 0; i < childNodes .length; ++ i)
					this .child (childNodes [i], protoInstance);
			},
			child: function (child, protoInstance)
			{
				switch (child .nodeName)
				{
					case "#comment":
					case "#text":
						return;

					case "#cdata-section":
						this .cdata (child);
						return;
					
					case "IS":
						this .IS (child);
						return;

					case "field":
						this .field (child);
						return;

					case "fieldValue":
						if (protoInstance)
							this .fieldValue (child);
						return;
							
					case "ExternProtoDeclare":
						this .externProtoDeclare (child);
						return;

					case "ProtoDeclare":
						this .protoDeclare (child);
						return;

					case "ProtoInstance":
						this .protoInstance (child);
						return;

					case "ROUTE":
						this .route (child);
						return;

					default:
						this .node (child);
						return;
				}
			},
			DEF: function (element, node)
			{
				try
				{
					var name = element .getAttribute ("DEF");

					if (name)
						this .getExecutionContext () .updateNamedNode (name, node);
				}
				catch (error)
				{
					console .warn ("Invalid DEF name: " + error .message);
				}
			},
			USE: function (element)
			{
				try
				{
					var name = element .getAttribute ("USE");

					if (this .id (name))
					{
						var node = this .getExecutionContext () .getNamedNode (name);

						this .addNode (element, node .getValue ());
						return true;
					}
				}
				catch (error)
				{
					console .warn ("Invalid USE name: " + error .message);
				}

				return false;
			},
			addNode: function (element, node)
			{
				if (this .parents .length)
				{
					var parent = this .getParent ();

					if (parent instanceof X3DField)
					{
						if (parent .getFieldValue () === false)
							parent .setFieldValue (true);

						if (parent .getType () === X3DConstants .SFNode)
							parent .set (node);

						if (parent .getType () === X3DConstants .MFNode)
							parent .push (node);
					}
					else
					{
						// parent is a node.

						try
						{
							var containerField = element .getAttribute ("containerField");

							if (containerField)
							{
								var field = parent .getField (containerField);

								if (field .getType () === X3DConstants .SFNode)
									return field .set (node);

								if (field .getType () === X3DConstants .MFNode)
									return field .push (node);
							}
						}
						catch (error)
						{
							//console .warn (error .message);
						}

						try
						{
							// containerField attribute is not set or not found in node.

							var field = parent .getField (node .getContainerField ());

							if (field .getType () === X3DConstants .SFNode)
								return field .set (node);

							if (field .getType () === X3DConstants .MFNode)
								return field .push (node);
						}
						catch (error)
						{
							//console .warn (error .message);
						}
					}
				}
				else
					this .getExecutionContext () .rootNodes .push (node);
			},
			attributes: function (attributes, node)
			{
				for (var i = 0; i < attributes .length; ++ i)
					this .attribute (attributes [i], node);
			},
			attribute: function (attribute, node)
			{
				try
				{
					var
						name      = attribute .name,
						value     = attribute .value,
						field     = node .getField (name),
						fieldType = this .fieldTypes [field .getType ()];

					this .parser .setInput (value);
					fieldType .call (this .parser, field);
				}
				catch (error)
				{
					//console .warn (error .message);
				}
			},
			cdata: function (element)
			{
				var
					node  = this .getParent (),
					field = node .getCDATA ();

				if (field)
					field .push (element .data);
			},
			field: function (element)
			{
				var node = this .getParent ();

				if (! node .hasUserDefinedFields ())
					return;

				var accessType = AccessType [element .getAttribute ("accessType")];

				if (accessType === undefined)
					accessType = X3DConstants .initializeOnly;

				var type = Fields [element .getAttribute ("type")];

				if (type === undefined)
					return;

				var name = element .getAttribute ("name");

				if (! this .id (name))
					return;

				var field = new type ();

				if (accessType & X3DConstants .initializeOnly)
				{
					var value = element .getAttribute ("value");

					if (value !== null)
					{
						this .parser .setInput (value);
						this .fieldTypes [field .getType ()] .call (this .parser, field);
					}

					this .pushParent (field);
					this .statements (element .childNodes);
					this .popParent ();
				}

				node .addUserDefinedField (accessType, name, field);
			},
			fieldValue: function (element)
			{
				try
				{
					var node = this .getParent ();

					var name = element .getAttribute ("name");

					if (! this .id (name))
						return;

					var
						field      = node .getField (name),
						accessType = field .getAccessType ();

					if (accessType & X3DConstants .initializeOnly)
					{
						var value = element .getAttribute ("value");

						if (value !== null)
						{
							this .parser .setInput (value);
							this .fieldTypes [field .getType ()] .call (this .parser, field);
							field .setFieldValue (true);
						}
						else
							field .setFieldValue (false);

						this .pushParent (field);
						this .statements (element .childNodes);
						this .popParent ();
					}
				}
				catch (error)
				{
					console .warn ("XML Parser Error: Couldn't assign field value: " + error .message);
				}
			},
			IS: function (element)
			{
				if (this .getExecutionContext () instanceof X3DProtoDeclaration)
				{
					var childNodes = element .childNodes;

					for (var i = 0; i < childNodes .length; ++ i)
					{
						var child = childNodes [i];

						switch (child .nodeName)
						{
							case "CONNECT":
							case "connect":
								this .connect (child);
								continue;
						}
					}
				}
			},
			connect: function (element)
			{
				var
					nodeFieldName  = element .getAttribute ("nodeField"),
					protoFieldName = element .getAttribute ("protoField");

				if (! nodeFieldName || ! protoFieldName)
					return;

				try
				{
					var
						node       = this .getParent (),
						proto      = this .getExecutionContext (),
						nodeField  = node .getField (nodeFieldName),
						protoField = proto .getField (protoFieldName);

					if (nodeField .getAccessType () === protoField .getAccessType () || nodeField .getAccessType () === X3DConstants .inputOutput)
					{
						if (nodeField .getType () === protoField .getType ())
							nodeField .addReference (protoField);
						else
							throw new Error ("Field types do not match.");
					}
					else
						throw new Error ("Field access types do not match.");
				}
				catch (error)
				{
					console .warn ("Couldn't create IS reference: " + error .message);
				}
			},
			externProtoDeclare: function (element)
			{
				var name = element .getAttribute ("name");

				if (this .id (name))
				{
					var url = element .getAttribute ("url");
					
					if (url !== null)
					{
						this .parser .setInput (url);
						Parser .prototype .mfstringValues .call (this .parser, this .url);
					}
					else
						this .url .length = 0;

					var externproto = new X3DExternProtoDeclaration (this .getExecutionContext ());
								
					this .pushParent (externproto);
					this .protoInterface (element); // parse fields
					this .popParent ();

					externproto .setName (name);
					externproto .url_ = this .url;
					externproto .setup ();

					this .getExecutionContext () .externprotos .push (externproto);	
				}
			},
			protoDeclare: function (element)
			{
				var name = element .getAttribute ("name");

				if (this .id (name))
				{
					var
						proto      = new X3DProtoDeclaration (this .getExecutionContext ()),
						childNodes = element .childNodes;

					for (var i = 0; i < childNodes .length; ++ i)
					{
						var child = childNodes [i];

						switch (child .nodeName)
						{
							case "ProtoInterface":
								this .pushParent (proto);
								this .protoInterface (child);
								this .popParent ();
								continue;
							case "ProtoBody":
								this .pushExecutionContext (proto);
								this .protoBody (child);
								this .popExecutionContext ();
								continue;
						}
					}

					proto .setName (name);
					proto .setup ();

					this .getExecutionContext () .protos .push (proto);
				}
			},
			protoInterface: function (element)
			{
				var childNodes = element .childNodes;

				for (var i = 0; i < childNodes .length; ++ i)
				{
					var child = childNodes [i];

					switch (child .nodeName)
					{
						case "FIELD": // User-defined field
						case "field": // User-defined field
							this .field (child);
							continue;
					}
				}
			},
			protoBody: function (element)
			{
				this .statements (element .childNodes);
			},
			route: function (element)
			{
				var
					fromNode  = element .getAttribute ("fromNode"),
					fromField = element .getAttribute ("fromField"),
					toNode    = element .getAttribute ("toNode"),
					toField   = element .getAttribute ("toField");

				try
				{
					var
						sourceNode      = this .getExecutionContext () .getNamedNode (fromNode),
						destinationNode = this .getExecutionContext () .getNamedNode (toNode);

					this .getExecutionContext () .addRoute (sourceNode, fromField, destinationNode, toField);
				}
				catch (error)
				{
					console .warn ("XML Parser Error: " + error .message);
				}
			},
			id: function (string)
			{
				if (string)
				{
					// Test for id characters.
					return true;
				}

				return false;
			},
		};

		XMLParser .prototype .fieldTypes = [ ];
		XMLParser .prototype .fieldTypes [X3DConstants .SFBool]      = Parser .prototype .sfboolValue;
		XMLParser .prototype .fieldTypes [X3DConstants .SFColor]     = Parser .prototype .sfcolorValue;
		XMLParser .prototype .fieldTypes [X3DConstants .SFColorRGBA] = Parser .prototype .sfcolorrgbaValue;
		XMLParser .prototype .fieldTypes [X3DConstants .SFDouble]    = Parser .prototype .sfdoubleValue;
		XMLParser .prototype .fieldTypes [X3DConstants .SFFloat]     = Parser .prototype .sffloatValue;
		XMLParser .prototype .fieldTypes [X3DConstants .SFImage]     = Parser .prototype .sfimageValue;
		XMLParser .prototype .fieldTypes [X3DConstants .SFInt32]     = Parser .prototype .sfint32Value;
		XMLParser .prototype .fieldTypes [X3DConstants .SFMatrix3f]  = Parser .prototype .sfmatrix4dValue;
		XMLParser .prototype .fieldTypes [X3DConstants .SFMatrix3d]  = Parser .prototype .sfmatrix4fValue;
		XMLParser .prototype .fieldTypes [X3DConstants .SFMatrix4f]  = Parser .prototype .sfmatrix4dValue;
		XMLParser .prototype .fieldTypes [X3DConstants .SFMatrix4d]  = Parser .prototype .sfmatrix4fValue;
		XMLParser .prototype .fieldTypes [X3DConstants .SFNode]      = function (field) { field .set (null); };
		XMLParser .prototype .fieldTypes [X3DConstants .SFRotation]  = Parser .prototype .sfrotationValue;
		XMLParser .prototype .fieldTypes [X3DConstants .SFString]    = function (field) { field .set (this .input); };
		XMLParser .prototype .fieldTypes [X3DConstants .SFTime]      = Parser .prototype .sftimeValue;
		XMLParser .prototype .fieldTypes [X3DConstants .SFVec2d]     = Parser .prototype .sfvec2dValue;
		XMLParser .prototype .fieldTypes [X3DConstants .SFVec2f]     = Parser .prototype .sfvec2fValue;
		XMLParser .prototype .fieldTypes [X3DConstants .SFVec3d]     = Parser .prototype .sfvec3dValue;
		XMLParser .prototype .fieldTypes [X3DConstants .SFVec3f]     = Parser .prototype .sfvec3fValue;
		XMLParser .prototype .fieldTypes [X3DConstants .SFVec4d]     = Parser .prototype .sfvec4dValue;
		XMLParser .prototype .fieldTypes [X3DConstants .SFVec4f]     = Parser .prototype .sfvec4fValue;

		XMLParser .prototype .fieldTypes [X3DConstants .MFBool]      = Parser .prototype .mfboolValues;
		XMLParser .prototype .fieldTypes [X3DConstants .MFColor]     = Parser .prototype .mfcolorValues;
		XMLParser .prototype .fieldTypes [X3DConstants .MFColorRGBA] = Parser .prototype .mfcolorrgbaValues;
		XMLParser .prototype .fieldTypes [X3DConstants .MFDouble]    = Parser .prototype .mfdoubleValues;
		XMLParser .prototype .fieldTypes [X3DConstants .MFFloat]     = Parser .prototype .mffloatValues;
		XMLParser .prototype .fieldTypes [X3DConstants .MFImage]     = Parser .prototype .mfimageValues;
		XMLParser .prototype .fieldTypes [X3DConstants .MFInt32]     = Parser .prototype .mfint32Values;
		XMLParser .prototype .fieldTypes [X3DConstants .MFMatrix3d]  = Parser .prototype .mfmatrix3dValues;
		XMLParser .prototype .fieldTypes [X3DConstants .MFMatrix3f]  = Parser .prototype .mfmatrix3fValues;
		XMLParser .prototype .fieldTypes [X3DConstants .MFMatrix4d]  = Parser .prototype .mfmatrix4dValues;
		XMLParser .prototype .fieldTypes [X3DConstants .MFMatrix4f]  = Parser .prototype .mfmatrix4fValues;
		XMLParser .prototype .fieldTypes [X3DConstants .MFNode]      = function () { };
		XMLParser .prototype .fieldTypes [X3DConstants .MFRotation]  = Parser .prototype .mfrotationValues;
		XMLParser .prototype .fieldTypes [X3DConstants .MFString]    = Parser .prototype .mfstringValues;
		XMLParser .prototype .fieldTypes [X3DConstants .MFTime]      = Parser .prototype .mftimeValues;
		XMLParser .prototype .fieldTypes [X3DConstants .MFVec2d]     = Parser .prototype .mfvec2dValues;
		XMLParser .prototype .fieldTypes [X3DConstants .MFVec2f]     = Parser .prototype .mfvec2fValues;
		XMLParser .prototype .fieldTypes [X3DConstants .MFVec3d]     = Parser .prototype .mfvec3dValues;
		XMLParser .prototype .fieldTypes [X3DConstants .MFVec3f]     = Parser .prototype .mfvec3fValues;
		XMLParser .prototype .fieldTypes [X3DConstants .MFVec4d]     = Parser .prototype .mfvec4dValues;
		XMLParser .prototype .fieldTypes [X3DConstants .MFVec4f]     = Parser .prototype .mfvec4fValues;

		return XMLParser;
	}
});


define ('cobweb/Debug',[],function ()
{
	return true;
});


define ('cobweb/InputOutput/Loader',[
	"jquery",
	"cobweb/Base/X3DObject",
	"cobweb/Parser/XMLParser",
	"standard/Networking/URI",
	"cobweb/Debug",
],
function ($,
          X3DObject,
          XMLParser,
          URI,
          DEBUG)
{
	var TIMEOUT = 16;

	function Loader (node)
	{
		X3DObject .call (this);

		this .node             = node;
		this .browser          = node .getBrowser ();
		this .external         = this .browser .isExternal ();
		this .executionContext = this .external ? node .getExecutionContext () : this .browser .currentScene;
		this .URL              = new URI ();
	}

	Loader .prototype = $.extend (Object .create (X3DObject .prototype),
	{
		constructor: Loader,
		getWorldURL: function ()
		{
			return this .URL;
		},
		createX3DFromString: function (worldURL, string, success, error)
		{
			var scene = this .browser .createScene ();

			scene .setWorldURL (this .browser .getLocation () .transform (worldURL));

			if (success)
			{
				try
				{
					setTimeout (this .importDocument .bind (this, scene, $.parseXML (string), success, error), TIMEOUT);
				}
				catch (exception)
				{
					error (exception);
				}
			}
			else
			{
				this .importDocument (scene, $.parseXML (string));
				return scene;
			}
		},
		importDocument: function (scene, dom, success, error)
		{
			try
			{
				new XMLParser (scene, dom) .parseIntoScene ();

				if (success)
				{
					scene .loadCount_ .addInterest (this, "setLoadCount", scene, success);
					scene .loadCount_ .addEvent ();
				}
			}
			catch (exception)
			{
				if (error)
					error (exception);
				else
					throw exception;
			}
		},
		setLoadCount: function (field, scene, success)
		{
			if (field .getValue () === 0)
				success (scene);
		},
		createX3DFromURL: function (url, callback, bindViewpoint)
		{
			this .bindViewpoint = bindViewpoint;

			if (callback)
				return setTimeout (this .loadDocument .bind (this, url, this .createX3DFromURLAsync .bind (this, callback)), TIMEOUT);

			return this .createX3DFromURLSync (url);
		},
		createX3DFromURLAsync: function (callback, data)
		{
			if (data === null)
				callback (null);
			else
				this .createX3DFromString (this .URL, data, callback, this .loadDocumentError .bind (this));
		},
		createX3DFromURLSync: function (url)
		{
			if (url .length === 0)
				throw new Error ("No URL given.");

			var
				scene   = null,
				success = false;

			for (var i = 0; i < url .length; ++ i)
			{
				this .URL = this .transform (url [i]);

				$.ajax ({
					url: this .URL,
					dataType: "text",
					async: false,
					cache: this .browser .doCaching (),
					//timeout: 15000,
					global: false,
					context: this,
					success: function (data)
					{
						try
						{
							scene   = this .createX3DFromString (this .URL, data);
							success = true;
						}
						catch (error)
						{
							console .log (error);
						}
					},
					error: function (jqXHR, textStatus, errorThrown)
					{
						//console .warn ("Couldn't load URL '" + this .URL .toString () + "': " + errorThrown + ".");
					},
				});

				if (success)
					break;
			}

			if (success)
				return scene;

			throw Error ("Couldn't load any url of '" + url .getValue () .join (", ") + "'.");
		},
		loadDocument: function (url, callback)
		{
			this .url      = url .copy ();
			this .callback = callback;

			if (url .length === 0)
				return this .loadDocumentError (new Error ("No URL given."));

			this .loadDocumentAsync (this .url .shift ());
		},
		loadDocumentAsync: function (URL)
		{
			try
			{
				if (this .bindViewpoint)
				{
					var uri = new URI (URL);

					if (uri .filename .toString () .length === 0 && uri .filename .query .length === 0)
					{
						return this .bindViewpoint (uri .fragment);
					}
				}
			}
			catch (exception)
			{
				return this .loadDocumentError (exception);
			}

			this .URL = this .transform (URL);

			$.ajax ({
				url: this .URL,
				dataType: "text",
				async: true,
				cache: this .browser .doCaching (),
				//timeout: 15000,
				global: false,
				context: this,
				success: function (data)
				{
					try
					{
						this .callback (data);
					}
					catch (exception)
					{
						this .loadDocumentError (exception);
					}
				},
				error: function (jqXHR, textStatus, exception)
				{
					this .loadDocumentError (exception);
				},
			});
		},
		loadDocumentError: function (exception)
		{
			if (DEBUG)
				console .log (exception);
			else
				console .warn ("Couldn't load URL '" + this .URL .toString () + "': " + exception .message + ".");

			if (this .url .length)
				this .loadDocumentAsync (this .url .shift ());

			else
				this .callback (null);
		},
		transform: function (URL)
		{
			URL = this .getReferer () .transform (new URI (URL));

			URL = URL .isLocal () ? this .browser .getLocation () .getRelativePath (URL) : URL;

			return URL;
		},
		getReferer: function ()
		{
			if (this .node .getTypeName () === "World")
			{
				if (this .external)
					return this .browser .getLocation ();
			}

			return this .executionContext .getWorldURL ();
		},
	});

	return Loader;
});
(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define('opentype/dist/opentype',[],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.opentype = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// Run-time checking of preconditions.



// Precondition function that checks if the given predicate is true.
// If not, it will throw an error.
exports.argument = function(predicate, message) {
    if (!predicate) {
        throw new Error(message);
    }
};

// Precondition function that checks if the given assertion is true.
// If not, it will throw an error.
exports.assert = exports.argument;

},{}],2:[function(require,module,exports){
// Drawing utility functions.



// Draw a line on the given context from point `x1,y1` to point `x2,y2`.
function line(ctx, x1, y1, x2, y2) {
    ctx.beginPath();
    ctx.moveTo(x1, y1);
    ctx.lineTo(x2, y2);
    ctx.stroke();
}

exports.line = line;

},{}],3:[function(require,module,exports){
// Glyph encoding



var cffStandardStrings = [
    '.notdef', 'space', 'exclam', 'quotedbl', 'numbersign', 'dollar', 'percent', 'ampersand', 'quoteright',
    'parenleft', 'parenright', 'asterisk', 'plus', 'comma', 'hyphen', 'period', 'slash', 'zero', 'one', 'two',
    'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'colon', 'semicolon', 'less', 'equal', 'greater',
    'question', 'at', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S',
    'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'bracketleft', 'backslash', 'bracketright', 'asciicircum', 'underscore',
    'quoteleft', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',
    'u', 'v', 'w', 'x', 'y', 'z', 'braceleft', 'bar', 'braceright', 'asciitilde', 'exclamdown', 'cent', 'sterling',
    'fraction', 'yen', 'florin', 'section', 'currency', 'quotesingle', 'quotedblleft', 'guillemotleft',
    'guilsinglleft', 'guilsinglright', 'fi', 'fl', 'endash', 'dagger', 'daggerdbl', 'periodcentered', 'paragraph',
    'bullet', 'quotesinglbase', 'quotedblbase', 'quotedblright', 'guillemotright', 'ellipsis', 'perthousand',
    'questiondown', 'grave', 'acute', 'circumflex', 'tilde', 'macron', 'breve', 'dotaccent', 'dieresis', 'ring',
    'cedilla', 'hungarumlaut', 'ogonek', 'caron', 'emdash', 'AE', 'ordfeminine', 'Lslash', 'Oslash', 'OE',
    'ordmasculine', 'ae', 'dotlessi', 'lslash', 'oslash', 'oe', 'germandbls', 'onesuperior', 'logicalnot', 'mu',
    'trademark', 'Eth', 'onehalf', 'plusminus', 'Thorn', 'onequarter', 'divide', 'brokenbar', 'degree', 'thorn',
    'threequarters', 'twosuperior', 'registered', 'minus', 'eth', 'multiply', 'threesuperior', 'copyright',
    'Aacute', 'Acircumflex', 'Adieresis', 'Agrave', 'Aring', 'Atilde', 'Ccedilla', 'Eacute', 'Ecircumflex',
    'Edieresis', 'Egrave', 'Iacute', 'Icircumflex', 'Idieresis', 'Igrave', 'Ntilde', 'Oacute', 'Ocircumflex',
    'Odieresis', 'Ograve', 'Otilde', 'Scaron', 'Uacute', 'Ucircumflex', 'Udieresis', 'Ugrave', 'Yacute',
    'Ydieresis', 'Zcaron', 'aacute', 'acircumflex', 'adieresis', 'agrave', 'aring', 'atilde', 'ccedilla', 'eacute',
    'ecircumflex', 'edieresis', 'egrave', 'iacute', 'icircumflex', 'idieresis', 'igrave', 'ntilde', 'oacute',
    'ocircumflex', 'odieresis', 'ograve', 'otilde', 'scaron', 'uacute', 'ucircumflex', 'udieresis', 'ugrave',
    'yacute', 'ydieresis', 'zcaron', 'exclamsmall', 'Hungarumlautsmall', 'dollaroldstyle', 'dollarsuperior',
    'ampersandsmall', 'Acutesmall', 'parenleftsuperior', 'parenrightsuperior', '266 ff', 'onedotenleader',
    'zerooldstyle', 'oneoldstyle', 'twooldstyle', 'threeoldstyle', 'fouroldstyle', 'fiveoldstyle', 'sixoldstyle',
    'sevenoldstyle', 'eightoldstyle', 'nineoldstyle', 'commasuperior', 'threequartersemdash', 'periodsuperior',
    'questionsmall', 'asuperior', 'bsuperior', 'centsuperior', 'dsuperior', 'esuperior', 'isuperior', 'lsuperior',
    'msuperior', 'nsuperior', 'osuperior', 'rsuperior', 'ssuperior', 'tsuperior', 'ff', 'ffi', 'ffl',
    'parenleftinferior', 'parenrightinferior', 'Circumflexsmall', 'hyphensuperior', 'Gravesmall', 'Asmall',
    'Bsmall', 'Csmall', 'Dsmall', 'Esmall', 'Fsmall', 'Gsmall', 'Hsmall', 'Ismall', 'Jsmall', 'Ksmall', 'Lsmall',
    'Msmall', 'Nsmall', 'Osmall', 'Psmall', 'Qsmall', 'Rsmall', 'Ssmall', 'Tsmall', 'Usmall', 'Vsmall', 'Wsmall',
    'Xsmall', 'Ysmall', 'Zsmall', 'colonmonetary', 'onefitted', 'rupiah', 'Tildesmall', 'exclamdownsmall',
    'centoldstyle', 'Lslashsmall', 'Scaronsmall', 'Zcaronsmall', 'Dieresissmall', 'Brevesmall', 'Caronsmall',
    'Dotaccentsmall', 'Macronsmall', 'figuredash', 'hypheninferior', 'Ogoneksmall', 'Ringsmall', 'Cedillasmall',
    'questiondownsmall', 'oneeighth', 'threeeighths', 'fiveeighths', 'seveneighths', 'onethird', 'twothirds',
    'zerosuperior', 'foursuperior', 'fivesuperior', 'sixsuperior', 'sevensuperior', 'eightsuperior', 'ninesuperior',
    'zeroinferior', 'oneinferior', 'twoinferior', 'threeinferior', 'fourinferior', 'fiveinferior', 'sixinferior',
    'seveninferior', 'eightinferior', 'nineinferior', 'centinferior', 'dollarinferior', 'periodinferior',
    'commainferior', 'Agravesmall', 'Aacutesmall', 'Acircumflexsmall', 'Atildesmall', 'Adieresissmall',
    'Aringsmall', 'AEsmall', 'Ccedillasmall', 'Egravesmall', 'Eacutesmall', 'Ecircumflexsmall', 'Edieresissmall',
    'Igravesmall', 'Iacutesmall', 'Icircumflexsmall', 'Idieresissmall', 'Ethsmall', 'Ntildesmall', 'Ogravesmall',
    'Oacutesmall', 'Ocircumflexsmall', 'Otildesmall', 'Odieresissmall', 'OEsmall', 'Oslashsmall', 'Ugravesmall',
    'Uacutesmall', 'Ucircumflexsmall', 'Udieresissmall', 'Yacutesmall', 'Thornsmall', 'Ydieresissmall', '001.000',
    '001.001', '001.002', '001.003', 'Black', 'Bold', 'Book', 'Light', 'Medium', 'Regular', 'Roman', 'Semibold'];

var cffStandardEncoding = [
    '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '',
    '', '', '', '', 'space', 'exclam', 'quotedbl', 'numbersign', 'dollar', 'percent', 'ampersand', 'quoteright',
    'parenleft', 'parenright', 'asterisk', 'plus', 'comma', 'hyphen', 'period', 'slash', 'zero', 'one', 'two',
    'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'colon', 'semicolon', 'less', 'equal', 'greater',
    'question', 'at', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S',
    'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'bracketleft', 'backslash', 'bracketright', 'asciicircum', 'underscore',
    'quoteleft', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',
    'u', 'v', 'w', 'x', 'y', 'z', 'braceleft', 'bar', 'braceright', 'asciitilde', '', '', '', '', '', '', '', '',
    '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '',
    'exclamdown', 'cent', 'sterling', 'fraction', 'yen', 'florin', 'section', 'currency', 'quotesingle',
    'quotedblleft', 'guillemotleft', 'guilsinglleft', 'guilsinglright', 'fi', 'fl', '', 'endash', 'dagger',
    'daggerdbl', 'periodcentered', '', 'paragraph', 'bullet', 'quotesinglbase', 'quotedblbase', 'quotedblright',
    'guillemotright', 'ellipsis', 'perthousand', '', 'questiondown', '', 'grave', 'acute', 'circumflex', 'tilde',
    'macron', 'breve', 'dotaccent', 'dieresis', '', 'ring', 'cedilla', '', 'hungarumlaut', 'ogonek', 'caron',
    'emdash', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'AE', '', 'ordfeminine', '', '', '',
    '', 'Lslash', 'Oslash', 'OE', 'ordmasculine', '', '', '', '', '', 'ae', '', '', '', 'dotlessi', '', '',
    'lslash', 'oslash', 'oe', 'germandbls'];

var cffExpertEncoding = [
    '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '',
    '', '', '', '', 'space', 'exclamsmall', 'Hungarumlautsmall', '', 'dollaroldstyle', 'dollarsuperior',
    'ampersandsmall', 'Acutesmall', 'parenleftsuperior', 'parenrightsuperior', 'twodotenleader', 'onedotenleader',
    'comma', 'hyphen', 'period', 'fraction', 'zerooldstyle', 'oneoldstyle', 'twooldstyle', 'threeoldstyle',
    'fouroldstyle', 'fiveoldstyle', 'sixoldstyle', 'sevenoldstyle', 'eightoldstyle', 'nineoldstyle', 'colon',
    'semicolon', 'commasuperior', 'threequartersemdash', 'periodsuperior', 'questionsmall', '', 'asuperior',
    'bsuperior', 'centsuperior', 'dsuperior', 'esuperior', '', '', 'isuperior', '', '', 'lsuperior', 'msuperior',
    'nsuperior', 'osuperior', '', '', 'rsuperior', 'ssuperior', 'tsuperior', '', 'ff', 'fi', 'fl', 'ffi', 'ffl',
    'parenleftinferior', '', 'parenrightinferior', 'Circumflexsmall', 'hyphensuperior', 'Gravesmall', 'Asmall',
    'Bsmall', 'Csmall', 'Dsmall', 'Esmall', 'Fsmall', 'Gsmall', 'Hsmall', 'Ismall', 'Jsmall', 'Ksmall', 'Lsmall',
    'Msmall', 'Nsmall', 'Osmall', 'Psmall', 'Qsmall', 'Rsmall', 'Ssmall', 'Tsmall', 'Usmall', 'Vsmall', 'Wsmall',
    'Xsmall', 'Ysmall', 'Zsmall', 'colonmonetary', 'onefitted', 'rupiah', 'Tildesmall', '', '', '', '', '', '', '',
    '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '',
    'exclamdownsmall', 'centoldstyle', 'Lslashsmall', '', '', 'Scaronsmall', 'Zcaronsmall', 'Dieresissmall',
    'Brevesmall', 'Caronsmall', '', 'Dotaccentsmall', '', '', 'Macronsmall', '', '', 'figuredash', 'hypheninferior',
    '', '', 'Ogoneksmall', 'Ringsmall', 'Cedillasmall', '', '', '', 'onequarter', 'onehalf', 'threequarters',
    'questiondownsmall', 'oneeighth', 'threeeighths', 'fiveeighths', 'seveneighths', 'onethird', 'twothirds', '',
    '', 'zerosuperior', 'onesuperior', 'twosuperior', 'threesuperior', 'foursuperior', 'fivesuperior',
    'sixsuperior', 'sevensuperior', 'eightsuperior', 'ninesuperior', 'zeroinferior', 'oneinferior', 'twoinferior',
    'threeinferior', 'fourinferior', 'fiveinferior', 'sixinferior', 'seveninferior', 'eightinferior',
    'nineinferior', 'centinferior', 'dollarinferior', 'periodinferior', 'commainferior', 'Agravesmall',
    'Aacutesmall', 'Acircumflexsmall', 'Atildesmall', 'Adieresissmall', 'Aringsmall', 'AEsmall', 'Ccedillasmall',
    'Egravesmall', 'Eacutesmall', 'Ecircumflexsmall', 'Edieresissmall', 'Igravesmall', 'Iacutesmall',
    'Icircumflexsmall', 'Idieresissmall', 'Ethsmall', 'Ntildesmall', 'Ogravesmall', 'Oacutesmall',
    'Ocircumflexsmall', 'Otildesmall', 'Odieresissmall', 'OEsmall', 'Oslashsmall', 'Ugravesmall', 'Uacutesmall',
    'Ucircumflexsmall', 'Udieresissmall', 'Yacutesmall', 'Thornsmall', 'Ydieresissmall'];

var standardNames = [
    '.notdef', '.null', 'nonmarkingreturn', 'space', 'exclam', 'quotedbl', 'numbersign', 'dollar', 'percent',
    'ampersand', 'quotesingle', 'parenleft', 'parenright', 'asterisk', 'plus', 'comma', 'hyphen', 'period', 'slash',
    'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'colon', 'semicolon', 'less',
    'equal', 'greater', 'question', 'at', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O',
    'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'bracketleft', 'backslash', 'bracketright',
    'asciicircum', 'underscore', 'grave', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',
    'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'braceleft', 'bar', 'braceright', 'asciitilde',
    'Adieresis', 'Aring', 'Ccedilla', 'Eacute', 'Ntilde', 'Odieresis', 'Udieresis', 'aacute', 'agrave',
    'acircumflex', 'adieresis', 'atilde', 'aring', 'ccedilla', 'eacute', 'egrave', 'ecircumflex', 'edieresis',
    'iacute', 'igrave', 'icircumflex', 'idieresis', 'ntilde', 'oacute', 'ograve', 'ocircumflex', 'odieresis',
    'otilde', 'uacute', 'ugrave', 'ucircumflex', 'udieresis', 'dagger', 'degree', 'cent', 'sterling', 'section',
    'bullet', 'paragraph', 'germandbls', 'registered', 'copyright', 'trademark', 'acute', 'dieresis', 'notequal',
    'AE', 'Oslash', 'infinity', 'plusminus', 'lessequal', 'greaterequal', 'yen', 'mu', 'partialdiff', 'summation',
    'product', 'pi', 'integral', 'ordfeminine', 'ordmasculine', 'Omega', 'ae', 'oslash', 'questiondown',
    'exclamdown', 'logicalnot', 'radical', 'florin', 'approxequal', 'Delta', 'guillemotleft', 'guillemotright',
    'ellipsis', 'nonbreakingspace', 'Agrave', 'Atilde', 'Otilde', 'OE', 'oe', 'endash', 'emdash', 'quotedblleft',
    'quotedblright', 'quoteleft', 'quoteright', 'divide', 'lozenge', 'ydieresis', 'Ydieresis', 'fraction',
    'currency', 'guilsinglleft', 'guilsinglright', 'fi', 'fl', 'daggerdbl', 'periodcentered', 'quotesinglbase',
    'quotedblbase', 'perthousand', 'Acircumflex', 'Ecircumflex', 'Aacute', 'Edieresis', 'Egrave', 'Iacute',
    'Icircumflex', 'Idieresis', 'Igrave', 'Oacute', 'Ocircumflex', 'apple', 'Ograve', 'Uacute', 'Ucircumflex',
    'Ugrave', 'dotlessi', 'circumflex', 'tilde', 'macron', 'breve', 'dotaccent', 'ring', 'cedilla', 'hungarumlaut',
    'ogonek', 'caron', 'Lslash', 'lslash', 'Scaron', 'scaron', 'Zcaron', 'zcaron', 'brokenbar', 'Eth', 'eth',
    'Yacute', 'yacute', 'Thorn', 'thorn', 'minus', 'multiply', 'onesuperior', 'twosuperior', 'threesuperior',
    'onehalf', 'onequarter', 'threequarters', 'franc', 'Gbreve', 'gbreve', 'Idotaccent', 'Scedilla', 'scedilla',
    'Cacute', 'cacute', 'Ccaron', 'ccaron', 'dcroat'];

// This is the encoding used for fonts created from scratch.
// It loops through all glyphs and finds the appropriate unicode value.
// Since it's linear time, other encodings will be faster.
function DefaultEncoding(font) {
    this.font = font;
}

DefaultEncoding.prototype.charToGlyphIndex = function(c) {
    var code = c.charCodeAt(0);
    var glyphs = this.font.glyphs;
    if (glyphs) {
        for (var i = 0; i < glyphs.length; i += 1) {
            var glyph = glyphs.get(i);
            for (var j = 0; j < glyph.unicodes.length; j += 1) {
                if (glyph.unicodes[j] === code) {
                    return i;
                }
            }
        }
    } else {
        return null;
    }
};

function CmapEncoding(cmap) {
    this.cmap = cmap;
}

CmapEncoding.prototype.charToGlyphIndex = function(c) {
    return this.cmap.glyphIndexMap[c.charCodeAt(0)] || 0;
};

function CffEncoding(encoding, charset) {
    this.encoding = encoding;
    this.charset = charset;
}

CffEncoding.prototype.charToGlyphIndex = function(s) {
    var code = s.charCodeAt(0);
    var charName = this.encoding[code];
    return this.charset.indexOf(charName);
};

function GlyphNames(post) {
    var i;
    switch (post.version) {
    case 1:
        this.names = exports.standardNames.slice();
        break;
    case 2:
        this.names = new Array(post.numberOfGlyphs);
        for (i = 0; i < post.numberOfGlyphs; i++) {
            if (post.glyphNameIndex[i] < exports.standardNames.length) {
                this.names[i] = exports.standardNames[post.glyphNameIndex[i]];
            } else {
                this.names[i] = post.names[post.glyphNameIndex[i] - exports.standardNames.length];
            }
        }

        break;
    case 2.5:
        this.names = new Array(post.numberOfGlyphs);
        for (i = 0; i < post.numberOfGlyphs; i++) {
            this.names[i] = exports.standardNames[i + post.glyphNameIndex[i]];
        }

        break;
    case 3:
        this.names = [];
        break;
    }
}

GlyphNames.prototype.nameToGlyphIndex = function(name) {
    return this.names.indexOf(name);
};

GlyphNames.prototype.glyphIndexToName = function(gid) {
    return this.names[gid];
};

function addGlyphNames(font) {
    var glyph;
    var glyphIndexMap = font.tables.cmap.glyphIndexMap;
    var charCodes = Object.keys(glyphIndexMap);

    for (var i = 0; i < charCodes.length; i += 1) {
        var c = charCodes[i];
        var glyphIndex = glyphIndexMap[c];
        glyph = font.glyphs.get(glyphIndex);
        glyph.addUnicode(parseInt(c));
    }

    for (i = 0; i < font.glyphs.length; i += 1) {
        glyph = font.glyphs.get(i);
        if (font.cffEncoding) {
            glyph.name = font.cffEncoding.charset[i];
        } else {
            glyph.name = font.glyphNames.glyphIndexToName(i);
        }
    }
}

exports.cffStandardStrings = cffStandardStrings;
exports.cffStandardEncoding = cffStandardEncoding;
exports.cffExpertEncoding = cffExpertEncoding;
exports.standardNames = standardNames;
exports.DefaultEncoding = DefaultEncoding;
exports.CmapEncoding = CmapEncoding;
exports.CffEncoding = CffEncoding;
exports.GlyphNames = GlyphNames;
exports.addGlyphNames = addGlyphNames;

},{}],4:[function(require,module,exports){
// The Font object



var path = require('./path');
var sfnt = require('./tables/sfnt');
var encoding = require('./encoding');
var glyphset = require('./glyphset');

// A Font represents a loaded OpenType font file.
// It contains a set of glyphs and methods to draw text on a drawing context,
// or to get a path representing the text.
function Font(options) {
    options = options || {};

    // OS X will complain if the names are empty, so we put a single space everywhere by default.
    this.familyName = options.familyName || ' ';
    this.styleName = options.styleName || ' ';
    this.designer = options.designer || ' ';
    this.designerURL = options.designerURL || ' ';
    this.manufacturer = options.manufacturer || ' ';
    this.manufacturerURL = options.manufacturerURL || ' ';
    this.license = options.license || ' ';
    this.licenseURL = options.licenseURL || ' ';
    this.version = options.version || 'Version 0.1';
    this.description = options.description || ' ';
    this.copyright = options.copyright || ' ';
    this.trademark = options.trademark || ' ';
    this.unitsPerEm = options.unitsPerEm || 1000;
    this.ascender = options.ascender;
    this.descender = options.descender;
    this.supported = true; // Deprecated: parseBuffer will throw an error if font is not supported.
    this.glyphs = new glyphset.GlyphSet(this, options.glyphs || []);
    this.encoding = new encoding.DefaultEncoding(this);
    this.tables = {};
}

// Check if the font has a glyph for the given character.
Font.prototype.hasChar = function(c) {
    return this.encoding.charToGlyphIndex(c) !== null;
};

// Convert the given character to a single glyph index.
// Note that this function assumes that there is a one-to-one mapping between
// the given character and a glyph; for complex scripts this might not be the case.
Font.prototype.charToGlyphIndex = function(s) {
    return this.encoding.charToGlyphIndex(s);
};

// Convert the given character to a single Glyph object.
// Note that this function assumes that there is a one-to-one mapping between
// the given character and a glyph; for complex scripts this might not be the case.
Font.prototype.charToGlyph = function(c) {
    var glyphIndex = this.charToGlyphIndex(c);
    var glyph = this.glyphs.get(glyphIndex);
    if (!glyph) {
        // .notdef
        glyph = this.glyphs.get(0);
    }

    return glyph;
};

// Convert the given text to a list of Glyph objects.
// Note that there is no strict one-to-one mapping between characters and
// glyphs, so the list of returned glyphs can be larger or smaller than the
// length of the given string.
Font.prototype.stringToGlyphs = function(s) {
    var glyphs = [];
    for (var i = 0; i < s.length; i += 1) {
        var c = s[i];
        glyphs.push(this.charToGlyph(c));
    }

    return glyphs;
};

Font.prototype.nameToGlyphIndex = function(name) {
    return this.glyphNames.nameToGlyphIndex(name);
};

Font.prototype.nameToGlyph = function(name) {
    var glyphIndex = this.nametoGlyphIndex(name);
    var glyph = this.glyphs.get(glyphIndex);
    if (!glyph) {
        // .notdef
        glyph = this.glyphs.get(0);
    }

    return glyph;
};

Font.prototype.glyphIndexToName = function(gid) {
    if (!this.glyphNames.glyphIndexToName) {
        return '';
    }

    return this.glyphNames.glyphIndexToName(gid);
};

// Retrieve the value of the kerning pair between the left glyph (or its index)
// and the right glyph (or its index). If no kerning pair is found, return 0.
// The kerning value gets added to the advance width when calculating the spacing
// between glyphs.
Font.prototype.getKerningValue = function(leftGlyph, rightGlyph) {
    leftGlyph = leftGlyph.index || leftGlyph;
    rightGlyph = rightGlyph.index || rightGlyph;
    var gposKerning = this.getGposKerningValue;
    return gposKerning ? gposKerning(leftGlyph, rightGlyph) :
        (this.kerningPairs[leftGlyph + ',' + rightGlyph] || 0);
};

// Helper function that invokes the given callback for each glyph in the given text.
// The callback gets `(glyph, x, y, fontSize, options)`.
Font.prototype.forEachGlyph = function(text, x, y, fontSize, options, callback) {
    x = x !== undefined ? x : 0;
    y = y !== undefined ? y : 0;
    fontSize = fontSize !== undefined ? fontSize : 72;
    options = options || {};
    var kerning = options.kerning === undefined ? true : options.kerning;
    var fontScale = 1 / this.unitsPerEm * fontSize;
    var glyphs = this.stringToGlyphs(text);
    for (var i = 0; i < glyphs.length; i += 1) {
        var glyph = glyphs[i];
        callback(glyph, x, y, fontSize, options);
        if (glyph.advanceWidth) {
            x += glyph.advanceWidth * fontScale;
        }

        if (kerning && i < glyphs.length - 1) {
            var kerningValue = this.getKerningValue(glyph, glyphs[i + 1]);
            x += kerningValue * fontScale;
        }
    }
};

// Create a Path object that represents the given text.
//
// text - The text to create.
// x - Horizontal position of the beginning of the text. (default: 0)
// y - Vertical position of the *baseline* of the text. (default: 0)
// fontSize - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`. (default: 72)
// Options is an optional object that contains:
// - kerning - Whether to take kerning information into account. (default: true)
//
// Returns a Path object.
Font.prototype.getPath = function(text, x, y, fontSize, options) {
    var fullPath = new path.Path();
    this.forEachGlyph(text, x, y, fontSize, options, function(glyph, gX, gY, gFontSize) {
        var glyphPath = glyph.getPath(gX, gY, gFontSize);
        fullPath.extend(glyphPath);
    });

    return fullPath;
};

// Draw the text on the given drawing context.
//
// ctx - A 2D drawing context, like Canvas.
// text - The text to create.
// x - Horizontal position of the beginning of the text. (default: 0)
// y - Vertical position of the *baseline* of the text. (default: 0)
// fontSize - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`. (default: 72)
// Options is an optional object that contains:
// - kerning - Whether to take kerning information into account. (default: true)
Font.prototype.draw = function(ctx, text, x, y, fontSize, options) {
    this.getPath(text, x, y, fontSize, options).draw(ctx);
};

// Draw the points of all glyphs in the text.
// On-curve points will be drawn in blue, off-curve points will be drawn in red.
//
// ctx - A 2D drawing context, like Canvas.
// text - The text to create.
// x - Horizontal position of the beginning of the text. (default: 0)
// y - Vertical position of the *baseline* of the text. (default: 0)
// fontSize - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`. (default: 72)
// Options is an optional object that contains:
// - kerning - Whether to take kerning information into account. (default: true)
Font.prototype.drawPoints = function(ctx, text, x, y, fontSize, options) {
    this.forEachGlyph(text, x, y, fontSize, options, function(glyph, gX, gY, gFontSize) {
        glyph.drawPoints(ctx, gX, gY, gFontSize);
    });
};

// Draw lines indicating important font measurements for all glyphs in the text.
// Black lines indicate the origin of the coordinate system (point 0,0).
// Blue lines indicate the glyph bounding box.
// Green line indicates the advance width of the glyph.
//
// ctx - A 2D drawing context, like Canvas.
// text - The text to create.
// x - Horizontal position of the beginning of the text. (default: 0)
// y - Vertical position of the *baseline* of the text. (default: 0)
// fontSize - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`. (default: 72)
// Options is an optional object that contains:
// - kerning - Whether to take kerning information into account. (default: true)
Font.prototype.drawMetrics = function(ctx, text, x, y, fontSize, options) {
    this.forEachGlyph(text, x, y, fontSize, options, function(glyph, gX, gY, gFontSize) {
        glyph.drawMetrics(ctx, gX, gY, gFontSize);
    });
};

// Validate
Font.prototype.validate = function() {
    var warnings = [];
    var _this = this;

    function assert(predicate, message) {
        if (!predicate) {
            warnings.push(message);
        }
    }

    function assertStringAttribute(attrName) {
        assert(_this[attrName] && _this[attrName].trim().length > 0, 'No ' + attrName + ' specified.');
    }

    // Identification information
    assertStringAttribute('familyName');
    assertStringAttribute('weightName');
    assertStringAttribute('manufacturer');
    assertStringAttribute('copyright');
    assertStringAttribute('version');

    // Dimension information
    assert(this.unitsPerEm > 0, 'No unitsPerEm specified.');
};

// Convert the font object to a SFNT data structure.
// This structure contains all the necessary tables and metadata to create a binary OTF file.
Font.prototype.toTables = function() {
    return sfnt.fontToTable(this);
};

Font.prototype.toBuffer = function() {
    var sfntTable = this.toTables();
    var bytes = sfntTable.encode();
    var buffer = new ArrayBuffer(bytes.length);
    var intArray = new Uint8Array(buffer);
    for (var i = 0; i < bytes.length; i++) {
        intArray[i] = bytes[i];
    }

    return buffer;
};

// Initiate a download of the OpenType font.
Font.prototype.download = function() {
    var fileName = this.familyName.replace(/\s/g, '') + '-' + this.styleName + '.otf';
    var buffer = this.toBuffer();

    window.requestFileSystem = window.requestFileSystem || window.webkitRequestFileSystem;
    window.requestFileSystem(window.TEMPORARY, buffer.byteLength, function(fs) {
        fs.root.getFile(fileName, {create: true}, function(fileEntry) {
            fileEntry.createWriter(function(writer) {
                var dataView = new DataView(buffer);
                var blob = new Blob([dataView], {type: 'font/opentype'});
                writer.write(blob);

                writer.addEventListener('writeend', function() {
                    // Navigating to the file will download it.
                    location.href = fileEntry.toURL();
                }, false);
            });
        });
    },

    function(err) {
        throw err;
    });
};

exports.Font = Font;

},{"./encoding":3,"./glyphset":6,"./path":9,"./tables/sfnt":24}],5:[function(require,module,exports){
// The Glyph object



var check = require('./check');
var draw = require('./draw');
var path = require('./path');

function getPathDefinition(glyph, path) {
    var _path = path || { commands: [] };
    return {
        configurable: true,

        get: function() {
            if (typeof _path === 'function') {
                _path = _path();
            }

            return _path;
        },

        set: function(p) {
            _path = p;
        }
    };
}

// A Glyph is an individual mark that often corresponds to a character.
// Some glyphs, such as ligatures, are a combination of many characters.
// Glyphs are the basic building blocks of a font.
//
// The `Glyph` class contains utility methods for drawing the path and its points.
function Glyph(options) {
    // By putting all the code on a prototype function (which is only declared once)
    // we reduce the memory requirements for larger fonts by some 2%
    this.bindConstructorValues(options);
}

Glyph.prototype.bindConstructorValues = function(options) {
    this.index = options.index || 0;

    // These three values cannnot be deferred for memory optimization:
    this.name = options.name || null;
    this.unicode = options.unicode || undefined;
    this.unicodes = options.unicodes || options.unicode !== undefined ? [options.unicode] : [];

    // But by binding these values only when necessary, we reduce can
    // the memory requirements by almost 3% for larger fonts.
    if (options.xMin) {
        this.xMin = options.xMin;
    }

    if (options.yMin) {
        this.yMin = options.yMin;
    }

    if (options.xMax) {
        this.xMax = options.xMax;
    }

    if (options.yMax) {
        this.yMax = options.yMax;
    }

    if (options.advanceWidth) {
        this.advanceWidth = options.advanceWidth;
    }

    // The path for a glyph is the most memory intensive, and is bound as a value
    // with a getter/setter to ensure we actually do path parsing only once the
    // path is actually needed by anything.
    Object.defineProperty(this, 'path', getPathDefinition(this, options.path));
};

Glyph.prototype.addUnicode = function(unicode) {
    if (this.unicodes.length === 0) {
        this.unicode = unicode;
    }

    this.unicodes.push(unicode);
};

// Convert the glyph to a Path we can draw on a drawing context.
//
// x - Horizontal position of the glyph. (default: 0)
// y - Vertical position of the *baseline* of the glyph. (default: 0)
// fontSize - Font size, in pixels (default: 72).
Glyph.prototype.getPath = function(x, y, fontSize) {
    x = x !== undefined ? x : 0;
    y = y !== undefined ? y : 0;
    fontSize = fontSize !== undefined ? fontSize : 72;
    var scale = 1 / this.path.unitsPerEm * fontSize;
    var p = new path.Path();
    var commands = this.path.commands;
    for (var i = 0; i < commands.length; i += 1) {
        var cmd = commands[i];
        if (cmd.type === 'M') {
            p.moveTo(x + (cmd.x * scale), y + (-cmd.y * scale));
        } else if (cmd.type === 'L') {
            p.lineTo(x + (cmd.x * scale), y + (-cmd.y * scale));
        } else if (cmd.type === 'Q') {
            p.quadraticCurveTo(x + (cmd.x1 * scale), y + (-cmd.y1 * scale),
                               x + (cmd.x * scale), y + (-cmd.y * scale));
        } else if (cmd.type === 'C') {
            p.curveTo(x + (cmd.x1 * scale), y + (-cmd.y1 * scale),
                      x + (cmd.x2 * scale), y + (-cmd.y2 * scale),
                      x + (cmd.x * scale), y + (-cmd.y * scale));
        } else if (cmd.type === 'Z') {
            p.closePath();
        }
    }

    return p;
};

// Split the glyph into contours.
// This function is here for backwards compatibility, and to
// provide raw access to the TrueType glyph outlines.
Glyph.prototype.getContours = function() {
    if (this.points === undefined) {
        return [];
    }

    var contours = [];
    var currentContour = [];
    for (var i = 0; i < this.points.length; i += 1) {
        var pt = this.points[i];
        currentContour.push(pt);
        if (pt.lastPointOfContour) {
            contours.push(currentContour);
            currentContour = [];
        }
    }

    check.argument(currentContour.length === 0, 'There are still points left in the current contour.');
    return contours;
};

// Calculate the xMin/yMin/xMax/yMax/lsb/rsb for a Glyph.
Glyph.prototype.getMetrics = function() {
    var commands = this.path.commands;
    var xCoords = [];
    var yCoords = [];
    for (var i = 0; i < commands.length; i += 1) {
        var cmd = commands[i];
        if (cmd.type !== 'Z') {
            xCoords.push(cmd.x);
            yCoords.push(cmd.y);
        }

        if (cmd.type === 'Q' || cmd.type === 'C') {
            xCoords.push(cmd.x1);
            yCoords.push(cmd.y1);
        }

        if (cmd.type === 'C') {
            xCoords.push(cmd.x2);
            yCoords.push(cmd.y2);
        }
    }

    var metrics = {
        xMin: Math.min.apply(null, xCoords),
        yMin: Math.min.apply(null, yCoords),
        xMax: Math.max.apply(null, xCoords),
        yMax: Math.max.apply(null, yCoords),
        leftSideBearing: 0
    };
    metrics.rightSideBearing = this.advanceWidth - metrics.leftSideBearing - (metrics.xMax - metrics.xMin);
    return metrics;
};

// Draw the glyph on the given context.
//
// ctx - The drawing context.
// x - Horizontal position of the glyph. (default: 0)
// y - Vertical position of the *baseline* of the glyph. (default: 0)
// fontSize - Font size, in pixels (default: 72).
Glyph.prototype.draw = function(ctx, x, y, fontSize) {
    this.getPath(x, y, fontSize).draw(ctx);
};

// Draw the points of the glyph.
// On-curve points will be drawn in blue, off-curve points will be drawn in red.
//
// ctx - The drawing context.
// x - Horizontal position of the glyph. (default: 0)
// y - Vertical position of the *baseline* of the glyph. (default: 0)
// fontSize - Font size, in pixels (default: 72).
Glyph.prototype.drawPoints = function(ctx, x, y, fontSize) {

    function drawCircles(l, x, y, scale) {
        var PI_SQ = Math.PI * 2;
        ctx.beginPath();
        for (var j = 0; j < l.length; j += 1) {
            ctx.moveTo(x + (l[j].x * scale), y + (l[j].y * scale));
            ctx.arc(x + (l[j].x * scale), y + (l[j].y * scale), 2, 0, PI_SQ, false);
        }

        ctx.closePath();
        ctx.fill();
    }

    x = x !== undefined ? x : 0;
    y = y !== undefined ? y : 0;
    fontSize = fontSize !== undefined ? fontSize : 24;
    var scale = 1 / this.path.unitsPerEm * fontSize;

    var blueCircles = [];
    var redCircles = [];
    var path = this.path;
    for (var i = 0; i < path.commands.length; i += 1) {
        var cmd = path.commands[i];
        if (cmd.x !== undefined) {
            blueCircles.push({x: cmd.x, y: -cmd.y});
        }

        if (cmd.x1 !== undefined) {
            redCircles.push({x: cmd.x1, y: -cmd.y1});
        }

        if (cmd.x2 !== undefined) {
            redCircles.push({x: cmd.x2, y: -cmd.y2});
        }
    }

    ctx.fillStyle = 'blue';
    drawCircles(blueCircles, x, y, scale);
    ctx.fillStyle = 'red';
    drawCircles(redCircles, x, y, scale);
};

// Draw lines indicating important font measurements.
// Black lines indicate the origin of the coordinate system (point 0,0).
// Blue lines indicate the glyph bounding box.
// Green line indicates the advance width of the glyph.
//
// ctx - The drawing context.
// x - Horizontal position of the glyph. (default: 0)
// y - Vertical position of the *baseline* of the glyph. (default: 0)
// fontSize - Font size, in pixels (default: 72).
Glyph.prototype.drawMetrics = function(ctx, x, y, fontSize) {
    var scale;
    x = x !== undefined ? x : 0;
    y = y !== undefined ? y : 0;
    fontSize = fontSize !== undefined ? fontSize : 24;
    scale = 1 / this.path.unitsPerEm * fontSize;
    ctx.lineWidth = 1;

    // Draw the origin
    ctx.strokeStyle = 'black';
    draw.line(ctx, x, -10000, x, 10000);
    draw.line(ctx, -10000, y, 10000, y);

    // This code is here due to memory optimization: by not using
    // defaults in the constructor, we save a notable amount of memory.
    var xMin = this.xMin || 0;
    var yMin = this.yMin || 0;
    var xMax = this.xMax || 0;
    var yMax = this.yMax || 0;
    var advanceWidth = this.advanceWidth || 0;

    // Draw the glyph box
    ctx.strokeStyle = 'blue';
    draw.line(ctx, x + (xMin * scale), -10000, x + (xMin * scale), 10000);
    draw.line(ctx, x + (xMax * scale), -10000, x + (xMax * scale), 10000);
    draw.line(ctx, -10000, y + (-yMin * scale), 10000, y + (-yMin * scale));
    draw.line(ctx, -10000, y + (-yMax * scale), 10000, y + (-yMax * scale));

    // Draw the advance width
    ctx.strokeStyle = 'green';
    draw.line(ctx, x + (advanceWidth * scale), -10000, x + (advanceWidth * scale), 10000);
};

exports.Glyph = Glyph;

},{"./check":1,"./draw":2,"./path":9}],6:[function(require,module,exports){
// The GlyphSet object



var _glyph = require('./glyph');

// A GlyphSet represents all glyphs available in the font, but modelled using
// a deferred glyph loader, for retrieving glyphs only once they are absolutely
// necessary, to keep the memory footprint down.
function GlyphSet(font, glyphs) {
    this.font = font;
    this.glyphs = {};
    if (Array.isArray(glyphs)) {
        for (var i = 0; i < glyphs.length; i++) {
            this.glyphs[i] = glyphs[i];
        }
    }

    this.length = (glyphs && glyphs.length) || 0;
}

GlyphSet.prototype.get = function(index) {
    if (typeof this.glyphs[index] === 'function') {
        this.glyphs[index] = this.glyphs[index]();
    }

    return this.glyphs[index];
};

GlyphSet.prototype.push = function(index, loader) {
    this.glyphs[index] = loader;
    this.length++;
};

function glyphLoader(font, index) {
    return new _glyph.Glyph({index: index, font: font});
}

/**
 * Generate a stub glyph that can be filled with all metadata *except*
 * the "points" and "path" properties, which must be loaded only once
 * the glyph's path is actually requested for text shaping.
 */

function ttfGlyphLoader(font, index, parseGlyph, data, position, buildPath) {
    return function() {
        var glyph = new _glyph.Glyph({index: index, font: font});

        glyph.path = function() {
            parseGlyph(glyph, data, position);
            var path = buildPath(font.glyphs, glyph);
            path.unitsPerEm = font.unitsPerEm;
            return path;
        };

        return glyph;
    };
}

function cffGlyphLoader(font, index, parseCFFCharstring, charstring) {
    return function() {
        var glyph = new _glyph.Glyph({index: index, font: font});

        glyph.path = function() {
            var path = parseCFFCharstring(font, glyph, charstring);
            path.unitsPerEm = font.unitsPerEm;
            return path;
        };

        return glyph;
    };
}

exports.GlyphSet = GlyphSet;
exports.glyphLoader = glyphLoader;
exports.ttfGlyphLoader = ttfGlyphLoader;
exports.cffGlyphLoader = cffGlyphLoader;

},{"./glyph":5}],7:[function(require,module,exports){
// opentype.js
// https://github.com/nodebox/opentype.js
// (c) 2015 Frederik De Bleser
// opentype.js may be freely distributed under the MIT license.

/* global ArrayBuffer, DataView, Uint8Array, XMLHttpRequest  */



var encoding = require('./encoding');
var _font = require('./font');
var glyph = require('./glyph');
var parse = require('./parse');
var path = require('./path');

var cmap = require('./tables/cmap');
var cff = require('./tables/cff');
var glyf = require('./tables/glyf');
var gpos = require('./tables/gpos');
var head = require('./tables/head');
var hhea = require('./tables/hhea');
var hmtx = require('./tables/hmtx');
var kern = require('./tables/kern');
var loca = require('./tables/loca');
var maxp = require('./tables/maxp');
var _name = require('./tables/name');
var os2 = require('./tables/os2');
var post = require('./tables/post');

// File loaders /////////////////////////////////////////////////////////

// Convert a Node.js Buffer to an ArrayBuffer
function toArrayBuffer(buffer) {
    var arrayBuffer = new ArrayBuffer(buffer.length);
    var data = new Uint8Array(arrayBuffer);
    for (var i = 0; i < buffer.length; i += 1) {
        data[i] = buffer[i];
    }

    return arrayBuffer;
}

function loadFromFile(path, callback) {
    var fs = require('fs');
    fs.readFile(path, function(err, buffer) {
        if (err) {
            return callback(err.message);
        }

        callback(null, toArrayBuffer(buffer));
    });
}

function loadFromUrl(url, callback) {
    var request = new XMLHttpRequest();
    request.open('get', url, true);
    request.responseType = 'arraybuffer';
    request.onload = function() {
        if (request.status !== 200) {
            return callback('Font could not be loaded: ' + request.statusText);
        }

        return callback(null, request.response);
    };

    request.send();
}

// Public API ///////////////////////////////////////////////////////////

// Parse the OpenType file data (as an ArrayBuffer) and return a Font object.
// Throws an error if the font could not be parsed.
function parseBuffer(buffer) {
    var indexToLocFormat;
    var hmtxOffset;
    var glyfOffset;
    var locaOffset;
    var cffOffset;
    var kernOffset;
    var gposOffset;

    // OpenType fonts use big endian byte ordering.
    // We can't rely on typed array view types, because they operate with the endianness of the host computer.
    // Instead we use DataViews where we can specify endianness.

    var font = new _font.Font();
    var data = new DataView(buffer, 0);

    var version = parse.getFixed(data, 0);
    if (version === 1.0) {
        font.outlinesFormat = 'truetype';
    } else {
        version = parse.getTag(data, 0);
        if (version === 'OTTO') {
            font.outlinesFormat = 'cff';
        } else {
            throw new Error('Unsupported OpenType version ' + version);
        }
    }

    var numTables = parse.getUShort(data, 4);

    // Offset into the table records.
    var p = 12;
    for (var i = 0; i < numTables; i += 1) {
        var tag = parse.getTag(data, p);
        var offset = parse.getULong(data, p + 8);
        switch (tag) {
        case 'cmap':
            font.tables.cmap = cmap.parse(data, offset);
            font.encoding = new encoding.CmapEncoding(font.tables.cmap);
            break;
        case 'head':
            font.tables.head = head.parse(data, offset);
            font.unitsPerEm = font.tables.head.unitsPerEm;
            indexToLocFormat = font.tables.head.indexToLocFormat;
            break;
        case 'hhea':
            font.tables.hhea = hhea.parse(data, offset);
            font.ascender = font.tables.hhea.ascender;
            font.descender = font.tables.hhea.descender;
            font.numberOfHMetrics = font.tables.hhea.numberOfHMetrics;
            break;
        case 'hmtx':
            hmtxOffset = offset;
            break;
        case 'maxp':
            font.tables.maxp = maxp.parse(data, offset);
            font.numGlyphs = font.tables.maxp.numGlyphs;
            break;
        case 'name':
            font.tables.name = _name.parse(data, offset);
            font.familyName = font.tables.name.fontFamily;
            font.styleName = font.tables.name.fontSubfamily;
            break;
        case 'OS/2':
            font.tables.os2 = os2.parse(data, offset);
            break;
        case 'post':
            font.tables.post = post.parse(data, offset);
            font.glyphNames = new encoding.GlyphNames(font.tables.post);
            break;
        case 'glyf':
            glyfOffset = offset;
            break;
        case 'loca':
            locaOffset = offset;
            break;
        case 'CFF ':
            cffOffset = offset;
            break;
        case 'kern':
            kernOffset = offset;
            break;
        case 'GPOS':
            gposOffset = offset;
            break;
        }
        p += 16;
    }

    if (glyfOffset && locaOffset) {
        var shortVersion = indexToLocFormat === 0;
        var locaTable = loca.parse(data, locaOffset, font.numGlyphs, shortVersion);
        font.glyphs = glyf.parse(data, glyfOffset, locaTable, font);
        hmtx.parse(data, hmtxOffset, font.numberOfHMetrics, font.numGlyphs, font.glyphs);
        encoding.addGlyphNames(font);
    } else if (cffOffset) {
        cff.parse(data, cffOffset, font);
        encoding.addGlyphNames(font);
    } else {
        throw new Error('Font doesn\'t contain TrueType or CFF outlines.');
    }

    if (kernOffset) {
        font.kerningPairs = kern.parse(data, kernOffset);
    } else {
        font.kerningPairs = {};
    }

    if (gposOffset) {
        gpos.parse(data, gposOffset, font);
    }

    return font;
}

// Asynchronously load the font from a URL or a filesystem. When done, call the callback
// with two arguments `(err, font)`. The `err` will be null on success,
// the `font` is a Font object.
//
// We use the node.js callback convention so that
// opentype.js can integrate with frameworks like async.js.
function load(url, callback) {
    var isNode = typeof window === 'undefined';
    var loadFn = isNode ? loadFromFile : loadFromUrl;
    loadFn(url, function(err, arrayBuffer) {
        if (err) {
            return callback(err);
        }

        var font = parseBuffer(arrayBuffer);
        return callback(null, font);
    });
}

// Syncronously load the font from a URL or file.
// When done, return the font object or throw an error.
function loadSync(url) {
    var fs = require('fs');
    var buffer = fs.readFileSync(url);
    return parseBuffer(toArrayBuffer(buffer));
}

exports._parse = parse;
exports.Font = _font.Font;
exports.Glyph = glyph.Glyph;
exports.Path = path.Path;
exports.parse = parseBuffer;
exports.load = load;
exports.loadSync = loadSync;

},{"./encoding":3,"./font":4,"./glyph":5,"./parse":8,"./path":9,"./tables/cff":11,"./tables/cmap":12,"./tables/glyf":13,"./tables/gpos":14,"./tables/head":15,"./tables/hhea":16,"./tables/hmtx":17,"./tables/kern":18,"./tables/loca":19,"./tables/maxp":20,"./tables/name":21,"./tables/os2":22,"./tables/post":23,"fs":undefined}],8:[function(require,module,exports){
// Parsing utility functions



// Retrieve an unsigned byte from the DataView.
exports.getByte = function getByte(dataView, offset) {
    return dataView.getUint8(offset);
};

exports.getCard8 = exports.getByte;

// Retrieve an unsigned 16-bit short from the DataView.
// The value is stored in big endian.
exports.getUShort = function(dataView, offset) {
    return dataView.getUint16(offset, false);
};

exports.getCard16 = exports.getUShort;

// Retrieve a signed 16-bit short from the DataView.
// The value is stored in big endian.
exports.getShort = function(dataView, offset) {
    return dataView.getInt16(offset, false);
};

// Retrieve an unsigned 32-bit long from the DataView.
// The value is stored in big endian.
exports.getULong = function(dataView, offset) {
    return dataView.getUint32(offset, false);
};

// Retrieve a 32-bit signed fixed-point number (16.16) from the DataView.
// The value is stored in big endian.
exports.getFixed = function(dataView, offset) {
    var decimal = dataView.getInt16(offset, false);
    var fraction = dataView.getUint16(offset + 2, false);
    return decimal + fraction / 65535;
};

// Retrieve a 4-character tag from the DataView.
// Tags are used to identify tables.
exports.getTag = function(dataView, offset) {
    var tag = '';
    for (var i = offset; i < offset + 4; i += 1) {
        tag += String.fromCharCode(dataView.getInt8(i));
    }

    return tag;
};

// Retrieve an offset from the DataView.
// Offsets are 1 to 4 bytes in length, depending on the offSize argument.
exports.getOffset = function(dataView, offset, offSize) {
    var v = 0;
    for (var i = 0; i < offSize; i += 1) {
        v <<= 8;
        v += dataView.getUint8(offset + i);
    }

    return v;
};

// Retrieve a number of bytes from start offset to the end offset from the DataView.
exports.getBytes = function(dataView, startOffset, endOffset) {
    var bytes = [];
    for (var i = startOffset; i < endOffset; i += 1) {
        bytes.push(dataView.getUint8(i));
    }

    return bytes;
};

// Convert the list of bytes to a string.
exports.bytesToString = function(bytes) {
    var s = '';
    for (var i = 0; i < bytes.length; i += 1) {
        s += String.fromCharCode(bytes[i]);
    }

    return s;
};

var typeOffsets = {
    byte: 1,
    uShort: 2,
    short: 2,
    uLong: 4,
    fixed: 4,
    longDateTime: 8,
    tag: 4
};

// A stateful parser that changes the offset whenever a value is retrieved.
// The data is a DataView.
function Parser(data, offset) {
    this.data = data;
    this.offset = offset;
    this.relativeOffset = 0;
}

Parser.prototype.parseByte = function() {
    var v = this.data.getUint8(this.offset + this.relativeOffset);
    this.relativeOffset += 1;
    return v;
};

Parser.prototype.parseChar = function() {
    var v = this.data.getInt8(this.offset + this.relativeOffset);
    this.relativeOffset += 1;
    return v;
};

Parser.prototype.parseCard8 = Parser.prototype.parseByte;

Parser.prototype.parseUShort = function() {
    var v = this.data.getUint16(this.offset + this.relativeOffset);
    this.relativeOffset += 2;
    return v;
};

Parser.prototype.parseCard16 = Parser.prototype.parseUShort;
Parser.prototype.parseSID = Parser.prototype.parseUShort;
Parser.prototype.parseOffset16 = Parser.prototype.parseUShort;

Parser.prototype.parseShort = function() {
    var v = this.data.getInt16(this.offset + this.relativeOffset);
    this.relativeOffset += 2;
    return v;
};

Parser.prototype.parseF2Dot14 = function() {
    var v = this.data.getInt16(this.offset + this.relativeOffset) / 16384;
    this.relativeOffset += 2;
    return v;
};

Parser.prototype.parseULong = function() {
    var v = exports.getULong(this.data, this.offset + this.relativeOffset);
    this.relativeOffset += 4;
    return v;
};

Parser.prototype.parseFixed = function() {
    var v = exports.getFixed(this.data, this.offset + this.relativeOffset);
    this.relativeOffset += 4;
    return v;
};

Parser.prototype.parseOffset16List =
Parser.prototype.parseUShortList = function(count) {
    var offsets = new Array(count);
    var dataView = this.data;
    var offset = this.offset + this.relativeOffset;
    for (var i = 0; i < count; i++) {
        offsets[i] = exports.getUShort(dataView, offset);
        offset += 2;
    }

    this.relativeOffset += count * 2;
    return offsets;
};

Parser.prototype.parseString = function(length) {
    var dataView = this.data;
    var offset = this.offset + this.relativeOffset;
    var string = '';
    this.relativeOffset += length;
    for (var i = 0; i < length; i++) {
        string += String.fromCharCode(dataView.getUint8(offset + i));
    }

    return string;
};

Parser.prototype.parseTag = function() {
    return this.parseString(4);
};

// LONGDATETIME is a 64-bit integer.
// JavaScript and unix timestamps traditionally use 32 bits, so we
// only take the last 32 bits.
Parser.prototype.parseLongDateTime = function() {
    var v = exports.getULong(this.data, this.offset + this.relativeOffset + 4);
    this.relativeOffset += 8;
    return v;
};

Parser.prototype.parseFixed = function() {
    var v = exports.getULong(this.data, this.offset + this.relativeOffset);
    this.relativeOffset += 4;
    return v / 65536;
};

Parser.prototype.parseVersion = function() {
    var major = exports.getUShort(this.data, this.offset + this.relativeOffset);

    // How to interpret the minor version is very vague in the spec. 0x5000 is 5, 0x1000 is 1
    // This returns the correct number if minor = 0xN000 where N is 0-9
    var minor = exports.getUShort(this.data, this.offset + this.relativeOffset + 2);
    this.relativeOffset += 4;
    return major + minor / 0x1000 / 10;
};

Parser.prototype.skip = function(type, amount) {
    if (amount === undefined) {
        amount = 1;
    }

    this.relativeOffset += typeOffsets[type] * amount;
};

exports.Parser = Parser;

},{}],9:[function(require,module,exports){
// Geometric objects



// A b√©zier path containing a set of path commands similar to a SVG path.
// Paths can be drawn on a context using `draw`.
function Path() {
    this.commands = [];
    this.fill = 'black';
    this.stroke = null;
    this.strokeWidth = 1;
}

Path.prototype.moveTo = function(x, y) {
    this.commands.push({
        type: 'M',
        x: x,
        y: y
    });
};

Path.prototype.lineTo = function(x, y) {
    this.commands.push({
        type: 'L',
        x: x,
        y: y
    });
};

Path.prototype.curveTo = Path.prototype.bezierCurveTo = function(x1, y1, x2, y2, x, y) {
    this.commands.push({
        type: 'C',
        x1: x1,
        y1: y1,
        x2: x2,
        y2: y2,
        x: x,
        y: y
    });
};

Path.prototype.quadTo = Path.prototype.quadraticCurveTo = function(x1, y1, x, y) {
    this.commands.push({
        type: 'Q',
        x1: x1,
        y1: y1,
        x: x,
        y: y
    });
};

Path.prototype.close = Path.prototype.closePath = function() {
    this.commands.push({
        type: 'Z'
    });
};

// Add the given path or list of commands to the commands of this path.
Path.prototype.extend = function(pathOrCommands) {
    if (pathOrCommands.commands) {
        pathOrCommands = pathOrCommands.commands;
    }

    Array.prototype.push.apply(this.commands, pathOrCommands);
};

// Draw the path to a 2D context.
Path.prototype.draw = function(ctx) {
    ctx.beginPath();
    for (var i = 0; i < this.commands.length; i += 1) {
        var cmd = this.commands[i];
        if (cmd.type === 'M') {
            ctx.moveTo(cmd.x, cmd.y);
        } else if (cmd.type === 'L') {
            ctx.lineTo(cmd.x, cmd.y);
        } else if (cmd.type === 'C') {
            ctx.bezierCurveTo(cmd.x1, cmd.y1, cmd.x2, cmd.y2, cmd.x, cmd.y);
        } else if (cmd.type === 'Q') {
            ctx.quadraticCurveTo(cmd.x1, cmd.y1, cmd.x, cmd.y);
        } else if (cmd.type === 'Z') {
            ctx.closePath();
        }
    }

    if (this.fill) {
        ctx.fillStyle = this.fill;
        ctx.fill();
    }

    if (this.stroke) {
        ctx.strokeStyle = this.stroke;
        ctx.lineWidth = this.strokeWidth;
        ctx.stroke();
    }
};

// Convert the Path to a string of path data instructions
// See http://www.w3.org/TR/SVG/paths.html#PathData
// Parameters:
// - decimalPlaces: The amount of decimal places for floating-point values (default: 2)
Path.prototype.toPathData = function(decimalPlaces) {
    decimalPlaces = decimalPlaces !== undefined ? decimalPlaces : 2;

    function floatToString(v) {
        if (Math.round(v) === v) {
            return '' + Math.round(v);
        } else {
            return v.toFixed(decimalPlaces);
        }
    }

    function packValues() {
        var s = '';
        for (var i = 0; i < arguments.length; i += 1) {
            var v = arguments[i];
            if (v >= 0 && i > 0) {
                s += ' ';
            }

            s += floatToString(v);
        }

        return s;
    }

    var d = '';
    for (var i = 0; i < this.commands.length; i += 1) {
        var cmd = this.commands[i];
        if (cmd.type === 'M') {
            d += 'M' + packValues(cmd.x, cmd.y);
        } else if (cmd.type === 'L') {
            d += 'L' + packValues(cmd.x, cmd.y);
        } else if (cmd.type === 'C') {
            d += 'C' + packValues(cmd.x1, cmd.y1, cmd.x2, cmd.y2, cmd.x, cmd.y);
        } else if (cmd.type === 'Q') {
            d += 'Q' + packValues(cmd.x1, cmd.y1, cmd.x, cmd.y);
        } else if (cmd.type === 'Z') {
            d += 'Z';
        }
    }

    return d;
};

// Convert the path to a SVG <path> element, as a string.
// Parameters:
// - decimalPlaces: The amount of decimal places for floating-point values (default: 2)
Path.prototype.toSVG = function(decimalPlaces) {
    var svg = '<path d="';
    svg += this.toPathData(decimalPlaces);
    svg += '"';
    if (this.fill & this.fill !== 'black') {
        if (this.fill === null) {
            svg += ' fill="none"';
        } else {
            svg += ' fill="' + this.fill + '"';
        }
    }

    if (this.stroke) {
        svg += ' stroke="' + this.stroke + '" stroke-width="' + this.strokeWidth + '"';
    }

    svg += '/>';
    return svg;
};

exports.Path = Path;

},{}],10:[function(require,module,exports){
// Table metadata



var check = require('./check');
var encode = require('./types').encode;
var sizeOf = require('./types').sizeOf;

function Table(tableName, fields, options) {
    var i;
    for (i = 0; i < fields.length; i += 1) {
        var field = fields[i];
        this[field.name] = field.value;
    }

    this.tableName = tableName;
    this.fields = fields;
    if (options) {
        var optionKeys = Object.keys(options);
        for (i = 0; i < optionKeys.length; i += 1) {
            var k = optionKeys[i];
            var v = options[k];
            if (this[k] !== undefined) {
                this[k] = v;
            }
        }
    }
}

Table.prototype.sizeOf = function() {
    var v = 0;
    for (var i = 0; i < this.fields.length; i += 1) {
        var field = this.fields[i];
        var value = this[field.name];
        if (value === undefined) {
            value = field.value;
        }

        if (typeof value.sizeOf === 'function') {
            v += value.sizeOf();
        } else {
            var sizeOfFunction = sizeOf[field.type];
            check.assert(typeof sizeOfFunction === 'function', 'Could not find sizeOf function for field' + field.name);
            v += sizeOfFunction(value);
        }
    }

    return v;
};

Table.prototype.encode = function() {
    return encode.TABLE(this);
};

exports.Table = Table;

},{"./check":1,"./types":25}],11:[function(require,module,exports){
// The `CFF` table contains the glyph outlines in PostScript format.
// https://www.microsoft.com/typography/OTSPEC/cff.htm
// http://download.microsoft.com/download/8/0/1/801a191c-029d-4af3-9642-555f6fe514ee/cff.pdf
// http://download.microsoft.com/download/8/0/1/801a191c-029d-4af3-9642-555f6fe514ee/type2.pdf



var encoding = require('../encoding');
var glyphset = require('../glyphset');
var parse = require('../parse');
var path = require('../path');
var table = require('../table');

// Custom equals function that can also check lists.
function equals(a, b) {
    if (a === b) {
        return true;
    } else if (Array.isArray(a) && Array.isArray(b)) {
        if (a.length !== b.length) {
            return false;
        }

        for (var i = 0; i < a.length; i += 1) {
            if (!equals(a[i], b[i])) {
                return false;
            }
        }

        return true;
    } else {
        return false;
    }
}

// Parse a `CFF` INDEX array.
// An index array consists of a list of offsets, then a list of objects at those offsets.
function parseCFFIndex(data, start, conversionFn) {
    //var i, objectOffset, endOffset;
    var offsets = [];
    var objects = [];
    var count = parse.getCard16(data, start);
    var i;
    var objectOffset;
    var endOffset;
    if (count !== 0) {
        var offsetSize = parse.getByte(data, start + 2);
        objectOffset = start + ((count + 1) * offsetSize) + 2;
        var pos = start + 3;
        for (i = 0; i < count + 1; i += 1) {
            offsets.push(parse.getOffset(data, pos, offsetSize));
            pos += offsetSize;
        }

        // The total size of the index array is 4 header bytes + the value of the last offset.
        endOffset = objectOffset + offsets[count];
    } else {
        endOffset = start + 2;
    }

    for (i = 0; i < offsets.length - 1; i += 1) {
        var value = parse.getBytes(data, objectOffset + offsets[i], objectOffset + offsets[i + 1]);
        if (conversionFn) {
            value = conversionFn(value);
        }

        objects.push(value);
    }

    return {objects: objects, startOffset: start, endOffset: endOffset};
}

// Parse a `CFF` DICT real value.
function parseFloatOperand(parser) {
    var s = '';
    var eof = 15;
    var lookup = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '.', 'E', 'E-', null, '-'];
    while (true) {
        var b = parser.parseByte();
        var n1 = b >> 4;
        var n2 = b & 15;

        if (n1 === eof) {
            break;
        }

        s += lookup[n1];

        if (n2 === eof) {
            break;
        }

        s += lookup[n2];
    }

    return parseFloat(s);
}

// Parse a `CFF` DICT operand.
function parseOperand(parser, b0) {
    var b1;
    var b2;
    var b3;
    var b4;
    if (b0 === 28) {
        b1 = parser.parseByte();
        b2 = parser.parseByte();
        return b1 << 8 | b2;
    }

    if (b0 === 29) {
        b1 = parser.parseByte();
        b2 = parser.parseByte();
        b3 = parser.parseByte();
        b4 = parser.parseByte();
        return b1 << 24 | b2 << 16 | b3 << 8 | b4;
    }

    if (b0 === 30) {
        return parseFloatOperand(parser);
    }

    if (b0 >= 32 && b0 <= 246) {
        return b0 - 139;
    }

    if (b0 >= 247 && b0 <= 250) {
        b1 = parser.parseByte();
        return (b0 - 247) * 256 + b1 + 108;
    }

    if (b0 >= 251 && b0 <= 254) {
        b1 = parser.parseByte();
        return -(b0 - 251) * 256 - b1 - 108;
    }

    throw new Error('Invalid b0 ' + b0);
}

// Convert the entries returned by `parseDict` to a proper dictionary.
// If a value is a list of one, it is unpacked.
function entriesToObject(entries) {
    var o = {};
    for (var i = 0; i < entries.length; i += 1) {
        var key = entries[i][0];
        var values = entries[i][1];
        var value;
        if (values.length === 1) {
            value = values[0];
        } else {
            value = values;
        }

        if (o.hasOwnProperty(key)) {
            throw new Error('Object ' + o + ' already has key ' + key);
        }

        o[key] = value;
    }

    return o;
}

// Parse a `CFF` DICT object.
// A dictionary contains key-value pairs in a compact tokenized format.
function parseCFFDict(data, start, size) {
    start = start !== undefined ? start : 0;
    var parser = new parse.Parser(data, start);
    var entries = [];
    var operands = [];
    size = size !== undefined ? size : data.length;

    while (parser.relativeOffset < size) {
        var op = parser.parseByte();

        // The first byte for each dict item distinguishes between operator (key) and operand (value).
        // Values <= 21 are operators.
        if (op <= 21) {
            // Two-byte operators have an initial escape byte of 12.
            if (op === 12) {
                op = 1200 + parser.parseByte();
            }

            entries.push([op, operands]);
            operands = [];
        } else {
            // Since the operands (values) come before the operators (keys), we store all operands in a list
            // until we encounter an operator.
            operands.push(parseOperand(parser, op));
        }
    }

    return entriesToObject(entries);
}

// Given a String Index (SID), return the value of the string.
// Strings below index 392 are standard CFF strings and are not encoded in the font.
function getCFFString(strings, index) {
    if (index <= 390) {
        index = encoding.cffStandardStrings[index];
    } else {
        index = strings[index - 391];
    }

    return index;
}

// Interpret a dictionary and return a new dictionary with readable keys and values for missing entries.
// This function takes `meta` which is a list of objects containing `operand`, `name` and `default`.
function interpretDict(dict, meta, strings) {
    var newDict = {};

    // Because we also want to include missing values, we start out from the meta list
    // and lookup values in the dict.
    for (var i = 0; i < meta.length; i += 1) {
        var m = meta[i];
        var value = dict[m.op];
        if (value === undefined) {
            value = m.value !== undefined ? m.value : null;
        }

        if (m.type === 'SID') {
            value = getCFFString(strings, value);
        }

        newDict[m.name] = value;
    }

    return newDict;
}

// Parse the CFF header.
function parseCFFHeader(data, start) {
    var header = {};
    header.formatMajor = parse.getCard8(data, start);
    header.formatMinor = parse.getCard8(data, start + 1);
    header.size = parse.getCard8(data, start + 2);
    header.offsetSize = parse.getCard8(data, start + 3);
    header.startOffset = start;
    header.endOffset = start + 4;
    return header;
}

var TOP_DICT_META = [
    {name: 'version', op: 0, type: 'SID'},
    {name: 'notice', op: 1, type: 'SID'},
    {name: 'copyright', op: 1200, type: 'SID'},
    {name: 'fullName', op: 2, type: 'SID'},
    {name: 'familyName', op: 3, type: 'SID'},
    {name: 'weight', op: 4, type: 'SID'},
    {name: 'isFixedPitch', op: 1201, type: 'number', value: 0},
    {name: 'italicAngle', op: 1202, type: 'number', value: 0},
    {name: 'underlinePosition', op: 1203, type: 'number', value: -100},
    {name: 'underlineThickness', op: 1204, type: 'number', value: 50},
    {name: 'paintType', op: 1205, type: 'number', value: 0},
    {name: 'charstringType', op: 1206, type: 'number', value: 2},
    {name: 'fontMatrix', op: 1207, type: ['real', 'real', 'real', 'real', 'real', 'real'], value: [0.001, 0, 0, 0.001, 0, 0]},
    {name: 'uniqueId', op: 13, type: 'number'},
    {name: 'fontBBox', op: 5, type: ['number', 'number', 'number', 'number'], value: [0, 0, 0, 0]},
    {name: 'strokeWidth', op: 1208, type: 'number', value: 0},
    {name: 'xuid', op: 14, type: [], value: null},
    {name: 'charset', op: 15, type: 'offset', value: 0},
    {name: 'encoding', op: 16, type: 'offset', value: 0},
    {name: 'charStrings', op: 17, type: 'offset', value: 0},
    {name: 'private', op: 18, type: ['number', 'offset'], value: [0, 0]}
];

var PRIVATE_DICT_META = [
    {name: 'subrs', op: 19, type: 'offset', value: 0},
    {name: 'defaultWidthX', op: 20, type: 'number', value: 0},
    {name: 'nominalWidthX', op: 21, type: 'number', value: 0}
];

// Parse the CFF top dictionary. A CFF table can contain multiple fonts, each with their own top dictionary.
// The top dictionary contains the essential metadata for the font, together with the private dictionary.
function parseCFFTopDict(data, strings) {
    var dict = parseCFFDict(data, 0, data.byteLength);
    return interpretDict(dict, TOP_DICT_META, strings);
}

// Parse the CFF private dictionary. We don't fully parse out all the values, only the ones we need.
function parseCFFPrivateDict(data, start, size, strings) {
    var dict = parseCFFDict(data, start, size);
    return interpretDict(dict, PRIVATE_DICT_META, strings);
}

// Parse the CFF charset table, which contains internal names for all the glyphs.
// This function will return a list of glyph names.
// See Adobe TN #5176 chapter 13, "Charsets".
function parseCFFCharset(data, start, nGlyphs, strings) {
    var i;
    var sid;
    var count;
    var parser = new parse.Parser(data, start);

    // The .notdef glyph is not included, so subtract 1.
    nGlyphs -= 1;
    var charset = ['.notdef'];

    var format = parser.parseCard8();
    if (format === 0) {
        for (i = 0; i < nGlyphs; i += 1) {
            sid = parser.parseSID();
            charset.push(getCFFString(strings, sid));
        }
    } else if (format === 1) {
        while (charset.length <= nGlyphs) {
            sid = parser.parseSID();
            count = parser.parseCard8();
            for (i = 0; i <= count; i += 1) {
                charset.push(getCFFString(strings, sid));
                sid += 1;
            }
        }
    } else if (format === 2) {
        while (charset.length <= nGlyphs) {
            sid = parser.parseSID();
            count = parser.parseCard16();
            for (i = 0; i <= count; i += 1) {
                charset.push(getCFFString(strings, sid));
                sid += 1;
            }
        }
    } else {
        throw new Error('Unknown charset format ' + format);
    }

    return charset;
}

// Parse the CFF encoding data. Only one encoding can be specified per font.
// See Adobe TN #5176 chapter 12, "Encodings".
function parseCFFEncoding(data, start, charset) {
    var i;
    var code;
    var enc = {};
    var parser = new parse.Parser(data, start);
    var format = parser.parseCard8();
    if (format === 0) {
        var nCodes = parser.parseCard8();
        for (i = 0; i < nCodes; i += 1) {
            code = parser.parseCard8();
            enc[code] = i;
        }
    } else if (format === 1) {
        var nRanges = parser.parseCard8();
        code = 1;
        for (i = 0; i < nRanges; i += 1) {
            var first = parser.parseCard8();
            var nLeft = parser.parseCard8();
            for (var j = first; j <= first + nLeft; j += 1) {
                enc[j] = code;
                code += 1;
            }
        }
    } else {
        throw new Error('Unknown encoding format ' + format);
    }

    return new encoding.CffEncoding(enc, charset);
}

// Take in charstring code and return a Glyph object.
// The encoding is described in the Type 2 Charstring Format
// https://www.microsoft.com/typography/OTSPEC/charstr2.htm
function parseCFFCharstring(font, glyph, code) {
    var c1x;
    var c1y;
    var c2x;
    var c2y;
    var p = new path.Path();
    var stack = [];
    var nStems = 0;
    var haveWidth = false;
    var width = font.defaultWidthX;
    var open = false;
    var x = 0;
    var y = 0;

    function newContour(x, y) {
        if (open) {
            p.closePath();
        }

        p.moveTo(x, y);
        open = true;
    }

    function parseStems() {
        var hasWidthArg;

        // The number of stem operators on the stack is always even.
        // If the value is uneven, that means a width is specified.
        hasWidthArg = stack.length % 2 !== 0;
        if (hasWidthArg && !haveWidth) {
            width = stack.shift() + font.nominalWidthX;
        }

        nStems += stack.length >> 1;
        stack.length = 0;
        haveWidth = true;
    }

    function parse(code) {
        var b1;
        var b2;
        var b3;
        var b4;
        var codeIndex;
        var subrCode;
        var jpx;
        var jpy;
        var c3x;
        var c3y;
        var c4x;
        var c4y;

        var i = 0;
        while (i < code.length) {
            var v = code[i];
            i += 1;
            switch (v) {
            case 1: // hstem
                parseStems();
                break;
            case 3: // vstem
                parseStems();
                break;
            case 4: // vmoveto
                if (stack.length > 1 && !haveWidth) {
                    width = stack.shift() + font.nominalWidthX;
                    haveWidth = true;
                }

                y += stack.pop();
                newContour(x, y);
                break;
            case 5: // rlineto
                while (stack.length > 0) {
                    x += stack.shift();
                    y += stack.shift();
                    p.lineTo(x, y);
                }

                break;
            case 6: // hlineto
                while (stack.length > 0) {
                    x += stack.shift();
                    p.lineTo(x, y);
                    if (stack.length === 0) {
                        break;
                    }

                    y += stack.shift();
                    p.lineTo(x, y);
                }

                break;
            case 7: // vlineto
                while (stack.length > 0) {
                    y += stack.shift();
                    p.lineTo(x, y);
                    if (stack.length === 0) {
                        break;
                    }

                    x += stack.shift();
                    p.lineTo(x, y);
                }

                break;
            case 8: // rrcurveto
                while (stack.length > 0) {
                    c1x = x + stack.shift();
                    c1y = y + stack.shift();
                    c2x = c1x + stack.shift();
                    c2y = c1y + stack.shift();
                    x = c2x + stack.shift();
                    y = c2y + stack.shift();
                    p.curveTo(c1x, c1y, c2x, c2y, x, y);
                }

                break;
            case 10: // callsubr
                codeIndex = stack.pop() + font.subrsBias;
                subrCode = font.subrs[codeIndex];
                if (subrCode) {
                    parse(subrCode);
                }

                break;
            case 11: // return
                return;
            case 12: // flex operators
                v = code[i];
                i += 1;
                switch (v) {
                case 35: // flex
                    // |- dx1 dy1 dx2 dy2 dx3 dy3 dx4 dy4 dx5 dy5 dx6 dy6 fd flex (12 35) |-
                    c1x = x   + stack.shift();    // dx1
                    c1y = y   + stack.shift();    // dy1
                    c2x = c1x + stack.shift();    // dx2
                    c2y = c1y + stack.shift();    // dy2
                    jpx = c2x + stack.shift();    // dx3
                    jpy = c2y + stack.shift();    // dy3
                    c3x = jpx + stack.shift();    // dx4
                    c3y = jpy + stack.shift();    // dy4
                    c4x = c3x + stack.shift();    // dx5
                    c4y = c3y + stack.shift();    // dy5
                    x = c4x + stack.shift();      // dx6
                    y = c4y + stack.shift();      // dy6
                    stack.shift();                // flex depth
                    p.curveTo(c1x, c1y, c2x, c2y, jpx, jpy);
                    p.curveTo(c3x, c3y, c4x, c4y, x, y);
                    break;
                case 34: // hflex
                    // |- dx1 dx2 dy2 dx3 dx4 dx5 dx6 hflex (12 34) |-
                    c1x = x   + stack.shift();    // dx1
                    c1y = y;                      // dy1
                    c2x = c1x + stack.shift();    // dx2
                    c2y = c1y + stack.shift();    // dy2
                    jpx = c2x + stack.shift();    // dx3
                    jpy = c2y;                    // dy3
                    c3x = jpx + stack.shift();    // dx4
                    c3y = c2y;                    // dy4
                    c4x = c3x + stack.shift();    // dx5
                    c4y = y;                      // dy5
                    x = c4x + stack.shift();      // dx6
                    p.curveTo(c1x, c1y, c2x, c2y, jpx, jpy);
                    p.curveTo(c3x, c3y, c4x, c4y, x, y);
                    break;
                case 36: // hflex1
                    // |- dx1 dy1 dx2 dy2 dx3 dx4 dx5 dy5 dx6 hflex1 (12 36) |-
                    c1x = x   + stack.shift();    // dx1
                    c1y = y   + stack.shift();    // dy1
                    c2x = c1x + stack.shift();    // dx2
                    c2y = c1y + stack.shift();    // dy2
                    jpx = c2x + stack.shift();    // dx3
                    jpy = c2y;                    // dy3
                    c3x = jpx + stack.shift();    // dx4
                    c3y = c2y;                    // dy4
                    c4x = c3x + stack.shift();    // dx5
                    c4y = c3y + stack.shift();    // dy5
                    x = c4x + stack.shift();      // dx6
                    p.curveTo(c1x, c1y, c2x, c2y, jpx, jpy);
                    p.curveTo(c3x, c3y, c4x, c4y, x, y);
                    break;
                case 37: // flex1
                    // |- dx1 dy1 dx2 dy2 dx3 dy3 dx4 dy4 dx5 dy5 d6 flex1 (12 37) |-
                    c1x = x   + stack.shift();    // dx1
                    c1y = y   + stack.shift();    // dy1
                    c2x = c1x + stack.shift();    // dx2
                    c2y = c1y + stack.shift();    // dy2
                    jpx = c2x + stack.shift();    // dx3
                    jpy = c2y + stack.shift();    // dy3
                    c3x = jpx + stack.shift();    // dx4
                    c3y = jpy + stack.shift();    // dy4
                    c4x = c3x + stack.shift();    // dx5
                    c4y = c3y + stack.shift();    // dy5
                    if (Math.abs(c4x - x) > Math.abs(c4y - y)) {
                        x = c4x + stack.shift();
                    } else {
                        y = c4y + stack.shift();
                    }

                    p.curveTo(c1x, c1y, c2x, c2y, jpx, jpy);
                    p.curveTo(c3x, c3y, c4x, c4y, x, y);
                    break;
                default:
                    console.log('Glyph ' + glyph.index + ': unknown operator ' + 1200 + v);
                    stack.length = 0;
                }
                break;
            case 14: // endchar
                if (stack.length > 0 && !haveWidth) {
                    width = stack.shift() + font.nominalWidthX;
                    haveWidth = true;
                }

                if (open) {
                    p.closePath();
                    open = false;
                }

                break;
            case 18: // hstemhm
                parseStems();
                break;
            case 19: // hintmask
            case 20: // cntrmask
                parseStems();
                i += (nStems + 7) >> 3;
                break;
            case 21: // rmoveto
                if (stack.length > 2 && !haveWidth) {
                    width = stack.shift() + font.nominalWidthX;
                    haveWidth = true;
                }

                y += stack.pop();
                x += stack.pop();
                newContour(x, y);
                break;
            case 22: // hmoveto
                if (stack.length > 1 && !haveWidth) {
                    width = stack.shift() + font.nominalWidthX;
                    haveWidth = true;
                }

                x += stack.pop();
                newContour(x, y);
                break;
            case 23: // vstemhm
                parseStems();
                break;
            case 24: // rcurveline
                while (stack.length > 2) {
                    c1x = x + stack.shift();
                    c1y = y + stack.shift();
                    c2x = c1x + stack.shift();
                    c2y = c1y + stack.shift();
                    x = c2x + stack.shift();
                    y = c2y + stack.shift();
                    p.curveTo(c1x, c1y, c2x, c2y, x, y);
                }

                x += stack.shift();
                y += stack.shift();
                p.lineTo(x, y);
                break;
            case 25: // rlinecurve
                while (stack.length > 6) {
                    x += stack.shift();
                    y += stack.shift();
                    p.lineTo(x, y);
                }

                c1x = x + stack.shift();
                c1y = y + stack.shift();
                c2x = c1x + stack.shift();
                c2y = c1y + stack.shift();
                x = c2x + stack.shift();
                y = c2y + stack.shift();
                p.curveTo(c1x, c1y, c2x, c2y, x, y);
                break;
            case 26: // vvcurveto
                if (stack.length % 2) {
                    x += stack.shift();
                }

                while (stack.length > 0) {
                    c1x = x;
                    c1y = y + stack.shift();
                    c2x = c1x + stack.shift();
                    c2y = c1y + stack.shift();
                    x = c2x;
                    y = c2y + stack.shift();
                    p.curveTo(c1x, c1y, c2x, c2y, x, y);
                }

                break;
            case 27: // hhcurveto
                if (stack.length % 2) {
                    y += stack.shift();
                }

                while (stack.length > 0) {
                    c1x = x + stack.shift();
                    c1y = y;
                    c2x = c1x + stack.shift();
                    c2y = c1y + stack.shift();
                    x = c2x + stack.shift();
                    y = c2y;
                    p.curveTo(c1x, c1y, c2x, c2y, x, y);
                }

                break;
            case 28: // shortint
                b1 = code[i];
                b2 = code[i + 1];
                stack.push(((b1 << 24) | (b2 << 16)) >> 16);
                i += 2;
                break;
            case 29: // callgsubr
                codeIndex = stack.pop() + font.gsubrsBias;
                subrCode = font.gsubrs[codeIndex];
                if (subrCode) {
                    parse(subrCode);
                }

                break;
            case 30: // vhcurveto
                while (stack.length > 0) {
                    c1x = x;
                    c1y = y + stack.shift();
                    c2x = c1x + stack.shift();
                    c2y = c1y + stack.shift();
                    x = c2x + stack.shift();
                    y = c2y + (stack.length === 1 ? stack.shift() : 0);
                    p.curveTo(c1x, c1y, c2x, c2y, x, y);
                    if (stack.length === 0) {
                        break;
                    }

                    c1x = x + stack.shift();
                    c1y = y;
                    c2x = c1x + stack.shift();
                    c2y = c1y + stack.shift();
                    y = c2y + stack.shift();
                    x = c2x + (stack.length === 1 ? stack.shift() : 0);
                    p.curveTo(c1x, c1y, c2x, c2y, x, y);
                }

                break;
            case 31: // hvcurveto
                while (stack.length > 0) {
                    c1x = x + stack.shift();
                    c1y = y;
                    c2x = c1x + stack.shift();
                    c2y = c1y + stack.shift();
                    y = c2y + stack.shift();
                    x = c2x + (stack.length === 1 ? stack.shift() : 0);
                    p.curveTo(c1x, c1y, c2x, c2y, x, y);
                    if (stack.length === 0) {
                        break;
                    }

                    c1x = x;
                    c1y = y + stack.shift();
                    c2x = c1x + stack.shift();
                    c2y = c1y + stack.shift();
                    x = c2x + stack.shift();
                    y = c2y + (stack.length === 1 ? stack.shift() : 0);
                    p.curveTo(c1x, c1y, c2x, c2y, x, y);
                }

                break;
            default:
                if (v < 32) {
                    console.log('Glyph ' + glyph.index + ': unknown operator ' + v);
                } else if (v < 247) {
                    stack.push(v - 139);
                } else if (v < 251) {
                    b1 = code[i];
                    i += 1;
                    stack.push((v - 247) * 256 + b1 + 108);
                } else if (v < 255) {
                    b1 = code[i];
                    i += 1;
                    stack.push(-(v - 251) * 256 - b1 - 108);
                } else {
                    b1 = code[i];
                    b2 = code[i + 1];
                    b3 = code[i + 2];
                    b4 = code[i + 3];
                    i += 4;
                    stack.push(((b1 << 24) | (b2 << 16) | (b3 << 8) | b4) / 65536);
                }
            }
        }
    }

    parse(code);

    glyph.advanceWidth = width;
    return p;
}

// Subroutines are encoded using the negative half of the number space.
// See type 2 chapter 4.7 "Subroutine operators".
function calcCFFSubroutineBias(subrs) {
    var bias;
    if (subrs.length < 1240) {
        bias = 107;
    } else if (subrs.length < 33900) {
        bias = 1131;
    } else {
        bias = 32768;
    }

    return bias;
}

// Parse the `CFF` table, which contains the glyph outlines in PostScript format.
function parseCFFTable(data, start, font) {
    font.tables.cff = {};
    var header = parseCFFHeader(data, start);
    var nameIndex = parseCFFIndex(data, header.endOffset, parse.bytesToString);
    var topDictIndex = parseCFFIndex(data, nameIndex.endOffset);
    var stringIndex = parseCFFIndex(data, topDictIndex.endOffset, parse.bytesToString);
    var globalSubrIndex = parseCFFIndex(data, stringIndex.endOffset);
    font.gsubrs = globalSubrIndex.objects;
    font.gsubrsBias = calcCFFSubroutineBias(font.gsubrs);

    var topDictData = new DataView(new Uint8Array(topDictIndex.objects[0]).buffer);
    var topDict = parseCFFTopDict(topDictData, stringIndex.objects);
    font.tables.cff.topDict = topDict;

    var privateDictOffset = start + topDict['private'][1];
    var privateDict = parseCFFPrivateDict(data, privateDictOffset, topDict['private'][0], stringIndex.objects);
    font.defaultWidthX = privateDict.defaultWidthX;
    font.nominalWidthX = privateDict.nominalWidthX;

    if (privateDict.subrs !== 0) {
        var subrOffset = privateDictOffset + privateDict.subrs;
        var subrIndex = parseCFFIndex(data, subrOffset);
        font.subrs = subrIndex.objects;
        font.subrsBias = calcCFFSubroutineBias(font.subrs);
    } else {
        font.subrs = [];
        font.subrsBias = 0;
    }

    // Offsets in the top dict are relative to the beginning of the CFF data, so add the CFF start offset.
    var charStringsIndex = parseCFFIndex(data, start + topDict.charStrings);
    font.nGlyphs = charStringsIndex.objects.length;

    var charset = parseCFFCharset(data, start + topDict.charset, font.nGlyphs, stringIndex.objects);
    if (topDict.encoding === 0) { // Standard encoding
        font.cffEncoding = new encoding.CffEncoding(encoding.cffStandardEncoding, charset);
    } else if (topDict.encoding === 1) { // Expert encoding
        font.cffEncoding = new encoding.CffEncoding(encoding.cffExpertEncoding, charset);
    } else {
        font.cffEncoding = parseCFFEncoding(data, start + topDict.encoding, charset);
    }

    // Prefer the CMAP encoding to the CFF encoding.
    font.encoding = font.encoding || font.cffEncoding;

    font.glyphs = new glyphset.GlyphSet(font);
    for (var i = 0; i < font.nGlyphs; i += 1) {
        var charString = charStringsIndex.objects[i];
        font.glyphs.push(i, glyphset.cffGlyphLoader(font, i, parseCFFCharstring, charString));
    }
}

// Convert a string to a String ID (SID).
// The list of strings is modified in place.
function encodeString(s, strings) {
    var sid;

    // Is the string in the CFF standard strings?
    var i = encoding.cffStandardStrings.indexOf(s);
    if (i >= 0) {
        sid = i;
    }

    // Is the string already in the string index?
    i = strings.indexOf(s);
    if (i >= 0) {
        sid = i + encoding.cffStandardStrings.length;
    } else {
        sid = encoding.cffStandardStrings.length + strings.length;
        strings.push(s);
    }

    return sid;
}

function makeHeader() {
    return new table.Table('Header', [
        {name: 'major', type: 'Card8', value: 1},
        {name: 'minor', type: 'Card8', value: 0},
        {name: 'hdrSize', type: 'Card8', value: 4},
        {name: 'major', type: 'Card8', value: 1}
    ]);
}

function makeNameIndex(fontNames) {
    var t = new table.Table('Name INDEX', [
        {name: 'names', type: 'INDEX', value: []}
    ]);
    t.names = [];
    for (var i = 0; i < fontNames.length; i += 1) {
        t.names.push({name: 'name_' + i, type: 'NAME', value: fontNames[i]});
    }

    return t;
}

// Given a dictionary's metadata, create a DICT structure.
function makeDict(meta, attrs, strings) {
    var m = {};
    for (var i = 0; i < meta.length; i += 1) {
        var entry = meta[i];
        var value = attrs[entry.name];
        if (value !== undefined && !equals(value, entry.value)) {
            if (entry.type === 'SID') {
                value = encodeString(value, strings);
            }

            m[entry.op] = {name: entry.name, type: entry.type, value: value};
        }
    }

    return m;
}

// The Top DICT houses the global font attributes.
function makeTopDict(attrs, strings) {
    var t = new table.Table('Top DICT', [
        {name: 'dict', type: 'DICT', value: {}}
    ]);
    t.dict = makeDict(TOP_DICT_META, attrs, strings);
    return t;
}

function makeTopDictIndex(topDict) {
    var t = new table.Table('Top DICT INDEX', [
        {name: 'topDicts', type: 'INDEX', value: []}
    ]);
    t.topDicts = [{name: 'topDict_0', type: 'TABLE', value: topDict}];
    return t;
}

function makeStringIndex(strings) {
    var t = new table.Table('String INDEX', [
        {name: 'strings', type: 'INDEX', value: []}
    ]);
    t.strings = [];
    for (var i = 0; i < strings.length; i += 1) {
        t.strings.push({name: 'string_' + i, type: 'STRING', value: strings[i]});
    }

    return t;
}

function makeGlobalSubrIndex() {
    // Currently we don't use subroutines.
    return new table.Table('Global Subr INDEX', [
        {name: 'subrs', type: 'INDEX', value: []}
    ]);
}

function makeCharsets(glyphNames, strings) {
    var t = new table.Table('Charsets', [
        {name: 'format', type: 'Card8', value: 0}
    ]);
    for (var i = 0; i < glyphNames.length; i += 1) {
        var glyphName = glyphNames[i];
        var glyphSID = encodeString(glyphName, strings);
        t.fields.push({name: 'glyph_' + i, type: 'SID', value: glyphSID});
    }

    return t;
}

function glyphToOps(glyph) {
    var ops = [];
    var path = glyph.path;
    ops.push({name: 'width', type: 'NUMBER', value: glyph.advanceWidth});
    var x = 0;
    var y = 0;
    for (var i = 0; i < path.commands.length; i += 1) {
        var dx;
        var dy;
        var cmd = path.commands[i];
        if (cmd.type === 'Q') {
            // CFF only supports b√©zier curves, so convert the quad to a b√©zier.
            var _13 = 1 / 3;
            var _23 = 2 / 3;

            // We're going to create a new command so we don't change the original path.
            cmd = {
                type: 'C',
                x: cmd.x,
                y: cmd.y,
                x1: _13 * x + _23 * cmd.x1,
                y1: _13 * y + _23 * cmd.y1,
                x2: _13 * cmd.x + _23 * cmd.x1,
                y2: _13 * cmd.y + _23 * cmd.y1
            };
        }

        if (cmd.type === 'M') {
            dx = Math.round(cmd.x - x);
            dy = Math.round(cmd.y - y);
            ops.push({name: 'dx', type: 'NUMBER', value: dx});
            ops.push({name: 'dy', type: 'NUMBER', value: dy});
            ops.push({name: 'rmoveto', type: 'OP', value: 21});
            x = Math.round(cmd.x);
            y = Math.round(cmd.y);
        } else if (cmd.type === 'L') {
            dx = Math.round(cmd.x - x);
            dy = Math.round(cmd.y - y);
            ops.push({name: 'dx', type: 'NUMBER', value: dx});
            ops.push({name: 'dy', type: 'NUMBER', value: dy});
            ops.push({name: 'rlineto', type: 'OP', value: 5});
            x = Math.round(cmd.x);
            y = Math.round(cmd.y);
        } else if (cmd.type === 'C') {
            var dx1 = Math.round(cmd.x1 - x);
            var dy1 = Math.round(cmd.y1 - y);
            var dx2 = Math.round(cmd.x2 - cmd.x1);
            var dy2 = Math.round(cmd.y2 - cmd.y1);
            dx = Math.round(cmd.x - cmd.x2);
            dy = Math.round(cmd.y - cmd.y2);
            ops.push({name: 'dx1', type: 'NUMBER', value: dx1});
            ops.push({name: 'dy1', type: 'NUMBER', value: dy1});
            ops.push({name: 'dx2', type: 'NUMBER', value: dx2});
            ops.push({name: 'dy2', type: 'NUMBER', value: dy2});
            ops.push({name: 'dx', type: 'NUMBER', value: dx});
            ops.push({name: 'dy', type: 'NUMBER', value: dy});
            ops.push({name: 'rrcurveto', type: 'OP', value: 8});
            x = Math.round(cmd.x);
            y = Math.round(cmd.y);
        }

        // Contours are closed automatically.

    }

    ops.push({name: 'endchar', type: 'OP', value: 14});
    return ops;
}

function makeCharStringsIndex(glyphs) {
    var t = new table.Table('CharStrings INDEX', [
        {name: 'charStrings', type: 'INDEX', value: []}
    ]);

    for (var i = 0; i < glyphs.length; i += 1) {
        var glyph = glyphs.get(i);
        var ops = glyphToOps(glyph);
        t.charStrings.push({name: glyph.name, type: 'CHARSTRING', value: ops});
    }

    return t;
}

function makePrivateDict(attrs, strings) {
    var t = new table.Table('Private DICT', [
        {name: 'dict', type: 'DICT', value: {}}
    ]);
    t.dict = makeDict(PRIVATE_DICT_META, attrs, strings);
    return t;
}

function makePrivateDictIndex(privateDict) {
    var t = new table.Table('Private DICT INDEX', [
        {name: 'privateDicts', type: 'INDEX', value: []}
    ]);
    t.privateDicts = [{name: 'privateDict_0', type: 'TABLE', value: privateDict}];
    return t;
}

function makeCFFTable(glyphs, options) {
    var t = new table.Table('CFF ', [
        {name: 'header', type: 'TABLE'},
        {name: 'nameIndex', type: 'TABLE'},
        {name: 'topDictIndex', type: 'TABLE'},
        {name: 'stringIndex', type: 'TABLE'},
        {name: 'globalSubrIndex', type: 'TABLE'},
        {name: 'charsets', type: 'TABLE'},
        {name: 'charStringsIndex', type: 'TABLE'},
        {name: 'privateDictIndex', type: 'TABLE'}
    ]);

    var fontScale = 1 / options.unitsPerEm;
    // We use non-zero values for the offsets so that the DICT encodes them.
    // This is important because the size of the Top DICT plays a role in offset calculation,
    // and the size shouldn't change after we've written correct offsets.
    var attrs = {
        version: options.version,
        fullName: options.fullName,
        familyName: options.familyName,
        weight: options.weightName,
        fontMatrix: [fontScale, 0, 0, fontScale, 0, 0],
        charset: 999,
        encoding: 0,
        charStrings: 999,
        private: [0, 999]
    };

    var privateAttrs = {};

    var glyphNames = [];
    var glyph;

    // Skip first glyph (.notdef)
    for (var i = 1; i < glyphs.length; i += 1) {
        glyph = glyphs.get(i);
        glyphNames.push(glyph.name);
    }

    var strings = [];

    t.header = makeHeader();
    t.nameIndex = makeNameIndex([options.postScriptName]);
    var topDict = makeTopDict(attrs, strings);
    t.topDictIndex = makeTopDictIndex(topDict);
    t.globalSubrIndex = makeGlobalSubrIndex();
    t.charsets = makeCharsets(glyphNames, strings);
    t.charStringsIndex = makeCharStringsIndex(glyphs);
    var privateDict = makePrivateDict(privateAttrs, strings);
    t.privateDictIndex = makePrivateDictIndex(privateDict);

    // Needs to come at the end, to encode all custom strings used in the font.
    t.stringIndex = makeStringIndex(strings);

    var startOffset = t.header.sizeOf() +
        t.nameIndex.sizeOf() +
        t.topDictIndex.sizeOf() +
        t.stringIndex.sizeOf() +
        t.globalSubrIndex.sizeOf();
    attrs.charset = startOffset;

    // We use the CFF standard encoding; proper encoding will be handled in cmap.
    attrs.encoding = 0;
    attrs.charStrings = attrs.charset + t.charsets.sizeOf();
    attrs.private[1] = attrs.charStrings + t.charStringsIndex.sizeOf();

    // Recreate the Top DICT INDEX with the correct offsets.
    topDict = makeTopDict(attrs, strings);
    t.topDictIndex = makeTopDictIndex(topDict);

    return t;
}

exports.parse = parseCFFTable;
exports.make = makeCFFTable;

},{"../encoding":3,"../glyphset":6,"../parse":8,"../path":9,"../table":10}],12:[function(require,module,exports){
// The `cmap` table stores the mappings from characters to glyphs.
// https://www.microsoft.com/typography/OTSPEC/cmap.htm



var check = require('../check');
var parse = require('../parse');
var table = require('../table');

// Parse the `cmap` table. This table stores the mappings from characters to glyphs.
// There are many available formats, but we only support the Windows format 4.
// This function returns a `CmapEncoding` object or null if no supported format could be found.
function parseCmapTable(data, start) {
    var i;
    var cmap = {};
    cmap.version = parse.getUShort(data, start);
    check.argument(cmap.version === 0, 'cmap table version should be 0.');

    // The cmap table can contain many sub-tables, each with their own format.
    // We're only interested in a "platform 3" table. This is a Windows format.
    cmap.numTables = parse.getUShort(data, start + 2);
    var offset = -1;
    for (i = 0; i < cmap.numTables; i += 1) {
        var platformId = parse.getUShort(data, start + 4 + (i * 8));
        var encodingId = parse.getUShort(data, start + 4 + (i * 8) + 2);
        if (platformId === 3 && (encodingId === 1 || encodingId === 0)) {
            offset = parse.getULong(data, start + 4 + (i * 8) + 4);
            break;
        }
    }

    if (offset === -1) {
        // There is no cmap table in the font that we support, so return null.
        // This font will be marked as unsupported.
        return null;
    }

    var p = new parse.Parser(data, start + offset);
    cmap.format = p.parseUShort();
    check.argument(cmap.format === 4, 'Only format 4 cmap tables are supported.');

    // Length in bytes of the sub-tables.
    cmap.length = p.parseUShort();
    cmap.language = p.parseUShort();

    // segCount is stored x 2.
    var segCount;
    cmap.segCount = segCount = p.parseUShort() >> 1;

    // Skip searchRange, entrySelector, rangeShift.
    p.skip('uShort', 3);

    // The "unrolled" mapping from character codes to glyph indices.
    cmap.glyphIndexMap = {};

    var endCountParser = new parse.Parser(data, start + offset + 14);
    var startCountParser = new parse.Parser(data, start + offset + 16 + segCount * 2);
    var idDeltaParser = new parse.Parser(data, start + offset + 16 + segCount * 4);
    var idRangeOffsetParser = new parse.Parser(data, start + offset + 16 + segCount * 6);
    var glyphIndexOffset = start + offset + 16 + segCount * 8;
    for (i = 0; i < segCount - 1; i += 1) {
        var glyphIndex;
        var endCount = endCountParser.parseUShort();
        var startCount = startCountParser.parseUShort();
        var idDelta = idDeltaParser.parseShort();
        var idRangeOffset = idRangeOffsetParser.parseUShort();
        for (var c = startCount; c <= endCount; c += 1) {
            if (idRangeOffset !== 0) {
                // The idRangeOffset is relative to the current position in the idRangeOffset array.
                // Take the current offset in the idRangeOffset array.
                glyphIndexOffset = (idRangeOffsetParser.offset + idRangeOffsetParser.relativeOffset - 2);

                // Add the value of the idRangeOffset, which will move us into the glyphIndex array.
                glyphIndexOffset += idRangeOffset;

                // Then add the character index of the current segment, multiplied by 2 for USHORTs.
                glyphIndexOffset += (c - startCount) * 2;
                glyphIndex = parse.getUShort(data, glyphIndexOffset);
                if (glyphIndex !== 0) {
                    glyphIndex = (glyphIndex + idDelta) & 0xFFFF;
                }
            } else {
                glyphIndex = (c + idDelta) & 0xFFFF;
            }

            cmap.glyphIndexMap[c] = glyphIndex;
        }
    }

    return cmap;
}

function addSegment(t, code, glyphIndex) {
    t.segments.push({
        end: code,
        start: code,
        delta: -(code - glyphIndex),
        offset: 0
    });
}

function addTerminatorSegment(t) {
    t.segments.push({
        end: 0xFFFF,
        start: 0xFFFF,
        delta: 1,
        offset: 0
    });
}

function makeCmapTable(glyphs) {
    var i;
    var t = new table.Table('cmap', [
        {name: 'version', type: 'USHORT', value: 0},
        {name: 'numTables', type: 'USHORT', value: 1},
        {name: 'platformID', type: 'USHORT', value: 3},
        {name: 'encodingID', type: 'USHORT', value: 1},
        {name: 'offset', type: 'ULONG', value: 12},
        {name: 'format', type: 'USHORT', value: 4},
        {name: 'length', type: 'USHORT', value: 0},
        {name: 'language', type: 'USHORT', value: 0},
        {name: 'segCountX2', type: 'USHORT', value: 0},
        {name: 'searchRange', type: 'USHORT', value: 0},
        {name: 'entrySelector', type: 'USHORT', value: 0},
        {name: 'rangeShift', type: 'USHORT', value: 0}
    ]);

    t.segments = [];
    for (i = 0; i < glyphs.length; i += 1) {
        var glyph = glyphs.get(i);
        for (var j = 0; j < glyph.unicodes.length; j += 1) {
            addSegment(t, glyph.unicodes[j], i);
        }

        t.segments = t.segments.sort(function(a, b) {
            return a.start - b.start;
        });
    }

    addTerminatorSegment(t);

    var segCount;
    segCount = t.segments.length;
    t.segCountX2 = segCount * 2;
    t.searchRange = Math.pow(2, Math.floor(Math.log(segCount) / Math.log(2))) * 2;
    t.entrySelector = Math.log(t.searchRange / 2) / Math.log(2);
    t.rangeShift = t.segCountX2 - t.searchRange;

    // Set up parallel segment arrays.
    var endCounts = [];
    var startCounts = [];
    var idDeltas = [];
    var idRangeOffsets = [];
    var glyphIds = [];

    for (i = 0; i < segCount; i += 1) {
        var segment = t.segments[i];
        endCounts = endCounts.concat({name: 'end_' + i, type: 'USHORT', value: segment.end});
        startCounts = startCounts.concat({name: 'start_' + i, type: 'USHORT', value: segment.start});
        idDeltas = idDeltas.concat({name: 'idDelta_' + i, type: 'SHORT', value: segment.delta});
        idRangeOffsets = idRangeOffsets.concat({name: 'idRangeOffset_' + i, type: 'USHORT', value: segment.offset});
        if (segment.glyphId !== undefined) {
            glyphIds = glyphIds.concat({name: 'glyph_' + i, type: 'USHORT', value: segment.glyphId});
        }
    }

    t.fields = t.fields.concat(endCounts);
    t.fields.push({name: 'reservedPad', type: 'USHORT', value: 0});
    t.fields = t.fields.concat(startCounts);
    t.fields = t.fields.concat(idDeltas);
    t.fields = t.fields.concat(idRangeOffsets);
    t.fields = t.fields.concat(glyphIds);

    t.length = 14 + // Subtable header
        endCounts.length * 2 +
        2 + // reservedPad
        startCounts.length * 2 +
        idDeltas.length * 2 +
        idRangeOffsets.length * 2 +
        glyphIds.length * 2;

    return t;
}

exports.parse = parseCmapTable;
exports.make = makeCmapTable;

},{"../check":1,"../parse":8,"../table":10}],13:[function(require,module,exports){
// The `glyf` table describes the glyphs in TrueType outline format.
// http://www.microsoft.com/typography/otspec/glyf.htm



var check = require('../check');
var glyphset = require('../glyphset');
var parse = require('../parse');
var path = require('../path');

// Parse the coordinate data for a glyph.
function parseGlyphCoordinate(p, flag, previousValue, shortVectorBitMask, sameBitMask) {
    var v;
    if ((flag & shortVectorBitMask) > 0) {
        // The coordinate is 1 byte long.
        v = p.parseByte();
        // The `same` bit is re-used for short values to signify the sign of the value.
        if ((flag & sameBitMask) === 0) {
            v = -v;
        }

        v = previousValue + v;
    } else {
        //  The coordinate is 2 bytes long.
        // If the `same` bit is set, the coordinate is the same as the previous coordinate.
        if ((flag & sameBitMask) > 0) {
            v = previousValue;
        } else {
            // Parse the coordinate as a signed 16-bit delta value.
            v = previousValue + p.parseShort();
        }
    }

    return v;
}

// Parse a TrueType glyph.
function parseGlyph(glyph, data, start) {
    var p = new parse.Parser(data, start);
    glyph.numberOfContours = p.parseShort();
    glyph.xMin = p.parseShort();
    glyph.yMin = p.parseShort();
    glyph.xMax = p.parseShort();
    glyph.yMax = p.parseShort();
    var flags;
    var flag;
    if (glyph.numberOfContours > 0) {
        var i;
        // This glyph is not a composite.
        var endPointIndices = glyph.endPointIndices = [];
        for (i = 0; i < glyph.numberOfContours; i += 1) {
            endPointIndices.push(p.parseUShort());
        }

        glyph.instructionLength = p.parseUShort();
        glyph.instructions = [];
        for (i = 0; i < glyph.instructionLength; i += 1) {
            glyph.instructions.push(p.parseByte());
        }

        var numberOfCoordinates = endPointIndices[endPointIndices.length - 1] + 1;
        flags = [];
        for (i = 0; i < numberOfCoordinates; i += 1) {
            flag = p.parseByte();
            flags.push(flag);
            // If bit 3 is set, we repeat this flag n times, where n is the next byte.
            if ((flag & 8) > 0) {
                var repeatCount = p.parseByte();
                for (var j = 0; j < repeatCount; j += 1) {
                    flags.push(flag);
                    i += 1;
                }
            }
        }

        check.argument(flags.length === numberOfCoordinates, 'Bad flags.');

        if (endPointIndices.length > 0) {
            var points = [];
            var point;
            // X/Y coordinates are relative to the previous point, except for the first point which is relative to 0,0.
            if (numberOfCoordinates > 0) {
                for (i = 0; i < numberOfCoordinates; i += 1) {
                    flag = flags[i];
                    point = {};
                    point.onCurve = !!(flag & 1);
                    point.lastPointOfContour = endPointIndices.indexOf(i) >= 0;
                    points.push(point);
                }

                var px = 0;
                for (i = 0; i < numberOfCoordinates; i += 1) {
                    flag = flags[i];
                    point = points[i];
                    point.x = parseGlyphCoordinate(p, flag, px, 2, 16);
                    px = point.x;
                }

                var py = 0;
                for (i = 0; i < numberOfCoordinates; i += 1) {
                    flag = flags[i];
                    point = points[i];
                    point.y = parseGlyphCoordinate(p, flag, py, 4, 32);
                    py = point.y;
                }
            }

            glyph.points = points;
        } else {
            glyph.points = [];
        }
    } else if (glyph.numberOfContours === 0) {
        glyph.points = [];
    } else {
        glyph.isComposite = true;
        glyph.points = [];
        glyph.components = [];
        var moreComponents = true;
        while (moreComponents) {
            flags = p.parseUShort();
            var component = {
                glyphIndex: p.parseUShort(),
                xScale: 1,
                scale01: 0,
                scale10: 0,
                yScale: 1,
                dx: 0,
                dy: 0
            };
            if ((flags & 1) > 0) {
                // The arguments are words
                component.dx = p.parseShort();
                component.dy = p.parseShort();
            } else {
                // The arguments are bytes
                component.dx = p.parseChar();
                component.dy = p.parseChar();
            }

            if ((flags & 8) > 0) {
                // We have a scale
                component.xScale = component.yScale = p.parseF2Dot14();
            } else if ((flags & 64) > 0) {
                // We have an X / Y scale
                component.xScale = p.parseF2Dot14();
                component.yScale = p.parseF2Dot14();
            } else if ((flags & 128) > 0) {
                // We have a 2x2 transformation
                component.xScale = p.parseF2Dot14();
                component.scale01 = p.parseF2Dot14();
                component.scale10 = p.parseF2Dot14();
                component.yScale = p.parseF2Dot14();
            }

            glyph.components.push(component);
            moreComponents = !!(flags & 32);
        }
    }
}

// Transform an array of points and return a new array.
function transformPoints(points, transform) {
    var newPoints = [];
    for (var i = 0; i < points.length; i += 1) {
        var pt = points[i];
        var newPt = {
            x: transform.xScale * pt.x + transform.scale01 * pt.y + transform.dx,
            y: transform.scale10 * pt.x + transform.yScale * pt.y + transform.dy,
            onCurve: pt.onCurve,
            lastPointOfContour: pt.lastPointOfContour
        };
        newPoints.push(newPt);
    }

    return newPoints;
}

function getContours(points) {
    var contours = [];
    var currentContour = [];
    for (var i = 0; i < points.length; i += 1) {
        var pt = points[i];
        currentContour.push(pt);
        if (pt.lastPointOfContour) {
            contours.push(currentContour);
            currentContour = [];
        }
    }

    check.argument(currentContour.length === 0, 'There are still points left in the current contour.');
    return contours;
}

// Convert the TrueType glyph outline to a Path.
function getPath(points) {
    var p = new path.Path();
    if (!points) {
        return p;
    }

    var contours = getContours(points);
    for (var i = 0; i < contours.length; i += 1) {
        var contour = contours[i];
        var firstPt = contour[0];
        var lastPt = contour[contour.length - 1];
        var curvePt;
        var realFirstPoint;
        if (firstPt.onCurve) {
            curvePt = null;
            // The first point will be consumed by the moveTo command,
            // so skip it in the loop.
            realFirstPoint = true;
        } else {
            if (lastPt.onCurve) {
                // If the first point is off-curve and the last point is on-curve,
                // start at the last point.
                firstPt = lastPt;
            } else {
                // If both first and last points are off-curve, start at their middle.
                firstPt = { x: (firstPt.x + lastPt.x) / 2, y: (firstPt.y + lastPt.y) / 2 };
            }

            curvePt = firstPt;
            // The first point is synthesized, so don't skip the real first point.
            realFirstPoint = false;
        }

        p.moveTo(firstPt.x, firstPt.y);

        for (var j = realFirstPoint ? 1 : 0; j < contour.length; j += 1) {
            var pt = contour[j];
            var prevPt = j === 0 ? firstPt : contour[j - 1];
            if (prevPt.onCurve && pt.onCurve) {
                // This is a straight line.
                p.lineTo(pt.x, pt.y);
            } else if (prevPt.onCurve && !pt.onCurve) {
                curvePt = pt;
            } else if (!prevPt.onCurve && !pt.onCurve) {
                var midPt = { x: (prevPt.x + pt.x) / 2, y: (prevPt.y + pt.y) / 2 };
                p.quadraticCurveTo(prevPt.x, prevPt.y, midPt.x, midPt.y);
                curvePt = pt;
            } else if (!prevPt.onCurve && pt.onCurve) {
                // Previous point off-curve, this point on-curve.
                p.quadraticCurveTo(curvePt.x, curvePt.y, pt.x, pt.y);
                curvePt = null;
            } else {
                throw new Error('Invalid state.');
            }
        }

        if (firstPt !== lastPt) {
            // Connect the last and first points
            if (curvePt) {
                p.quadraticCurveTo(curvePt.x, curvePt.y, firstPt.x, firstPt.y);
            } else {
                p.lineTo(firstPt.x, firstPt.y);
            }
        }
    }

    p.closePath();
    return p;
}

function buildPath(glyphs, glyph) {
    if (glyph.isComposite) {
        for (var j = 0; j < glyph.components.length; j += 1) {
            var component = glyph.components[j];
            var componentGlyph = glyphs.get(component.glyphIndex);
            if (componentGlyph.points) {
                var transformedPoints = transformPoints(componentGlyph.points, component);
                glyph.points = glyph.points.concat(transformedPoints);
            }
        }
    }

    return getPath(glyph.points);
}

// Parse all the glyphs according to the offsets from the `loca` table.
function parseGlyfTable(data, start, loca, font) {
    var glyphs = new glyphset.GlyphSet(font);
    var i;

    // The last element of the loca table is invalid.
    for (i = 0; i < loca.length - 1; i += 1) {
        var offset = loca[i];
        var nextOffset = loca[i + 1];
        if (offset !== nextOffset) {
            glyphs.push(i, glyphset.ttfGlyphLoader(font, i, parseGlyph, data, start + offset, buildPath));
        } else {
            glyphs.push(i, glyphset.glyphLoader(font, i));
        }
    }

    return glyphs;
}

exports.parse = parseGlyfTable;

},{"../check":1,"../glyphset":6,"../parse":8,"../path":9}],14:[function(require,module,exports){
// The `GPOS` table contains kerning pairs, among other things.
// https://www.microsoft.com/typography/OTSPEC/gpos.htm



var check = require('../check');
var parse = require('../parse');

// Parse ScriptList and FeatureList tables of GPOS, GSUB, GDEF, BASE, JSTF tables.
// These lists are unused by now, this function is just the basis for a real parsing.
function parseTaggedListTable(data, start) {
    var p = new parse.Parser(data, start);
    var n = p.parseUShort();
    var list = [];
    for (var i = 0; i < n; i++) {
        list[p.parseTag()] = { offset: p.parseUShort() };
    }

    return list;
}

// Parse a coverage table in a GSUB, GPOS or GDEF table.
// Format 1 is a simple list of glyph ids,
// Format 2 is a list of ranges. It is expanded in a list of glyphs, maybe not the best idea.
function parseCoverageTable(data, start) {
    var p = new parse.Parser(data, start);
    var format = p.parseUShort();
    var count =  p.parseUShort();
    if (format === 1) {
        return p.parseUShortList(count);
    }
    else if (format === 2) {
        var coverage = [];
        for (; count--;) {
            var begin = p.parseUShort();
            var end = p.parseUShort();
            var index = p.parseUShort();
            for (var i = begin; i <= end; i++) {
                coverage[index++] = i;
            }
        }

        return coverage;
    }
}

// Parse a Class Definition Table in a GSUB, GPOS or GDEF table.
// Returns a function that gets a class value from a glyph ID.
function parseClassDefTable(data, start) {
    var p = new parse.Parser(data, start);
    var format = p.parseUShort();
    if (format === 1) {
        // Format 1 specifies a range of consecutive glyph indices, one class per glyph ID.
        var startGlyph = p.parseUShort();
        var glyphCount = p.parseUShort();
        var classes = p.parseUShortList(glyphCount);
        return function(glyphID) {
            return classes[glyphID - startGlyph] || 0;
        };
    }
    else if (format === 2) {
        // Format 2 defines multiple groups of glyph indices that belong to the same class.
        var rangeCount = p.parseUShort();
        var startGlyphs = [];
        var endGlyphs = [];
        var classValues = [];
        for (var i = 0; i < rangeCount; i++) {
            startGlyphs[i] = p.parseUShort();
            endGlyphs[i] = p.parseUShort();
            classValues[i] = p.parseUShort();
        }

        return function(glyphID) {
            var l = 0;
            var r = startGlyphs.length - 1;
            while (l < r) {
                var c = (l + r + 1) >> 1;
                if (glyphID < startGlyphs[c]) {
                    r = c - 1;
                } else {
                    l = c;
                }
            }

            if (startGlyphs[l] <= glyphID && glyphID <= endGlyphs[l]) {
                return classValues[l] || 0;
            }

            return 0;
        };
    }
}

// Parse a pair adjustment positioning subtable, format 1 or format 2
// The subtable is returned in the form of a lookup function.
function parsePairPosSubTable(data, start) {
    var p = new parse.Parser(data, start);
    // This part is common to format 1 and format 2 subtables
    var format = p.parseUShort();
    var coverageOffset = p.parseUShort();
    var coverage = parseCoverageTable(data, start + coverageOffset);
    // valueFormat 4: XAdvance only, 1: XPlacement only, 0: no ValueRecord for second glyph
    // Only valueFormat1=4 and valueFormat2=0 is supported.
    var valueFormat1 = p.parseUShort();
    var valueFormat2 = p.parseUShort();
    var value1;
    var value2;
    if (valueFormat1 !== 4 || valueFormat2 !== 0) return;
    var sharedPairSets = {};
    if (format === 1) {
        // Pair Positioning Adjustment: Format 1
        var pairSetCount = p.parseUShort();
        var pairSet = [];
        // Array of offsets to PairSet tables-from beginning of PairPos subtable-ordered by Coverage Index
        var pairSetOffsets = p.parseOffset16List(pairSetCount);
        for (var firstGlyph = 0; firstGlyph < pairSetCount; firstGlyph++) {
            var pairSetOffset = pairSetOffsets[firstGlyph];
            var sharedPairSet = sharedPairSets[pairSetOffset];
            if (!sharedPairSet) {
                // Parse a pairset table in a pair adjustment subtable format 1
                sharedPairSet = {};
                p.relativeOffset = pairSetOffset;
                var pairValueCount = p.parseUShort();
                for (; pairValueCount--;) {
                    var secondGlyph = p.parseUShort();
                    if (valueFormat1) value1 = p.parseShort();
                    if (valueFormat2) value2 = p.parseShort();
                    // We only support valueFormat1 = 4 and valueFormat2 = 0,
                    // so value1 is the XAdvance and value2 is empty.
                    sharedPairSet[secondGlyph] = value1;
                }
            }

            pairSet[coverage[firstGlyph]] = sharedPairSet;
        }

        return function(leftGlyph, rightGlyph) {
            var pairs = pairSet[leftGlyph];
            if (pairs) return pairs[rightGlyph];
        };
    }
    else if (format === 2) {
        // Pair Positioning Adjustment: Format 2
        var classDef1Offset = p.parseUShort();
        var classDef2Offset = p.parseUShort();
        var class1Count = p.parseUShort();
        var class2Count = p.parseUShort();
        var getClass1 = parseClassDefTable(data, start + classDef1Offset);
        var getClass2 = parseClassDefTable(data, start + classDef2Offset);

        // Parse kerning values by class pair.
        var kerningMatrix = [];
        for (var i = 0; i < class1Count; i++) {
            var kerningRow = kerningMatrix[i] = [];
            for (var j = 0; j < class2Count; j++) {
                if (valueFormat1) value1 = p.parseShort();
                if (valueFormat2) value2 = p.parseShort();
                // We only support valueFormat1 = 4 and valueFormat2 = 0,
                // so value1 is the XAdvance and value2 is empty.
                kerningRow[j] = value1;
            }
        }

        // Convert coverage list to a hash
        var covered = {};
        for (i = 0; i < coverage.length; i++) covered[coverage[i]] = 1;

        // Get the kerning value for a specific glyph pair.
        return function(leftGlyph, rightGlyph) {
            if (!covered[leftGlyph]) return;
            var class1 = getClass1(leftGlyph);
            var class2 = getClass2(rightGlyph);
            var kerningRow = kerningMatrix[class1];

            if (kerningRow) {
                return kerningRow[class2];
            }
        };
    }
}

// Parse a LookupTable (present in of GPOS, GSUB, GDEF, BASE, JSTF tables).
function parseLookupTable(data, start) {
    var p = new parse.Parser(data, start);
    var lookupType = p.parseUShort();
    var lookupFlag = p.parseUShort();
    var useMarkFilteringSet = lookupFlag & 0x10;
    var subTableCount = p.parseUShort();
    var subTableOffsets = p.parseOffset16List(subTableCount);
    var table = {
        lookupType: lookupType,
        lookupFlag: lookupFlag,
        markFilteringSet: useMarkFilteringSet ? p.parseUShort() : -1
    };
    // LookupType 2, Pair adjustment
    if (lookupType === 2) {
        var subtables = [];
        for (var i = 0; i < subTableCount; i++) {
            subtables.push(parsePairPosSubTable(data, start + subTableOffsets[i]));
        }
        // Return a function which finds the kerning values in the subtables.
        table.getKerningValue = function(leftGlyph, rightGlyph) {
            for (var i = subtables.length; i--;) {
                var value = subtables[i](leftGlyph, rightGlyph);
                if (value !== undefined) return value;
            }

            return 0;
        };
    }

    return table;
}

// Parse the `GPOS` table which contains, among other things, kerning pairs.
// https://www.microsoft.com/typography/OTSPEC/gpos.htm
function parseGposTable(data, start, font) {
    var p = new parse.Parser(data, start);
    var tableVersion = p.parseFixed();
    check.argument(tableVersion === 1, 'Unsupported GPOS table version.');

    // ScriptList and FeatureList - ignored for now
    parseTaggedListTable(data, start + p.parseUShort());
    // 'kern' is the feature we are looking for.
    parseTaggedListTable(data, start + p.parseUShort());

    // LookupList
    var lookupListOffset = p.parseUShort();
    p.relativeOffset = lookupListOffset;
    var lookupCount = p.parseUShort();
    var lookupTableOffsets = p.parseOffset16List(lookupCount);
    var lookupListAbsoluteOffset = start + lookupListOffset;
    for (var i = 0; i < lookupCount; i++) {
        var table = parseLookupTable(data, lookupListAbsoluteOffset + lookupTableOffsets[i]);
        if (table.lookupType === 2 && !font.getGposKerningValue) font.getGposKerningValue = table.getKerningValue;
    }
}

exports.parse = parseGposTable;

},{"../check":1,"../parse":8}],15:[function(require,module,exports){
// The `head` table contains global information about the font.
// https://www.microsoft.com/typography/OTSPEC/head.htm



var check = require('../check');
var parse = require('../parse');
var table = require('../table');

// Parse the header `head` table
function parseHeadTable(data, start) {
    var head = {};
    var p = new parse.Parser(data, start);
    head.version = p.parseVersion();
    head.fontRevision = Math.round(p.parseFixed() * 1000) / 1000;
    head.checkSumAdjustment = p.parseULong();
    head.magicNumber = p.parseULong();
    check.argument(head.magicNumber === 0x5F0F3CF5, 'Font header has wrong magic number.');
    head.flags = p.parseUShort();
    head.unitsPerEm = p.parseUShort();
    head.created = p.parseLongDateTime();
    head.modified = p.parseLongDateTime();
    head.xMin = p.parseShort();
    head.yMin = p.parseShort();
    head.xMax = p.parseShort();
    head.yMax = p.parseShort();
    head.macStyle = p.parseUShort();
    head.lowestRecPPEM = p.parseUShort();
    head.fontDirectionHint = p.parseShort();
    head.indexToLocFormat = p.parseShort();     // 50
    head.glyphDataFormat = p.parseShort();
    return head;
}

function makeHeadTable(options) {
    return new table.Table('head', [
        {name: 'version', type: 'FIXED', value: 0x00010000},
        {name: 'fontRevision', type: 'FIXED', value: 0x00010000},
        {name: 'checkSumAdjustment', type: 'ULONG', value: 0},
        {name: 'magicNumber', type: 'ULONG', value: 0x5F0F3CF5},
        {name: 'flags', type: 'USHORT', value: 0},
        {name: 'unitsPerEm', type: 'USHORT', value: 1000},
        {name: 'created', type: 'LONGDATETIME', value: 0},
        {name: 'modified', type: 'LONGDATETIME', value: 0},
        {name: 'xMin', type: 'SHORT', value: 0},
        {name: 'yMin', type: 'SHORT', value: 0},
        {name: 'xMax', type: 'SHORT', value: 0},
        {name: 'yMax', type: 'SHORT', value: 0},
        {name: 'macStyle', type: 'USHORT', value: 0},
        {name: 'lowestRecPPEM', type: 'USHORT', value: 0},
        {name: 'fontDirectionHint', type: 'SHORT', value: 2},
        {name: 'indexToLocFormat', type: 'SHORT', value: 0},
        {name: 'glyphDataFormat', type: 'SHORT', value: 0}
    ], options);
}

exports.parse = parseHeadTable;
exports.make = makeHeadTable;

},{"../check":1,"../parse":8,"../table":10}],16:[function(require,module,exports){
// The `hhea` table contains information for horizontal layout.
// https://www.microsoft.com/typography/OTSPEC/hhea.htm



var parse = require('../parse');
var table = require('../table');

// Parse the horizontal header `hhea` table
function parseHheaTable(data, start) {
    var hhea = {};
    var p = new parse.Parser(data, start);
    hhea.version = p.parseVersion();
    hhea.ascender = p.parseShort();
    hhea.descender = p.parseShort();
    hhea.lineGap = p.parseShort();
    hhea.advanceWidthMax = p.parseUShort();
    hhea.minLeftSideBearing = p.parseShort();
    hhea.minRightSideBearing = p.parseShort();
    hhea.xMaxExtent = p.parseShort();
    hhea.caretSlopeRise = p.parseShort();
    hhea.caretSlopeRun = p.parseShort();
    hhea.caretOffset = p.parseShort();
    p.relativeOffset += 8;
    hhea.metricDataFormat = p.parseShort();
    hhea.numberOfHMetrics = p.parseUShort();
    return hhea;
}

function makeHheaTable(options) {
    return new table.Table('hhea', [
        {name: 'version', type: 'FIXED', value: 0x00010000},
        {name: 'ascender', type: 'FWORD', value: 0},
        {name: 'descender', type: 'FWORD', value: 0},
        {name: 'lineGap', type: 'FWORD', value: 0},
        {name: 'advanceWidthMax', type: 'UFWORD', value: 0},
        {name: 'minLeftSideBearing', type: 'FWORD', value: 0},
        {name: 'minRightSideBearing', type: 'FWORD', value: 0},
        {name: 'xMaxExtent', type: 'FWORD', value: 0},
        {name: 'caretSlopeRise', type: 'SHORT', value: 1},
        {name: 'caretSlopeRun', type: 'SHORT', value: 0},
        {name: 'caretOffset', type: 'SHORT', value: 0},
        {name: 'reserved1', type: 'SHORT', value: 0},
        {name: 'reserved2', type: 'SHORT', value: 0},
        {name: 'reserved3', type: 'SHORT', value: 0},
        {name: 'reserved4', type: 'SHORT', value: 0},
        {name: 'metricDataFormat', type: 'SHORT', value: 0},
        {name: 'numberOfHMetrics', type: 'USHORT', value: 0}
    ], options);
}

exports.parse = parseHheaTable;
exports.make = makeHheaTable;

},{"../parse":8,"../table":10}],17:[function(require,module,exports){
// The `hmtx` table contains the horizontal metrics for all glyphs.
// https://www.microsoft.com/typography/OTSPEC/hmtx.htm



var parse = require('../parse');
var table = require('../table');

// Parse the `hmtx` table, which contains the horizontal metrics for all glyphs.
// This function augments the glyph array, adding the advanceWidth and leftSideBearing to each glyph.
function parseHmtxTable(data, start, numMetrics, numGlyphs, glyphs) {
    var advanceWidth;
    var leftSideBearing;
    var p = new parse.Parser(data, start);
    for (var i = 0; i < numGlyphs; i += 1) {
        // If the font is monospaced, only one entry is needed. This last entry applies to all subsequent glyphs.
        if (i < numMetrics) {
            advanceWidth = p.parseUShort();
            leftSideBearing = p.parseShort();
        }

        var glyph = glyphs.get(i);
        glyph.advanceWidth = advanceWidth;
        glyph.leftSideBearing = leftSideBearing;
    }
}

function makeHmtxTable(glyphs) {
    var t = new table.Table('hmtx', []);
    for (var i = 0; i < glyphs.length; i += 1) {
        var glyph = glyphs.get(i);
        var advanceWidth = glyph.advanceWidth || 0;
        var leftSideBearing = glyph.leftSideBearing || 0;
        t.fields.push({name: 'advanceWidth_' + i, type: 'USHORT', value: advanceWidth});
        t.fields.push({name: 'leftSideBearing_' + i, type: 'SHORT', value: leftSideBearing});
    }

    return t;
}

exports.parse = parseHmtxTable;
exports.make = makeHmtxTable;

},{"../parse":8,"../table":10}],18:[function(require,module,exports){
// The `kern` table contains kerning pairs.
// Note that some fonts use the GPOS OpenType layout table to specify kerning.
// https://www.microsoft.com/typography/OTSPEC/kern.htm



var check = require('../check');
var parse = require('../parse');

// Parse the `kern` table which contains kerning pairs.
function parseKernTable(data, start) {
    var pairs = {};
    var p = new parse.Parser(data, start);
    var tableVersion = p.parseUShort();
    check.argument(tableVersion === 0, 'Unsupported kern table version.');
    // Skip nTables.
    p.skip('uShort', 1);
    var subTableVersion = p.parseUShort();
    check.argument(subTableVersion === 0, 'Unsupported kern sub-table version.');
    // Skip subTableLength, subTableCoverage
    p.skip('uShort', 2);
    var nPairs = p.parseUShort();
    // Skip searchRange, entrySelector, rangeShift.
    p.skip('uShort', 3);
    for (var i = 0; i < nPairs; i += 1) {
        var leftIndex = p.parseUShort();
        var rightIndex = p.parseUShort();
        var value = p.parseShort();
        pairs[leftIndex + ',' + rightIndex] = value;
    }

    return pairs;
}

exports.parse = parseKernTable;

},{"../check":1,"../parse":8}],19:[function(require,module,exports){
// The `loca` table stores the offsets to the locations of the glyphs in the font.
// https://www.microsoft.com/typography/OTSPEC/loca.htm



var parse = require('../parse');

// Parse the `loca` table. This table stores the offsets to the locations of the glyphs in the font,
// relative to the beginning of the glyphData table.
// The number of glyphs stored in the `loca` table is specified in the `maxp` table (under numGlyphs)
// The loca table has two versions: a short version where offsets are stored as uShorts, and a long
// version where offsets are stored as uLongs. The `head` table specifies which version to use
// (under indexToLocFormat).
function parseLocaTable(data, start, numGlyphs, shortVersion) {
    var p = new parse.Parser(data, start);
    var parseFn = shortVersion ? p.parseUShort : p.parseULong;
    // There is an extra entry after the last index element to compute the length of the last glyph.
    // That's why we use numGlyphs + 1.
    var glyphOffsets = [];
    for (var i = 0; i < numGlyphs + 1; i += 1) {
        var glyphOffset = parseFn.call(p);
        if (shortVersion) {
            // The short table version stores the actual offset divided by 2.
            glyphOffset *= 2;
        }

        glyphOffsets.push(glyphOffset);
    }

    return glyphOffsets;
}

exports.parse = parseLocaTable;

},{"../parse":8}],20:[function(require,module,exports){
// The `maxp` table establishes the memory requirements for the font.
// We need it just to get the number of glyphs in the font.
// https://www.microsoft.com/typography/OTSPEC/maxp.htm



var parse = require('../parse');
var table = require('../table');

// Parse the maximum profile `maxp` table.
function parseMaxpTable(data, start) {
    var maxp = {};
    var p = new parse.Parser(data, start);
    maxp.version = p.parseVersion();
    maxp.numGlyphs = p.parseUShort();
    if (maxp.version === 1.0) {
        maxp.maxPoints = p.parseUShort();
        maxp.maxContours = p.parseUShort();
        maxp.maxCompositePoints = p.parseUShort();
        maxp.maxCompositeContours = p.parseUShort();
        maxp.maxZones = p.parseUShort();
        maxp.maxTwilightPoints = p.parseUShort();
        maxp.maxStorage = p.parseUShort();
        maxp.maxFunctionDefs = p.parseUShort();
        maxp.maxInstructionDefs = p.parseUShort();
        maxp.maxStackElements = p.parseUShort();
        maxp.maxSizeOfInstructions = p.parseUShort();
        maxp.maxComponentElements = p.parseUShort();
        maxp.maxComponentDepth = p.parseUShort();
    }

    return maxp;
}

function makeMaxpTable(numGlyphs) {
    return new table.Table('maxp', [
        {name: 'version', type: 'FIXED', value: 0x00005000},
        {name: 'numGlyphs', type: 'USHORT', value: numGlyphs}
    ]);
}

exports.parse = parseMaxpTable;
exports.make = makeMaxpTable;

},{"../parse":8,"../table":10}],21:[function(require,module,exports){
// The `name` naming table.
// https://www.microsoft.com/typography/OTSPEC/name.htm



var encode = require('../types').encode;
var parse = require('../parse');
var table = require('../table');

// NameIDs for the name table.
var nameTableNames = [
    'copyright',              // 0
    'fontFamily',             // 1
    'fontSubfamily',          // 2
    'uniqueID',               // 3
    'fullName',               // 4
    'version',                // 5
    'postScriptName',         // 6
    'trademark',              // 7
    'manufacturer',           // 8
    'designer',               // 9
    'description',            // 10
    'manufacturerURL',        // 11
    'designerURL',            // 12
    'licence',                // 13
    'licenceURL',             // 14
    'reserved',               // 15
    'preferredFamily',        // 16
    'preferredSubfamily',     // 17
    'compatibleFullName',     // 18
    'sampleText',             // 19
    'postScriptFindFontName', // 20
    'wwsFamily',              // 21
    'wwsSubfamily'            // 22
];

// Parse the naming `name` table
// Only Windows Unicode English names are supported.
// Format 1 additional fields are not supported
function parseNameTable(data, start) {
    var name = {};
    var p = new parse.Parser(data, start);
    name.format = p.parseUShort();
    var count = p.parseUShort();
    var stringOffset = p.offset + p.parseUShort();
    var unknownCount = 0;
    for (var i = 0; i < count; i++) {
        var platformID = p.parseUShort();
        var encodingID = p.parseUShort();
        var languageID = p.parseUShort();
        var nameID = p.parseUShort();
        var property = nameTableNames[nameID];
        var byteLength = p.parseUShort();
        var offset = p.parseUShort();
        // platformID - encodingID - languageID standard combinations :
        // 1 - 0 - 0 : Macintosh, Roman, English
        // 3 - 1 - 0x409 : Windows, Unicode BMP (UCS-2), en-US
        if (platformID === 3 && encodingID === 1 && languageID === 0x409) {
            var codePoints = [];
            var length = byteLength / 2;
            for (var j = 0; j < length; j++, offset += 2) {
                codePoints[j] = parse.getShort(data, stringOffset + offset);
            }

            var str = String.fromCharCode.apply(null, codePoints);
            if (property) {
                name[property] = str;
            }
            else {
                unknownCount++;
                name['unknown' + unknownCount] = str;
            }
        }

    }

    if (name.format === 1) {
        name.langTagCount = p.parseUShort();
    }

    return name;
}

function makeNameRecord(platformID, encodingID, languageID, nameID, length, offset) {
    return new table.Table('NameRecord', [
        {name: 'platformID', type: 'USHORT', value: platformID},
        {name: 'encodingID', type: 'USHORT', value: encodingID},
        {name: 'languageID', type: 'USHORT', value: languageID},
        {name: 'nameID', type: 'USHORT', value: nameID},
        {name: 'length', type: 'USHORT', value: length},
        {name: 'offset', type: 'USHORT', value: offset}
    ]);
}

function addMacintoshNameRecord(t, recordID, s, offset) {
    // Macintosh, Roman, English
    var stringBytes = encode.STRING(s);
    t.records.push(makeNameRecord(1, 0, 0, recordID, stringBytes.length, offset));
    t.strings.push(stringBytes);
    offset += stringBytes.length;
    return offset;
}

function addWindowsNameRecord(t, recordID, s, offset) {
    // Windows, Unicode BMP (UCS-2), US English
    var utf16Bytes = encode.UTF16(s);
    t.records.push(makeNameRecord(3, 1, 0x0409, recordID, utf16Bytes.length, offset));
    t.strings.push(utf16Bytes);
    offset += utf16Bytes.length;
    return offset;
}

function makeNameTable(options) {
    var t = new table.Table('name', [
        {name: 'format', type: 'USHORT', value: 0},
        {name: 'count', type: 'USHORT', value: 0},
        {name: 'stringOffset', type: 'USHORT', value: 0}
    ]);
    t.records = [];
    t.strings = [];
    var offset = 0;
    var i;
    var s;
    // Add Macintosh records first
    for (i = 0; i < nameTableNames.length; i += 1) {
        if (options[nameTableNames[i]] !== undefined) {
            s = options[nameTableNames[i]];
            offset = addMacintoshNameRecord(t, i, s, offset);
        }
    }
    // Then add Windows records
    for (i = 0; i < nameTableNames.length; i += 1) {
        if (options[nameTableNames[i]] !== undefined) {
            s = options[nameTableNames[i]];
            offset = addWindowsNameRecord(t, i, s, offset);
        }
    }

    t.count = t.records.length;
    t.stringOffset = 6 + t.count * 12;
    for (i = 0; i < t.records.length; i += 1) {
        t.fields.push({name: 'record_' + i, type: 'TABLE', value: t.records[i]});
    }

    for (i = 0; i < t.strings.length; i += 1) {
        t.fields.push({name: 'string_' + i, type: 'LITERAL', value: t.strings[i]});
    }

    return t;
}

exports.parse = parseNameTable;
exports.make = makeNameTable;

},{"../parse":8,"../table":10,"../types":25}],22:[function(require,module,exports){
// The `OS/2` table contains metrics required in OpenType fonts.
// https://www.microsoft.com/typography/OTSPEC/os2.htm



var parse = require('../parse');
var table = require('../table');

var unicodeRanges = [
    {begin: 0x0000, end: 0x007F}, // Basic Latin
    {begin: 0x0080, end: 0x00FF}, // Latin-1 Supplement
    {begin: 0x0100, end: 0x017F}, // Latin Extended-A
    {begin: 0x0180, end: 0x024F}, // Latin Extended-B
    {begin: 0x0250, end: 0x02AF}, // IPA Extensions
    {begin: 0x02B0, end: 0x02FF}, // Spacing Modifier Letters
    {begin: 0x0300, end: 0x036F}, // Combining Diacritical Marks
    {begin: 0x0370, end: 0x03FF}, // Greek and Coptic
    {begin: 0x2C80, end: 0x2CFF}, // Coptic
    {begin: 0x0400, end: 0x04FF}, // Cyrillic
    {begin: 0x0530, end: 0x058F}, // Armenian
    {begin: 0x0590, end: 0x05FF}, // Hebrew
    {begin: 0xA500, end: 0xA63F}, // Vai
    {begin: 0x0600, end: 0x06FF}, // Arabic
    {begin: 0x07C0, end: 0x07FF}, // NKo
    {begin: 0x0900, end: 0x097F}, // Devanagari
    {begin: 0x0980, end: 0x09FF}, // Bengali
    {begin: 0x0A00, end: 0x0A7F}, // Gurmukhi
    {begin: 0x0A80, end: 0x0AFF}, // Gujarati
    {begin: 0x0B00, end: 0x0B7F}, // Oriya
    {begin: 0x0B80, end: 0x0BFF}, // Tamil
    {begin: 0x0C00, end: 0x0C7F}, // Telugu
    {begin: 0x0C80, end: 0x0CFF}, // Kannada
    {begin: 0x0D00, end: 0x0D7F}, // Malayalam
    {begin: 0x0E00, end: 0x0E7F}, // Thai
    {begin: 0x0E80, end: 0x0EFF}, // Lao
    {begin: 0x10A0, end: 0x10FF}, // Georgian
    {begin: 0x1B00, end: 0x1B7F}, // Balinese
    {begin: 0x1100, end: 0x11FF}, // Hangul Jamo
    {begin: 0x1E00, end: 0x1EFF}, // Latin Extended Additional
    {begin: 0x1F00, end: 0x1FFF}, // Greek Extended
    {begin: 0x2000, end: 0x206F}, // General Punctuation
    {begin: 0x2070, end: 0x209F}, // Superscripts And Subscripts
    {begin: 0x20A0, end: 0x20CF}, // Currency Symbol
    {begin: 0x20D0, end: 0x20FF}, // Combining Diacritical Marks For Symbols
    {begin: 0x2100, end: 0x214F}, // Letterlike Symbols
    {begin: 0x2150, end: 0x218F}, // Number Forms
    {begin: 0x2190, end: 0x21FF}, // Arrows
    {begin: 0x2200, end: 0x22FF}, // Mathematical Operators
    {begin: 0x2300, end: 0x23FF}, // Miscellaneous Technical
    {begin: 0x2400, end: 0x243F}, // Control Pictures
    {begin: 0x2440, end: 0x245F}, // Optical Character Recognition
    {begin: 0x2460, end: 0x24FF}, // Enclosed Alphanumerics
    {begin: 0x2500, end: 0x257F}, // Box Drawing
    {begin: 0x2580, end: 0x259F}, // Block Elements
    {begin: 0x25A0, end: 0x25FF}, // Geometric Shapes
    {begin: 0x2600, end: 0x26FF}, // Miscellaneous Symbols
    {begin: 0x2700, end: 0x27BF}, // Dingbats
    {begin: 0x3000, end: 0x303F}, // CJK Symbols And Punctuation
    {begin: 0x3040, end: 0x309F}, // Hiragana
    {begin: 0x30A0, end: 0x30FF}, // Katakana
    {begin: 0x3100, end: 0x312F}, // Bopomofo
    {begin: 0x3130, end: 0x318F}, // Hangul Compatibility Jamo
    {begin: 0xA840, end: 0xA87F}, // Phags-pa
    {begin: 0x3200, end: 0x32FF}, // Enclosed CJK Letters And Months
    {begin: 0x3300, end: 0x33FF}, // CJK Compatibility
    {begin: 0xAC00, end: 0xD7AF}, // Hangul Syllables
    {begin: 0xD800, end: 0xDFFF}, // Non-Plane 0 *
    {begin: 0x10900, end: 0x1091F}, // Phoenicia
    {begin: 0x4E00, end: 0x9FFF}, // CJK Unified Ideographs
    {begin: 0xE000, end: 0xF8FF}, // Private Use Area (plane 0)
    {begin: 0x31C0, end: 0x31EF}, // CJK Strokes
    {begin: 0xFB00, end: 0xFB4F}, // Alphabetic Presentation Forms
    {begin: 0xFB50, end: 0xFDFF}, // Arabic Presentation Forms-A
    {begin: 0xFE20, end: 0xFE2F}, // Combining Half Marks
    {begin: 0xFE10, end: 0xFE1F}, // Vertical Forms
    {begin: 0xFE50, end: 0xFE6F}, // Small Form Variants
    {begin: 0xFE70, end: 0xFEFF}, // Arabic Presentation Forms-B
    {begin: 0xFF00, end: 0xFFEF}, // Halfwidth And Fullwidth Forms
    {begin: 0xFFF0, end: 0xFFFF}, // Specials
    {begin: 0x0F00, end: 0x0FFF}, // Tibetan
    {begin: 0x0700, end: 0x074F}, // Syriac
    {begin: 0x0780, end: 0x07BF}, // Thaana
    {begin: 0x0D80, end: 0x0DFF}, // Sinhala
    {begin: 0x1000, end: 0x109F}, // Myanmar
    {begin: 0x1200, end: 0x137F}, // Ethiopic
    {begin: 0x13A0, end: 0x13FF}, // Cherokee
    {begin: 0x1400, end: 0x167F}, // Unified Canadian Aboriginal Syllabics
    {begin: 0x1680, end: 0x169F}, // Ogham
    {begin: 0x16A0, end: 0x16FF}, // Runic
    {begin: 0x1780, end: 0x17FF}, // Khmer
    {begin: 0x1800, end: 0x18AF}, // Mongolian
    {begin: 0x2800, end: 0x28FF}, // Braille Patterns
    {begin: 0xA000, end: 0xA48F}, // Yi Syllables
    {begin: 0x1700, end: 0x171F}, // Tagalog
    {begin: 0x10300, end: 0x1032F}, // Old Italic
    {begin: 0x10330, end: 0x1034F}, // Gothic
    {begin: 0x10400, end: 0x1044F}, // Deseret
    {begin: 0x1D000, end: 0x1D0FF}, // Byzantine Musical Symbols
    {begin: 0x1D400, end: 0x1D7FF}, // Mathematical Alphanumeric Symbols
    {begin: 0xFF000, end: 0xFFFFD}, // Private Use (plane 15)
    {begin: 0xFE00, end: 0xFE0F}, // Variation Selectors
    {begin: 0xE0000, end: 0xE007F}, // Tags
    {begin: 0x1900, end: 0x194F}, // Limbu
    {begin: 0x1950, end: 0x197F}, // Tai Le
    {begin: 0x1980, end: 0x19DF}, // New Tai Lue
    {begin: 0x1A00, end: 0x1A1F}, // Buginese
    {begin: 0x2C00, end: 0x2C5F}, // Glagolitic
    {begin: 0x2D30, end: 0x2D7F}, // Tifinagh
    {begin: 0x4DC0, end: 0x4DFF}, // Yijing Hexagram Symbols
    {begin: 0xA800, end: 0xA82F}, // Syloti Nagri
    {begin: 0x10000, end: 0x1007F}, // Linear B Syllabary
    {begin: 0x10140, end: 0x1018F}, // Ancient Greek Numbers
    {begin: 0x10380, end: 0x1039F}, // Ugaritic
    {begin: 0x103A0, end: 0x103DF}, // Old Persian
    {begin: 0x10450, end: 0x1047F}, // Shavian
    {begin: 0x10480, end: 0x104AF}, // Osmanya
    {begin: 0x10800, end: 0x1083F}, // Cypriot Syllabary
    {begin: 0x10A00, end: 0x10A5F}, // Kharoshthi
    {begin: 0x1D300, end: 0x1D35F}, // Tai Xuan Jing Symbols
    {begin: 0x12000, end: 0x123FF}, // Cuneiform
    {begin: 0x1D360, end: 0x1D37F}, // Counting Rod Numerals
    {begin: 0x1B80, end: 0x1BBF}, // Sundanese
    {begin: 0x1C00, end: 0x1C4F}, // Lepcha
    {begin: 0x1C50, end: 0x1C7F}, // Ol Chiki
    {begin: 0xA880, end: 0xA8DF}, // Saurashtra
    {begin: 0xA900, end: 0xA92F}, // Kayah Li
    {begin: 0xA930, end: 0xA95F}, // Rejang
    {begin: 0xAA00, end: 0xAA5F}, // Cham
    {begin: 0x10190, end: 0x101CF}, // Ancient Symbols
    {begin: 0x101D0, end: 0x101FF}, // Phaistos Disc
    {begin: 0x102A0, end: 0x102DF}, // Carian
    {begin: 0x1F030, end: 0x1F09F}  // Domino Tiles
];

function getUnicodeRange(unicode) {
    for (var i = 0; i < unicodeRanges.length; i += 1) {
        var range = unicodeRanges[i];
        if (unicode >= range.begin && unicode < range.end) {
            return i;
        }
    }

    return -1;
}

// Parse the OS/2 and Windows metrics `OS/2` table
function parseOS2Table(data, start) {
    var os2 = {};
    var p = new parse.Parser(data, start);
    os2.version = p.parseUShort();
    os2.xAvgCharWidth = p.parseShort();
    os2.usWeightClass = p.parseUShort();
    os2.usWidthClass = p.parseUShort();
    os2.fsType = p.parseUShort();
    os2.ySubscriptXSize = p.parseShort();
    os2.ySubscriptYSize = p.parseShort();
    os2.ySubscriptXOffset = p.parseShort();
    os2.ySubscriptYOffset = p.parseShort();
    os2.ySuperscriptXSize = p.parseShort();
    os2.ySuperscriptYSize = p.parseShort();
    os2.ySuperscriptXOffset = p.parseShort();
    os2.ySuperscriptYOffset = p.parseShort();
    os2.yStrikeoutSize = p.parseShort();
    os2.yStrikeoutPosition = p.parseShort();
    os2.sFamilyClass = p.parseShort();
    os2.panose = [];
    for (var i = 0; i < 10; i++) {
        os2.panose[i] = p.parseByte();
    }

    os2.ulUnicodeRange1 = p.parseULong();
    os2.ulUnicodeRange2 = p.parseULong();
    os2.ulUnicodeRange3 = p.parseULong();
    os2.ulUnicodeRange4 = p.parseULong();
    os2.achVendID = String.fromCharCode(p.parseByte(), p.parseByte(), p.parseByte(), p.parseByte());
    os2.fsSelection = p.parseUShort();
    os2.usFirstCharIndex = p.parseUShort();
    os2.usLastCharIndex = p.parseUShort();
    os2.sTypoAscender = p.parseShort();
    os2.sTypoDescender = p.parseShort();
    os2.sTypoLineGap = p.parseShort();
    os2.usWinAscent = p.parseUShort();
    os2.usWinDescent = p.parseUShort();
    if (os2.version >= 1) {
        os2.ulCodePageRange1 = p.parseULong();
        os2.ulCodePageRange2 = p.parseULong();
    }

    if (os2.version >= 2) {
        os2.sxHeight = p.parseShort();
        os2.sCapHeight = p.parseShort();
        os2.usDefaultChar = p.parseUShort();
        os2.usBreakChar = p.parseUShort();
        os2.usMaxContent = p.parseUShort();
    }

    return os2;
}

function makeOS2Table(options) {
    return new table.Table('OS/2', [
        {name: 'version', type: 'USHORT', value: 0x0003},
        {name: 'xAvgCharWidth', type: 'SHORT', value: 0},
        {name: 'usWeightClass', type: 'USHORT', value: 0},
        {name: 'usWidthClass', type: 'USHORT', value: 0},
        {name: 'fsType', type: 'USHORT', value: 0},
        {name: 'ySubscriptXSize', type: 'SHORT', value: 650},
        {name: 'ySubscriptYSize', type: 'SHORT', value: 699},
        {name: 'ySubscriptXOffset', type: 'SHORT', value: 0},
        {name: 'ySubscriptYOffset', type: 'SHORT', value: 140},
        {name: 'ySuperscriptXSize', type: 'SHORT', value: 650},
        {name: 'ySuperscriptYSize', type: 'SHORT', value: 699},
        {name: 'ySuperscriptXOffset', type: 'SHORT', value: 0},
        {name: 'ySuperscriptYOffset', type: 'SHORT', value: 479},
        {name: 'yStrikeoutSize', type: 'SHORT', value: 49},
        {name: 'yStrikeoutPosition', type: 'SHORT', value: 258},
        {name: 'sFamilyClass', type: 'SHORT', value: 0},
        {name: 'bFamilyType', type: 'BYTE', value: 0},
        {name: 'bSerifStyle', type: 'BYTE', value: 0},
        {name: 'bWeight', type: 'BYTE', value: 0},
        {name: 'bProportion', type: 'BYTE', value: 0},
        {name: 'bContrast', type: 'BYTE', value: 0},
        {name: 'bStrokeVariation', type: 'BYTE', value: 0},
        {name: 'bArmStyle', type: 'BYTE', value: 0},
        {name: 'bLetterform', type: 'BYTE', value: 0},
        {name: 'bMidline', type: 'BYTE', value: 0},
        {name: 'bXHeight', type: 'BYTE', value: 0},
        {name: 'ulUnicodeRange1', type: 'ULONG', value: 0},
        {name: 'ulUnicodeRange2', type: 'ULONG', value: 0},
        {name: 'ulUnicodeRange3', type: 'ULONG', value: 0},
        {name: 'ulUnicodeRange4', type: 'ULONG', value: 0},
        {name: 'achVendID', type: 'CHARARRAY', value: 'XXXX'},
        {name: 'fsSelection', type: 'USHORT', value: 0},
        {name: 'usFirstCharIndex', type: 'USHORT', value: 0},
        {name: 'usLastCharIndex', type: 'USHORT', value: 0},
        {name: 'sTypoAscender', type: 'SHORT', value: 0},
        {name: 'sTypoDescender', type: 'SHORT', value: 0},
        {name: 'sTypoLineGap', type: 'SHORT', value: 0},
        {name: 'usWinAscent', type: 'USHORT', value: 0},
        {name: 'usWinDescent', type: 'USHORT', value: 0},
        {name: 'ulCodePageRange1', type: 'ULONG', value: 0},
        {name: 'ulCodePageRange2', type: 'ULONG', value: 0},
        {name: 'sxHeight', type: 'SHORT', value: 0},
        {name: 'sCapHeight', type: 'SHORT', value: 0},
        {name: 'usDefaultChar', type: 'USHORT', value: 0},
        {name: 'usBreakChar', type: 'USHORT', value: 0},
        {name: 'usMaxContext', type: 'USHORT', value: 0}
    ], options);
}

exports.unicodeRanges = unicodeRanges;
exports.getUnicodeRange = getUnicodeRange;
exports.parse = parseOS2Table;
exports.make = makeOS2Table;

},{"../parse":8,"../table":10}],23:[function(require,module,exports){
// The `post` table stores additional PostScript information, such as glyph names.
// https://www.microsoft.com/typography/OTSPEC/post.htm



var encoding = require('../encoding');
var parse = require('../parse');
var table = require('../table');

// Parse the PostScript `post` table
function parsePostTable(data, start) {
    var post = {};
    var p = new parse.Parser(data, start);
    var i;
    post.version = p.parseVersion();
    post.italicAngle = p.parseFixed();
    post.underlinePosition = p.parseShort();
    post.underlineThickness = p.parseShort();
    post.isFixedPitch = p.parseULong();
    post.minMemType42 = p.parseULong();
    post.maxMemType42 = p.parseULong();
    post.minMemType1 = p.parseULong();
    post.maxMemType1 = p.parseULong();
    switch (post.version) {
    case 1:
        post.names = encoding.standardNames.slice();
        break;
    case 2:
        post.numberOfGlyphs = p.parseUShort();
        post.glyphNameIndex = new Array(post.numberOfGlyphs);
        for (i = 0; i < post.numberOfGlyphs; i++) {
            post.glyphNameIndex[i] = p.parseUShort();
        }

        post.names = [];
        for (i = 0; i < post.numberOfGlyphs; i++) {
            if (post.glyphNameIndex[i] >= encoding.standardNames.length) {
                var nameLength = p.parseChar();
                post.names.push(p.parseString(nameLength));
            }
        }

        break;
    case 2.5:
        post.numberOfGlyphs = p.parseUShort();
        post.offset = new Array(post.numberOfGlyphs);
        for (i = 0; i < post.numberOfGlyphs; i++) {
            post.offset[i] = p.parseChar();
        }

        break;
    }
    return post;
}

function makePostTable() {
    return new table.Table('post', [
        {name: 'version', type: 'FIXED', value: 0x00030000},
        {name: 'italicAngle', type: 'FIXED', value: 0},
        {name: 'underlinePosition', type: 'FWORD', value: 0},
        {name: 'underlineThickness', type: 'FWORD', value: 0},
        {name: 'isFixedPitch', type: 'ULONG', value: 0},
        {name: 'minMemType42', type: 'ULONG', value: 0},
        {name: 'maxMemType42', type: 'ULONG', value: 0},
        {name: 'minMemType1', type: 'ULONG', value: 0},
        {name: 'maxMemType1', type: 'ULONG', value: 0}
    ]);
}

exports.parse = parsePostTable;
exports.make = makePostTable;

},{"../encoding":3,"../parse":8,"../table":10}],24:[function(require,module,exports){
// The `sfnt` wrapper provides organization for the tables in the font.
// It is the top-level data structure in a font.
// https://www.microsoft.com/typography/OTSPEC/otff.htm
// Recommendations for creating OpenType Fonts:
// http://www.microsoft.com/typography/otspec140/recom.htm



var check = require('../check');
var table = require('../table');

var cmap = require('./cmap');
var cff = require('./cff');
var head = require('./head');
var hhea = require('./hhea');
var hmtx = require('./hmtx');
var maxp = require('./maxp');
var _name = require('./name');
var os2 = require('./os2');
var post = require('./post');

function log2(v) {
    return Math.log(v) / Math.log(2) | 0;
}

function computeCheckSum(bytes) {
    while (bytes.length % 4 !== 0) {
        bytes.push(0);
    }

    var sum = 0;
    for (var i = 0; i < bytes.length; i += 4) {
        sum += (bytes[i] << 24) +
            (bytes[i + 1] << 16) +
            (bytes[i + 2] << 8) +
            (bytes[i + 3]);
    }

    sum %= Math.pow(2, 32);
    return sum;
}

function makeTableRecord(tag, checkSum, offset, length) {
    return new table.Table('Table Record', [
        {name: 'tag', type: 'TAG', value: tag !== undefined ? tag : ''},
        {name: 'checkSum', type: 'ULONG', value: checkSum !== undefined ? checkSum : 0},
        {name: 'offset', type: 'ULONG', value: offset !== undefined ? offset : 0},
        {name: 'length', type: 'ULONG', value: length !== undefined ? length : 0}
    ]);
}

function makeSfntTable(tables) {
    var sfnt = new table.Table('sfnt', [
        {name: 'version', type: 'TAG', value: 'OTTO'},
        {name: 'numTables', type: 'USHORT', value: 0},
        {name: 'searchRange', type: 'USHORT', value: 0},
        {name: 'entrySelector', type: 'USHORT', value: 0},
        {name: 'rangeShift', type: 'USHORT', value: 0}
    ]);
    sfnt.tables = tables;
    sfnt.numTables = tables.length;
    var highestPowerOf2 = Math.pow(2, log2(sfnt.numTables));
    sfnt.searchRange = 16 * highestPowerOf2;
    sfnt.entrySelector = log2(highestPowerOf2);
    sfnt.rangeShift = sfnt.numTables * 16 - sfnt.searchRange;

    var recordFields = [];
    var tableFields = [];

    var offset = sfnt.sizeOf() + (makeTableRecord().sizeOf() * sfnt.numTables);
    while (offset % 4 !== 0) {
        offset += 1;
        tableFields.push({name: 'padding', type: 'BYTE', value: 0});
    }

    for (var i = 0; i < tables.length; i += 1) {
        var t = tables[i];
        check.argument(t.tableName.length === 4, 'Table name' + t.tableName + ' is invalid.');
        var tableLength = t.sizeOf();
        var tableRecord = makeTableRecord(t.tableName, computeCheckSum(t.encode()), offset, tableLength);
        recordFields.push({name: tableRecord.tag + ' Table Record', type: 'TABLE', value: tableRecord});
        tableFields.push({name: t.tableName + ' table', type: 'TABLE', value: t});
        offset += tableLength;
        check.argument(!isNaN(offset), 'Something went wrong calculating the offset.');
        while (offset % 4 !== 0) {
            offset += 1;
            tableFields.push({name: 'padding', type: 'BYTE', value: 0});
        }
    }

    // Table records need to be sorted alphabetically.
    recordFields.sort(function(r1, r2) {
        if (r1.value.tag > r2.value.tag) {
            return 1;
        } else {
            return -1;
        }
    });

    sfnt.fields = sfnt.fields.concat(recordFields);
    sfnt.fields = sfnt.fields.concat(tableFields);
    return sfnt;
}

// Get the metrics for a character. If the string has more than one character
// this function returns metrics for the first available character.
// You can provide optional fallback metrics if no characters are available.
function metricsForChar(font, chars, notFoundMetrics) {
    for (var i = 0; i < chars.length; i += 1) {
        var glyphIndex = font.charToGlyphIndex(chars[i]);
        if (glyphIndex > 0) {
            var glyph = font.glyphs.get(glyphIndex);
            return glyph.getMetrics();
        }
    }

    return notFoundMetrics;
}

function average(vs) {
    var sum = 0;
    for (var i = 0; i < vs.length; i += 1) {
        sum += vs[i];
    }

    return sum / vs.length;
}

// Convert the font object to a SFNT data structure.
// This structure contains all the necessary tables and metadata to create a binary OTF file.
function fontToSfntTable(font) {
    var xMins = [];
    var yMins = [];
    var xMaxs = [];
    var yMaxs = [];
    var advanceWidths = [];
    var leftSideBearings = [];
    var rightSideBearings = [];
    var firstCharIndex;
    var lastCharIndex = 0;
    var ulUnicodeRange1 = 0;
    var ulUnicodeRange2 = 0;
    var ulUnicodeRange3 = 0;
    var ulUnicodeRange4 = 0;

    for (var i = 0; i < font.glyphs.length; i += 1) {
        var glyph = font.glyphs.get(i);
        var unicode = glyph.unicode | 0;
        if (firstCharIndex > unicode || firstCharIndex === null) {
            firstCharIndex = unicode;
        }

        if (lastCharIndex < unicode) {
            lastCharIndex = unicode;
        }

        var position = os2.getUnicodeRange(unicode);
        if (position < 32) {
            ulUnicodeRange1 |= 1 << position;
        } else if (position < 64) {
            ulUnicodeRange2 |= 1 << position - 32;
        } else if (position < 96) {
            ulUnicodeRange3 |= 1 << position - 64;
        } else if (position < 123) {
            ulUnicodeRange4 |= 1 << position - 96;
        } else {
            throw new Error('Unicode ranges bits > 123 are reserved for internal usage');
        }
        // Skip non-important characters.
        if (glyph.name === '.notdef') continue;
        var metrics = glyph.getMetrics();
        xMins.push(metrics.xMin);
        yMins.push(metrics.yMin);
        xMaxs.push(metrics.xMax);
        yMaxs.push(metrics.yMax);
        leftSideBearings.push(metrics.leftSideBearing);
        rightSideBearings.push(metrics.rightSideBearing);
        advanceWidths.push(glyph.advanceWidth);
    }

    var globals = {
        xMin: Math.min.apply(null, xMins),
        yMin: Math.min.apply(null, yMins),
        xMax: Math.max.apply(null, xMaxs),
        yMax: Math.max.apply(null, yMaxs),
        advanceWidthMax: Math.max.apply(null, advanceWidths),
        advanceWidthAvg: average(advanceWidths),
        minLeftSideBearing: Math.min.apply(null, leftSideBearings),
        maxLeftSideBearing: Math.max.apply(null, leftSideBearings),
        minRightSideBearing: Math.min.apply(null, rightSideBearings)
    };
    globals.ascender = font.ascender !== undefined ? font.ascender : globals.yMax;
    globals.descender = font.descender !== undefined ? font.descender : globals.yMin;

    var headTable = head.make({
        unitsPerEm: font.unitsPerEm,
        xMin: globals.xMin,
        yMin: globals.yMin,
        xMax: globals.xMax,
        yMax: globals.yMax
    });

    var hheaTable = hhea.make({
        ascender: globals.ascender,
        descender: globals.descender,
        advanceWidthMax: globals.advanceWidthMax,
        minLeftSideBearing: globals.minLeftSideBearing,
        minRightSideBearing: globals.minRightSideBearing,
        xMaxExtent: globals.maxLeftSideBearing + (globals.xMax - globals.xMin),
        numberOfHMetrics: font.glyphs.length
    });

    var maxpTable = maxp.make(font.glyphs.length);

    var os2Table = os2.make({
        xAvgCharWidth: Math.round(globals.advanceWidthAvg),
        usWeightClass: 500, // Medium FIXME Make this configurable
        usWidthClass: 5, // Medium (normal) FIXME Make this configurable
        usFirstCharIndex: firstCharIndex,
        usLastCharIndex: lastCharIndex,
        ulUnicodeRange1: ulUnicodeRange1,
        ulUnicodeRange2: ulUnicodeRange2,
        ulUnicodeRange3: ulUnicodeRange3,
        ulUnicodeRange4: ulUnicodeRange4,
        // See http://typophile.com/node/13081 for more info on vertical metrics.
        // We get metrics for typical characters (such as "x" for xHeight).
        // We provide some fallback characters if characters are unavailable: their
        // ordering was chosen experimentally.
        sTypoAscender: globals.ascender,
        sTypoDescender: globals.descender,
        sTypoLineGap: 0,
        usWinAscent: globals.ascender,
        usWinDescent: -globals.descender,
        sxHeight: metricsForChar(font, 'xyvw', {yMax: 0}).yMax,
        sCapHeight: metricsForChar(font, 'HIKLEFJMNTZBDPRAGOQSUVWXY', globals).yMax,
        usBreakChar: font.hasChar(' ') ? 32 : 0 // Use space as the break character, if available.
    });

    var hmtxTable = hmtx.make(font.glyphs);
    var cmapTable = cmap.make(font.glyphs);

    var fullName = font.familyName + ' ' + font.styleName;
    var postScriptName = font.familyName.replace(/\s/g, '') + '-' + font.styleName;
    var nameTable = _name.make({
        copyright: font.copyright,
        fontFamily: font.familyName,
        fontSubfamily: font.styleName,
        uniqueID: font.manufacturer + ':' + fullName,
        fullName: fullName,
        version: font.version,
        postScriptName: postScriptName,
        trademark: font.trademark,
        manufacturer: font.manufacturer,
        designer: font.designer,
        description: font.description,
        manufacturerURL: font.manufacturerURL,
        designerURL: font.designerURL,
        license: font.license,
        licenseURL: font.licenseURL,
        preferredFamily: font.familyName,
        preferredSubfamily: font.styleName
    });
    var postTable = post.make();
    var cffTable = cff.make(font.glyphs, {
        version: font.version,
        fullName: fullName,
        familyName: font.familyName,
        weightName: font.styleName,
        postScriptName: postScriptName,
        unitsPerEm: font.unitsPerEm
    });
    // Order the tables according to the the OpenType specification 1.4.
    var tables = [headTable, hheaTable, maxpTable, os2Table, nameTable, cmapTable, postTable, cffTable, hmtxTable];

    var sfntTable = makeSfntTable(tables);

    // Compute the font's checkSum and store it in head.checkSumAdjustment.
    var bytes = sfntTable.encode();
    var checkSum = computeCheckSum(bytes);
    var tableFields = sfntTable.fields;
    var checkSumAdjusted = false;
    for (i = 0; i < tableFields.length; i += 1) {
        if (tableFields[i].name === 'head table') {
            tableFields[i].value.checkSumAdjustment = 0xB1B0AFBA - checkSum;
            checkSumAdjusted = true;
            break;
        }
    }

    if (!checkSumAdjusted) {
        throw new Error('Could not find head table with checkSum to adjust.');
    }

    return sfntTable;
}

exports.computeCheckSum = computeCheckSum;
exports.make = makeSfntTable;
exports.fontToTable = fontToSfntTable;

},{"../check":1,"../table":10,"./cff":11,"./cmap":12,"./head":15,"./hhea":16,"./hmtx":17,"./maxp":20,"./name":21,"./os2":22,"./post":23}],25:[function(require,module,exports){
// Data types used in the OpenType font file.
// All OpenType fonts use Motorola-style byte ordering (Big Endian)

/* global WeakMap */



var check = require('./check');

var LIMIT16 = 32768; // The limit at which a 16-bit number switches signs == 2^15
var LIMIT32 = 2147483648; // The limit at which a 32-bit number switches signs == 2 ^ 31

var decode = {};
var encode = {};
var sizeOf = {};

// Return a function that always returns the same value.
function constant(v) {
    return function() {
        return v;
    };
}

// OpenType data types //////////////////////////////////////////////////////

// Convert an 8-bit unsigned integer to a list of 1 byte.
encode.BYTE = function(v) {
    check.argument(v >= 0 && v <= 255, 'Byte value should be between 0 and 255.');
    return [v];
};

sizeOf.BYTE = constant(1);

// Convert a 8-bit signed integer to a list of 1 byte.
encode.CHAR = function(v) {
    return [v.charCodeAt(0)];
};

sizeOf.CHAR = constant(1);

// Convert an ASCII string to a list of bytes.
encode.CHARARRAY = function(v) {
    var b = [];
    for (var i = 0; i < v.length; i += 1) {
        b.push(v.charCodeAt(i));
    }

    return b;
};

sizeOf.CHARARRAY = function(v) {
    return v.length;
};

// Convert a 16-bit unsigned integer to a list of 2 bytes.
encode.USHORT = function(v) {
    return [(v >> 8) & 0xFF, v & 0xFF];
};

sizeOf.USHORT = constant(2);

// Convert a 16-bit signed integer to a list of 2 bytes.
encode.SHORT = function(v) {
    // Two's complement
    if (v >= LIMIT16) {
        v = -(2 * LIMIT16 - v);
    }

    return [(v >> 8) & 0xFF, v & 0xFF];
};

sizeOf.SHORT = constant(2);

// Convert a 24-bit unsigned integer to a list of 3 bytes.
encode.UINT24 = function(v) {
    return [(v >> 16) & 0xFF, (v >> 8) & 0xFF, v & 0xFF];
};

sizeOf.UINT24 = constant(3);

// Convert a 32-bit unsigned integer to a list of 4 bytes.
encode.ULONG = function(v) {
    return [(v >> 24) & 0xFF, (v >> 16) & 0xFF, (v >> 8) & 0xFF, v & 0xFF];
};

sizeOf.ULONG = constant(4);

// Convert a 32-bit unsigned integer to a list of 4 bytes.
encode.LONG = function(v) {
    // Two's complement
    if (v >= LIMIT32) {
        v = -(2 * LIMIT32 - v);
    }

    return [(v >> 24) & 0xFF, (v >> 16) & 0xFF, (v >> 8) & 0xFF, v & 0xFF];
};

sizeOf.LONG = constant(4);

encode.FIXED = encode.ULONG;
sizeOf.FIXED = sizeOf.ULONG;

encode.FWORD = encode.SHORT;
sizeOf.FWORD = sizeOf.SHORT;

encode.UFWORD = encode.USHORT;
sizeOf.UFWORD = sizeOf.USHORT;

// FIXME Implement LONGDATETIME
encode.LONGDATETIME = function() {
    return [0, 0, 0, 0, 0, 0, 0, 0];
};

sizeOf.LONGDATETIME = constant(8);

// Convert a 4-char tag to a list of 4 bytes.
encode.TAG = function(v) {
    check.argument(v.length === 4, 'Tag should be exactly 4 ASCII characters.');
    return [v.charCodeAt(0),
            v.charCodeAt(1),
            v.charCodeAt(2),
            v.charCodeAt(3)];
};

sizeOf.TAG = constant(4);

// CFF data types ///////////////////////////////////////////////////////////

encode.Card8 = encode.BYTE;
sizeOf.Card8 = sizeOf.BYTE;

encode.Card16 = encode.USHORT;
sizeOf.Card16 = sizeOf.USHORT;

encode.OffSize = encode.BYTE;
sizeOf.OffSize = sizeOf.BYTE;

encode.SID = encode.USHORT;
sizeOf.SID = sizeOf.USHORT;

// Convert a numeric operand or charstring number to a variable-size list of bytes.
encode.NUMBER = function(v) {
    if (v >= -107 && v <= 107) {
        return [v + 139];
    } else if (v >= 108 && v <= 1131) {
        v = v - 108;
        return [(v >> 8) + 247, v & 0xFF];
    } else if (v >= -1131 && v <= -108) {
        v = -v - 108;
        return [(v >> 8) + 251, v & 0xFF];
    } else if (v >= -32768 && v <= 32767) {
        return encode.NUMBER16(v);
    } else {
        return encode.NUMBER32(v);
    }
};

sizeOf.NUMBER = function(v) {
    return encode.NUMBER(v).length;
};

// Convert a signed number between -32768 and +32767 to a three-byte value.
// This ensures we always use three bytes, but is not the most compact format.
encode.NUMBER16 = function(v) {
    return [28, (v >> 8) & 0xFF, v & 0xFF];
};

sizeOf.NUMBER16 = constant(3);

// Convert a signed number between -(2^31) and +(2^31-1) to a five-byte value.
// This is useful if you want to be sure you always use four bytes,
// at the expense of wasting a few bytes for smaller numbers.
encode.NUMBER32 = function(v) {
    return [29, (v >> 24) & 0xFF, (v >> 16) & 0xFF, (v >> 8) & 0xFF, v & 0xFF];
};

sizeOf.NUMBER32 = constant(5);

encode.REAL = function(v) {
    var value = v.toString();

    // Some numbers use an epsilon to encode the value. (e.g. JavaScript will store 0.0000001 as 1e-7)
    // This code converts it back to a number without the epsilon.
    var m = /\.(\d*?)(?:9{5,20}|0{5,20})\d{0,2}(?:e(.+)|$)/.exec(value);
    if (m) {
        var epsilon = parseFloat('1e' + ((m[2] ? +m[2] : 0) + m[1].length));
        value = (Math.round(v * epsilon) / epsilon).toString();
    }

    var nibbles = '';
    var i;
    var ii;
    for (i = 0, ii = value.length; i < ii; i += 1) {
        var c = value[i];
        if (c === 'e') {
            nibbles += value[++i] === '-' ? 'c' : 'b';
        } else if (c === '.') {
            nibbles += 'a';
        } else if (c === '-') {
            nibbles += 'e';
        } else {
            nibbles += c;
        }
    }

    nibbles += (nibbles.length & 1) ? 'f' : 'ff';
    var out = [30];
    for (i = 0, ii = nibbles.length; i < ii; i += 2) {
        out.push(parseInt(nibbles.substr(i, 2), 16));
    }

    return out;
};

sizeOf.REAL = function(v) {
    return encode.REAL(v).length;
};

encode.NAME = encode.CHARARRAY;
sizeOf.NAME = sizeOf.CHARARRAY;

encode.STRING = encode.CHARARRAY;
sizeOf.STRING = sizeOf.CHARARRAY;

// Convert a JavaScript string to UTF16-BE.
encode.UTF16 = function(v) {
    var b = [];
    for (var i = 0; i < v.length; i += 1) {
        var codepoint = v.charCodeAt(i);
        b.push((codepoint >> 8) & 0xFF);
        b.push(codepoint & 0xFF);
    }

    return b;
};

sizeOf.UTF16 = function(v) {
    return v.length * 2;
};

// Convert a list of values to a CFF INDEX structure.
// The values should be objects containing name / type / value.
encode.INDEX = function(l) {
    var i;
    //var offset, offsets, offsetEncoder, encodedOffsets, encodedOffset, data,
    //    dataSize, i, v;
    // Because we have to know which data type to use to encode the offsets,
    // we have to go through the values twice: once to encode the data and
    // calculate the offets, then again to encode the offsets using the fitting data type.
    var offset = 1; // First offset is always 1.
    var offsets = [offset];
    var data = [];
    var dataSize = 0;
    for (i = 0; i < l.length; i += 1) {
        var v = encode.OBJECT(l[i]);
        Array.prototype.push.apply(data, v);
        dataSize += v.length;
        offset += v.length;
        offsets.push(offset);
    }

    if (data.length === 0) {
        return [0, 0];
    }

    var encodedOffsets = [];
    var offSize = (1 + Math.floor(Math.log(dataSize) / Math.log(2)) / 8) | 0;
    var offsetEncoder = [undefined, encode.BYTE, encode.USHORT, encode.UINT24, encode.ULONG][offSize];
    for (i = 0; i < offsets.length; i += 1) {
        var encodedOffset = offsetEncoder(offsets[i]);
        Array.prototype.push.apply(encodedOffsets, encodedOffset);
    }

    return Array.prototype.concat(encode.Card16(l.length),
                           encode.OffSize(offSize),
                           encodedOffsets,
                           data);
};

sizeOf.INDEX = function(v) {
    return encode.INDEX(v).length;
};

// Convert an object to a CFF DICT structure.
// The keys should be numeric.
// The values should be objects containing name / type / value.
encode.DICT = function(m) {
    var d = [];
    var keys = Object.keys(m);
    var length = keys.length;

    for (var i = 0; i < length; i += 1) {
        // Object.keys() return string keys, but our keys are always numeric.
        var k = parseInt(keys[i], 0);
        var v = m[k];
        // Value comes before the key.
        d = d.concat(encode.OPERAND(v.value, v.type));
        d = d.concat(encode.OPERATOR(k));
    }

    return d;
};

sizeOf.DICT = function(m) {
    return encode.DICT(m).length;
};

encode.OPERATOR = function(v) {
    if (v < 1200) {
        return [v];
    } else {
        return [12, v - 1200];
    }
};

encode.OPERAND = function(v, type) {
    var d = [];
    if (Array.isArray(type)) {
        for (var i = 0; i < type.length; i += 1) {
            check.argument(v.length === type.length, 'Not enough arguments given for type' + type);
            d = d.concat(encode.OPERAND(v[i], type[i]));
        }
    } else {
        if (type === 'SID') {
            d = d.concat(encode.NUMBER(v));
        } else if (type === 'offset') {
            // We make it easy for ourselves and always encode offsets as
            // 4 bytes. This makes offset calculation for the top dict easier.
            d = d.concat(encode.NUMBER32(v));
        } else if (type === 'number') {
            d = d.concat(encode.NUMBER(v));
        } else if (type === 'real') {
            d = d.concat(encode.REAL(v));
        } else {
            throw new Error('Unknown operand type ' + type);
            // FIXME Add support for booleans
        }
    }

    return d;
};

encode.OP = encode.BYTE;
sizeOf.OP = sizeOf.BYTE;

// memoize charstring encoding using WeakMap if available
var wmm = typeof WeakMap === 'function' && new WeakMap();
// Convert a list of CharString operations to bytes.
encode.CHARSTRING = function(ops) {
    if (wmm && wmm.has(ops)) {
        return wmm.get(ops);
    }

    var d = [];
    var length = ops.length;

    for (var i = 0; i < length; i += 1) {
        var op = ops[i];
        d = d.concat(encode[op.type](op.value));
    }

    if (wmm) {
        wmm.set(ops, d);
    }

    return d;
};

sizeOf.CHARSTRING = function(ops) {
    return encode.CHARSTRING(ops).length;
};

// Utility functions ////////////////////////////////////////////////////////

// Convert an object containing name / type / value to bytes.
encode.OBJECT = function(v) {
    var encodingFunction = encode[v.type];
    check.argument(encodingFunction !== undefined, 'No encoding function for type ' + v.type);
    return encodingFunction(v.value);
};

sizeOf.OBJECT = function(v) {
    var sizeOfFunction = sizeOf[v.type];
    check.argument(sizeOfFunction !== undefined, 'No sizeOf function for type ' + v.type);
    return sizeOfFunction(v.value);
};

// Convert a table object to bytes.
// A table contains a list of fields containing the metadata (name, type and default value).
// The table itself has the field values set as attributes.
encode.TABLE = function(table) {
    var d = [];
    var length = table.fields.length;

    for (var i = 0; i < length; i += 1) {
        var field = table.fields[i];
        var encodingFunction = encode[field.type];
        check.argument(encodingFunction !== undefined, 'No encoding function for field type ' + field.type);
        var value = table[field.name];
        if (value === undefined) {
            value = field.value;
        }

        var bytes = encodingFunction(value);
        d = d.concat(bytes);
    }

    return d;
};

sizeOf.TABLE = function(table) {
    var numBytes = 0;
    var length = table.fields.length;

    for (var i = 0; i < length; i += 1) {
        var field = table.fields[i];
        var sizeOfFunction = sizeOf[field.type];
        check.argument(sizeOfFunction !== undefined, 'No sizeOf function for field type ' + field.type);
        var value = table[field.name];
        if (value === undefined) {
            value = field.value;
        }

        numBytes += sizeOfFunction(value);
    }

    return numBytes;
};

// Merge in a list of bytes.
encode.LITERAL = function(v) {
    return v;
};

sizeOf.LITERAL = function(v) {
    return v.length;
};

exports.decode = decode;
exports.encode = encode;
exports.sizeOf = sizeOf;

},{"./check":1}]},{},[7])(7)
});
define('opentype', ['opentype/dist/opentype'], function (main) { return main; });


define ('cobweb/Components/Text/X3DFontStyleNode',[
	"jquery",
	"cobweb/Components/Core/X3DNode",
	"cobweb/InputOutput/Loader",
	"cobweb/Bits/X3DConstants",
	"opentype",
],
function ($,
          X3DNode, 
          Loader,
          X3DConstants,
          opentype)
{
   /*
    * Font paths for default SERIF, SANS and TYPWRITER families.
    */

	var FontDirectory = "https://cdn.rawgit.com/holger-seelig/cobweb/master/cobweb.js/fonts/";

	var Fonts =
	{
	   SERIF: {
	      PLAIN:      FontDirectory + "DroidSerif-Regular.ttf",
	      ITALIC:     FontDirectory + "DroidSerif-Italic.ttf",
	      BOLD:       FontDirectory + "DroidSerif-Bold.ttf",
	      BOLDITALIC: FontDirectory + "DroidSerif-BoldItalic.ttf",
	   },
	   SANS: {
	      PLAIN:      FontDirectory + "Ubuntu-R.ttf",
	      ITALIC:     FontDirectory + "Ubuntu-RI.ttf",
	      BOLD:       FontDirectory + "Ubuntu-B.ttf",
	      BOLDITALIC: FontDirectory + "Ubuntu-BI.ttf",
	   },
	   TYPEWRITER: {
	      PLAIN:      FontDirectory + "UbuntuMono-R.ttf",
	      ITALIC:     FontDirectory + "UbuntuMono-RI.ttf",
	      BOLD:       FontDirectory + "UbuntuMono-B.ttf",
	      BOLDITALIC: FontDirectory + "UbuntuMono-BI.ttf",
	   },
	};

	//

	var i = 0;

	var Alignment =
	{
	   BEGIN:  ++ i,
	   FIRST:  ++ i,
	   MIDDLE: ++ i,
	   END:    ++ i,
	};

	function X3DFontStyleNode (browser, executionContext)
	{
		X3DNode .call (this, browser, executionContext);

		this .addType (X3DConstants .X3DFontStyleNode);

		this .alignments = [ ];
		this .loader     = new Loader (this);
	}

	X3DFontStyleNode .prototype = $.extend (Object .create (X3DNode .prototype),
	{
		constructor: X3DFontStyleNode,
		initialize: function ()
		{
		   X3DNode .prototype .initialize .call (this);

		   this .style_   .addInterest (this, "set_style__");
		   this .justify_ .addInterest (this, "set_justify__");

			this .font        = null;
			this .familyIndex = 0;

		   this .set_justify__ ();
		   this .set_style__ ();
		},
		getMajorAlignment: function ()
		{
			return this .alignments [0];
		},
		getMinorAlignment: function ()
		{
			return this .alignments [1];
		},
		set_style__: function ()
		{
		   //var style = this .style_ .getValue ();

			//this .italic = (style == "ITALIC" || style == "BOLDITALIC");
			//this .bold   = (style == "BOLD"   || style == "BOLDITALIC");
		  
		   this .requestAsyncLoad ();
		},
		set_justify__: function ()
		{
			var majorNormal = this .horizontal_ .getValue () ? this .leftToRight_ .getValue () : this .topToBottom_ .getValue ();

			this .alignments [0] = this .justify_ .length > 0
			                       ? this .getAlignment (0, majorNormal)
								        : majorNormal ? Alignment .BEGIN : Alignment .END;

			var minorNormal = this .horizontal_ .getValue () ? this .topToBottom_ .getValue () : this .leftToRight_ .getValue ();

			this .alignments [1] = this .justify_ .length > 1
			                       ? this .getAlignment (1, minorNormal)
								        : minorNormal ? Alignment .FIRST : Alignment .END;
		},
		getAlignment: function (index, normal)
		{
			if (normal)
			{
				// Return for west-european normal alignment.

				switch (this .justify_ [index])
				{
					case "FIRST":  return Alignment .FIRST;
					case "BEGIN":  return Alignment .BEGIN;
					case "MIDDLE": return Alignment .MIDDLE;
					case "END":    return Alignment .END;
				}
			}
			else
			{
				// Return appropriate alignment if topToBottom or leftToRight are FALSE.

				switch (this .justify_ [index])
				{
					case "FIRST":  return Alignment .END;
					case "BEGIN":  return Alignment .END;
					case "MIDDLE": return Alignment .MIDDLE;
					case "END":    return Alignment .BEGIN;
				}
			}

			return index ? Alignment .FIRST : Alignment .BEGIN;
		},
		requestAsyncLoad: function ()
		{
			this .familyIndex = 0;

			this .loadFont ();
		},
		loadFont: function ()
		{
			try
			{
			   if (this .familyIndex < this .family_ .length)
			   {
					var
						familyName = this .family_ [this .familyIndex],
						fontPath   = this .getDefaultFont (familyName) || this .loader .transform (familyName);

					opentype .load (fontPath, this .setFont .bind (this));
				}
				else if (this .familyIndex === this .family_ .length)
				   opentype .load (this .getDefaultFont ("SERIF"), this .setFont .bind (this));
			}
			catch (error)
			{
				this .setError (error .message);
			}
		},
		getDefaultFont: function (familyName)
		{
		   var family = Fonts [familyName];

		   if (family)
		   {
		      var style = family [this .style_ .getValue ()];

		      if (style)
		         return style;

		      return family .PLAIN;
		   }

		   return;
		},
		setFont: function (error, font)
		{
			if (error)
			{
			   this .setError (error);
			}
			else
			{
				//console .log ('Font loaded fine:', font .familyName, font .styleName);

				this .font     = font;
				font .fontName = font .familyName + font .styleName;
		   
		      // Workaround to initialize composite glyphs.
		      for (var i = 0; i < this .font .numGlyphs; ++ i)
					this .font .glyphs .get (i) .getPath (0, 0, 1);

				this .addNodeEvent ();
			}
		},
		getFont: function ()
		{
		   return this .font;
		},
		setError: function (error)
		{
			this .font = null;
			this .familyIndex ++;

			console .warn ("Font error:", error);

			this .loadFont ();
		},
	});

	X3DFontStyleNode .Alignment = Alignment;

	return X3DFontStyleNode;
});



define ('standard/Math/Geometry/Box2',[
	"standard/Math/Numbers/Matrix3",
	"standard/Math/Numbers/Vector2",
],
function (Matrix3, Vector2)
{
	var
	   x   = new Vector2 (0, 0),
	   y   = new Vector2 (0, 0),
	   min = new Vector2 (0, 0),
	   max = new Vector2 (0, 0);

	function Box2 (size, center)
	{
		switch (arguments .length)
		{
			case 0:
			{
				this .matrix = new Matrix3 (0.5, 0,   0,
				                            0,   0.5, 0,
				                            0,   0,   0);
				return;
			}
			case 2:
			{
				this .matrix = new Matrix3 (size .x / 2, 0, 0,
				                            0, size .y / 2, 0,
				                            center .x, center .y, 1);
				return;
			}
			case 3:
			{
				var
					min = arguments [0],
					max = arguments [1],
					sx  = (max .x - min .x) / 2,
					sy  = (max .y - min .y) / 2,
					cx  = (max .x + min .x) / 2,
					cy  = (max .y + min .y) / 2;

				this .matrix = new Matrix3 (sx, 0,  0,
				                            0,  sy, 0,
				                            cx, cy, 1);
				return;
			}
		}
	}

	Box2 .prototype =
	{
		constructor: Box2,
		copy: function ()
		{
			var copy = Object .create (Box2 .prototype);
			copy .matrix = this .matrix .copy ();
			return copy;
		},
		assign: function (box)
		{
			this .matrix .assign (box .matrix);
			return this;
		},
		set: function (size, center)
		{
			var m = this .matrix;
			m [0] = size .x / 2; m [1] = 0;           m [2] = 0;
			m [3] = 0;           m [4] = size .y / 2; m [5] = 0;
			m [6] = center .x;   m [7] = center .y;   m [8] = 1;
			return this;
		},
		set: function (size, center)
		{
			var m = this .matrix;
		
			switch (arguments .length)
			{
				case 0:
				{
					m [0] = 0.5; m [1] = 0;   m [2] = 0;
					m [3] = 0;   m [4] = 0.5; m [5] = 0;
					m [6] = 0;   m [7] = 0;   m [8] = 0;
					return this;
				}
				case 2:
				{
					m [0] = size .x / 2; m [1] = 0;           m [2] = 0;
					m [3] = 0;           m [4] = size .y / 2; m [5] = 0;
					m [6] = center .x;   m [7] = center .y;   m [8] = 1;
					return this;
				}
				case 3:
				{
					var
						min = arguments [0],
						max = arguments [1],
						sx  = (max .x - min .x) / 2,
						sy  = (max .y - min .y) / 2,
						cx  = (max .x + min .x) / 2,
						cy  = (max .y + min .y) / 2;

					m [0] = sx; m [1] = 0;  m [2] = 0;
					m [3] = 0;  m [4] = sy; m [5] = 0;
					m [6] = cx; m [7] = cy; m [8] = 1;
					return this;
				}
			}
		},
		setExtents: function (min, max)
		{
			var
				m  = this .matrix,
				sx = (max .x - min .x) / 2,
				sy = (max .y - min .y) / 2,
				cx = (max .x + min .x) / 2,
				cy = (max .y + min .y) / 2;

			m [0] = sx; m [1] = 0;  m [2] = 0;
			m [3] = 0;  m [4] = sy; m [5] = 0;
			m [6] = cx; m [7] = cy; m [8] = 1;
			return this;
		},
		isEmpty: function ()
		{
			return this .matrix [8] === 0;
		},
		add: function (box)
		{
			if (this .isEmpty ())
				return this .assign (box);

			if (box .isEmpty ())
				return this;

			var
				lhs_min = new Vector2 (0, 0),
				lhs_max = new Vector2 (0, 0),
				rhs_min = new Vector2 (0, 0),
				rhs_max = new Vector2 (0, 0);

			this .getExtents (lhs_min, lhs_max);
			box  .getExtents (rhs_min, rhs_max);

			return this .assign (new Box2 (lhs_min .min (rhs_min), lhs_max .max (rhs_max), true));
		},
		multLeft: function (matrix)
		{
			this .matrix .multLeft (matrix);
			return this;
		},
		multRight: function (matrix)
		{
			this .matrix .multRight (matrix);
			return this;
		},
		getExtents: function (min, max)
		{
			this .getAbsoluteExtents (min, max);

			min .add (this .center);
			max .add (this .center);
		},
		getAbsoluteExtents: function (min, max)
		{
		   var m = this .matrix;

			x .set (m [0], m [1]);
			y .set (m [3], m [4]);

			var
				p1 = Vector2 .add (x, y),
				p2 = y .subtract (x),
				p3 = -p1,
				p4 = -p2;

			min .assign (p1) .min (p2);
			max .assign (p1) .max (p2);

			p1 .negate ();
			p2 .negate ();

			min .min (p1, p2);
			max .max (p1, p2);
		},
		intersectsPoint: function (point)
		{
			this .getExtents (min, max);

			return min .x <= point .x &&
			       max .x >= point .x &&
			       min .y <= point .y &&
			       max .y >= point .y;
		},
		toString: function ()
		{
			return this .size + ", " + this .center;
		},
	};

	Object .defineProperty (Box2 .prototype, "size",
	{
		get: function ()
		{
			var max = new Vector2 (0, 0);
			
			this .getAbsoluteExtents (min, max);

			return max .subtract (min);
		},
		enumerable: true,
		configurable: false
	});

	Object .defineProperty (Box2 .prototype, "center",
	{
		get: function ()
		{
			return this .matrix .origin;
		},
		enumerable: true,
		configurable: false
	});

	return Box2;
});


define ('standard/Math/Geometry/Triangle2',[],function ()
{
	return {
		isPointInTriangle: function (a, b, c, point)
		{
		   // https://en.wikipedia.org/wiki/Barycentric_coordinate_system

		   var det = (b.y - c.y) * (a.x - c.x) + (c.x - b.x) * (a.y - c.y);

		   var u = ((b.y - c.y) * (point .x - c.x) + (c.x - b.x) * (point .y - c.y)) / det;

		   if (u < 0 || u > 1)
		      return false;

		   var v = ((c.y - a.y) * (point .x - c.x) + (a.x - c.x) * (point .y - c.y)) / det;

		   if (v < 0 || v > 1)
		      return false;

		   var t = 1 - u - v;

		   if (t < 0 || t > 1)
		      return false;
		   
			return true;
		},
	};
});

//(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.Bezier = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/**
  A javascript Bezier curve library by Pomax.

  Based on http://pomax.github.io/bezierinfo

  This code is MIT licensed.
**/
//(function() {

define ('bezier/bezier',[],function ()
{
  

  // Math functions. I hate the Math namespace with a passion.
  var abs = Math.abs,
      min = Math.min,
      max = Math.max,
      cos = Math.cos,
      sin = Math.sin,
      acos = Math.acos,
      asin = Math.asin,
      atan2 = Math.atan2,
      sqrt = Math.sqrt,
      // cube root function yielding real roots
      crt = function(v) { if(v<0) return -Math.pow(-v,1/3); return Math.pow(v,1/3); },
      pi = Math.PI,
      tau = 2*pi,
      quart = pi/2;

  // a zero coordinate, which is surprisingly useful
  var ZERO = {x:0,y:0,z:0};

  // Bezier utility functions
  var utils = {
    // Legendre-Gauss abscissae with n=24 (x_i values, defined at i=n as the roots of the nth order Legendre polynomial Pn(x))
    Tvalues: [
      -0.0640568928626056260850430826247450385909,
       0.0640568928626056260850430826247450385909,
      -0.1911188674736163091586398207570696318404,
       0.1911188674736163091586398207570696318404,
      -0.3150426796961633743867932913198102407864,
       0.3150426796961633743867932913198102407864,
      -0.4337935076260451384870842319133497124524,
       0.4337935076260451384870842319133497124524,
      -0.5454214713888395356583756172183723700107,
       0.5454214713888395356583756172183723700107,
      -0.6480936519369755692524957869107476266696,
       0.6480936519369755692524957869107476266696,
      -0.7401241915785543642438281030999784255232,
       0.7401241915785543642438281030999784255232,
      -0.8200019859739029219539498726697452080761,
       0.8200019859739029219539498726697452080761,
      -0.8864155270044010342131543419821967550873,
       0.8864155270044010342131543419821967550873,
      -0.9382745520027327585236490017087214496548,
       0.9382745520027327585236490017087214496548,
      -0.9747285559713094981983919930081690617411,
       0.9747285559713094981983919930081690617411,
      -0.9951872199970213601799974097007368118745,
       0.9951872199970213601799974097007368118745
    ],

    // Legendre-Gauss weights with n=24 (w_i values, defined by a function linked to in the Bezier primer article)
    Cvalues: [
      0.1279381953467521569740561652246953718517,
      0.1279381953467521569740561652246953718517,
      0.1258374563468282961213753825111836887264,
      0.1258374563468282961213753825111836887264,
      0.1216704729278033912044631534762624256070,
      0.1216704729278033912044631534762624256070,
      0.1155056680537256013533444839067835598622,
      0.1155056680537256013533444839067835598622,
      0.1074442701159656347825773424466062227946,
      0.1074442701159656347825773424466062227946,
      0.0976186521041138882698806644642471544279,
      0.0976186521041138882698806644642471544279,
      0.0861901615319532759171852029837426671850,
      0.0861901615319532759171852029837426671850,
      0.0733464814110803057340336152531165181193,
      0.0733464814110803057340336152531165181193,
      0.0592985849154367807463677585001085845412,
      0.0592985849154367807463677585001085845412,
      0.0442774388174198061686027482113382288593,
      0.0442774388174198061686027482113382288593,
      0.0285313886289336631813078159518782864491,
      0.0285313886289336631813078159518782864491,
      0.0123412297999871995468056670700372915759,
      0.0123412297999871995468056670700372915759
    ],
    arcfn: function(t, derivativeFn) {
      var d = derivativeFn(t);
      var l = d.x*d.x + d.y*d.y;
      if(typeof d.z !== "undefined") {
        l += d.z*d.z;
      }
      return sqrt(l);
    },
    length: function(derivativeFn) {
      var z=0.5,sum=0,len=this.Tvalues.length,i,t;
      for(i=0; i<len; i++) {
        t = z * this.Tvalues[i] + z;
        sum += this.Cvalues[i] * this.arcfn(t,derivativeFn);
      }
      return z * sum;
    },
    map: function(v, ds,de, ts,te) {
      var d1 = de-ds, d2 = te-ts, v2 =  v-ds, r = v2/d1;
      return ts + d2*r;
    },
    lerp: function(r, v1, v2) {
      var ret = {
        x: v1.x + r*(v2.x-v1.x),
        y: v1.y + r*(v2.y-v1.y)
      };
      if(!!v1.z && !!v2.z) {
        ret.z =  v1.z + r*(v2.z-v1.z);
      }
      return ret;
    },
    pointToString: function(p) {
      var s = p.x+"/"+p.y;
      if(typeof p.z !== "undefined") {
        s += "/"+p.z;
      }
      return s;
    },
    pointsToString: function(points) {
      return "[" + points.map(this.pointToString).join(", ") + "]";
    },
    copy: function(obj) {
      return JSON.parse(JSON.stringify(obj));
    },
    angle: function(o,v1,v2) {
      var dx1 = v1.x - o.x,
          dy1 = v1.y - o.y,
          dx2 = v2.x - o.x,
          dy2 = v2.y - o.y,
          cross = dx1*dy2 - dy1*dx2,
          m1 = sqrt(dx1*dx1+dy1*dy1),
          m2 = sqrt(dx2*dx2+dy2*dy2),
          dot;
      dx1/=m1; dy1/=m1; dx2/=m2; dy2/=m2;
      dot = dx1*dx2 + dy1*dy2;
      return atan2(cross, dot);
    },
    dist: function(p1, p2) {
      var dx = p1.x - p2.x,
          dy = p1.y - p2.y;
      return sqrt(dx*dx+dy*dy);
    },
    lli8: function(x1,y1,x2,y2,x3,y3,x4,y4) {
      var nx=(x1*y2-y1*x2)*(x3-x4)-(x1-x2)*(x3*y4-y3*x4),
          ny=(x1*y2-y1*x2)*(y3-y4)-(y1-y2)*(x3*y4-y3*x4),
          d=(x1-x2)*(y3-y4)-(y1-y2)*(x3-x4);
      if(d==0) { return false; }
      return { x: nx/d, y: ny/d };
    },
    lli4: function(p1,p2,p3,p4) {
      var x1 = p1.x, y1 = p1.y,
          x2 = p2.x, y2 = p2.y,
          x3 = p3.x, y3 = p3.y,
          x4 = p4.x, y4 = p4.y;
      return this.lli8(x1,y1,x2,y2,x3,y3,x4,y4);
    },
    lli: function(v1, v2) {
      return this.lli4(v1,v1.c,v2,v2.c);
    },
    makeline: function(p1,p2) {
      var x1 = p1.x, y1 = p1.y, x2 = p2.x, y2 = p2.y, dx = (x2-x1)/3, dy = (y2-y1)/3;
      return new Bezier(x1, y1, x1+dx, y1+dy, x1+2*dx, y1+2*dy, x2, y2);
    },
    findbbox: function(sections) {
      var mx=99999999,my=mx,MX=-mx,MY=MX;
      sections.forEach(function(s) {
        var bbox = s.bbox();
        if(mx > bbox.x.min) mx = bbox.x.min;
        if(my > bbox.y.min) my = bbox.y.min;
        if(MX < bbox.x.max) MX = bbox.x.max;
        if(MY < bbox.y.max) MY = bbox.y.max;
      });
      return {
        x: { min: mx, mid:(mx+MX)/2, max: MX, size:MX-mx },
        y: { min: my, mid:(my+MY)/2, max: MY, size:MY-my }
      }
    },
    shapeintersections: function(s1, bbox1, s2, bbox2) {
      if(!this.bboxoverlap(bbox1, bbox2)) return [];
      var intersections = [];
      var a1 = [s1.startcap, s1.forward, s1.back, s1.endcap];
      var a2 = [s2.startcap, s2.forward, s2.back, s2.endcap];
      a1.forEach(function(l1) {
        if(l1.virtual) return;
        a2.forEach(function(l2) {
          if(l2.virtual) return;
          var iss = l1.intersects(l2);
          if(iss.length>0) {
            iss.c1 = l1;
            iss.c2 = l2;
            iss.s1 = s1;
            iss.s2 = s2;
            intersections.push(iss);
          }
        });
      });
      return intersections;
    },
    makeshape: function(forward, back) {
      var bpl = back.points.length;
      var fpl = forward.points.length;
      var start  = this.makeline(back.points[bpl-1], forward.points[0]);
      var end    = this.makeline(forward.points[fpl-1], back.points[0]);
      var shape  = {
        startcap: start,
        forward: forward,
        back: back,
        endcap: end,
        bbox: this.findbbox([start, forward, back, end])
      };
      var self = this;
      shape.intersections = function(s2) {
        return self.shapeintersections(shape,shape.bbox,s2,s2.bbox);
      };
      return shape;
    },
    getminmax: function(curve, d, list) {
      if(!list) return { min:0, max:0 };
      var min=0xFFFFFFFFFFFFFFFF, max=-min,t,c;
      if(list.indexOf(0)===-1) { list = [0].concat(list); }
      if(list.indexOf(1)===-1) { list.push(1); }
      for(var i=0,len=list.length; i<len; i++) {
        t = list[i];
        c = curve.get(t);
        if(c[d] < min) { min = c[d]; }
        if(c[d] > max) { max = c[d]; }
      }
      return { min:min, mid:(min+max)/2, max:max, size:max-min };
    },
    align: function(points, line) {
      var tx = line.p1.x,
          ty = line.p1.y,
          a = -atan2(line.p2.y-ty, line.p2.x-tx),
          d = function(v) {
            return {
              x: (v.x-tx)*cos(a) - (v.y-ty)*sin(a),
              y: (v.x-tx)*sin(a) + (v.y-ty)*cos(a)
            };
          };
      return points.map(d);
    },
    roots: function(points, line) {
      line = line || {p1:{x:0,y:0},p2:{x:1,y:0}};
      var order = points.length - 1;
      var p = this.align(points, line);
      var reduce = function(t) { return 0<=t && t <=1; };

      if (order === 2) {
        var a = p[0].y,
            b = p[1].y,
            c = p[2].y,
            d = a - 2*b + c;
        if(d!==0) {
          var m1 = -sqrt(b*b-a*c),
              m2 = -a+b,
              v1 = -( m1+m2)/d,
              v2 = -(-m1+m2)/d;
          return [v1, v2].filter(reduce);
        }
        else if(b!==c && d===0) {
          return [ (2*b-c)/2*(b-c) ].filter(reduce);
        }
        return [];
      }

      // see http://www.trans4mind.com/personal_development/mathematics/polynomials/cubicAlgebra.htm
      var pa = p[0].y,
          pb = p[1].y,
          pc = p[2].y,
          pd = p[3].y,
          d = (-pa + 3*pb - 3*pc + pd),
          a = (3*pa - 6*pb + 3*pc) / d,
          b = (-3*pa + 3*pb) / d,
          c = pa / d,
          p = (3*b - a*a)/3,
          p3 = p/3,
          q = (2*a*a*a - 9*a*b + 27*c)/27,
          q2 = q/2,
          discriminant = q2*q2 + p3*p3*p3,
          u1,v1,x1,x2,x3;
       if (discriminant < 0) {
        var mp3 = -p/3,
            mp33 = mp3*mp3*mp3,
            r = sqrt( mp33 ),
            t = -q/(2*r),
            cosphi = t<-1 ? -1 : t>1 ? 1 : t,
            phi = acos(cosphi),
            crtr = crt(r),
            t1 = 2*crtr;
        x1 = t1 * cos(phi/3) - a/3;
        x2 = t1 * cos((phi+tau)/3) - a/3;
        x3 = t1 * cos((phi+2*tau)/3) - a/3;
        return [x1, x2, x3].filter(reduce);
      } else if(discriminant === 0) {
        u1 = q2 < 0 ? crt(-q2) : -crt(q2);
        x1 = 2*u1-a/3;
        x2 = -u1 - a/3;
        return [x1,x2].filter(reduce);
      } else {
        var sd = sqrt(discriminant);
        u1 = crt(-q2+sd);
        v1 = crt(q2+sd);
        return [u1-v1-a/3].filter(reduce);;
      }
    },
    droots: function(p) {
      // quadratic roots are easy
      if(p.length === 3) {
        var a = p[0],
            b = p[1],
            c = p[2],
            d = a - 2*b + c;
        if(d!==0) {
          var m1 = -sqrt(b*b-a*c),
              m2 = -a+b,
              v1 = -( m1+m2)/d,
              v2 = -(-m1+m2)/d;
          return [v1, v2];
        }
        else if(b!==c && d===0) {
          return [ (2*b-c)/(2*(b-c)) ];
        }
        return [];
      }

      // linear roots are even easier
      if(p.length === 2) {
        var a = p[0], b = p[1];
        if(a!==b) { return [a/(a-b)]; }
        return [];
      }
    },
    bboxoverlap: function(b1,b2) {
      var dims=['x','y'],len=dims.length,i,dim,l,t,d
      for(i=0; i<len; i++) {
        dim = dims[i];
        l = b1[dim].mid;
        t = b2[dim].mid;
        d = (b1[dim].size + b2[dim].size)/2;
        if(abs(l-t) >= d) return false;
      }
      return true;
    },
    expandbox: function(bbox, _bbox) {
      if(_bbox.x.min < bbox.x.min) { bbox.x.min = _bbox.x.min; }
      if(_bbox.y.min < bbox.y.min) { bbox.y.min = _bbox.y.min; }
      if(_bbox.z && _bbox.z.min < bbox.z.min) { bbox.z.min = _bbox.z.min; }
      if(_bbox.x.max > bbox.x.max) { bbox.x.max = _bbox.x.max; }
      if(_bbox.y.max > bbox.y.max) { bbox.y.max = _bbox.y.max; }
      if(_bbox.z && _bbox.z.max > bbox.z.max) { bbox.z.max = _bbox.z.max; }
      bbox.x.mid = (bbox.x.min + bbox.x.max)/2;
      bbox.y.mid = (bbox.y.min + bbox.y.max)/2;
      if(bbox.z) { bbox.z.mid = (bbox.z.min + bbox.z.max)/2; }
      bbox.x.size = bbox.x.max - bbox.x.min;
      bbox.y.size = bbox.y.max - bbox.y.min;
      if(bbox.z) { bbox.z.size = bbox.z.max - bbox.z.min; }
    },
    pairiteration: function(c1,c2) {
      var c1b = c1.bbox(),
          c2b = c2.bbox(),
          r = 100000,
          threshold = 0.5;
      if(c1b.x.size + c1b.y.size < threshold && c2b.x.size + c2b.y.size < threshold) {
        return [ ((r * (c1._t1+c1._t2)/2)|0)/r + "/" + ((r * (c2._t1+c2._t2)/2)|0)/r ];
      }
      var cc1 = c1.split(0.5),
          cc2 = c2.split(0.5),
          pairs = [
            {left: cc1.left, right: cc2.left },
            {left: cc1.left, right: cc2.right },
            {left: cc1.right, right: cc2.right },
            {left: cc1.right, right: cc2.left }];
      pairs = pairs.filter(function(pair) {
        return utils.bboxoverlap(pair.left.bbox(),pair.right.bbox());
      });
      var results = [];
      if(pairs.length === 0) return results;
      pairs.forEach(function(pair) {
        results = results.concat(
          utils.pairiteration(pair.left, pair.right)
        );
      })
      results = results.filter(function(v,i) {
        return results.indexOf(v) === i;
      });
      return results;
    },
    getccenter: function(p1,p2,p3) {
      var dx1 = (p2.x - p1.x),
          dy1 = (p2.y - p1.y),
          dx2 = (p3.x - p2.x),
          dy2 = (p3.y - p2.y);
      var dx1p = dx1 * cos(quart) - dy1 * sin(quart),
          dy1p = dx1 * sin(quart) + dy1 * cos(quart),
          dx2p = dx2 * cos(quart) - dy2 * sin(quart),
          dy2p = dx2 * sin(quart) + dy2 * cos(quart);
      // chord midpoints
      var mx1 = (p1.x + p2.x)/2,
          my1 = (p1.y + p2.y)/2,
          mx2 = (p2.x + p3.x)/2,
          my2 = (p2.y + p3.y)/2;
      // midpoint offsets
      var mx1n = mx1 + dx1p,
          my1n = my1 + dy1p,
          mx2n = mx2 + dx2p,
          my2n = my2 + dy2p;
      // intersection of these lines:
      var arc = utils.lli8(mx1,my1,mx1n,my1n, mx2,my2,mx2n,my2n),
          r = utils.dist(arc,p1),
          // arc start/end values, over mid point:
          s = atan2(p1.y - arc.y, p1.x - arc.x),
          m = atan2(p2.y - arc.y, p2.x - arc.x),
          e = atan2(p3.y - arc.y, p3.x - arc.x),
          _;
      // determine arc direction (cw/ccw correction)
      if (s<e) {
        // if s<m<e, arc(s, e)
        // if m<s<e, arc(e, s + tau)
        // if s<e<m, arc(e, s + tau)
        if (s>m || m>e) { s += tau; }
        if (s>e) { _=e; e=s; s=_; }
      } else {
        // if e<m<s, arc(e, s)
        // if m<e<s, arc(s, e + tau)
        // if e<s<m, arc(s, e + tau)
        if (e<m && m<s) { _=e; e=s; s=_; } else { e += tau; }
      }
      // assign and done.
      arc.s = s;
      arc.e = e;
      arc.r = r;
      return arc;
    }
  };

  /**
   * Poly Bezier
   * @param {[type]} curves [description]
   */
  var PolyBezier = function(curves) {
    this.curves = [];
    this._3d = false;
    if(!!curves) {
      this.curves = curves;
      this._3d = this.curves[0]._3d;
    }
  }

  PolyBezier.prototype = {
    valueOf: function() {
      return this.toString();
    },
    toString: function() {
      return utils.pointsToString(this.points);
    },
    addCurve: function(curve) {
      this.curves.push(curve);
      this._3d = this._3d || curve._3d;
    },
    length: function() {
      return this.curves.map(function(v) { return v.length(); }).reduce(function(a,b) { return a+b; });
    },
    curve: function(idx) {
      return this.curves[idx];
    },
    bbox: function() {
      var c = this.curves;
      var bbox = c[0].bbox();
      for(var i=1; i<c.length; i++) {
        utils.expandbox(bbox, c[i].bbox());
      }
      return bbox;
    },
    offset: function(d) {
      var offset = [];
      this.curves.forEach(function(v) {
        offset = offset.concat(v.offset(d));
      });
      return new PolyBezier(offset);
    }
  };


  /**
   * Bezier curve constructor. The constructor argument can be one of three things:
   *
   * 1. array/4 of {x:..., y:..., z:...}, z optional
   * 2. numerical array/8 ordered x1,y1,x2,y2,x3,y3,x4,y4
   * 3. numerical array/12 ordered x1,y1,z1,x2,y2,z2,x3,y3,z3,x4,y4,z4
   *
   */
  var Bezier = function(coords) {
    var args = (coords && coords.forEach ? coords : arguments);
    if(typeof args[0] === "object") {
      args = [];
      for(var i=0; i<coords.length; i++) {
        ['x','y','z'].forEach(function(d) {
          if(typeof coords[i][d] !== "undefined") {
            args.push(coords[i][d]);
          }
        });
      }
    }
    var len = args.length;
    if(len!==6 && len!==8 && len!==9 && len!==12) {
      console.log(coords);
      throw new Error("This Bezier curve library only supports quadratic and cubic curves (in 2d and 3d)");
    }
    var _3d = (len === 9 || len === 12);
    this._3d = _3d;
    var points = [];
    for(var idx=0, step=(_3d ? 3 : 2); idx<len; idx+=step) {
      var point = {
        x: args[idx],
        y: args[idx+1]
      };
      if(_3d) { point.z = args[idx+2] };
      points.push(point);
    }
    this.order = points.length - 1;
    this.points = points;
    var dims = ['x','y'];
    if(_3d) dims.push('z');
    this.dims = dims;
    this.dimlen = dims.length;
    (function(curve) {
      var a = utils.align(points, {p1:points[0], p2:points[curve.order]});
      for(var i=0; i<a.length; i++) {
        if(abs(a[i].y) > 0.0001) {
          curve._linear = false;
          return;
        }
      }
      curve._linear = true;
    }(this));
    this._t1 = 0;
    this._t2 = 1;
    this.update();
  };

  Bezier.fromSVG = function(svgString) {
    var list = svgString.match(/[-+]?\d*\.?\d+(?:[eE][-+]?\d+)?/g).map(parseFloat);
    var relative = /[cq]/.test(svgString);
    if(!relative) return new Bezier(list);
    list = list.map(function(v,i) {
      return i < 2 ? v : v + list[i % 2];
    });
    return new Bezier(list);
  };

  Bezier.utils = utils;

  Bezier.prototype = {
    valueOf: function() {
      return this.toString();
    },
    toString: function() {
      return utils.pointsToString(this.points);
    },
    toSVG: function(relative) {
      if(this._3d) return false;
      var p = this.points,
          x = p[0].x,
          y = p[0].y,
          s = ["M", x, y, (this.order===2 ? "Q":"C")];
      for(var i=1, last=p.length; i<last; i++) {
        s.push(p[i].x);
        s.push(p[i].y);
      }
      return s.join(" ");
    },
    update: function() {
      // one-time compute derivative coordinates
      this.dpoints = [];
      for(var p=this.points, d=p.length, c=d-1; d>1; d--, c--) {
        var list = [];
        for(var j=0, dpt; j<c; j++) {
          dpt = {
            x: c * (p[j+1].x - p[j].x),
            y: c * (p[j+1].y - p[j].y)
          };
          if(this._3d) {
            dpt.z = c * (p[j+1].z - p[j].z);
          }
          list.push(dpt);
        }
        this.dpoints.push(list);
        p = list;
      };
      this.computedirection();
    },
    computedirection: function() {
      var points = this.points;
      var angle = utils.angle(points[0], points[this.order], points[1]);
      this.clockwise = angle > 0;
    },
    length: function() {
      return utils.length(this.derivative.bind(this));
    },
    getLUT: function(steps) {
      steps = steps || 100;
      var points = [];
      for(var t=0; t<=steps; t++) {
        points.push(this.compute(t/steps));
      }
      return points;
    },
    get: function(t) {
      return this.compute(t);
    },
    point: function(idx) {
      return this.points[idx];
    },
    compute: function(t) {
      // shortcuts
      if(t===0) { return this.points[0]; }
      if(t===1) { return this.points[this.order]; }
      // plain computation
      var mt = 1-t,
          mt2 = mt*mt,
          t2 = t*t,
          a,b,c,d = 0,
          p = this.points;
      if(this.order===2) {
        p = [p[0], p[1], p[2], ZERO];
        a = mt2;
        b = mt*t*2;
        c = t2;
      }
      if(this.order===3) {
        a = mt2*mt;
        b = mt2*t*3;
        c = mt*t2*3;
        d = t*t2;
      }
      var ret = {
        x: a*p[0].x + b*p[1].x + c*p[2].x + d*p[3].x,
        y: a*p[0].y + b*p[1].y + c*p[2].y + d*p[3].y
      };
      if(this._3d) {
        ret.z = a*p[0].z + b*p[1].z + c*p[2].z + d*p[3].z;
      }
      return ret;
    },
    raise: function() {
      var p = this.points, np = [p[0]], i, k=p.length, pi, pim;
      for (var i=1; i<k; i++) {
        pi = p[i];
        pim = p[i-1];
        np[i] = {
          x: (k-i)/k * pi.x + i/k * pim.x,
          y: (k-i)/k * pi.y + i/k * pim.y
        };
      }
      np[k] = p[k-1];
      return new Bezier(np);
    },
    derivative: function(t) {
      var mt = 1-t,
          a,b,c=0,
          p = this.dpoints[0];
      if(this.order===2) { p = [p[0], p[1], ZERO]; a = mt; b = t; }
      if(this.order===3) { a = mt*mt; b = mt*t*2; c = t*t; }
      var ret = {
        x: a*p[0].x + b*p[1].x + c*p[2].x,
        y: a*p[0].y + b*p[1].y + c*p[2].y
      };
      if(this._3d) {
        ret.z = a*p[0].z + b*p[1].z + c*p[2].z;
      }
      return ret;
    },
    normal: function(t) {
      return this._3d ? this.__normal3(t) : this.__normal2(t);
    },
    __normal2: function(t) {
      var d = this.derivative(t);
      var q = sqrt(d.x*d.x + d.y*d.y)
      return { x: -d.y/q, y: d.x/q };
    },
    __normal3: function() {
      // see http://stackoverflow.com/questions/25453159
      var r1 = this.derivative(t),
          r2 = this.derivative(t+0.01),
          q1 = sqrt(r1.x*r1.x + r1.y*r1.y + r1.z*r1.z),
          q2 = sqrt(r2.x*r2.x + r2.y*r2.y + r2.z*r2.z);
      r1.x /= q1; r1.y /= q1; r1.z /= q1;
      r2.x /= q2; r2.y /= q2; r2.z /= q2;
      // cross product
      var c = {
        x: r2.y*r1.z - r2.z*r1.y,
        y: r2.z*r1.x - r2.x*r1.z,
        z: r2.x*r1.y - r2.y*r1.x
      };
      var m = sqrt(c.x*c.x + c.y*c.y + c.z*c.z);
      c.x /= m; c.y /= m; c.z /= m;
      // rotation matrix
      var R = [   c.x*c.x,   c.x*c.y-c.z, c.x*c.z+c.y,
                c.x*c.y+c.z,   c.y*c.y,   c.y*c.z-c.x,
                c.x*c.z-c.y, c.y*c.z+c.x,   c.z*c.z    ];
      // normal vector:
      var n = {
        x: R[0] * r1.x + R[1] * r1.y + R[2] * r1.z,
        y: R[3] * r1.x + R[4] * r1.y + R[5] * r1.z,
        z: R[6] * r1.x + R[7] * r1.y + R[8] * r1.z
      };
      return n;
    },
    split: function(t1, t2) {
      // shortcuts
      if(t1===0 && !!t2) { return this.split(t2).left; }
      if(t2===1) { return this.split(t1).right; }
      // no shortcut: use "de Casteljau" iteration.
      var p = this.points,
          _p = [],
          pt,
          q = [],
          idx = 0,
          i=0,
          l=0;
      q[idx++] = p[0];
      q[idx++] = p[1];
      q[idx++] = p[2];
      if(this.order === 3) { q[idx++] = p[3]; }
      // we lerp between all points at each iteration, until we have 1 point left.
      while(p.length>1) {
        _p = [];
        for(i=0, l=p.length-1; i<l; i++) {
          pt = utils.lerp(t1,p[i],p[i+1]);
          q[idx++] = pt;
          _p.push(pt);
        }
        p = _p;
      }
      var result = {
        left: this.order === 2 ? new Bezier([q[0],q[3],q[5]]) : new Bezier([q[0],q[4],q[7],q[9]]),
        right: this.order === 2 ? new Bezier([q[5],q[4],q[2]]) : new Bezier([q[9],q[8],q[6],q[3]]),
        span: q
      };

      // make sure we bind _t1/_t2 information!
      result.left._t1  = utils.map(0,  0,1, this._t1,this._t2);
      result.left._t2  = utils.map(t1, 0,1, this._t1,this._t2);
      result.right._t1 = utils.map(t1, 0,1, this._t1,this._t2);
      result.right._t2 = utils.map(1,  0,1, this._t1,this._t2);

      // if we have no t2, we're done
      if(!t2) { return result; }

      // if we have a t2, split again:
      t2 = utils.map(t2,t1,1,0,1);
      var subsplit = result.right.split(t2);
      return subsplit.left;
    },
    inflections: function() {
      var dims = this.dims,
          len = this.dimlen,
          result={},
          roots=[],
          p, mfn;
      dims.forEach(function(dim) {
        mfn = function(v) { return v[dim]; };
        p = this.dpoints[0].map(mfn);
        result[dim] = utils.droots(p);
        if(this.order === 3) {
          p = this.dpoints[1].map(mfn);
          result[dim] = result[dim].concat(utils.droots(p));
        }
        result[dim] = result[dim].filter(function(t) { return (t>=0 && t<=1); });
        roots = roots.concat(result[dim].sort());
      }.bind(this));
      roots.sort();
      result.values = roots;
      return result;
    },
    bbox: function() {
      var inflections = this.inflections(), result = {};
      this.dims.forEach(function(d) {
        result[d] = utils.getminmax(this, d, inflections[d]);
      }.bind(this));
      return result;
    },
    overlaps: function(curve) {
      var lbbox = this.bbox(),
          tbbox = curve.bbox();
      return utils.bboxoverlap(lbbox,tbbox);
    },
    offset: function(t, d) {
      if(typeof d !== "undefined") {
        var c = this.get(t);
        var n = this.normal(t);
        var ret = {
          c: c,
          n: n,
          x: c.x + n.x * d,
          y: c.y + n.y * d
        };
        if(this._3d) {
          ret.z = c.z + n.z * d;
        };
        return ret;
      }
      if(this._linear) {
        var nv = this.normal(0);
        var coords = this.points.map(function(p) {
          var ret = {
            x: p.x + t * nv.x,
            y: p.y + t * nv.y
          };
          if(p.z && n.z) { ret.z = p.z + t * nv.z; }
          return ret;
        });
        return [new Bezier(coords)];
      }
      var reduced = this.reduce();
      return reduced.map(function(s) {
        return s.scale(t);
      });
    },
    simple: function() {
      if(this.order===3) {
        var a1 = utils.angle(this.points[0], this.points[3], this.points[1]);
        var a2 = utils.angle(this.points[0], this.points[3], this.points[2]);
        if(a1>0 && a2<0 || a1<0 && a2>0) return false;
      }
      var n1 = this.normal(0);
      var n2 = this.normal(1);
      var s = n1.x*n2.x + n1.y*n2.y;
      if(this._3d) { s += n1.z*n2.z; }
      var angle = abs(acos(s));
      return angle < pi/3;
    },
    reduce: function() {
      var i, t1=0, t2=0, step=0.01, segment, pass1=[], pass2=[];
      // first pass: split on inflections
      var inflections = this.inflections().values;
      if(inflections.indexOf(0)===-1) { inflections = [0].concat(inflections); }
      if(inflections.indexOf(1)===-1) { inflections.push(1); }
      for(t1=inflections[0], i=1; i<inflections.length; i++) {
        t2 = inflections[i];
        segment = this.split(t1,t2);
        segment._t1 = t1;
        segment._t2 = t2;
        pass1.push(segment);
        t1 = t2;
      }
      // second pass: further reduce these segments to simple segments
      pass1.forEach(function(p1) {
        t1=0;
        t2=0;
        while(t2 <= 1) {
          for(t2=t1+step; t2<=1+step; t2+=step) {
            segment = p1.split(t1,t2);
            if(!segment.simple()) {
              t2 -= step;
              if(abs(t1-t2)<step) {
                // we can never form a reduction
                return [];
              }
              segment = p1.split(t1,t2);
              segment._t1 = utils.map(t1,0,1,p1._t1,p1._t2);
              segment._t2 = utils.map(t2,0,1,p1._t1,p1._t2);
              pass2.push(segment);
              t1 = t2;
              break;
            }
          }
        }
        if(t1<1) {
          segment = p1.split(t1,1);
          segment._t1 = utils.map(t1,0,1,p1._t1,p1._t2);
          segment._t2 = p1._t2;
          pass2.push(segment);
        }
      });
      return pass2;
    },
    scale: function(d) {
      var order = this.order;
      var distanceFn = false
      if(typeof d === "function") { distanceFn = d; }
      if(distanceFn && order === 2) { return this.raise().scale(distanceFn); }

      // TODO: add special handling for degenerate (=linear) curves.
      var clockwise = this.clockwise;
      var r1 = distanceFn ? distanceFn(0) : d;
      var r2 = distanceFn ? distanceFn(1) : d;
      var v = [ this.offset(0,10), this.offset(1,10) ];
      var o = utils.lli4(v[0], v[0].c, v[1], v[1].c);
      if(!o) { throw "cannot scale this curve. Try reducing it first."; }
      // move all points by distance 'd' wrt the origin 'o'
      var points=this.points, np=[];

      // move end points by fixed distance along normal.
      [0,1].forEach(function(t) {
        var p = np[t*order] = utils.copy(points[t*order]);
        p.x += (t?r2:r1) * v[t].n.x;
        p.y += (t?r2:r1) * v[t].n.y;
      }.bind(this));

      if (!distanceFn) {
        // move control points to lie on the intersection of the offset
        // derivative vector, and the origin-through-control vector
        [0,1].forEach(function(t) {
          if(this.order===2 && !!t) return;
          var p = np[t*order];
          var d = this.derivative(t);
          var p2 = { x: p.x + d.x, y: p.y + d.y };
          np[t+1] = utils.lli4(p, p2, o, points[t+1]);
        }.bind(this));
        return new Bezier(np);
      }

      // move control points by "however much necessary to
      // ensure the correct tangent to endpoint".
      [0,1].forEach(function(t) {
        if(this.order===2 && !!t) return;
        var p = points[t+1];
        var ov = {
          x: p.x - o.x,
          y: p.y - o.y
        };
        var rc = distanceFn ? distanceFn((t+1)/order) : d;
        if(distanceFn && !clockwise) rc = -rc;
        var m = sqrt(ov.x*ov.x + ov.y*ov.y);
        ov.x /= m;
        ov.y /= m;
        np[t+1] = {
          x: p.x + rc*ov.x,
          y: p.y + rc*ov.y
        }
      }.bind(this));
      return new Bezier(np);
    },
    outline: function(d1, d2, d3, d4) {
      d2 = (typeof d2 === "undefined") ? d1 : d2;
      var reduced = this.reduce(),
          len = reduced.length,
          order = this.order,
          fcurves = [],
          bcurves = [],
          i, p, last,
          alen = 0,
          tlen = this.length();

      var graduated = (typeof d3 !== "undefined" && typeof d4 !== "undefined");

      function linearDistanceFunction(s,e, tlen,alen,slen) {
        return function (v) {
          var f1 = alen/tlen, f2 = (alen+slen)/tlen, d = e-s;
          return utils.map(v, 0,1, s+f1*d, s+f2*d);
        };
      };

      // form curve oulines
      reduced.forEach(function(segment) {
        slen = segment.length();
        if (graduated) {
          fcurves.push(segment.scale(  linearDistanceFunction( d1, d3, tlen,alen,slen)  ));
          bcurves.push(segment.scale(  linearDistanceFunction(-d2,-d4, tlen,alen,slen)  ));
        } else {
          fcurves.push(segment.scale( d1));
          bcurves.push(segment.scale(-d2));
        }
        alen += slen;
      });

      // reverse the "return" outline
      bcurves = bcurves.map(function(s) {
        p = s.points;
        if(p[3]) { s.points = [p[3],p[2],p[1],p[0]]; }
        else { s.points = [p[2],p[1],p[0]]; }
        return s;
      }).reverse();

      // form the endcaps as lines
      var fs = fcurves[0].points[0],
          fe = fcurves[len-1].points[fcurves[len-1].points.length-1],
          bs = bcurves[len-1].points[bcurves[len-1].points.length-1],
          be = bcurves[0].points[0],
          ls = utils.makeline(bs,fs),
          le = utils.makeline(fe,be),
          segments = [ls].concat(fcurves).concat([le]).concat(bcurves),
          slen = segments.length;

      return new PolyBezier(segments);
    },
    outlineshapes: function(d1,d2) {
      d2 = d2 || d1;
      var outline = this.outline(d1,d2).curves;
      var shapes = [];
      for(var i=1, len=outline.length; i < len/2; i++) {
        var shape = utils.makeshape(outline[i], outline[len-i]);
        shape.startcap.virtual = (i > 1);
        shape.endcap.virtual = (i < len/2-1);
        shapes.push(shape);
      }
      return shapes;
    },
    intersects: function(curve) {
      if(!curve) return this.selfintersects();
      if(curve.p1 && curve.p2) {
        return this.lineIntersects(curve);
      }
      if(curve instanceof Bezier) { curve = curve.reduce(); }
      return this.curveintersects(this.reduce(), curve);
    },
    lineIntersects: function(line) {
      var mx = min(line.p1.x, line.p2.x),
          my = min(line.p1.y, line.p2.y),
          MX = max(line.p1.x, line.p2.x),
          MY = max(line.p1.y, line.p2.y),
          self=this;
      return utils.roots(this.points, line).filter(function(t) {
        var p = self.get(t);
        return (mx <= p.x && p.x <= MX && my <= p.y && p.y <= MY);
      });
    },
    selfintersects: function() {
      var reduced = this.reduce();
      // "simple" curves cannot intersect with their direct
      // neighbour, so for each segment X we check whether
      // it intersects [0:x-2][x+2:last].
      var i,len=reduced.length-2,results=[],result,left,right;
      for(i=0; i<len; i++) {
        left = reduced.slice(i,i+1);
        right = reduced.slice(i+2);
        result = this.curveintersects(left, right);
        results = results.concat( result );
      }
      return results;
    },
    curveintersects: function(c1,c2) {
      var pairs = [];
      // step 1: pair off any overlapping segments
      c1.forEach(function(l) {
        c2.forEach(function(r) {
          if(l.overlaps(r)) {
            pairs.push({ left: l, right: r });
          }
        });
      });
      // step 2: for each pairing, run through the convergence algorithm.
      var intersections = [];
      pairs.forEach(function(pair) {
        var result = utils.pairiteration(pair.left, pair.right);
        if(result.length > 0) {
          intersections = intersections.concat(result);
        }
      });
      return intersections;
    },
    arcs: function(errorThreshold) {
      errorThreshold = errorThreshold || 0.5;
      var circles = [];
      return this._iterate(errorThreshold, circles);
    },
    _error: function(pc, np1, s, e) {
      var q = (e - s) / 4,
          c1 = this.get(s + q),
          c2 = this.get(e - q),
          ref = utils.dist(pc, np1),
          d1  = utils.dist(pc, c1),
          d2  = utils.dist(pc, c2);
      return abs(d1-ref) + abs(d2-ref);
    },
    _iterate: function(errorThreshold, circles) {
      var s = 0, e = 1, safety;
      // we do a binary search to find the "good `t` closest to no-longer-good"
      do {
        safety=0;

        // step 1: start with the maximum possible arc
        e = 1;

        // points:
        var np1 = this.get(s), np2, o_np2, np3, o_np3, arc, prev_arc;

        // booleans:
        var curr_good = false, prev_good = false, done;

        // numbers:
        var m = e, prev_e = 1, step = 0;

        // step 2: find the best possible arc
        do {
          prev_good = curr_good;
          prev_arc = arc;
          m = (s + e)/2;
          step++;

          np2 = this.get(m);
          np3 = this.get(e);

          arc = utils.getccenter(np1, np2, np3);
          var error = this._error(arc, np1, s, e);
          curr_good = (error <= errorThreshold);

          done = prev_good && !curr_good;
          if(!done) prev_e = e;

          // this arc is fine: we can move 'e' up to see if we can find a wider arc
          if(curr_good) {
            // if e is already at max, then we're done for this arc.
            if (e >= 1) {
              prev_e = 1;
              prev_arc = arc;
              break;
            }
            // if not, move it up by half the iteration distance
            e = e + (e-s)/2;
          }

          // this is a bad arc: we need to move 'e' down to find a good arc
          else {
            e = m;
          }
        }
        while(!done && safety++<100);

        if(safety>=100) {
          console.error("arc abstraction somehow failed...");
          break;
        }

        // console.log("[F] arc found", s, prev_e, prev_arc.x, prev_arc.y, prev_arc.s, prev_arc.e);

        prev_arc = (prev_arc ? prev_arc : arc);
        circles.push(prev_arc);
        s = prev_e;
      }
      while(e < 1);
      return circles;
    }
  };

  return Bezier;
});

/*
  if(typeof module !== "undefined" && module.exports) {
    module.exports = Bezier;
  }

  else if(typeof define !== "undefined") {
    define(function() { return Bezier; });
  }

  else if(typeof window !== "undefined") {
    window.Bezier = Bezier;
  }

}());

},{}],2:[function(require,module,exports){
module.exports = require("./bezier");
},{"./bezier":1}]},{},[2])(2)
});
*/;
define('bezier', ['bezier/bezier'], function (main) { return main; });


define ('earcut/src/earcut',[],function ()
{


function earcut(data, holeIndices, dim) {

    dim = dim || 2;

    var hasHoles = holeIndices && holeIndices.length,
        outerLen = hasHoles ? holeIndices[0] * dim : data.length,
        outerNode = filterPoints(data, linkedList(data, 0, outerLen, dim, true)),
        triangles = [];

    if (!outerNode) return triangles;

    var minX, minY, maxX, maxY, x, y, size;

    if (hasHoles) outerNode = eliminateHoles(data, holeIndices, outerNode, dim);

    // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox
    if (data.length > 80 * dim) {
        minX = maxX = data[0];
        minY = maxY = data[1];

        for (var i = dim; i < outerLen; i += dim) {
            x = data[i];
            y = data[i + 1];
            if (x < minX) minX = x;
            if (y < minY) minY = y;
            if (x > maxX) maxX = x;
            if (y > maxY) maxY = y;
        }

        // minX, minY and size are later used to transform coords into integers for z-order calculation
        size = Math.max(maxX - minX, maxY - minY);
    }

    earcutLinked(data, outerNode, triangles, dim, minX, minY, size);

    return triangles;
}

// create a circular doubly linked list from polygon points in the specified winding order
function linkedList(data, start, end, dim, clockwise) {
    var sum = 0,
        i, j, last;

    // calculate original winding order of a polygon ring
    for (i = start, j = end - dim; i < end; i += dim) {
        sum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);
        j = i;
    }

    // link points into circular doubly-linked list in the specified winding order
    if (clockwise === (sum > 0)) {
        for (i = start; i < end; i += dim) last = insertNode(i, last);
    } else {
        for (i = end - dim; i >= start; i -= dim) last = insertNode(i, last);
    }

    return last;
}

// eliminate colinear or duplicate points
function filterPoints(data, start, end) {
    if (!end) end = start;

    var node = start,
        again;
    do {
        again = false;

        if (!node.steiner && (equals(data, node.i, node.next.i) || orient(data, node.prev.i, node.i, node.next.i) === 0)) {

            // remove node
            node.prev.next = node.next;
            node.next.prev = node.prev;

            if (node.prevZ) node.prevZ.nextZ = node.nextZ;
            if (node.nextZ) node.nextZ.prevZ = node.prevZ;

            node = end = node.prev;

            if (node === node.next) return null;
            again = true;

        } else {
            node = node.next;
        }
    } while (again || node !== end);

    return end;
}

// main ear slicing loop which triangulates a polygon (given as a linked list)
function earcutLinked(data, ear, triangles, dim, minX, minY, size, pass) {
    if (!ear) return;

    // interlink polygon nodes in z-order
    if (!pass && minX !== undefined) indexCurve(data, ear, minX, minY, size);

    var stop = ear,
        prev, next;

    // iterate through ears, slicing them one by one
    while (ear.prev !== ear.next) {
        prev = ear.prev;
        next = ear.next;

        if (isEar(data, ear, minX, minY, size)) {
            // cut off the triangle
            triangles.push(prev.i / dim);
            triangles.push(ear.i / dim);
            triangles.push(next.i / dim);

            // remove ear node
            next.prev = prev;
            prev.next = next;

            if (ear.prevZ) ear.prevZ.nextZ = ear.nextZ;
            if (ear.nextZ) ear.nextZ.prevZ = ear.prevZ;

            // skipping the next vertice leads to less sliver triangles
            ear = next.next;
            stop = next.next;

            continue;
        }

        ear = next;

        // if we looped through the whole remaining polygon and can't find any more ears
        if (ear === stop) {
            // try filtering points and slicing again
            if (!pass) {
                earcutLinked(data, filterPoints(data, ear), triangles, dim, minX, minY, size, 1);

            // if this didn't work, try curing all small self-intersections locally
            } else if (pass === 1) {
                ear = cureLocalIntersections(data, ear, triangles, dim);
                earcutLinked(data, ear, triangles, dim, minX, minY, size, 2);

            // as a last resort, try splitting the remaining polygon into two
            } else if (pass === 2) {
                splitEarcut(data, ear, triangles, dim, minX, minY, size);
            }

            break;
        }
    }
}

// check whether a polygon node forms a valid ear with adjacent nodes
function isEar(data, ear, minX, minY, size) {

    var a = ear.prev.i,
        b = ear.i,
        c = ear.next.i,

        ax = data[a], ay = data[a + 1],
        bx = data[b], by = data[b + 1],
        cx = data[c], cy = data[c + 1],

        abd = ax * by - ay * bx,
        acd = ax * cy - ay * cx,
        cbd = cx * by - cy * bx,
        A = abd - acd - cbd;

    if (A <= 0) return false; // reflex, can't be an ear

    // now make sure we don't have other points inside the potential ear;
    // the code below is a bit verbose and repetitive but this is done for performance

    var cay = cy - ay,
        acx = ax - cx,
        aby = ay - by,
        bax = bx - ax,
        i, px, py, s, t, k, node;

    // if we use z-order curve hashing, iterate through the curve
    if (minX !== undefined) {

        // triangle bbox; min & max are calculated like this for speed
        var minTX = ax < bx ? (ax < cx ? ax : cx) : (bx < cx ? bx : cx),
            minTY = ay < by ? (ay < cy ? ay : cy) : (by < cy ? by : cy),
            maxTX = ax > bx ? (ax > cx ? ax : cx) : (bx > cx ? bx : cx),
            maxTY = ay > by ? (ay > cy ? ay : cy) : (by > cy ? by : cy),

            // z-order range for the current triangle bbox;
            minZ = zOrder(minTX, minTY, minX, minY, size),
            maxZ = zOrder(maxTX, maxTY, minX, minY, size);

        // first look for points inside the triangle in increasing z-order
        node = ear.nextZ;

        while (node && node.z <= maxZ) {
            i = node.i;
            node = node.nextZ;
            if (i === a || i === c) continue;

            px = data[i];
            py = data[i + 1];

            s = cay * px + acx * py - acd;
            if (s >= 0) {
                t = aby * px + bax * py + abd;
                if (t >= 0) {
                    k = A - s - t;
                    if ((k >= 0) && ((s && t) || (s && k) || (t && k))) return false;
                }
            }
        }

        // then look for points in decreasing z-order
        node = ear.prevZ;

        while (node && node.z >= minZ) {
            i = node.i;
            node = node.prevZ;
            if (i === a || i === c) continue;

            px = data[i];
            py = data[i + 1];

            s = cay * px + acx * py - acd;
            if (s >= 0) {
                t = aby * px + bax * py + abd;
                if (t >= 0) {
                    k = A - s - t;
                    if ((k >= 0) && ((s && t) || (s && k) || (t && k))) return false;
                }
            }
        }

    // if we don't use z-order curve hash, simply iterate through all other points
    } else {
        node = ear.next.next;

        while (node !== ear.prev) {
            i = node.i;
            node = node.next;

            px = data[i];
            py = data[i + 1];

            s = cay * px + acx * py - acd;
            if (s >= 0) {
                t = aby * px + bax * py + abd;
                if (t >= 0) {
                    k = A - s - t;
                    if ((k >= 0) && ((s && t) || (s && k) || (t && k))) return false;
                }
            }
        }
    }

    return true;
}

// go through all polygon nodes and cure small local self-intersections
function cureLocalIntersections(data, start, triangles, dim) {
    var node = start;
    do {
        var a = node.prev,
            b = node.next.next;

        // a self-intersection where edge (v[i-1],v[i]) intersects (v[i+1],v[i+2])
        if (a.i !== b.i && intersects(data, a.i, node.i, node.next.i, b.i) &&
                locallyInside(data, a, b) && locallyInside(data, b, a)) {

            triangles.push(a.i / dim);
            triangles.push(node.i / dim);
            triangles.push(b.i / dim);

            // remove two nodes involved
            a.next = b;
            b.prev = a;

            var az = node.prevZ,
                bz = node.nextZ && node.nextZ.nextZ;

            if (az) az.nextZ = bz;
            if (bz) bz.prevZ = az;

            node = start = b;
        }
        node = node.next;
    } while (node !== start);

    return node;
}

// try splitting polygon into two and triangulate them independently
function splitEarcut(data, start, triangles, dim, minX, minY, size) {
    // look for a valid diagonal that divides the polygon into two
    var a = start;
    do {
        var b = a.next.next;
        while (b !== a.prev) {
            if (a.i !== b.i && isValidDiagonal(data, a, b)) {
                // split the polygon in two by the diagonal
                var c = splitPolygon(a, b);

                // filter colinear points around the cuts
                a = filterPoints(data, a, a.next);
                c = filterPoints(data, c, c.next);

                // run earcut on each half
                earcutLinked(data, a, triangles, dim, minX, minY, size);
                earcutLinked(data, c, triangles, dim, minX, minY, size);
                return;
            }
            b = b.next;
        }
        a = a.next;
    } while (a !== start);
}

// link every hole into the outer loop, producing a single-ring polygon without holes
function eliminateHoles(data, holeIndices, outerNode, dim) {
    var queue = [],
        i, len, start, end, list;

    for (i = 0, len = holeIndices.length; i < len; i++) {
        start = holeIndices[i] * dim;
        end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;
        list = linkedList(data, start, end, dim, false);
        if (list === list.next) list.steiner = true;
        list = filterPoints(data, list);
        if (list) queue.push(getLeftmost(data, list));
    }

    queue.sort(function (a, b) {
        return data[a.i] - data[b.i];
    });

    // process holes from left to right
    for (i = 0; i < queue.length; i++) {
        eliminateHole(data, queue[i], outerNode);
        outerNode = filterPoints(data, outerNode, outerNode.next);
    }

    return outerNode;
}

// find a bridge between vertices that connects hole with an outer ring and and link it
function eliminateHole(data, holeNode, outerNode) {
    outerNode = findHoleBridge(data, holeNode, outerNode);
    if (outerNode) {
        var b = splitPolygon(outerNode, holeNode);
        filterPoints(data, b, b.next);
    }
}

// David Eberly's algorithm for finding a bridge between hole and outer polygon
function findHoleBridge(data, holeNode, outerNode) {
    var node = outerNode,
        i = holeNode.i,
        px = data[i],
        py = data[i + 1],
        qMax = -Infinity,
        mNode, a, b;

    // find a segment intersected by a ray from the hole's leftmost point to the left;
    // segment's endpoint with lesser x will be potential connection point
    do {
        a = node.i;
        b = node.next.i;

        if (py <= data[a + 1] && py >= data[b + 1]) {
            var qx = data[a] + (py - data[a + 1]) * (data[b] - data[a]) / (data[b + 1] - data[a + 1]);
            if (qx <= px && qx > qMax) {
                qMax = qx;
                mNode = data[a] < data[b] ? node : node.next;
            }
        }
        node = node.next;
    } while (node !== outerNode);

    if (!mNode) return null;

    // look for points strictly inside the triangle of hole point, segment intersection and endpoint;
    // if there are no points found, we have a valid connection;
    // otherwise choose the point of the minimum angle with the ray as connection point

    var bx = data[mNode.i],
        by = data[mNode.i + 1],
        pbd = px * by - py * bx,
        pcd = px * py - py * qMax,
        cpy = py - py,
        pcx = px - qMax,
        pby = py - by,
        bpx = bx - px,
        A = pbd - pcd - (qMax * by - py * bx),
        sign = A <= 0 ? -1 : 1,
        stop = mNode,
        tanMin = Infinity,
        mx, my, amx, s, t, tan;

    node = mNode.next;

    while (node !== stop) {

        mx = data[node.i];
        my = data[node.i + 1];
        amx = px - mx;

        if (amx >= 0 && mx >= bx) {
            s = (cpy * mx + pcx * my - pcd) * sign;
            if (s >= 0) {
                t = (pby * mx + bpx * my + pbd) * sign;

                if (t >= 0 && A * sign - s - t >= 0) {
                    tan = Math.abs(py - my) / amx; // tangential
                    if (tan < tanMin && locallyInside(data, node, holeNode)) {
                        mNode = node;
                        tanMin = tan;
                    }
                }
            }
        }

        node = node.next;
    }

    return mNode;
}

// interlink polygon nodes in z-order
function indexCurve(data, start, minX, minY, size) {
    var node = start;

    do {
        if (node.z === null) node.z = zOrder(data[node.i], data[node.i + 1], minX, minY, size);
        node.prevZ = node.prev;
        node.nextZ = node.next;
        node = node.next;
    } while (node !== start);

    node.prevZ.nextZ = null;
    node.prevZ = null;

    sortLinked(node);
}

// Simon Tatham's linked list merge sort algorithm
// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html
function sortLinked(list) {
    var i, p, q, e, tail, numMerges, pSize, qSize,
        inSize = 1;

    do {
        p = list;
        list = null;
        tail = null;
        numMerges = 0;

        while (p) {
            numMerges++;
            q = p;
            pSize = 0;
            for (i = 0; i < inSize; i++) {
                pSize++;
                q = q.nextZ;
                if (!q) break;
            }

            qSize = inSize;

            while (pSize > 0 || (qSize > 0 && q)) {

                if (pSize === 0) {
                    e = q;
                    q = q.nextZ;
                    qSize--;
                } else if (qSize === 0 || !q) {
                    e = p;
                    p = p.nextZ;
                    pSize--;
                } else if (p.z <= q.z) {
                    e = p;
                    p = p.nextZ;
                    pSize--;
                } else {
                    e = q;
                    q = q.nextZ;
                    qSize--;
                }

                if (tail) tail.nextZ = e;
                else list = e;

                e.prevZ = tail;
                tail = e;
            }

            p = q;
        }

        tail.nextZ = null;
        inSize *= 2;

    } while (numMerges > 1);

    return list;
}

// z-order of a point given coords and size of the data bounding box
function zOrder(x, y, minX, minY, size) {
    // coords are transformed into (0..1000) integer range
    x = 1000 * (x - minX) / size;
    x = (x | (x << 8)) & 0x00FF00FF;
    x = (x | (x << 4)) & 0x0F0F0F0F;
    x = (x | (x << 2)) & 0x33333333;
    x = (x | (x << 1)) & 0x55555555;

    y = 1000 * (y - minY) / size;
    y = (y | (y << 8)) & 0x00FF00FF;
    y = (y | (y << 4)) & 0x0F0F0F0F;
    y = (y | (y << 2)) & 0x33333333;
    y = (y | (y << 1)) & 0x55555555;

    return x | (y << 1);
}

// find the leftmost node of a polygon ring
function getLeftmost(data, start) {
    var node = start,
        leftmost = start;
    do {
        if (data[node.i] < data[leftmost.i]) leftmost = node;
        node = node.next;
    } while (node !== start);

    return leftmost;
}

// check if a diagonal between two polygon nodes is valid (lies in polygon interior)
function isValidDiagonal(data, a, b) {
    return a.next.i !== b.i && a.prev.i !== b.i &&
           !intersectsPolygon(data, a, a.i, b.i) &&
           locallyInside(data, a, b) && locallyInside(data, b, a) &&
           middleInside(data, a, a.i, b.i);
}

// winding order of triangle formed by 3 given points
function orient(data, p, q, r) {
    var o = (data[q + 1] - data[p + 1]) * (data[r] - data[q]) - (data[q] - data[p]) * (data[r + 1] - data[q + 1]);
    return o > 0 ? 1 :
           o < 0 ? -1 : 0;
}

// check if two points are equal
function equals(data, p1, p2) {
    return data[p1] === data[p2] && data[p1 + 1] === data[p2 + 1];
}

// check if two segments intersect
function intersects(data, p1, q1, p2, q2) {
    return orient(data, p1, q1, p2) !== orient(data, p1, q1, q2) &&
           orient(data, p2, q2, p1) !== orient(data, p2, q2, q1);
}

// check if a polygon diagonal intersects any polygon segments
function intersectsPolygon(data, start, a, b) {
    var node = start;
    do {
        var p1 = node.i,
            p2 = node.next.i;

        if (p1 !== a && p2 !== a && p1 !== b && p2 !== b && intersects(data, p1, p2, a, b)) return true;

        node = node.next;
    } while (node !== start);

    return false;
}

// check if a polygon diagonal is locally inside the polygon
function locallyInside(data, a, b) {
    return orient(data, a.prev.i, a.i, a.next.i) === -1 ?
        orient(data, a.i, b.i, a.next.i) !== -1 && orient(data, a.i, a.prev.i, b.i) !== -1 :
        orient(data, a.i, b.i, a.prev.i) === -1 || orient(data, a.i, a.next.i, b.i) === -1;
}

// check if the middle point of a polygon diagonal is inside the polygon
function middleInside(data, start, a, b) {
    var node = start,
        inside = false,
        px = (data[a] + data[b]) / 2,
        py = (data[a + 1] + data[b + 1]) / 2;
    do {
        var p1 = node.i,
            p2 = node.next.i;

        if (((data[p1 + 1] > py) !== (data[p2 + 1] > py)) &&
            (px < (data[p2] - data[p1]) * (py - data[p1 + 1]) / (data[p2 + 1] - data[p1 + 1]) + data[p1]))
                inside = !inside;

        node = node.next;
    } while (node !== start);

    return inside;
}

// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;
// if one belongs to the outer ring and another to a hole, it merges it into a single ring
function splitPolygon(a, b) {
    var a2 = new Node(a.i),
        b2 = new Node(b.i),
        an = a.next,
        bp = b.prev;

    a.next = b;
    b.prev = a;

    a2.next = an;
    an.prev = a2;

    b2.next = a2;
    a2.prev = b2;

    bp.next = b2;
    b2.prev = bp;

    return b2;
}

// create a node and optionally link it with previous one (in a circular doubly linked list)
function insertNode(i, last) {
    var node = new Node(i);

    if (!last) {
        node.prev = node;
        node.next = node;

    } else {
        node.next = last.next;
        node.prev = last;
        last.next.prev = node;
        last.next = node;
    }
    return node;
}

function Node(i) {
    // vertex coordinates
    this.i = i;

    // previous and next vertice nodes in a polygon ring
    this.prev = null;
    this.next = null;

    // z-order curve value
    this.z = null;

    // previous and next nodes in z-order
    this.prevZ = null;
    this.nextZ = null;

    // indicates whether this is a steiner point
    this.steiner = false;
}

   return earcut;
});
define('earcut', ['earcut/src/earcut'], function (main) { return main; });


define ('cobweb/Components/Text/FontStyle',[
	"jquery",
	"cobweb/Fields",
	"cobweb/Basic/X3DFieldDefinition",
	"cobweb/Basic/FieldDefinitionArray",
	"cobweb/Components/Text/X3DFontStyleNode",
	"cobweb/Bits/X3DConstants",
	"cobweb/Browser/Core/PrimitiveQuality",
	"standard/Math/Geometry/Box2",
	"standard/Math/Geometry/Box3",
	"standard/Math/Numbers/Vector2",
	"standard/Math/Numbers/Vector3",
	"standard/Math/Numbers/Vector3",
	"standard/Math/Geometry/Triangle2",
	"standard/Math/Algorithm",
	"bezier",
	"poly2tri",
	"earcut",
],
function ($,
          Fields,
          X3DFieldDefinition,
          FieldDefinitionArray,
          X3DFontStyleNode, 
          X3DConstants,
          PrimitiveQuality,
          Box2,
          Box3,
          Vector2,
          Vector3,
          Vector3,
          Triangle2,
          Algorithm,
          Bezier,
          poly2tri,
          earcut)
{
	with (Fields)
	{
		var
			min       = new Vector2 (0, 0),
			max       = new Vector2 (0, 0),
			min3      = new Vector3 (0, 0, 0),
			max3      = new Vector3 (0, 0, 0),
			size      = new Vector2 (0, 0),
			center    = new Vector2 (0, 0),
			lineBound = new Vector2 (0, 0),
			origin    = new Vector3 (0, 0, 0),
			box2      = new Box2 (),
			zero2     = new Vector2 (0, 0),
			zero3     = new Vector3 (0, 0, 0);

	   function X3DTextGeometry (text, fontStyle)
		{
			this .text           = text;
			this .fontStyle      = fontStyle;
			this .glyphs         = [ ];
			this .minorAlignment = new Vector2 (0, 0);
			this .translations   = [ ];
			this .charSpacings   = [ ];
			this .bearing        = new Vector2 (0, 0);
			this .bbox           = new Box3 ();

			this .update ();
		}

		X3DTextGeometry .prototype =
		{
			constructor: X3DTextGeometry,
			getBrowser: function ()
			{
			   return this .text .getBrowser ();
			},
			getText: function ()
			{
			   return this .text;
			},
			getFontStyle: function ()
			{
			   return this .fontStyle;
			},
			getGlyphs: function ()
			{
			   return this .glyphs;
			},
			getMinorAlignment: function ()
			{
			   return this .minorAlignment;
			},
			getTranslations: function ()
			{
			   return this .translations;
			},
			getCharSpacings: function ()
			{
			   return this .charSpacings;
			},
			getBearing: function ()
			{
			   return this .bearing;
			},
			update: function ()
			{
				var
					text      = this .text,
					fontStyle = this .fontStyle,
					numLines  = text .string_ .length;
				
				text .lineBounds_ .length = numLines;
				this .glyphs .length      = 0;

				this .resizeArray (this .translations, Vector2, numLines, 0, 0);
				this .resizeArray (this .charSpacings, Vector2, numLines, 0, 0);

				if (numLines === 0 || ! fontStyle .getFont ())
				{
					text .origin_ .setValue (zero3);
					text .textBounds_ .setValue (zero2);

					this .bbox .set ();
					return;
				}

				if (fontStyle .horizontal_ .getValue ())
					this .horizontal (text, fontStyle);
				else
					this .horizontal (text, fontStyle);
			},
			resizeArray: function (array, constructor, size)
			{
			   // Resize array in grow only fashion.

			   var args = Array .prototype .slice .call (arguments, 3);

			   for (var i = array .length; i < size; ++ i)
			   {
			      var value = Object .create (constructor .prototype);

					constructor .apply (value, args);

			      array .push (value);
			   }
			},
			horizontal: function (text, fontStyle)
			{
			   var
			      bbox        = new Box2 (),
			      numLines    = text .string_ .length,
					topToBottom = fontStyle .topToBottom_ .getValue (),
					lineHeight  = fontStyle .spacing_ .getValue (),
					scale       = fontStyle .getScale ();
				
				// Calculate bboxes.

				var
					first = topToBottom ? 0 : numLines - 1,
					last  = topToBottom ? numLines : -1,
					step  = topToBottom ? 1 : -1;

				for (var l = first; l !== last; l += step)
				{
					var line = text .string_ [l];

					// Get line extents.

					var glyphs = this .getLineExtents (fontStyle, line, min, max);

					this .glyphs .push (glyphs);

					size .assign (max) .subtract (min);

					// Calculate charSpacing and lineBounds.

					var lineNumber = topToBottom ? l : numLines - l - 1;

					var
						charSpacing = 0,
						length      = text .getLength (l);
	
					lineBound .set (size .x, lineNumber == 0 ? size .y : lineHeight) .multiply (scale);

					if (text .maxExtent_ .getValue ())
					{
						if (length)
							length = Math .min (text .maxExtent_ .getValue (), length);

						else
							length = Math .min (text .maxExtent_ .getValue (), size .x * scale);
					}

					if (length)
					{
						charSpacing  = (length - lineBound .x) / (glyphs .length - 1);
						lineBound .x = length;
						size .x      = length / scale;
					}

					this .charSpacings [l] = charSpacing;
					text .lineBounds_ [l]  = lineBound;

					// Calculate line translation.

					switch (fontStyle .getMajorAlignment ())
					{
						case X3DFontStyleNode .Alignment .BEGIN:
						case X3DFontStyleNode .Alignment .FIRST:
							this .translations [l] .set (0, -(l * lineHeight));
							break;
						case X3DFontStyleNode .Alignment .MIDDLE:
							this .translations [l] .set (-min .x - size .x / 2, -(l * lineHeight));
							break;
						case X3DFontStyleNode .Alignment .END:
							this .translations [l] .set (-min .x - size .x, -(l * lineHeight));
							break;
					}

					// Calculate center.

					center .assign (min) .add (size) .divide (2);

					// Add bbox.

					bbox .add (box2 .set (size .multiply (scale), center .add (this .translations [l]) .multiply (scale)));

					this .translations [l] .multiply (scale);
				}

				//console .log ("size", bbox .size, "center", bbox .center);

				// Get text extents.

				bbox .getExtents (min, max);

				size .assign (max) .subtract (min);

				// Calculate text position

				text .textBounds_ = size;
				this .bearing .set (0, -max .y);

				switch (fontStyle .getMinorAlignment ())
				{
					case X3DFontStyleNode .Alignment .BEGIN:
						this .minorAlignment .assign (this .bearing);
						break;
					case X3DFontStyleNode .Alignment .FIRST:
						this .minorAlignment .set (0, 0);
						break;
					case X3DFontStyleNode .Alignment .MIDDLE:
						this .minorAlignment .set (0, size .y / 2 - max .y);
						break;
					case X3DFontStyleNode .Alignment .END:
						this .minorAlignment .set (0, (numLines - 1) * lineHeight * scale);
						break;
				}

				// Translate bbox by minorAlignment.

				min .add (this .minorAlignment);
				max .add (this .minorAlignment);

				// The value of the origin field represents the upper left corner of the textBounds.

				text .origin_ .setValue (origin .set (min .x, max .y, 0));

				this .bbox .set (min3 .set (min .x, min .y, 0),
				                 max3 .set (max .x, max .y, 0),
				                 true);
			},
			vertical: function (text, fontStyle)
			{

			},
			getLineExtents: function (fontStyle, line, min, max)
			{
				var
				   font   = fontStyle .getFont (),
					normal = fontStyle .horizontal_ .getValue () ? fontStyle .leftToRight_ .getValue () : fontStyle .topToBottom_ .getValue (),
					glyphs = font .stringToGlyphs (normal ? line : line .split ("") .reverse () .join ("")),
					xMin   = 0,
					xMax   = 0,
					yMin   = Number .POSITIVE_INFINITY,
					yMax   = Number .NEGATIVE_INFINITY;
			
				for (var g = 0, length = glyphs .length; g < length; ++ g)
				{
					var
						glyph   = glyphs [g],
						kerning = g + 1 < length ? font .getKerningValue (glyph, glyphs [g + 1]) : 0;

					xMax += (glyph .advanceWidth + kerning);
					yMin  = Math .min (yMin, glyph .yMin || 0);
					yMax  = Math .max (yMax, glyph .yMax || 0);
				}

				if (glyphs .length)
				{
					xMin  = glyphs [0] .xMin || 0;
				}
				else
				{
					yMin = 0;
					yMax = 0;			   
				}

				min .set (xMin, yMin) .divide (font .unitsPerEm);
				max .set (xMax, yMax) .divide (font .unitsPerEm);

				switch (fontStyle .getMajorAlignment ())
				{
					case X3DFontStyleNode .Alignment .BEGIN:
					case X3DFontStyleNode .Alignment .FIRST:
						min .x = 0;
						break;
					case X3DFontStyleNode .Alignment .MIDDLE:
					case X3DFontStyleNode .Alignment .END:
						break;
				}

				return glyphs;
			},
		};

		/*
		 * PolygonText
		 */
		
		var
			normal = new Vector3 (0, 0, 1),
			vertex = new Vector3 (0, 0, 0);

	   function PolygonText (text, fontStyle)
		{
			X3DTextGeometry .call (this, text, fontStyle);
		}

		PolygonText .prototype = $.extend (Object .create (X3DTextGeometry .prototype),
		{
			constructor: PolygonText,
			build: function ()
			{
			   var fontStyle = this .getFontStyle ();
	
				if (! fontStyle .getFont ())
					return;
				
				if (fontStyle .horizontal_ .getValue ())
				{
					var size  = fontStyle .getScale ();

					for (var i = 0; i < this .getGlyphs () .length; ++ i)
						this .render (this .getGlyphs () [i], this .getMinorAlignment (), size, this .getTranslations () [i], this .getCharSpacings () [i]);
				}
				else
				{
				   /*
					glTranslatef (getMinorAlignment () .x (), getMinorAlignment () .y (), 0);

					const double size = fontStyle -> getScale ();

					glScalef (size, size, size);

					// Render lines.

					const bool leftToRight = fontStyle -> leftToRight ();
					const bool topToBottom = fontStyle -> topToBottom ();
					const int  first       = leftToRight ? 0 : text -> string () .size () - 1;
					const int  last        = leftToRight ? text -> string () .size () : -1;
					const int  step        = leftToRight ? 1 : -1;

					for (int i = first, g = 0; i not_eq last; i += step)
					{
						const auto & line = text -> string () [i] .getValue ();

						for (const auto & glyph : topToBottom ? line : String (line .rbegin (), line .rend ()))
						{
							fontStyle -> getPolygonFont () -> Render (String (1, glyph) .c_str (),
							                                          -1,
							                                          FTPoint (getTranslations () [g] .x (), getTranslations () [g] .y (), 0),
							                                          FTPoint (),
							                                          FTGL::RENDER_ALL);
							++ g;
						}
					}
					*/
				}
			},
			render: function (glyphs, minorAlignment, size, translation, charSpacing)
			{
				var
				   text             = this .getText (),
				   fontStyle        = this .getFontStyle (),
				   font             = fontStyle .getFont (),
					offset           = 0,
				   primitiveQuality = this .getBrowser () .getBrowserOptions () .getPrimitiveQuality ();

				for (var g = 0; g < glyphs .length; ++ g)
				{
					var
					   glyph    = glyphs [g],
					   vertices = this .getGlyphGeometry (glyph, primitiveQuality);
					
					for (var v = 0; v < vertices .length; ++ v)
					{
					   text .addNormal (normal);
					   text .addVertex (vertex .set (vertices [v] .x * size + minorAlignment .x + g * charSpacing + translation .x + offset,
					                                 vertices [v] .y * size + minorAlignment .y + translation .y,
					                                 0));
					}

					// Calculate offset.

					var kerning = 0;

					if (g + 1 < glyphs .length)
						kerning = font .getKerningValue (glyph, glyphs [g + 1]);

					offset += (glyph .advanceWidth + kerning) / font .unitsPerEm * size;
				}
			},
			getGlyphGeometry: function (glyph, primitiveQuality)
			{
				var
				   fontStyle  = this .getFontStyle (),
				   font       = fontStyle .getFont (),
				   glyphCache = this .getBrowser () .getGlyphCache ();
			   
			   var cachedFont = glyphCache [font .fontName];

			   if (! cachedFont)
			      glyphCache [font .fontName] = cachedFont = [[], [], []];
			   
			   var cachedGeometry = cachedFont [primitiveQuality] [glyph .index];

			   if (cachedGeometry)
			      return cachedGeometry;

			   cachedGeometry = cachedFont [primitiveQuality] [glyph .index] = [ ];

			   this .createGlyphGeometry (glyph, cachedGeometry, primitiveQuality);

			   return cachedGeometry;
			},
			createGlyphGeometry: function (glyph, vertices, primitiveQuality)
			{
				var
				   fontStyle = this .getFontStyle (),
				   font      = fontStyle .getFont (),
					paths     = [ ],
					points    = [ ],
					curves    = [ ],
					dimension = this .getBezierDimension (primitiveQuality),
					reverse   = font .outlinesFormat === "cff";

				paths  .length = 0;
				points .length = 0;
				curves .length = 0;
			
				if (glyph .isComposite)
				{
				   for (var c = 0; c < glyph .components .length; ++ c)
				   {
				      var component = glyph .components [c];

				      paths .push (font .glyphs .get (component .glyphIndex) .getPath (component .dx / font .unitsPerEm, component .dy / -font .unitsPerEm, 1));
				   }
				}
				else
				   paths .push (glyph .getPath (0, 0, 1));

				// Get curves for the current glyph.

				var
					x = 0,
					y = 0;

				for (var p = 0; p < paths .length; ++ p)
				{
				   var path = paths [p];
					   
					for (var i = 0; i < path .commands .length; ++ i)
					{
						var command = path .commands [i];
											      
						switch (command .type)
						{
						   case "M":
							case "Z":
						   {
								if (points .length > 2)
								{
									if (points [0] .x === points [points .length - 1] .x && points [0] .y === points [points .length - 1] .y)
										points .pop ();

									curves .push (reverse ? points .reverse () .slice () : points .slice ());
								}
									
						      points .length = 0;
						     
						      if (command .type === "M")
						          points .push ({ x: command .x, y: -command .y });
								
								break;
							}
							case "L":
							{
								points .push ({ x: command .x, y: -command .y });
								break;
							}
							case "C":
							{
								var
									curve = new Bezier (x, -y, command .x1, -command .y1, command .x2, -command .y2, command .x, -command .y),
									lut   = curve .getLUT (dimension);

								lut .shift ();
			
								Array .prototype .push .apply (points, lut);
								break;
							}
							case "Q":
							{
								var
									curve = new Bezier (x, -y, command .x1, -command .y1, command .x, -command .y),
									lut   = curve .getLUT (dimension);

								lut .shift ();
			
								Array .prototype .push .apply (points, lut);
								break;
							}
							default:
							   continue;
						}

						x = command .x;
						y = command .y;
					}
				}

				// Determine contours and holes.

				var
				   contours = [ ],
				   holes    = [ ];

				switch (curves .length)
				{
				   case 0:
				      break;
				   case 1:
						contours = curves;
						break;
					default:
					{
						for (var i = 0; i < curves .length; ++ i)
						{
						   var
						      curve       = curves [i],
						      orientation = this .getCurveOrientation (curve);

						   if (orientation < 0)
						      contours .push (curve);
						   else
								holes .push (curve);
						}

						break;
					}
				}

				/*
				if (glyph .name [0] == "O")
					console .log (glyph .name, "\n",
					              "font: ", font, "\n",
					              "glyph: ", glyph, "\n",
					              "paths: ", paths, "\n",
					              "contours: ", contours, "\n",
					              "holes: ", holes);
				*/
				   
				// Determine the holes for every contour.

				contours .map (this .removeCollinearPoints);
				holes .map (this .removeCollinearPoints);

				switch (contours .length)
				{
				   case 0:
				      break;
				   case 1:
						contours [0] .holes = holes;
						break;
					default:
					{
				      for (var c = 0; c < contours .length; ++ c)
					      contours [c] .holes = [ ];

					   for (var h = 0; h < holes .length; ++ h)
					   {
					      var hole = holes [h];

					      for (var c = 0; c < contours .length; ++ c)
					      {
					         var contour = contours [c];

					         // Copy contour, as isPointInPolygon will shuffle the points.
					         if (this .isPointInPolygon (contour .slice (), hole [0]))
					         {
					            contour .holes .push (hole);
					            break;
					         }
					      }
					   }

					   break;
					}
				}

				// Triangulate contours.

				for (var i = 0; i < contours .length; ++ i)
				   this .triangulate (contours [i], contours [i] .holes, vertices);
			},
			getBezierDimension: function (primitiveQuality)
			{
				switch (primitiveQuality)
				{
				   case PrimitiveQuality .LOW:
				      return 2;
				   case PrimitiveQuality .HIGH:
				      return 5;
				   default:
						return 3;
				}
			},
			getCurveOrientation: function (curve)
			{
			   // From Wikipedia:

			   var
			      minX        = Number .POSITIVE_INFINITY,
					minIndex    = 0,
			      orientation = 0;

			   for (var i = 0; i < curve .length; ++ i)
			   {
			      if (curve [i] .x < minX)
			      {
			         minX     = curve [i] .x;
			         minIndex = i;
			      }
			   }

				var
					a = curve [(minIndex + curve .length - 1) % curve .length],
					b = curve [minIndex],
					c = curve [(minIndex + 2) % curve .length];

			   return (b.x - a.x) * (c.y - a.y) - (c.x - a.x) * (b.y - a.y);
			},
			/*isPointInPolygon: function (polygon, point)
			{
			   // earcut version
			   // not always working!!!

			   try
			   {
					// Triangulate polygon.

					var coords = [ ];

					for (var p = 0; p < contour .length; ++ p)
					   coords .push (contour [p] .x, contour [p] .y);

					var t = earcut (coords, holesIndices);

					for (var i = 0; i < t .length; i += 3)
					{
					   var  
							a = polygon [t [i]],
							b = polygon [t [i + 1]],
							c = polygon [t [i + 2]];
						
						if (Triangle2 .isPointInTriangle (a, b, c, point))
						   return true;
					}

					return false;
				}
				catch (error)
				{
					//console .warn (error);
				}
			},*/
			isPointInPolygon: function (polygon, point)
			{
			   // poly2tri version

			   try
			   {
					// Triangulate polygon.

					var
						context = new poly2tri .SweepContext (polygon),
						ts      = context .triangulate () .getTriangles ();

					for (var i = 0; i < ts .length; ++ i)
					{
					   var  
							a = ts [i] .getPoint (0),
							b = ts [i] .getPoint (1),
							c = ts [i] .getPoint (2);
						
						if (Triangle2 .isPointInTriangle (a, b, c, point))
						   return true;
					}

					return false;
				}
				catch (error)
				{
					//console .warn (error);
				}
			},
			removeCollinearPoints: function (contour)
			{
				function isCollinear (a, b, c)
				{
					return Math .abs ((a.y - b.y) * (a.x - c.x) - (a.y - c.y) * (a.x - b.x)) < 1e-8;
				}

			   var k = 0;

			   for (var i = 0; i < contour .length; ++ i)
			   {
			      var
			         i0 = (i - 1 + contour .length) % contour .length,
			         i1 = (i + 1) % contour .length;

			      if (isCollinear (contour [i0], contour [i], contour [i1]))
						continue;

					contour [k ++] = contour [i];
			   }

			   contour .length = k;
			},
			triangulate: function (contour, holes, vertices)
			{
			   try
			   {
					// Triangulate polygon.


					var
						context = new poly2tri .SweepContext (contour) .addHoles (holes),
						ts      = context .triangulate () .getTriangles ();

					for (var i = 0; i < ts .length; ++ i)
					{
						vertices .push (ts [i] .getPoint (0));
						vertices .push (ts [i] .getPoint (1));
						vertices .push (ts [i] .getPoint (2));
					}
				}
				catch (error)
				{
					//console .warn (error);
					this .earcutTriangulate (contour, holes, vertices);
				}
			},
			earcutTriangulate: function (contour, holes, vertices)
			{
			   try
			   {
					// Triangulate polygon.

					var
						coords       = [ ],
						holesIndices = [ ];

					for (var p = 0; p < contour .length; ++ p)
					   coords .push (contour [p] .x, contour [p] .y);

					for (var h = 0; h < holes .length; ++ h)
					{
					   var hole = holes [h];

						for (var p = 0; p < hole .length; ++ p)
						{
						   holesIndices .push (coords .length / 2);
					      coords .push (hole [p] .x, hole [p] .y);
					      contour .push (hole);
					   }
					}

					var t = earcut (coords, holesIndices);

					for (var i = 0; i < t .length; ++ i)
						vertices .push (contour [t [i]]);
				}
				catch (error)
				{
					//console .warn (error);
				}
			},
			draw: function ()
			{

			},
		});

		function FontStyle (executionContext)
		{
			X3DFontStyleNode .call (this, executionContext .getBrowser (), executionContext);

			this .addType (X3DConstants .FontStyle);
		}

		FontStyle .prototype = $.extend (Object .create (X3DFontStyleNode .prototype),
		{
			constructor: FontStyle,
			fieldDefinitions: new FieldDefinitionArray ([
				new X3DFieldDefinition (X3DConstants .inputOutput,    "metadata",    new SFNode ()),
				new X3DFieldDefinition (X3DConstants .initializeOnly, "language",    new SFString ("")),
				new X3DFieldDefinition (X3DConstants .initializeOnly, "family",      new MFString ("SERIF")),
				new X3DFieldDefinition (X3DConstants .initializeOnly, "style",       new SFString ("PLAIN")),
				new X3DFieldDefinition (X3DConstants .initializeOnly, "size",        new SFFloat (1)),
				new X3DFieldDefinition (X3DConstants .initializeOnly, "spacing",     new SFFloat (1)),
				new X3DFieldDefinition (X3DConstants .initializeOnly, "horizontal",  new SFBool (true)),
				new X3DFieldDefinition (X3DConstants .initializeOnly, "leftToRight", new SFBool (true)),
				new X3DFieldDefinition (X3DConstants .initializeOnly, "topToBottom", new SFBool (true)),
				new X3DFieldDefinition (X3DConstants .initializeOnly, "justify",     new MFString ("BEGIN")),
			]),
			getTypeName: function ()
			{
				return "FontStyle";
			},
			getComponentName: function ()
			{
				return "Text";
			},
			getContainerField: function ()
			{
				return "fontStyle";
			},
			initialize: function ()
			{
			   X3DFontStyleNode .prototype .initialize .call (this);
				
				this .getExecutionContext () .isLive () .addInterest (this, "set_live__");
				this .isLive ()                         .addInterest (this, "set_live__");

				this .set_live__ ();
			},
			getTextGeometry: function (text)
			{
			   return new PolygonText (text, this);
			},
			getScale: function ()
			{
			   return this .size_ .getValue ();
			},
			set_live__: function ()
			{
			   if (this .getExecutionContext () .isLive () .getValue () && this .isLive () .getValue ())
			   {
			      this .getBrowser () .getBrowserOptions () .PrimitiveQuality_ .addInterest (this, "addNodeEvent");

			      var primitiveQuality = this .getBrowser () .getBrowserOptions () .getPrimitiveQuality ();

			      if (this .primitiveQuality !== undefined && primitiveQuality !== this .primitiveQuality)
			         this .addNodeEvent ();
			      
					this .primitiveQuality = primitiveQuality;
			   }
			   else
			      this .getBrowser () .getBrowserOptions () .PrimitiveQuality_ .removeInterest (this, "addNodeEvent");
			},
		});

		return FontStyle;
	}
});



define ('cobweb/Browser/Text/X3DTextContext',[
	"cobweb/Components/Text/FontStyle",
],
function (FontStyle)
{
	function X3DTextContext ()
	{
		this .glyphCache = { }; // [fontName] [primitveQuality] [glyphIndex]
	}

	X3DTextContext .prototype =
	{
		initialize: function ()
		{
		   this .getBrowser () .shutdown () .addInterest (this, "set_shutdown_TextContext");
		},
		getDefaultFontStyle: function ()
		{
			if (! this .defaultFontStyle)
			{
				this .defaultFontStyle = new FontStyle (this);
				this .defaultFontStyle .setup ();
			}

			return this .defaultFontStyle;
		},
		getGlyphCache: function ()
		{
		   return this .glyphCache;
		},
		set_shutdown_TextContext: function ()
		{
		   this .glyphCache = { };
		},
	};

	return X3DTextContext;
});


define ('cobweb/Components/Texturing/X3DTextureTransformNode',[
	"jquery",
	"cobweb/Components/Shape/X3DAppearanceChildNode",
	"cobweb/Bits/X3DConstants",
	"standard/Math/Numbers/Matrix4",
],
function ($,
          X3DAppearanceChildNode, 
          X3DConstants,
          Matrix4)
{
	function X3DTextureTransformNode (browser, executionContext)
	{
		X3DAppearanceChildNode .call (this, browser, executionContext);

		this .addType (X3DConstants .X3DTextureTransformNode);

		this .matrix      = new Matrix4 ();
		this .matrixArray = new Float32Array (this .matrix);
	}

	X3DTextureTransformNode .prototype = $.extend (Object .create (X3DAppearanceChildNode .prototype),
	{
		constructor: X3DTextureTransformNode,
		setMatrix: function (value)
		{
			this .matrixArray .set (value);
		},
		getMatrix: function ()
		{
			return this .matrix;
		},
		getMatrixArray: function ()
		{
			return this .matrixArray;
		},
		traverse: function ()
		{
			this .getBrowser () .getTextureTransform () [0] = this;
		},
	});

	return X3DTextureTransformNode;
});



define ('cobweb/Components/Texturing/TextureTransform',[
	"jquery",
	"cobweb/Fields",
	"cobweb/Basic/X3DFieldDefinition",
	"cobweb/Basic/FieldDefinitionArray",
	"cobweb/Components/Texturing/X3DTextureTransformNode",
	"cobweb/Bits/X3DConstants",
	"standard/Math/Numbers/Vector2",
	"standard/Math/Numbers/Matrix3",
	"standard/Math/Numbers/Matrix4",
],
function ($,
          Fields,
          X3DFieldDefinition,
          FieldDefinitionArray,
          X3DTextureTransformNode, 
          X3DConstants,
          Vector2,
          Matrix3,
          Matrix4)
{
	with (Fields)
	{
		function TextureTransform (executionContext)
		{
			X3DTextureTransformNode .call (this, executionContext .getBrowser (), executionContext);

			this .addType (X3DConstants .TextureTransform);

			this .matrix3 = new Matrix3 ();
		}

		TextureTransform .prototype = $.extend (Object .create (X3DTextureTransformNode .prototype),
		{
			constructor: TextureTransform,
			fieldDefinitions: new FieldDefinitionArray ([
				new X3DFieldDefinition (X3DConstants .inputOutput, "metadata",    new SFNode ()),
				new X3DFieldDefinition (X3DConstants .inputOutput, "translation", new SFVec2f (0, 0)),
				new X3DFieldDefinition (X3DConstants .inputOutput, "rotation",    new SFFloat ()),
				new X3DFieldDefinition (X3DConstants .inputOutput, "scale",       new SFVec2f (1, 1)),
				new X3DFieldDefinition (X3DConstants .inputOutput, "center",      new SFVec2f (0, 0)),
			]),
			getTypeName: function ()
			{
				return "TextureTransform";
			},
			getComponentName: function ()
			{
				return "Texturing";
			},
			getContainerField: function ()
			{
				return "textureTransform";
			},
			initialize: function ()
			{
				X3DTextureTransformNode .prototype .initialize .call (this);
				
				this .addInterest (this, "update");

				this .update ();
			},
			update: function ()
			{
				var matrix3 = this .matrix3;

				matrix3 .identity ();

				if (! this .center_ .getValue () .equals (Vector2 .Zero))
					matrix3 .translate (Vector2 .negate (this .center_ .getValue ()));

				if (! this .scale_ .getValue () .equals (Vector2 .One))
					matrix3 .scale (this .scale_ .getValue ());

				if (this .rotation_ .getValue () !== 0)
					matrix3 .rotate (this .rotation_ .getValue ());

				if (! this .center_ .getValue () .equals (Vector2 .Zero))
					matrix3 .translate (this .center_ .getValue ());

				if (! this .translation_ .getValue () .equals (Vector2 .Zero))
					matrix3 .translate (this .translation_ .getValue ());

				var matrix4 = this .getMatrix ();
				
				matrix4 [ 0] = matrix3 [0];
				matrix4 [ 1] = matrix3 [1];
				matrix4 [ 4] = matrix3 [3];
				matrix4 [ 5] = matrix3 [4];
				matrix4 [12] = matrix3 [6]; 
				matrix4 [13] = matrix3 [7];

				this .setMatrix (matrix4);
			},
		});

		return TextureTransform;
	}
});



define ('cobweb/Browser/Texturing/X3DTexturingContext',[
	"cobweb/Components/Texturing/TextureProperties",
	"cobweb/Components/Texturing/TextureTransform",
	"cobweb/Components/Texturing/TextureCoordinate",
	"standard/Math/Numbers/Matrix4",
	"standard/Math/Utility/MatrixStack",
],
function (TextureProperties,
          TextureTransform,
          TextureCoordinate,
          Matrix4,
          MatrixStack)
{
	function X3DTexturingContext ()
	{
		this .textureStages            = 1;
		this .texture                  = null;
		this .textureTransform         = [ ];
		this .defaultTextureProperties = new TextureProperties (this);
		this .defaultTextureTransform  = new TextureTransform (this);
		this .defaultTextureCoordinate = new TextureCoordinate (this);
	}

	X3DTexturingContext .prototype =
	{
		initialize: function ()
		{
			var gl = this .getBrowser () .getContext ();
			
			// BrowserOptions
			{
				this .defaultTextureProperties .magnificationFilter_ .setValue ("NICEST");
				this .defaultTextureProperties .minificationFilter_  .setValue ("AVG_PIXEL_AVG_MIPMAP");
				this .defaultTextureProperties .textureCompression_  .setValue ("NICEST");
				this .defaultTextureProperties .generateMipMaps_     .setValue (true);
			}

			this .maxTextureSize          = gl .getParameter (gl .MAX_TEXTURE_SIZE);
			this .maxTextureUnits         = gl .getParameter (gl .MAX_TEXTURE_IMAGE_UNITS);
			this .maxCombinedTextureUnits = gl .getParameter (gl .MAX_COMBINED_TEXTURE_IMAGE_UNITS);

			this .defaultTextureProperties .setup ();
			this .defaultTextureTransform  .setup ();
			this .defaultTextureCoordinate .setup ();
		},
		getMinTextureSize: function ()
		{
			return 16;
		},
		getMaxTextureSize: function ()
		{
			return this .maxTextureSize;
		},
		getMaxTextureUnits: function ()
		{
			return this .maxTextureUnits;
		},
		getMaxCombinedTextureUnits: function ()
		{
			return this .maxCombinedTextureUnits;
		},
		setTexture: function (value)
		{
			this .texture = value;
		},
		getTexture: function ()
		{
			return this .texture;
		},
		getTextureTransform: function ()
		{
			return this .textureTransform;
		},
		getDefaultTextureProperties: function ()
		{
			return this .defaultTextureProperties;
		},
		getDefaultTextureTransform: function ()
		{
			return this .defaultTextureTransform;
		},
		getDefaultTextureCoordinate: function ()
		{
			return this .defaultTextureCoordinate;
		},
	};

	return X3DTexturingContext;
});


define ('cobweb/Browser/Time/X3DTimeContext',[
	"standard/Math/Numbers/Vector3",
],
function (Vector3)
{
	function X3DTimeContext ()
	{
		this .currentPosition = new Vector3 (0, 0, 0);
	}

	X3DTimeContext .prototype =
	{
		initialize: function ()
		{
			this .advanceTime (performance .now ());
		},
		getCurrentTime: function ()
		{
			return this .currentTime;
		},
		advanceTime: function (time)
		{
			time += performance .timing .navigationStart;

			var lastTime = this .currentTime;

			this .currentTime      = time / 1000;
			this .currentFrameRate = 1 / (this .currentTime - lastTime);

			if (this .getWorld () && this .getActiveLayer ())
			{
				var
					lastPosition      = this .currentPosition,
					cameraSpaceMatrix = this .getActiveLayer () .getViewpoint () .getCameraSpaceMatrix ();

				this .currentPosition .set (cameraSpaceMatrix [12], cameraSpaceMatrix [13], cameraSpaceMatrix [14]);
				this .currentSpeed = Vector3 .subtract (this .currentPosition, lastPosition) .abs () * this .currentFrameRate;
			}
			else
				this .currentSpeed = 0;
		},
	};

	return X3DTimeContext;
});


define ('cobweb/Routing/X3DRoutingContext',[
],
function ()
{
	function X3DRoutingContext ()
	{
		this .taintedFields = [ ];
		this .taintedNodes  = [ ];
	}

	X3DRoutingContext .prototype =
	{
		constructor: X3DRoutingContext,
		initialize: function () { },
		addTaintedField: function (field, event)
		{
			this .taintedFields .push (field, event);
		},
		addTaintedNode: function (node)
		{
			this .taintedNodes .push (node);
		},
		processEvents: function ()
		{
			do
			{
				do
				{
					var taintedFields = this .taintedFields;
					this .taintedFields = [ ];

					for (var i = 0; i < taintedFields .length; i += 2)
					{
						taintedFields [i] .processEvent (taintedFields [i + 1]);
					}
				}
				while (this .taintedFields .length);

				this .eventsProcessed ();
			}
			while (this .taintedFields .length);
		},
		eventsProcessed: function ()
		{
			do
			{
				var taintedNodes = this .taintedNodes;
				this .taintedNodes = [ ];

				for (var i = 0; i < taintedNodes .length; ++ i)
					taintedNodes [i] .eventsProcessed ();
			}
			while (this .taintedNodes .length && ! this .taintedFields .length);
		},
	};

	return X3DRoutingContext;
});


define ('standard/Math/Algorithms/QuickSort',[],function ()
{
	function QuickSort (array, compare)
	{
		this .array = array;
		
		if (compare)
			this .compare = compare;
	}

	QuickSort .prototype =
	{
		compare: function (lhs, rhs)
		{
			return lhs < rhs;
		},
		sort: function (first, last)
		{
			if (last - first > 1)
				this .quicksort (first, last - 1);
		},
		quicksort: function (lo, hi)
		{
			var
				i = lo,
				j = hi,
				array   = this .array,
				compare = this .compare;

			// Vergleichs¬≠element x
			var x = array [(lo + hi) >>> 1];

			for (;;)
			{
				while (compare (array [i], x)) ++ i;
				while (compare (x, array [j])) -- j;

				if (i < j)
				{
					// Exchange
					
					var t = array [i];
					array [i] = array [j];
					array [j] = t;

					i ++; j --;
				}
				else
				{
					if (i === j) ++ i, -- j;
					break;
				}
			}

			// Rekursion
			if (lo < j) this .quicksort (lo, j);
			if (i < hi) this .quicksort (i, hi);
		},
	};

	return QuickSort;
});


define ('cobweb/Rendering/X3DRenderer',[
	"cobweb/Bits/TraverseType",
	"standard/Math/Algorithms/QuickSort",
	"standard/Math/Numbers/Vector3",
	"standard/Math/Numbers/Matrix4",
],
function (TraverseType,
          QuickSort,
          Vector3,
          Matrix4)
{
	function X3DRenderer (browser, executionContext)
	{
		this .viewVolumes          = [ ];
		this .localObjects         = [ ];
		this .numOpaqueShapes      = 0;
		this .numTransparentShapes = 0;
		this .numCollisionShapes   = 0;
		this .opaqueShapes         = [ ];
		this .transparentShapes    = [ ];
		this .transparencySorter   = new QuickSort (this .transparentShapes, function (lhs, rhs) { return lhs .distance < rhs .distance; });
		this .traverseTime         = 0;
		this .displayTime          = 0;
	}

	X3DRenderer .prototype =
	{
		constructor: X3DRenderer,
		bboxSize: new Vector3 (0, 0, 0),
		bboxCenter: new Vector3 (0, 0, 0),
		initialize: function ()
		{
		},
		getViewVolumeStack: function ()
		{
			return this .viewVolumes;
		},
		addShape: function (shape)
		{
			var
				modelViewMatrix = this .getBrowser () .getModelViewMatrix () .get (),
				bboxSize        = modelViewMatrix .multDirMatrix (this .bboxSize .assign (shape .getBBoxSize ())),
				bboxCenter      = modelViewMatrix .multVecMatrix (this .bboxCenter .assign (shape .getBBoxCenter ())),
				radius          = bboxSize .abs () / 2,
				distance        = bboxCenter .z,
				viewVolume      = this .viewVolumes [this .viewVolumes .length - 1];

			if (viewVolume .intersectsSphere (radius, bboxCenter))
			{
				if (shape .isTransparent ())
				{
					if (this .numTransparentShapes === this .transparentShapes .length)
						this .transparentShapes .push ({ modelViewMatrix: new Float32Array (16), transparent: true, localLights: [ ] });

					var context = this .transparentShapes [this .numTransparentShapes];

					++ this .numTransparentShapes;
				}
				else
				{
					if (this .numOpaqueShapes === this .opaqueShapes .length)
						this .opaqueShapes .push ({ modelViewMatrix: new Float32Array (16), transparent: false, localLights: [ ] });

					var context = this .opaqueShapes [this .numOpaqueShapes];

					++ this .numOpaqueShapes;
				}

				context .modelViewMatrix .set (modelViewMatrix);
				context .shape    = shape;
				context .scissor  = viewVolume .getScissor ();
				context .distance = distance;
				context .fog      = this .getFog ();
			}
		},
		render: function (type)
		{
			this .numOpaqueShapes      = 0;
			this .numTransparentShapes = 0;
			this .numCollisionShapes   = 0;

			switch (type)
			{
				case TraverseType .NAVIGATION:
				{
					this .collect (type);
					this .navigate ();
					break;
				}
				case TraverseType .COLLISION:
				{
					// Collect for collide and gravite
					this .collect (type);
					this .collide ();
					break;
				}
				case TraverseType .DISPLAY:
				{
					var t0 = performance .now ();
					this .collect (type);
					this .traverseTime = performance .now () - t0;

					var t0 = performance .now ();
					this .draw ();
					this .displayTime = performance .now () - t0;

					break;
				}
			}

			this .getBrowser () .getGlobalLights () .length = 0;
		},
		navigate: function ()
		{
		
		},
		collide: function ()
		{
		
		},
		draw: function ()
		{
			var
				browser           = this .getBrowser (),
				gl                = browser .getContext (),
				opaqueShapes      = this .opaqueShapes,
				transparentShapes = this .transparentShapes;

			browser .getPointShader ()   .setGlobalUniforms ();
			browser .getLineShader ()    .setGlobalUniforms ();
			browser .getDefaultShader () .setGlobalUniforms ();

			// Sorted blend

			// Render opaque objects first

			gl .enable (gl .DEPTH_TEST);
			gl .depthMask (true);
			gl .disable (gl .BLEND);

			for (var i = 0, length = this .numOpaqueShapes; i < length; ++ i)
			{
				var
					context = opaqueShapes [i],
					scissor = context .scissor;

				gl .scissor (scissor .x,
	                      scissor .y,
	                      scissor .z,
	                      scissor .w);

				context .shape .draw (context);
			}

			// Render transparent objects

			gl .depthMask (false);
			gl .enable (gl .BLEND);

			this .transparencySorter .sort (0, this .numTransparentShapes);

			for (var i = 0, length = this .numTransparentShapes; i < length; ++ i)
			{
				var
					context = transparentShapes [i],
					scissor = context .scissor;

				gl .scissor (scissor .x,
	                      scissor .y,
	                      scissor .z,
	                      scissor .w);

				context .shape .draw (context);
			}

			gl .depthMask (true);
			gl .disable (gl .BLEND);
		},
	};

	return X3DRenderer;
});


define ('cobweb/Execution/BindableStack',[
	"jquery",
	"cobweb/Basic/X3DBaseNode",
],
function ($, X3DBaseNode)
{
	function BindableStack (executionContext, layer, bottom)
	{
		X3DBaseNode .call (this, executionContext .getBrowser (), executionContext);

		this .layer = layer;
		this .array = [ bottom ];
		this .setup ();
	}

	BindableStack .prototype = $.extend (Object .create (X3DBaseNode .prototype),
	{
		get: function ()
		{
			return this .array;
		},
		top: function ()
		{
			return this .array [this .array .length - 1];
		},
		forcePush: function (node)
		{
			node .isBound_  = true;
			node .bindTime_ = this .getBrowser () .getCurrentTime ();

			this .push (node);
		},
		push: function (node)
		{
			if (node === this .array [0])
				return;
			
			var top = this .top ();
			
			if (node !== top)
			{
				if (top .isBound_ .getValue ())
				{
					top .set_bind_ = false;
					top .isBound_  = false;
				}

				this .pushOnTop (node);

				if (! node .isBound_ .getValue ())
				{
					node .isBound_  = true;
					node .bindTime_ = this .getBrowser () .getCurrentTime ();
					node .transitionStart (this .layer, top);
				}

				this .addNodeEvent ();
			}
		},
		pushOnTop: function (node)
		{
			var index = this .array .indexOf (node);

			if (index > -1)
				this .array .splice (index, 1);

			this .array .push (node);
		},
		remove: function (node)
		{
			if (node === this .array [0])
				return;

			// If on top, pop node.

			var top = this .top ();

			if (node === top)
				return this .pop (node);

			// Simply remove.

			var index = this .array .indexOf (node);

			if (index > -1)
				this .array .splice (index, 1);
		},
		pop: function (node)
		{
			if (node === this .array [0])
				return;

			var top = this .top ();
			
			if (node === top)
			{
				if (node .isBound_ .getValue ())
					node .isBound_ = false;

				this .array .pop ();

				top = this .top ();

				if (! top .isBound_ .getValue ())
				{
					top .set_bind_ = true;
					top .isBound_  = true;
					top .bindTime_ = this .getBrowser () .getCurrentTime ();
					top .transitionStart (this .layer, node);
				}

				this .addNodeEvent ();
			}
		},
	});

	return BindableStack;
});

define ('cobweb/Execution/BindableList',[
	"jquery",
	"cobweb/Basic/X3DBaseNode",
],
function ($, X3DBaseNode)
{
	function equals (lhs, rhs)
	{
		if (lhs .length !== rhs .length)
			return false;

		for (var i = 0; i < lhs .length; ++ i)
		{
			if (lhs [i] !== rhs [i])
				return false
		}

		return true;
	}

	function BindableList (executionContext, layer)
	{
		X3DBaseNode .call (this, executionContext .getBrowser (), executionContext);

		this .layer     = layer;
		this .collected = [ ];
		this .array     = [ ];
		this .setup ();
	}

	BindableList .prototype = $.extend (Object .create (X3DBaseNode .prototype),
	{
		get: function ()
		{
			return this .array;
		},
		getBound: function ()
		{
			for (var i = 1; i < this .array .length; ++ i)
			{
				var node = this .array [i];

				if (node .isBound_ .getValue ())
					return node;
			}

			if (this .array .length > 1)
				return this .array [1];

			return this .array [0];
		},
		push: function (node)
		{
			return this .collected .push (node);
		},
		update: function ()
		{
			if (! equals (this .collected, this .array))
			{
				for (var i = 0; i < this .array .length; ++ i)
					this .array [i] .set_bind_ .removeInterest (this, "set_bind__", this .array [i]);

				this .array     = this .collected;
				this .collected = [ ];

				for (var i = 0; i < this .array .length; ++ i)
					this .array [i] .set_bind_ .addInterest (this, "set_bind__", this .array [i]);
			}

			this .collected .length = 0;
		},
		set_bind__: function (value, node)
		{
			if (value .getValue ())
				node .bindToLayer (this .layer);

			else
				node .unbindFromLayer (this .layer);
		},
	});

	return BindableList;
});

define ('cobweb/Components/Navigation/NavigationInfo',[
	"jquery",
	"cobweb/Fields",
	"cobweb/Basic/X3DFieldDefinition",
	"cobweb/Basic/FieldDefinitionArray",
	"cobweb/Components/Core/X3DBindableNode",
	"cobweb/Bits/TraverseType",
	"cobweb/Bits/X3DConstants",
],
function ($,
          Fields,
          X3DFieldDefinition,
          FieldDefinitionArray,
          X3DBindableNode,
          TraverseType,
          X3DConstants)
{
	with (Fields)
	{
		var TransitionType =
		{
			TELEPORT: true,
			LINEAR:   true,
			ANIMATE:  true,
		};

		function NavigationInfo (executionContext)
		{
			X3DBindableNode .call (this, executionContext .getBrowser (), executionContext);

			this .addType (X3DConstants .NavigationInfo);
		}

		NavigationInfo .prototype = $.extend (Object .create (X3DBindableNode .prototype),
		{
			constructor: NavigationInfo,
			fieldDefinitions: new FieldDefinitionArray ([
				new X3DFieldDefinition (X3DConstants .inputOutput, "metadata",           new SFNode ()),
				new X3DFieldDefinition (X3DConstants .inputOnly,   "set_bind",           new SFBool ()),
				new X3DFieldDefinition (X3DConstants .inputOutput, "type",               new MFString ([ "EXAMINE", "ANY" ])),
				new X3DFieldDefinition (X3DConstants .inputOutput, "avatarSize",         new MFFloat ([ 0.25, 1.6, 0.75 ])),
				new X3DFieldDefinition (X3DConstants .inputOutput, "speed",              new SFFloat (1)),
				new X3DFieldDefinition (X3DConstants .inputOutput, "headlight",          new SFBool (true)),
				new X3DFieldDefinition (X3DConstants .inputOutput, "visibilityLimit",    new SFFloat ()),
				new X3DFieldDefinition (X3DConstants .inputOutput, "transitionType",     new MFString ("LINEAR")),
				new X3DFieldDefinition (X3DConstants .inputOutput, "transitionTime",     new SFTime (1)),
				new X3DFieldDefinition (X3DConstants .outputOnly,  "transitionComplete", new SFBool ()),
				new X3DFieldDefinition (X3DConstants .outputOnly,  "isBound",            new SFBool ()),
				new X3DFieldDefinition (X3DConstants .outputOnly,  "bindTime",           new SFTime ()),
			]),
			getTypeName: function ()
			{
				return "NavigationInfo";
			},
			getComponentName: function ()
			{
				return "Navigation";
			},
			getContainerField: function ()
			{
				return "children";
			},
			initialize: function ()
			{
				X3DBindableNode .prototype .initialize .call (this);

				this .headlight_ .addInterest (this, "set_headlight__");
				
				this .set_headlight__ ();
			},
			set_headlight__: function ()
			{
				if (this .headlight_ .getValue ())
					this .enable = enable;
				else
					delete this .enable;
			},
			bindToLayer: function (layer)
			{
				X3DBindableNode .prototype .bindToLayer .call (this, layer);
			
				layer .getNavigationInfoStack () .push (this);
			},
			unbindFromLayer: function (layer)
			{
				X3DBindableNode .prototype .unbindFromLayer .call (this, layer);

				layer .getNavigationInfoStack () .pop (this);
			},
			removeFromLayer: function (layer)
			{
				layer .getNavigationInfoStack () .remove (this);
			},
			getCollisionRadius: function ()
			{
				if (this .avatarSize_ .length > 0)
				{
					if (this .avatarSize_ [0] > 0)
						return this .avatarSize_ [0];
				}

				return 0.25;
			},
			getAvatarHeight: function ()
			{
				if (this .avatarSize_ .length > 1)
					return this .avatarSize_ [1];

				return 1.6;
			},
			getStepHeight: function ()
			{
				if (this .avatarSize_ .length > 2)
					return this .avatarSize_ [2];

				return 0.75;
			},
			getNearPlane: function ()
			{
				var zNear = this .getCollisionRadius ();

				if (zNear === 0)
					return 1e-5;

				else
					return zNear / 2;
			},
			getFarPlane: function (viewpoint)
			{
				return this .visibilityLimit_ .getValue ()
					    ? this .visibilityLimit_ .getValue ()
					    : viewpoint .getMaxZFar ();
			},
			getTransitionType: function ()
			{
				for (var i = 0, length = this .transitionType_ .length; i < length; ++ i)
				{
					var
						value          = this .transitionType_ [i],
						transitionType = TransitionType [value];

					if (transitionType)
						return value;
				}

				return "LINEAR";
			},
			enable: function ()
			{
			},
			traverse: function (type)
			{
				if (type === TraverseType .CAMERA)
					this .getCurrentLayer () .getNavigationInfos () .push (this);
			}
		});

		function enable ()
		{
			this .getBrowser () .getGlobalLights () .push (this .getBrowser () .getHeadlight ());
		}

		return NavigationInfo;
	}
});



define ('cobweb/Components/EnvironmentalEffects/X3DFogObject',[
	"jquery",
	"cobweb/Bits/X3DConstants",
],
function ($,
          X3DConstants)
{
	function X3DFogObject (browser, executionContext)
	{
		this .addType (X3DConstants .X3DFogObject);
	}

	X3DFogObject .prototype =
	{
		constructor: X3DFogObject,
		initialize: function ()
		{
			this .hidden = false;

			this .fogType_ .addInterest (this, "set_fogType__");

			this .set_fogType__ ();
		},
		set_fogType__: function ()
		{
			switch (this .fogType_ .getValue ())
			{
				case "EXPONENTIAL":
					this .fogType = 2;
					break;
				//case "EXPONENTIAL2":
				//	this .fogType = 3;
				//	break;
				default:
					this .fogType = 1;
					break;
			}
		},
		setHidden: function (value)
		{
			this .hidden = value;

			this .getBrowser () .addBrowserEvent ();
		},
		getHidden: function ()
		{
			return this .hidden;
		},
		use: function (gl, shader)
		{
			if (this .hidden)
				gl .uniform1i (shader .fogType, 0); // NO_FOG

			else
			{
				var
					color           = this .color_ .getValue (),
					visibilityRange = Math .max (0, this .visibilityRange_ .getValue ());

				if (visibilityRange === 0)
					visibilityRange = this .getCurrentNavigationInfo () .getFarPlane (this .getCurrentViewpoint ());

				gl .uniform1i (shader .fogType,            this .fogType);
				gl .uniform3f (shader .fogColor,           color .r, color .g, color .b);
				gl .uniform1f (shader .fogVisibilityRange, visibilityRange);
			}
		},
	};

	return X3DFogObject;
});



define ('cobweb/Components/EnvironmentalEffects/Fog',[
	"jquery",
	"cobweb/Fields",
	"cobweb/Basic/X3DFieldDefinition",
	"cobweb/Basic/FieldDefinitionArray",
	"cobweb/Components/Core/X3DBindableNode",
	"cobweb/Components/EnvironmentalEffects/X3DFogObject",
	"cobweb/Bits/TraverseType",
	"cobweb/Bits/X3DConstants",
],
function ($,
          Fields,
          X3DFieldDefinition,
          FieldDefinitionArray,
          X3DBindableNode, 
          X3DFogObject,
          TraverseType,
          X3DConstants)
{
	with (Fields)
	{
		function Fog (executionContext)
		{
			X3DBindableNode .call (this, executionContext .getBrowser (), executionContext);
			X3DFogObject    .call (this, executionContext .getBrowser (), executionContext);

			this .addType (X3DConstants .Fog);
		}

		Fog .prototype = $.extend (Object .create (X3DBindableNode .prototype),
			X3DFogObject .prototype,
		{
			constructor: Fog,
			fieldDefinitions: new FieldDefinitionArray ([
				new X3DFieldDefinition (X3DConstants .inputOutput, "metadata",        new SFNode ()),
				new X3DFieldDefinition (X3DConstants .inputOnly,   "set_bind",        new SFBool ()),
				new X3DFieldDefinition (X3DConstants .inputOutput, "fogType",         new SFString ("LINEAR")),
				new X3DFieldDefinition (X3DConstants .inputOutput, "color",           new SFColor (1, 1, 1)),
				new X3DFieldDefinition (X3DConstants .inputOutput, "visibilityRange", new SFFloat ()),
				new X3DFieldDefinition (X3DConstants .outputOnly,  "isBound",         new SFBool ()),
				new X3DFieldDefinition (X3DConstants .outputOnly,  "bindTime",        new SFTime ()),
			]),
			getTypeName: function ()
			{
				return "Fog";
			},
			getComponentName: function ()
			{
				return "EnvironmentalEffects";
			},
			getContainerField: function ()
			{
				return "children";
			},
			initialize: function ()
			{
				X3DBindableNode .prototype .initialize .call (this);
				X3DFogObject    .prototype .initialize .call (this);
			},
			bindToLayer: function (layer)
			{
				X3DBindableNode .prototype .bindToLayer .call (this, layer);

				layer .getFogStack () .push (this);
			},
			unbindFromLayer: function (layer)
			{
				X3DBindableNode .prototype .unbindFromLayer .call (this, layer);

				layer .getFogStack () .pop (this);
			},
			removeFromLayer: function (layer)
			{
				layer .getFogStack () .remove (this);
			},
			traverse: function (type)
			{
				if (TraverseType .CAMERA)
					this .getCurrentLayer () .getFogs () .push (this);
			},
		});

		return Fog;
	}
});



define ('cobweb/Components/EnvironmentalEffects/X3DBackgroundNode',[
	"jquery",
	"cobweb/Components/Core/X3DBindableNode",
	"cobweb/Bits/TraverseType",
	"cobweb/Bits/X3DConstants",
	"standard/Math/Numbers/Complex",
	"standard/Math/Numbers/Vector3",
	"standard/Math/Numbers/Rotation4",
	"standard/Math/Numbers/Matrix4",
	"standard/Math/Algorithm",
],
function ($,
          X3DBindableNode,
          TraverseType,
          X3DConstants,
          Complex,
          Vector3,
          Rotation4,
          Matrix4,
          Algorithm)
{
	var
		SIZE        = 10000,
		U_DIMENSION = 20;
	
	var s = Math .sqrt (Math .pow (2 * SIZE, 2) / 2) / 2;

	var texCoords = [
		1, 1, 0, 1,
		0, 1, 0, 1,
		0, 0, 0, 1,
		1, 1, 0, 1,
		0, 0, 0, 1,
		1, 0, 0, 1,
	];

	var frontVertices = [
		 s,  s, -s, 1,
		-s,  s, -s, 1,
		-s, -s, -s, 1,
		 s,  s, -s, 1,
		-s, -s, -s, 1,
		 s, -s, -s, 1,
	];

	var backVertices = [
		-s,  s,  s, 1,
		 s,  s,  s, 1,
		 s, -s,  s, 1,
		-s,  s,  s, 1,
		 s, -s,  s, 1,
		-s, -s,  s, 1,
	];

	var leftVertices = [
		-s,  s, -s, 1,
		-s,  s,  s, 1,
		-s, -s,  s, 1,
		-s,  s, -s, 1,
		-s, -s,  s, 1,
		-s, -s, -s, 1,
	];

	var rightVertices = [
		s,  s,  s, 1,
		s,  s, -s, 1,
		s, -s, -s, 1,
		s,  s,  s, 1,
		s, -s, -s, 1,
		s, -s,  s, 1,
	];

	var topVertices = [
		 s, s,  s, 1,
		-s, s,  s, 1,
		-s, s, -s, 1,
		 s, s,  s, 1,
		-s, s, -s, 1,
		 s, s, -s, 1,
	];

	var bottomVertices = [
		 s, -s, -s, 1,
		-s, -s, -s, 1,
		-s, -s,  s, 1,
		 s, -s, -s, 1,
		-s, -s,  s, 1,
		 s, -s,  s, 1,
	];

	function X3DBackgroundNode (browser, executionContext)
	{
		X3DBindableNode .call (this, browser, executionContext);

		this .addType (X3DConstants .X3DBackgroundNode);

		this .hidden                = false;
		this .rotation              = new Rotation4 ();
		this .modelViewMatrix       = new Matrix4 ();
		this .modelViewMatrixArray  = new Float32Array (16);
		this .colors                = [ ];
		this .sphere                = [ ];
		this .textures              = 0;
	}

	X3DBackgroundNode .prototype = $.extend (Object .create (X3DBindableNode .prototype),
	{
		constructor: X3DBackgroundNode,
		textureMatrixArray: new Float32Array (new Matrix4 ()),
		rectangleCount: 6,
		initialize: function ()
		{
			X3DBindableNode .prototype .initialize .call (this);

			var gl = this .getBrowser () .getContext ();

			this .colorBuffer     = gl .createBuffer ();
			this .sphereBuffer    = gl .createBuffer ();
			this .texCoordBuffer  = gl .createBuffer ();
			this .cubeBuffer      = gl .createBuffer ();
			this .texCoordsBuffer = gl .createBuffer ();
			this .frontBuffer     = gl .createBuffer ();
			this .backBuffer      = gl .createBuffer ();
			this .leftBuffer      = gl .createBuffer ();
			this .rightBuffer     = gl .createBuffer ();
			this .topBuffer       = gl .createBuffer ();
			this .bottomBuffer    = gl .createBuffer ();

			this .groundAngle_  .addInterest (this, "build");
			this .groundColor_  .addInterest (this, "build");
			this .skyAngle_     .addInterest (this, "build");
			this .skyColor_     .addInterest (this, "build");
			this .transparency_ .addInterest (this, "build");

			this .build ();
			this .transferRectangle ();
		},
		set_frontTexture__: function (value)
		{
			this .setTexture ("frontTexture", value, 0);
		},
		set_backTexture__: function (value)
		{
			this .setTexture ("backTexture", value, 1);
		},
		set_leftTexture__: function (value)
		{
			this .setTexture ("leftTexture", value, 2);
		},
		set_rightTexture__: function (value)
		{
			this .setTexture ("rightTexture", value, 3);
		},
		set_topTexture__: function (value)
		{
			this .setTexture ("topTexture", value, 4);
		},
		set_bottomTexture__: function (value)
		{
			this .setTexture ("bottomTexture", value, 5);
		},
		setTexture: function (key, texture, bit)
		{
			if (this [key])
				this [key] .loadState_ .removeInterest (this, "setTextureBit");

			this [key] = texture;

			if (texture)
			{
				texture .loadState_ .addInterest (this, "setTextureBit", bit);
				this .setTextureBit (texture .loadState_, bit);
			}
			else
				this .textures &= ~(1 << bit);
		},
		setTextureBit: function (loadState, bit)
		{
			if (loadState .getValue () === X3DConstants .COMPLETE_STATE)
				this .textures |= 1 << bit;
			else
				this .textures &= ~(1 << bit);
		},
		bindToLayer: function (layer)
		{
			X3DBindableNode .prototype .bindToLayer .call (this, layer);

			layer .getBackgroundStack () .push (this);
		},
		unbindFromLayer: function (layer)
		{
			X3DBindableNode .prototype .unbindFromLayer .call (this, layer);

			layer .getBackgroundStack () .pop (this);
		},
		removeFromLayer: function (layer)
		{
			layer .getBackgroundStack () .remove (this);
		},
		setHidden: function (value)
		{
			this .hidden = value;

			this .getBrowser () .addBrowserEvent ();
		},
		getHidden: function ()
		{
			return this .hidden;
		},
		getColor: function (theta, color, angle)
		{
			var index = Algorithm .upperBound (angle, 0, angle .length, theta, Algorithm .less);

			return color [index];
		},
		build: function ()
		{
			this .colors .length = 0;
			this .sphere .length = 0;

			if (this .transparency_ .getValue () >= 1)
				return;

			var alpha = 1 - Algorithm .clamp (this .transparency_ .getValue (), 0, 1);

			if (this .groundColor_ .length === 0 && this .skyColor_ .length == 1)
			{
				// Build cube

				var
					r = SIZE,
					c = this .skyColor_ [0];

				// Back
				this .sphere .push ( r,  r, -r, 1, -r,  r, -r, 1, -r, -r, -r, 1);
				this .sphere .push ( r,  r, -r, 1, -r, -r, -r, 1,  r, -r, -r, 1);
				// Front
				this .sphere .push (-r,  r,  r, 1,  r,  r,  r, 1, -r, -r,  r, 1);
				this .sphere .push (-r, -r,  r, 1,  r,  r,  r, 1,  r, -r,  r, 1);
				// Left
				this .sphere .push (-r,  r, -r, 1, -r,  r,  r, 1, -r, -r,  r, 1);
				this .sphere .push (-r,  r, -r, 1, -r, -r,  r, 1, -r, -r, -r, 1);
				// Right
				this .sphere .push ( r,  r,  r, 1,  r,  r, -r, 1,  r, -r,  r, 1);
				this .sphere .push ( r, -r,  r, 1,  r,  r, -r, 1,  r, -r, -r, 1);
				// Top
				this .sphere .push ( r,  r,  r, 1, -r,  r,  r, 1, -r,  r, -r, 1);
				this .sphere .push ( r,  r,  r, 1, -r,  r, -r, 1,  r,  r, -r, 1);
				// Bottom
				this .sphere .push ( -r, -r,  r, 1, r, -r,  r, 1, -r, -r, -r, 1);
				this .sphere .push ( -r, -r, -r, 1, r, -r,  r, 1,  r, -r, -r, 1);
				this .sphere .vertices = this .sphere .length / 4;

				for (var i = 0, vertices = this .sphere .vertices; i < vertices; ++ i)
					this .colors .push (c .r, c .g, c .b, alpha);
			}
			else
			{
				// Build sphere

				var radius = Math .sqrt (2 * Math .pow (SIZE, 2));
			
				if (this .skyColor_ .length > this .skyAngle_ .length)
				{
					var vAngle = [ ];
					
					for (var i = 0; i < this .skyAngle_ .length; ++ i)
						vAngle .push (this .skyAngle_ [i]);

					if (vAngle .length === 0 || vAngle [0] > 0)
						vAngle .unshift (0);

					var vAngleMax = this .groundColor_ .length > this .groundAngle_ .length ? Math .PI / 2 : Math .PI;

					if (vAngle [vAngle .length - 1] < vAngleMax)
						vAngle .push (vAngleMax);

					this .buildSphere (radius, vAngle, this .skyAngle_, this .skyColor_, alpha, false);
				}

				if (this .groundColor_ .length > this .groundAngle_ .length)
				{
					var vAngle = [ ];
					
					for (var i = 0; i < this .groundAngle_ .length; ++ i)
						vAngle .push (this .groundAngle_ [i]);

					vAngle .reverse ();

					if (vAngle .length === 0 || vAngle [0] < Math .PI / 2)
						vAngle .unshift (Math .PI / 2);

					if (vAngle [vAngle .length - 1] > 0)
						vAngle .push (0);

					this .buildSphere (radius, vAngle, this .groundAngle_, this .groundColor_, alpha, true);
				}
			}

			this .transferSphere ();
		},
		buildSphere: function (radius, vAngle, angle, color, alpha, bottom)
		{
			var
				phi         = 0,
				y1          = null,
				y2          = null,
				y3          = null,
				y4          = null,
				p           = null,
				vAngleMax   = bottom ? Math .PI / 2 : Math .PI,
				V_DIMENSION = vAngle .length - 1;
			
			for (var v = 0; v < V_DIMENSION; ++ v)
			{
				var
					theta1 = Algorithm .clamp (vAngle [v],     0, vAngleMax),
					theta2 = Algorithm .clamp (vAngle [v + 1], 0, vAngleMax);

				if (bottom)
				{
					theta1 = Math .PI - theta1;
					theta2 = Math .PI - theta2;
				}

				var
					z1 = Complex .Polar (radius, theta1),
					z2 = Complex .Polar (radius, theta2),
					c1 = this .getColor (vAngle [v],     color, angle),
					c2 = this .getColor (vAngle [v + 1], color, angle);
				
				for (var u = 0; u < U_DIMENSION; ++ u)
				{
					// p4 --- p1
					//  |   / |
					//  | /   |
					// p3 --- p2

					// The last point is the first one.
					var u1 = u < U_DIMENSION - 1 ? u + 1 : 0;
			
					// p1, p2
					phi = 2 * Math .PI * (u / U_DIMENSION);
					y1  = Complex .Polar (-z1 .imag, phi);
					y2  = Complex .Polar (-z2 .imag, phi);

					// p3, p4
					phi = 2 * Math .PI * (u1 / U_DIMENSION);
					y3  = Complex .Polar (-z2 .imag, phi);
					y4  = Complex .Polar (-z1 .imag, phi);
					
					// Triangle 1
					this .colors .push (c1 .r, c1 .g, c1 .b, alpha);
					this .colors .push (c2 .r, c2 .g, c2 .b, alpha);
					this .colors .push (c2 .r, c2 .g, c2 .b, alpha);

					this .sphere .push (y1 .imag, z1 .real, y1 .real, 1);
					this .sphere .push (y3 .imag, z2 .real, y3 .real, 1);	
					this .sphere .push (y2 .imag, z2 .real, y2 .real, 1);

					// Triangle 2
					this .colors .push (c1 .r, c1 .g, c1 .b, alpha);
					this .colors .push (c1 .r, c1 .g, c1 .b, alpha);
					this .colors .push (c2 .r, c2 .g, c2 .b, alpha);

					this .sphere .push (y1 .imag, z1 .real, y1 .real, 1);
					this .sphere .push (y4 .imag, z1 .real, y4 .real, 1);	
					this .sphere .push (y3 .imag, z2 .real, y3 .real, 1);	
				}
			}
		},
		transferSphere: function ()
		{
			var gl = this .getBrowser () .getContext ();

			// Transfer colors.

			gl .bindBuffer (gl .ARRAY_BUFFER, this .colorBuffer);
			gl .bufferData (gl .ARRAY_BUFFER, new Float32Array (this .colors), gl .STATIC_DRAW);

			// Transfer sphere.

			gl .bindBuffer (gl .ARRAY_BUFFER, this .sphereBuffer);
			gl .bufferData (gl .ARRAY_BUFFER, new Float32Array (this .sphere), gl .STATIC_DRAW);
			this .sphereCount = this .sphere .length / 4;
		},
		transferRectangle: function ()
		{
			var gl = this .getBrowser () .getContext ();

			// Transfer texCoords.

			gl .bindBuffer (gl .ARRAY_BUFFER, this .texCoordsBuffer);
			gl .bufferData (gl .ARRAY_BUFFER, new Float32Array (texCoords), gl .STATIC_DRAW);

			// Transfer rectangle.

			gl .bindBuffer (gl .ARRAY_BUFFER, this .frontBuffer);
			gl .bufferData (gl .ARRAY_BUFFER, new Float32Array (frontVertices), gl .STATIC_DRAW);

			gl .bindBuffer (gl .ARRAY_BUFFER, this .backBuffer);
			gl .bufferData (gl .ARRAY_BUFFER, new Float32Array (backVertices), gl .STATIC_DRAW);

			gl .bindBuffer (gl .ARRAY_BUFFER, this .leftBuffer);
			gl .bufferData (gl .ARRAY_BUFFER, new Float32Array (leftVertices), gl .STATIC_DRAW);

			gl .bindBuffer (gl .ARRAY_BUFFER, this .rightBuffer);
			gl .bufferData (gl .ARRAY_BUFFER, new Float32Array (rightVertices), gl .STATIC_DRAW);

			gl .bindBuffer (gl .ARRAY_BUFFER, this .topBuffer);
			gl .bufferData (gl .ARRAY_BUFFER, new Float32Array (topVertices), gl .STATIC_DRAW);

			gl .bindBuffer (gl .ARRAY_BUFFER, this .bottomBuffer);
			gl .bufferData (gl .ARRAY_BUFFER, new Float32Array (bottomVertices), gl .STATIC_DRAW);
		},
		traverse: function (type)
		{
			switch (type)
			{
				case TraverseType .CAMERA:
				{
					this .getCurrentLayer () .getBackgrounds () .push (this);
					break;
				}
				case TraverseType .DISPLAY:
				{
					this .modelViewMatrix .assign (this .getBrowser () .getModelViewMatrix () .get ());
					break;
				}
			}
		},
		draw: function ()
		{
			if (this .hidden)
				return;

			// Get background scale

			var
				viewport        = this .getBrowser () .getViewport (),
				viewpoint       = this .getCurrentViewpoint (),
				scale           = viewpoint .getScreenScale (SIZE, viewport),
				rotation        = this .rotation,
				modelViewMatrix = this .modelViewMatrix;

			scale .multiply (Math .max (viewport [2], viewport [3]));

			viewpoint .reshapeWithLimits (1, Math .max (2, 3 * SIZE * scale .z));

			// Rotate and scale background

			modelViewMatrix .get (null, rotation);
			modelViewMatrix .identity ();
			modelViewMatrix .scale (scale);
			modelViewMatrix .rotate (rotation);

			// Draw

			this .modelViewMatrixArray .set (modelViewMatrix);

			this .drawSphere ();

			if (this .textures)
				this .drawCube ();
		},
		drawSphere: function ()
		{
			var transparency = this .transparency_ .getValue ();
		
			if (transparency >= 1)
				return;
	
			var
				browser = this .getBrowser (),
				gl      = browser .getContext (),
				shader  = browser .getBackgroundSphereShader ();

			shader .use ();

			gl .uniformMatrix4fv (shader .projectionMatrix, false, browser .getProjectionMatrixArray ());
			gl .uniformMatrix4fv (shader .modelViewMatrix,  false, this .modelViewMatrixArray);

			// Setup context.
	
			gl .disable (gl .DEPTH_TEST);
			gl .depthMask (false);

			if (transparency)
				gl .enable (gl .BLEND);
			else
				gl .disable (gl .BLEND);

			// Enable vertex attribute arrays.

			gl .enableVertexAttribArray (shader .color);
			gl .bindBuffer (gl .ARRAY_BUFFER, this .colorBuffer);
			gl .vertexAttribPointer (shader .color, 4, gl .FLOAT, false, 0, 0);

			gl .enableVertexAttribArray (shader .vertex);
			gl .bindBuffer (gl .ARRAY_BUFFER, this .sphereBuffer);
			gl .vertexAttribPointer (shader .vertex, 4, gl .FLOAT, false, 0, 0);

			// Draw.

			gl .enable (gl .CULL_FACE);
			gl .frontFace (gl .CCW);
			gl .drawArrays (gl .TRIANGLES, 0, this .sphereCount);

			// Disable vertex attribute arrays.

			gl .disableVertexAttribArray (shader .color);
			gl .disableVertexAttribArray (shader .vertex);
		},
		drawCube: function ()
		{
			var
				browser = this .getBrowser (),
				gl      = browser .getContext (),
				shader  = browser .getGouraudShader ();

			shader .use ();

			gl .uniform1i (shader .fogType,       0);
			gl .uniform1i (shader .colorMaterial, false);
			gl .uniform1i (shader .lighting,      false);
			gl .uniform1i (shader .texturing,     true);

			gl .uniformMatrix4fv (shader .textureMatrix,    false, this .textureMatrixArray);
			gl .uniformMatrix4fv (shader .projectionMatrix, false, browser .getProjectionMatrixArray ());
			gl .uniformMatrix4fv (shader .modelViewMatrix,  false, this .modelViewMatrixArray);

			// Setup context.
	
			gl .disable (gl .DEPTH_TEST);
			gl .depthMask (false);
			gl .enable (gl .CULL_FACE);
			gl .frontFace (gl .CCW);

			// Enable vertex attribute arrays.

			gl .enableVertexAttribArray (shader .texCoord);
			gl .bindBuffer (gl .ARRAY_BUFFER, this .texCoordsBuffer);
			gl .vertexAttribPointer (shader .texCoord, 4, gl .FLOAT, false, 0, 0);

			gl .enableVertexAttribArray (shader .vertex);

			// Draw.

			this .drawRectangle (gl, shader, this .frontTexture,  this .frontBuffer);
			this .drawRectangle (gl, shader, this .backTexture,   this .backBuffer);
			this .drawRectangle (gl, shader, this .leftTexture,   this .leftBuffer);
			this .drawRectangle (gl, shader, this .rightTexture,  this .rightBuffer);
			this .drawRectangle (gl, shader, this .topTexture,    this .topBuffer);
			this .drawRectangle (gl, shader, this .bottomTexture, this .bottomBuffer);

			// Disable vertex attribute arrays.

			gl .disableVertexAttribArray (shader .texCoord);
			gl .disableVertexAttribArray (shader .vertex);
		},
		drawRectangle: function (gl, shader, texture, buffer)
		{
			if (texture && texture .checkLoadState () === X3DConstants .COMPLETE_STATE)
			{
				texture .traverse ();

				if (texture .transparent_ .getValue ())
					gl .enable (gl .BLEND);
				else
					gl .disable (gl .BLEND);

				gl .bindBuffer (gl .ARRAY_BUFFER, buffer);
				gl .vertexAttribPointer (shader .vertex, 4, gl .FLOAT, false, 0, 0);

				// Draw.

				gl .drawArrays (gl .TRIANGLES, 0, this .rectangleCount);
			}
		},
	});

	return X3DBackgroundNode;
});



define ('cobweb/Components/Texturing/X3DTextureNode',[
	"jquery",
	"cobweb/Fields",
	"cobweb/Components/Shape/X3DAppearanceChildNode",
	"cobweb/Bits/X3DConstants",
],
function ($,
          Fields,
          X3DAppearanceChildNode, 
          X3DConstants)
{
	with (Fields)
	{
		function X3DTextureNode (browser, executionContext)
		{
			X3DAppearanceChildNode .call (this, browser, executionContext);

			this .addType (X3DConstants .X3DTextureNode);

			this .addChildren ("transparent", new SFBool (false));
		}

		X3DTextureNode .prototype = $.extend (Object .create (X3DAppearanceChildNode .prototype),
		{
			constructor: X3DTextureNode,
			initialize: function ()
			{
				X3DAppearanceChildNode .prototype .initialize .call (this);

				var gl = this .getBrowser () .getContext ();

				this .texture = gl .createTexture ();
			},
			getTexture: function ()
			{
				return this .texture;
			},
			updateTextureProperties: function (target, haveTextureProperties, textureProperties, width, height, repeatS, repeatT, repeatR)
			{
				var gl = this .getBrowser () .getContext ();

				gl .bindTexture (target, this .getTexture ());

				if (Math .max (width, height) < this .getBrowser () .getMinTextureSize () && ! haveTextureProperties)
				{
					// Dont generate mipmaps.
					gl .texParameteri (target, gl .TEXTURE_MIN_FILTER, gl .NEAREST);
					gl .texParameteri (target, gl .TEXTURE_MAG_FILTER, gl .NEAREST);
				}
				else
				{
					if (textureProperties .generateMipMaps_ .getValue ())
						gl .generateMipmap (gl .TEXTURE_2D);

					gl .texParameteri (target, gl .TEXTURE_MIN_FILTER, gl [textureProperties .getMinificationFilter ()]);
					gl .texParameteri (target, gl .TEXTURE_MAG_FILTER, gl [textureProperties .getMagnificationFilter ()]);
				}

				if (haveTextureProperties)
				{
					gl .texParameteri (target, gl .TEXTURE_WRAP_S, gl [textureProperties .getBoundaryModeS ()]);
					gl .texParameteri (target, gl .TEXTURE_WRAP_T, gl [textureProperties .getBoundaryModeT ()]);
					//gl .texParameteri (target, gl .TEXTURE_WRAP_R, gl [textureProperties .getBoundaryModeR ()]);
				}
				else
				{
					gl .texParameteri (target, gl .TEXTURE_WRAP_S, repeatS ? gl .REPEAT : gl .CLAMP_TO_EDGE);
					gl .texParameteri (target, gl .TEXTURE_WRAP_T, repeatT ? gl .REPEAT : gl .CLAMP_TO_EDGE);
					//gl .texParameteri (target, gl .TEXTURE_WRAP_R, repeatR ? gl .REPEAT : gl .CLAMP);
				}

				//gl .texParameterfv (target, gl .TEXTURE_BORDER_COLOR,       textureProperties .borderColor_ .getValue ());
				//gl .texParameterf  (target, gl .TEXTURE_MAX_ANISOTROPY_EXT, textureProperties .anisotropicDegree_ .getValue ());
				//gl .texParameterf  (target, gl .TEXTURE_PRIORITY,           textureProperties .texturePriority_ .getValue ());

				/*
				// Anisotropic Filtering in WebGL is handled by an extension, use one of getExtension depending on browser:

				var ext = gl .getExtension ("MOZ_EXT_texture_filter_anisotropic");
				var ext = gl .getExtension ("WEBKIT_EXT_texture_filter_anisotropic");
				var ext = gl .getExtension ("EXT_texture_filter_anisotropic");

				if (ext)
					gl .texParameterf (gl .TEXTURE_2D, ext .TEXTURE_MAX_ANISOTROPY_EXT, textureProperties .anisotropicDegree_ .getValue ());
				*/

				gl .bindTexture (target, null);
			},
		});

		return X3DTextureNode;
	}
});



define ('cobweb/Components/Texturing/X3DTexture2DNode',[
	"jquery",
	"cobweb/Components/Texturing/X3DTextureNode",
	"cobweb/Bits/X3DCast",
	"cobweb/Bits/X3DConstants",
],
function ($,
          X3DTextureNode,
          X3DCast,
          X3DConstants)
{
	function X3DTexture2DNode (browser, executionContext)
	{
		X3DTextureNode .call (this, browser, executionContext);

		this .addType (X3DConstants .X3DTexture2DNode);
			
		this .width  = 0;
		this .height = 0;
	}

	X3DTexture2DNode .prototype = $.extend (Object .create (X3DTextureNode .prototype),
	{
		constructor: X3DTexture2DNode,
		initialize: function ()
		{
			X3DTextureNode .prototype .initialize .call (this);
			
			this .repeatS_           .addInterest (this, "updateTextureProperties");
			this .repeatT_           .addInterest (this, "updateTextureProperties");
			this .textureProperties_ .addInterest (this, "set_textureProperties__");

			this .set_textureProperties__ ();
		},
		set_textureProperties__: function ()
		{
			if (this .texturePropertiesNode)
				this .texturePropertiesNode .removeInterest (this, "updateTextureProperties");

			this .texturePropertiesNode = X3DCast (X3DConstants .TextureProperties, this .textureProperties_);

			if (! this .texturePropertiesNode)
				this .texturePropertiesNode = this .getBrowser () .getDefaultTextureProperties ();

			this .texturePropertiesNode .addInterest (this, "updateTextureProperties");

			this .updateTextureProperties ();
		},
		getWidth: function ()
		{
			return this .width;
		},
		getHeight: function ()
		{
			return this .height;
		},
		setTexture: function (width, height, transparent, data, flipY)
		{
			this .transparent_ = transparent;
			this .width        = width;
			this .height       = height;

			var gl = this .getBrowser () .getContext ();

			gl .pixelStorei (gl .UNPACK_FLIP_Y_WEBGL, flipY);
			gl .pixelStorei (gl .UNPACK_ALIGNMENT, 1);
			gl .bindTexture (gl .TEXTURE_2D, this .getTexture ());
			gl .texImage2D  (gl .TEXTURE_2D, 0, gl .RGBA, width, height, 0, gl .RGBA, gl .UNSIGNED_BYTE, data);
			gl .bindTexture (gl .TEXTURE_2D, null);

			this .updateTextureProperties ();

			this .getBrowser () .addBrowserEvent ();
		},
		updateTexture: function (object)
		{
			var gl = this .getBrowser () .getContext ();

			gl .bindTexture (gl .TEXTURE_2D, this .getTexture ());
			gl .texSubImage2D (gl .TEXTURE_2D, 0, 0, 0, gl .RGBA, gl .UNSIGNED_BYTE, object);

			if (this .texturePropertiesNode .generateMipMaps_ .getValue ())
				gl .generateMipmap (gl .TEXTURE_2D);

			gl .bindTexture (gl .TEXTURE_2D, null);
		},
		updateTextureProperties: function ()
		{
			var gl = this .getBrowser () .getContext ();

			X3DTextureNode .prototype .updateTextureProperties .call (this,
			                                                          gl .TEXTURE_2D,
			                                                          this .textureProperties_ .getValue (),
			                                                          this .texturePropertiesNode,
			                                                          this .width,
			                                                          this .height,
			                                                          this .repeatS_ .getValue (),
			                                                          this .repeatT_ .getValue (),
			                                                          false);
		},
		clear: function ()
		{
			this .setTexture (1, 1, false, new Uint8Array ([ 255, 255, 255, 255 ]), false);
		},
		traverse: function ()
		{
			var gl = this .getBrowser () .getContext ();

			gl .activeTexture (gl .TEXTURE0);
			gl .bindTexture (gl .TEXTURE_2D, this .texture);
		},
	});

	return X3DTexture2DNode;
});



define ('cobweb/Components/Texturing/ImageTexture',[
	"jquery",
	"cobweb/Fields",
	"cobweb/Basic/X3DFieldDefinition",
	"cobweb/Basic/FieldDefinitionArray",
	"cobweb/Components/Texturing/X3DTexture2DNode",
	"cobweb/Components/Networking/X3DUrlObject",
	"cobweb/Bits/X3DConstants",
	"standard/Networking/URI",
	"standard/Math/Algorithm",
],
function ($,
          Fields,
          X3DFieldDefinition,
          FieldDefinitionArray,
          X3DTexture2DNode, 
          X3DUrlObject, 
          X3DConstants,
          URI,
          Algorithm)
{
	with (Fields)
	{
		function ImageTexture (executionContext)
		{
			X3DTexture2DNode .call (this, executionContext .getBrowser (), executionContext);
			X3DUrlObject     .call (this, executionContext .getBrowser (), executionContext);

			this .addType (X3DConstants .ImageTexture);

			this .urlStack = new MFString ();
		}

		ImageTexture .prototype = $.extend (Object .create (X3DTexture2DNode .prototype),
			X3DUrlObject .prototype,
		{
			constructor: ImageTexture,
			fieldDefinitions: new FieldDefinitionArray ([
				new X3DFieldDefinition (X3DConstants .inputOutput,    "metadata",          new SFNode ()),
				new X3DFieldDefinition (X3DConstants .inputOutput,    "url",               new MFString ()),
				new X3DFieldDefinition (X3DConstants .initializeOnly, "repeatS",           new SFBool (true)),
				new X3DFieldDefinition (X3DConstants .initializeOnly, "repeatT",           new SFBool (true)),
				new X3DFieldDefinition (X3DConstants .initializeOnly, "textureProperties", new SFNode ()),
			]),
			getTypeName: function ()
			{
				return "ImageTexture";
			},
			getComponentName: function ()
			{
				return "Texturing";
			},
			getContainerField: function ()
			{
				return "texture";
			},
			initialize: function ()
			{
				X3DTexture2DNode .prototype .initialize .call (this);
				X3DUrlObject     .prototype .initialize .call (this);

				this .url_ .addInterest (this, "set_url__");

				this .canvas = $("<canvas>");

				this .image = $("<img>");
				this .image .load (this .setImage .bind (this));
				this .image .error (this .setError .bind (this));
				this .image .bind ("abort", this .setError .bind (this));
				this .image .attr ("crossOrigin", "anonymous");

				this .requestAsyncLoad ();
			},
			set_url__: function ()
			{
				this .setLoadState (X3DConstants .NOT_STARTED_STATE);

				this .requestAsyncLoad ();
			},
			requestAsyncLoad: function ()
			{
				if (this .checkLoadState () === X3DConstants .COMPLETE_STATE || this .checkLoadState () === X3DConstants .IN_PROGRESS_STATE)
					return;

				this .setLoadState (X3DConstants .IN_PROGRESS_STATE);

				this .urlStack .setValue (this .url_);
				this .loadNext ();
			},
			loadNext: function ()
			{
				if (this .urlStack .length === 0)
				{
					this .clear ();
					this .setLoadState (X3DConstants .FAILED_STATE);
					return;
				}

				// Get URL.

				this .URL = new URI (this .urlStack .shift ());
				this .URL = this .getExecutionContext () .getWorldURL () .transform (this .URL);
				// In Firefox we don't need getRelativePath if file scheme, do we in Chrome???

				this .image .attr ("src", this .URL);
			},
			setError: function ()
			{
				console .warn ("Error loading image:", this .URL .toString ());
				this .loadNext ();
			},
			setImage: function ()
			{
				try
				{
					var
					   image  = this .image [0],
						width  = image .width,
						height = image .height;

					var
						canvas = this .canvas [0],
						cx     = canvas .getContext ("2d");

					// Scale image.

					if (! Algorithm .isPowerOfTwo (width) || ! Algorithm .isPowerOfTwo (height))
					{
						width  = Algorithm .nextPowerOfTwo (width);
						height = Algorithm .nextPowerOfTwo (height);

						canvas .width  = width;
						canvas .height = height;

						cx .drawImage (image, 0, 0, image .width, image .height, 0, 0, width, height);
					}
					else
					{
						canvas .width  = width;
						canvas .height = height;

						cx .drawImage (image, 0, 0);
					}

					// Determine image alpha.

					var
						data   = cx .getImageData (0, 0, width, height) .data,
						opaque = true;

					for (var i = 3; i < data .length; i += 4)
					{
						if (data [i] !== 255)
						{
							opaque = false;
							break;
						}
					}

					setTimeout (function ()
					{
						this .setTexture (width, height, ! opaque, new Uint8Array (data), true);
						this .setLoadState (X3DConstants .COMPLETE_STATE);
					}
					.bind (this), 16);
				}
				catch (error)
				{
					// Catch security error from cross origin requests.
					console .log (error .message);
					this .setError ();
				}
			},
		});

		return ImageTexture;
	}
});

// https://github.com/toji/texture-tester/blob/master/js/webgl-texture-util.js
;

define ('cobweb/Components/EnvironmentalEffects/Background',[
	"jquery",
	"cobweb/Fields",
	"cobweb/Basic/X3DFieldDefinition",
	"cobweb/Basic/FieldDefinitionArray",
	"cobweb/Components/EnvironmentalEffects/X3DBackgroundNode",
	"cobweb/Components/Texturing/ImageTexture",
	"cobweb/Bits/X3DConstants",
],
function ($,
          Fields,
          X3DFieldDefinition,
          FieldDefinitionArray,
          X3DBackgroundNode,
          ImageTexture,
          X3DConstants)
{
	with (Fields)
	{
		function Background (executionContext)
		{
			X3DBackgroundNode .call (this, executionContext .getBrowser (), executionContext);

			this .addType (X3DConstants .Background);
		}

		Background .prototype = $.extend (Object .create (X3DBackgroundNode .prototype),
		{
			constructor: Background,
			fieldDefinitions: new FieldDefinitionArray ([
				new X3DFieldDefinition (X3DConstants .inputOutput, "metadata",     new SFNode ()),
				new X3DFieldDefinition (X3DConstants .inputOnly,   "set_bind",     new SFBool ()),
				new X3DFieldDefinition (X3DConstants .inputOutput, "frontUrl",     new MFString ()),
				new X3DFieldDefinition (X3DConstants .inputOutput, "backUrl",      new MFString ()),
				new X3DFieldDefinition (X3DConstants .inputOutput, "leftUrl",      new MFString ()),
				new X3DFieldDefinition (X3DConstants .inputOutput, "rightUrl",     new MFString ()),
				new X3DFieldDefinition (X3DConstants .inputOutput, "topUrl",       new MFString ()),
				new X3DFieldDefinition (X3DConstants .inputOutput, "bottomUrl",    new MFString ()),
				new X3DFieldDefinition (X3DConstants .inputOutput, "skyAngle",     new MFFloat ()),
				new X3DFieldDefinition (X3DConstants .inputOutput, "skyColor",     new MFColor (new SFColor (0, 0, 0))),
				new X3DFieldDefinition (X3DConstants .inputOutput, "groundAngle",  new MFFloat ()),
				new X3DFieldDefinition (X3DConstants .inputOutput, "groundColor",  new MFColor ()),
				new X3DFieldDefinition (X3DConstants .inputOutput, "transparency", new SFFloat ()),
				new X3DFieldDefinition (X3DConstants .outputOnly,  "isBound",      new SFBool ()),
				new X3DFieldDefinition (X3DConstants .outputOnly,  "bindTime",     new SFTime ()),
			]),
			getTypeName: function ()
			{
				return "Background";
			},
			getComponentName: function ()
			{
				return "EnvironmentalEffects";
			},
			getContainerField: function ()
			{
				return "children";
			},
			initialize: function ()
			{
				X3DBackgroundNode .prototype .initialize .call (this);

				var
					frontTexture      = new ImageTexture (this .getExecutionContext ()),
					backTexture       = new ImageTexture (this .getExecutionContext ()),
					leftTexture       = new ImageTexture (this .getExecutionContext ()),
					rightTexture      = new ImageTexture (this .getExecutionContext ()),
					topTexture        = new ImageTexture (this .getExecutionContext ()),
					bottomTexture     = new ImageTexture (this .getExecutionContext ()),
					textureProperties = this .getBrowser () .getBackgroundTextureProperties ();

				this .frontUrl_  .addFieldInterest (frontTexture  .url_);
				this .backUrl_   .addFieldInterest (backTexture   .url_);
				this .leftUrl_   .addFieldInterest (leftTexture   .url_);
				this .rightUrl_  .addFieldInterest (rightTexture  .url_);
				this .topUrl_    .addFieldInterest (topTexture    .url_);
				this .bottomUrl_ .addFieldInterest (bottomTexture .url_);

				frontTexture  .url_ = this .frontUrl_;
				backTexture   .url_ = this .backUrl_;
				leftTexture   .url_ = this .leftUrl_;
				rightTexture  .url_ = this .rightUrl_;
				topTexture    .url_ = this .topUrl_;
				bottomTexture .url_ = this .bottomUrl_;

				frontTexture  .textureProperties_ = textureProperties;
				backTexture   .textureProperties_ = textureProperties;
				leftTexture   .textureProperties_ = textureProperties;
				rightTexture  .textureProperties_ = textureProperties;
				topTexture    .textureProperties_ = textureProperties;
				bottomTexture .textureProperties_ = textureProperties;

				frontTexture  .setup ();
				backTexture   .setup ();
				leftTexture   .setup ();
				rightTexture  .setup ();
				topTexture    .setup ();
				bottomTexture .setup ();

				this .set_frontTexture__  (frontTexture);
				this .set_backTexture__   (backTexture);
				this .set_leftTexture__   (leftTexture);
				this .set_rightTexture__  (rightTexture);
				this .set_topTexture__    (topTexture);
				this .set_bottomTexture__ (bottomTexture);
			}
		});

		return Background;
	}
});



define ('cobweb/Components/Layering/X3DLayerNode',[
	"jquery",
	"cobweb/Components/Core/X3DNode",
	"cobweb/Rendering/X3DRenderer",
	"cobweb/Components/Layering/X3DViewportNode",
	"cobweb/Execution/BindableStack",
	"cobweb/Execution/BindableList",
	"cobweb/Components/Navigation/NavigationInfo",
	"cobweb/Components/EnvironmentalEffects/Fog",
	"cobweb/Components/EnvironmentalEffects/Background",
	"cobweb/Bits/X3DCast",
	"cobweb/Bits/TraverseType",
	"cobweb/Bits/X3DConstants",
	"standard/Math/Geometry/Line3",
	"standard/Math/Numbers/Vector3",
],
function ($,
          X3DNode,
          X3DRenderer,
          X3DViewportNode,
          BindableStack,
          BindableList,
          NavigationInfo,
          Fog,
          Background,
          X3DCast,
          TraverseType,
          X3DConstants,
          Line3,
          Vector3)
{
	var line = new Line3 (new Vector3 (0, 0, 0), new Vector3 (0, 0, 0));

	function X3DLayerNode (browser, executionContext, defaultViewpoint, group)
	{
		X3DNode     .call (this, browser, executionContext);
		X3DRenderer .call (this, browser, executionContext);

		this .addType (X3DConstants .X3DLayerNode);

		this .defaultViewpoint = defaultViewpoint;
		this .group            = group;
	}

	X3DLayerNode .prototype = $.extend (Object .create (X3DNode .prototype),
		X3DRenderer .prototype,
	{
		constructor: X3DLayerNode,
		layer0: false,
		initialize: function ()
		{
			X3DNode     .prototype .initialize .call (this);
			X3DRenderer .prototype .initialize .call (this);

			this .defaultNavigationInfo = new NavigationInfo (this .getExecutionContext ());
			this .defaultBackground     = new Background (this .getExecutionContext ());
			this .defaultFog            = new Fog (this .getExecutionContext ());

			this .defaultNavigationInfo .setup ();
			this .defaultBackground     .setup ();
			this .defaultFog            .setup ();
			this .defaultViewpoint      .setup ();

			this .defaultBackground .setHidden (true);
			this .defaultFog        .setHidden (true);

			this .currentViewport     = null;
			this .navigationInfoStack = new BindableStack (this .getExecutionContext (), this, this .defaultNavigationInfo);
			this .backgroundStack     = new BindableStack (this .getExecutionContext (), this, this .defaultBackground);
			this .fogStack            = new BindableStack (this .getExecutionContext (), this, this .defaultFog);
			this .viewpointStack      = new BindableStack (this .getExecutionContext (), this, this .defaultViewpoint);

			this .navigationInfos = new BindableList (this .getExecutionContext (), this);
			this .backgrounds     = new BindableList (this .getExecutionContext (), this);
			this .fogs            = new BindableList (this .getExecutionContext (), this);
			this .viewpoints      = new BindableList (this .getExecutionContext (), this);

			this .group .children_ = this .children_;
			this .group .setup ();
			this .collect = this .group .traverse .bind (this .group);

			this .hitRay = line;

			this .viewport_       .addInterest (this, "set_viewport__");
			this .addChildren_    .addInterest (this .group .addChildren_,    "setValue");
			this .removeChildren_ .addInterest (this .group .removeChildren_, "setValue");
			this .children_       .addInterest (this .group .children_,       "setValue");

			this .set_viewport__ ();
		},
		isLayer0: function (value)
		{
			this .layer0 = value;
			this .defaultBackground .setHidden (! value);
		},
		getViewport: function ()
		{
			return this .currentViewport;
		},
		getNavigationInfo: function ()
		{
			return this .navigationInfoStack .top ();
		},
		getBackground: function ()
		{
			return this .backgroundStack .top ();
		},
		getFog: function ()
		{
			return this .fogStack .top ();
		},
		getViewpoint: function ()
		{
			return this .viewpointStack .top ();
		},
		getNavigationInfos: function ()
		{
			return this .navigationInfos;
		},
		getBackgrounds: function ()
		{
			return this .backgrounds;
		},
		getFogs: function ()
		{
			return this .fogs;
		},
		getViewpoints: function ()
		{
			return this .viewpoints;
		},
		getUserViewpoints: function ()
		{
			var userViewpoints = [ ];

			for (var i = 0; i < this .viewpoints .get () .length; ++ i)
			{
				var viewpoint = this .viewpoints .get () [i];

				if (viewpoint .description_ .length)
					userViewpoints .push (viewpoint);
			}

			return userViewpoints;
		},
		getNavigationInfoStack: function ()
		{
			return this .navigationInfoStack;
		},
		getBackgroundStack: function ()
		{
			return this .backgroundStack;
		},
		getFogStack: function ()
		{
			return this .fogStack;
		},
		getViewpointStack: function ()
		{
			return this .viewpointStack;
		},
		setHitRay: function (value)
		{
			this .hitRay = value;
		},
		getHitRay: function ()
		{
			return this .hitRay;
		},
		set_viewport__: function ()
		{
			this .currentViewport = X3DCast (X3DViewportNode, this .viewport_);

			if (! this .currentViewport)
				this .currentViewport = this .getBrowser () .getDefaultViewport ();
		},
		bind: function ()
		{
			this .traverse (TraverseType .CAMERA);

			if (this .navigationInfos .get () .length)
			{
				var navigationInfo = this .navigationInfos .getBound ();
				this .navigationInfoStack .forcePush (navigationInfo);
				navigationInfo .bindToLayer (this);
			}

			if (this .backgrounds .get () .length)
			{
				var background = this .backgrounds .getBound ();
				this .backgroundStack .forcePush (background);
				background .bindToLayer (this);
			}

			if (this .fogs .get () .length)
			{
				var fog = this .fogs .getBound ();
				this .fogStack .forcePush (fog);
				fog .bindToLayer (this);
			}

			// Bind first viewpoint in viewpoint stack.

			if (this .viewpoints .get () .length)
			{
				var viewpoint = this .viewpoints .getBound ();
				this .viewpointStack .forcePush (viewpoint);
				viewpoint .bindToLayer (this);
			}
		},
		traverse: function (type)
		{
			this .getBrowser () .getLayers () .push (this);
			this .currentViewport .push ();

			switch (type)
			{
				case TraverseType .POINTER:
					this .pointer ();
					break;
				case TraverseType .CAMERA:
					this .camera ();
					break;
				case TraverseType .NAVIGATION:
					this .navigation ();
					break;
				case TraverseType .COLLISION:
					this .collision ();
					break;
				case TraverseType .DISPLAY:
					this .display ();
					break;
			}

			this .currentViewport .pop ();
			this .getBrowser () .getLayers () .pop ();
		},
		pointer: function ()
		{
			if (this .isPickable_ .getValue ())
			{
				var
					viewVolumes = this .getViewVolumeStack (),
					viewVolume  = viewVolumes [viewVolumes .length - 1];

				if (this .getBrowser () .getSelectedLayer ())
				{
					if (this .getBrowser () .getSelectedLayer () !== this)
						return;
				}
				else
				{
					if (! this .getBrowser () .isPointerInRectangle (viewVolume .getScissor ()))
						return;
				}

				this .getViewpoint () .reshape ();
				this .getViewpoint () .transform ();

				this .getBrowser () .setHitRay (viewVolume .getScissor ());
				this .collect (TraverseType .POINTER);

				this .getBrowser () .getGlobalLights () .length = 0;
			}
		},
		camera: function ()
		{
			this .getViewpoint () .reshape ();
			this .getBrowser () .getModelViewMatrix () .identity ();

			this .defaultNavigationInfo .traverse (TraverseType .CAMERA);
			this .defaultBackground     .traverse (TraverseType .CAMERA);
			this .defaultViewpoint      .traverse (TraverseType .CAMERA);

			this .collect (TraverseType .CAMERA);

			this .navigationInfos .update ();
			this .backgrounds     .update ();
			this .fogs            .update ();
			this .viewpoints      .update ();
		},
		navigation: function ()
		{
		
		},
		collision: function ()
		{
		
		},
		display: function (type)
		{
			var gl       = this .getBrowser () .getContext ();
			var viewport = this .currentViewport .getRectangle ();

			gl .viewport (viewport [0],
			              viewport [1],
			              viewport [2],
			              viewport [3]);

			gl .scissor (viewport [0],
			             viewport [1],
			             viewport [2],
			             viewport [3]);

			gl .clear (gl .DEPTH_BUFFER_BIT);

			this .getBackground () .draw ();

			this .getNavigationInfo () .enable ();
			this .getViewpoint ()      .reshape ();
			this .getViewpoint ()      .transform ();

			this .render (TraverseType .DISPLAY);
		},
		collect: function (type) { },
	});

	return X3DLayerNode;
});



define ('standard/Math/Geometry/Camera',[
	"standard/Math/Numbers/Matrix4",
],
function (Matrix4)
{
	return {
		frustum: function (l, r, b, t, n, f)
		{
			var
				r_l = r - l,
				t_b = t - b,
				f_n = f - n,
				n_2 = 2 * n,

				A = (r + l) / r_l,
				B = (t + b) / t_b,
				C = -(f + n) / f_n,
				D = -n_2 * f / f_n,
				E = n_2 / r_l,
				F = n_2 / t_b;

			return new Matrix4 (E, 0, 0, 0,
			                    0, F, 0, 0,
			                    A, B, C, -1,
			                    0, 0, D, 0);
		},
		perspective: function (fieldOfView, zNear, zFar, viewport)
		{
			var
				width  = viewport [2],
				height = viewport [3],
				ratio  = Math .tan (fieldOfView / 2) * zNear;

			if (width > height)
			{
				var aspect = width * ratio / height;
				return this .frustum (-aspect, aspect, -ratio, ratio, zNear, zFar);
			}
			else
			{
				var aspect = height * ratio / width;
				return this .frustum (-ratio, ratio, -aspect, aspect, zNear, zFar);
			}
		},
		ortho: function (l, r, b, t, n, f)
		{
			var
				r_l = r - l,
				t_b = t - b,
				f_n = f - n,

				A =  2 / r_l,
				B =  2 / t_b,
				C = -2 / f_n,
				D = -(r + l) / r_l,
				E = -(t + b) / t_b,
				F = -(f + n) / f_n;

			return new Matrix4 (A, 0, 0, 0,
			                    0, B, 0, 0,
			                    0, 0, C, 0,
			                    D, E, F, 1);
		},
	};
});


define ('cobweb/Components/Navigation/Viewpoint',[
	"jquery",
	"cobweb/Fields",
	"cobweb/Basic/X3DFieldDefinition",
	"cobweb/Basic/FieldDefinitionArray",
	"cobweb/Components/Navigation/X3DViewpointNode",
	"cobweb/Bits/X3DConstants",
	"standard/Math/Geometry/Camera",
	"standard/Math/Numbers/Vector3",
],
function ($,
          Fields,
          X3DFieldDefinition,
          FieldDefinitionArray,
          X3DViewpointNode, 
          X3DConstants,
          Camera,
          Vector3)
{
	with (Fields)
	{
		function Viewpoint (executionContext)
		{
			X3DViewpointNode .call (this, executionContext .getBrowser (), executionContext);

			this .addType (X3DConstants .Viewpoint);
		}

		Viewpoint .prototype = $.extend (Object .create (X3DViewpointNode .prototype),
		{
			constructor: Viewpoint,
			fieldDefinitions: new FieldDefinitionArray ([
				new X3DFieldDefinition (X3DConstants .inputOutput, "metadata",          new SFNode ()),
				new X3DFieldDefinition (X3DConstants .inputOnly,   "set_bind",          new SFBool ()),
				new X3DFieldDefinition (X3DConstants .inputOutput, "description",       new SFString ("")),
				new X3DFieldDefinition (X3DConstants .inputOutput, "position",          new SFVec3f (0, 0, 10)),
				new X3DFieldDefinition (X3DConstants .inputOutput, "orientation",       new SFRotation (0, 0, 1, 0)),
				new X3DFieldDefinition (X3DConstants .inputOutput, "centerOfRotation",  new SFVec3f (0, 0, 0)),
				new X3DFieldDefinition (X3DConstants .inputOutput, "fieldOfView",       new SFFloat (Math .PI / 4)),
				new X3DFieldDefinition (X3DConstants .inputOutput, "jump",              new SFBool (true)),
				new X3DFieldDefinition (X3DConstants .inputOutput, "retainUserOffsets", new SFBool (false)),
				new X3DFieldDefinition (X3DConstants .outputOnly,  "isBound",           new SFBool ()),
				new X3DFieldDefinition (X3DConstants .outputOnly,  "bindTime",          new SFTime ()),
			]),
			getTypeName: function ()
			{
				return "Viewpoint";
			},
			getComponentName: function ()
			{
				return "Navigation";
			},
			getContainerField: function ()
			{
				return "children";
			},
			getFieldOfView: function ()
			{
				var fov = this .fieldOfView_ * this .fieldOfViewScale_;

				return fov > 0 && fov < Math .PI ? fov : Math .PI / 4;
			},
			getScreenScale: function (distance, viewport)
			{
				var width  = viewport [2];
				var height = viewport [3];
				var size   = distance * Math .tan (this .getFieldOfView () / 2) * 2;

				if (width > height)
					size /= height;

				else
					size /= width;

				return new Vector3 (size, size, size);
			},
			getProjectionMatrix: function (zNear, zFar, viewport)
			{
				return Camera .perspective (this .getFieldOfView (), zNear, zFar, viewport);
			},
		});

		return Viewpoint;
	}
});



define ('cobweb/Components/Grouping/Group',[
	"jquery",
	"cobweb/Fields",
	"cobweb/Basic/X3DFieldDefinition",
	"cobweb/Basic/FieldDefinitionArray",
	"cobweb/Components/Grouping/X3DGroupingNode",
	"cobweb/Bits/X3DConstants",
],
function ($,
          Fields,
          X3DFieldDefinition,
          FieldDefinitionArray,
          X3DGroupingNode, 
          X3DConstants)
{
	with (Fields)
	{
		function Group (executionContext)
		{
			X3DGroupingNode .call (this, executionContext .getBrowser (), executionContext);

			this .addType (X3DConstants .Group);
		}

		Group .prototype = $.extend (Object .create (X3DGroupingNode .prototype),
		{
			constructor: Group,
			fieldDefinitions: new FieldDefinitionArray ([
				new X3DFieldDefinition (X3DConstants .inputOutput,    "metadata",       new SFNode ()),
				new X3DFieldDefinition (X3DConstants .initializeOnly, "bboxSize",       new SFVec3f (-1, -1, -1)),
				new X3DFieldDefinition (X3DConstants .initializeOnly, "bboxCenter",     new SFVec3f (0, 0, 0)),
				new X3DFieldDefinition (X3DConstants .inputOnly,      "addChildren",    new MFNode ()),
				new X3DFieldDefinition (X3DConstants .inputOnly,      "removeChildren", new MFNode ()),
				new X3DFieldDefinition (X3DConstants .inputOutput,    "children",       new MFNode ()),
			]),
			getTypeName: function ()
			{
				return "Group";
			},
			getComponentName: function ()
			{
				return "Grouping";
			},
			getContainerField: function ()
			{
				return "children";
			},
		});

		return Group;
	}
});



define ('cobweb/Components/Layering/Layer',[
	"jquery",
	"cobweb/Fields",
	"cobweb/Basic/X3DFieldDefinition",
	"cobweb/Basic/FieldDefinitionArray",
	"cobweb/Components/Layering/X3DLayerNode",
	"cobweb/Components/Navigation/Viewpoint",
	"cobweb/Components/Grouping/Group",
	"cobweb/Bits/X3DConstants",
],
function ($,
          Fields,
          X3DFieldDefinition,
          FieldDefinitionArray,
          X3DLayerNode,
          Viewpoint,
          Group,
          X3DConstants)
{
	with (Fields)
	{
		function Layer (executionContext)
		{
			X3DLayerNode .call (this, executionContext .getBrowser (), executionContext, new Viewpoint (executionContext), new Group (executionContext));

			this .addType (X3DConstants .Layer);
		}

		Layer .prototype = $.extend (Object .create (X3DLayerNode .prototype),
		{
			constructor: Layer,
			fieldDefinitions: new FieldDefinitionArray ([
				new X3DFieldDefinition (X3DConstants .inputOutput, "metadata",       new SFNode ()),
				new X3DFieldDefinition (X3DConstants .inputOutput, "isPickable",     new SFBool (true)),
				new X3DFieldDefinition (X3DConstants .inputOutput, "viewport",       new SFNode ()),
				new X3DFieldDefinition (X3DConstants .inputOnly,   "addChildren",    new MFNode ()),
				new X3DFieldDefinition (X3DConstants .inputOnly,   "removeChildren", new MFNode ()),
				new X3DFieldDefinition (X3DConstants .inputOutput, "children",       new MFNode ()),
			]),
			getTypeName: function ()
			{
				return "Layer";
			},
			getComponentName: function ()
			{
				return "Layering";
			},
			getContainerField: function ()
			{
				return "layers";
			},
		});

		return Layer;
	}
});



define ('cobweb/Components/Layering/LayerSet',[
	"jquery",
	"cobweb/Fields",
	"cobweb/Basic/X3DFieldDefinition",
	"cobweb/Basic/FieldDefinitionArray",
	"cobweb/Components/Core/X3DNode",
	"cobweb/Components/Layering/Layer",
	"cobweb/Bits/X3DCast",
	"cobweb/Bits/TraverseType",
	"cobweb/Bits/X3DConstants",
],
function ($,
          Fields,
          X3DFieldDefinition,
          FieldDefinitionArray,
          X3DNode,
          Layer,
          X3DCast,
          TraverseType,
          X3DConstants)
{
	with (Fields)
	{
		function LayerSet (executionContext)
		{
			X3DNode .call (this, executionContext .getBrowser (), executionContext);

			this .addType (X3DConstants .LayerSet);

			this .layerNodes      = [ new Layer (executionContext) ];
			this .layerNode0      = this .layerNodes [0];
			this .activeLayerNode = null;
		}

		LayerSet .prototype = $.extend (Object .create (X3DNode .prototype),
		{
			constructor: LayerSet,
			fieldDefinitions: new FieldDefinitionArray ([
				new X3DFieldDefinition (X3DConstants .inputOutput, "metadata",    new SFNode ()),
				new X3DFieldDefinition (X3DConstants .inputOutput, "activeLayer", new SFInt32 ()),
				new X3DFieldDefinition (X3DConstants .inputOutput, "order",       new MFInt32 (0)),
				new X3DFieldDefinition (X3DConstants .inputOutput, "layers",      new MFNode ()),
			]),
			getTypeName: function ()
			{
				return "LayerSet";
			},
			getComponentName: function ()
			{
				return "Layering";
			},
			getContainerField: function ()
			{
				return "children";
			},
			initialize: function ()
			{
				X3DNode .prototype .initialize .call (this);

				this .layerNode0 .setup ();
				this .layerNode0 .isLayer0 (true);

				this .activeLayer_ .addInterest (this, "set_activeLayer");
				this .order_       .addInterest (this, "set_layers");
				this .layers_      .addInterest (this, "set_layers");

				this .set_layers ();
			},
			getActiveLayer: function ()
			{
				return this .activeLayerNode;
			},
			setLayer0: function (value)
			{
				this .layerNode0 = value;

				this .set_layers ();
			},
			getLayer0: function ()
			{
				return this .layerNode0;
			},
			getLayers: function ()
			{
				return this .layerNodes;
			},
			set_activeLayer: function ()
			{
				if (this .activeLayer_ .getValue () === 0)
				{
					if (this .activeLayerNode !== this .layerNode0)
						this .activeLayerNode = this .layerNode0;
				}
				else
				{
					var index = this .activeLayer_ - 1;

					if (index >= 0 && index < this .layers_ .length)
					{
						if (this .activeLayerNode !== this .layers_ [index] .getValue ())
							this .activeLayerNode = this .layers_ [index] .getValue ();
					}
					else
					{
						if (this .activeLayerNode !== null)
							this .activeLayerNode = null;
					}
				}
			},
			set_layers: function ()
			{
				this .layerNodes .length = 0;

				for (var i = 0; i < this .order_ .length; ++ i)
				{
					var index = this .order_ [i];

					if (index === 0)
						this .layerNodes .push (this .layerNode0);
						
					else
					{
						-- index;

						if (index >= 0 && index < this .layers_ .length)
						{
							var layerNode = X3DCast (X3DConstants .X3DLayerNode, this .layers_ [index]);

							if (layerNode)
								this .layerNodes .push (layerNode);
						}
					}
				}

				this .set_activeLayer ();
			},
			bind: function ()
			{
				this .layerNode0 .bind ();

				for (var i = 0; i < this .layers_ .length; ++ i)
				{
					var layer     = this .layers_ [i];
					var layerNode = X3DCast (X3DConstants .X3DLayerNode, layer);

					if (layerNode)
						layerNode .bind ();
				}
			},
			traverse: function (type)
			{
				if (type === TraverseType .POINTER)
				{
					var layerNumber = 0;

					for (var i = 0; i < this .layerNodes .length; ++ i)
					{
						var layerNode = this .layerNodes [i];

						this .getBrowser () .setLayerNumber (layerNumber ++);
						layerNode .traverse (type);
					}
				}
				else
				{
					for (var i = 0; i < this .layerNodes .length; ++ i)
					{
						this .layerNodes [i] .traverse (type);
					}
				}
			},
		});

		return LayerSet;
	}
});



define ('cobweb/Execution/World',[
	"jquery",
	"cobweb/Fields/SFNode",
	"cobweb/Basic/X3DBaseNode",
	"cobweb/Components/Layering/LayerSet",
	"cobweb/Components/Layering/Layer",
	"cobweb/Bits/X3DCast",
	"cobweb/Bits/X3DConstants",
],
function ($, SFNode, X3DBaseNode, LayerSet, Layer, X3DCast, X3DConstants)
{
	function World (executionContext)
	{
		X3DBaseNode .call (this, executionContext .getBrowser (), executionContext);

		this .layerSet        = new LayerSet (executionContext);
		this .defaultLayerSet = this .layerSet;
		this .layer0          = this .layerSet .getLayer0 ();
		
		this .addChildren ("activeLayer", new SFNode (this .layer0));
	}

	World .prototype = $.extend (Object .create (X3DBaseNode .prototype),
	{
		constructor: World,
		getTypeName: function ()
		{
			return "World";
		},
		initialize: function ()
		{
			X3DBaseNode .prototype .initialize .call (this);

			this .layerSet .setup ();
			this .layerSet .activeLayer_ .addInterest (this, "set_activeLayer");

			this .getExecutionContext () .getRootNodes () .addInterest (this, "set_rootNodes");

			this .set_rootNodes (); // This can happen twice when rootNodes is tainted
			this .bind ();
		},
		getLayerSet: function ()
		{
			return this .layerSet;
		},
		getActiveLayer: function ()
		{
			return this .activeLayer_ .getValue ();
		},
		set_rootNodes: function ()
		{
			var oldLayerSet = this .layerSet;
			this .layerSet  = this .defaultLayerSet;

			var rootNodes = this .getExecutionContext () .getRootNodes ();

			this .layer0 .children_ = rootNodes;

			for (var i = 0; i < rootNodes .length; ++ i)
			{
				var rootLayerSet = X3DCast (X3DConstants .LayerSet, rootNodes [i]);

				if (rootLayerSet)
				{
					rootLayerSet .setLayer0 (this .layer0);
					this .layerSet = rootLayerSet;
				}
			}

			if (this .layerSet !== oldLayerSet)
			{
				oldLayerSet    .activeLayer_ .removeInterest (this, "set_activeLayer");
				this .layerSet .activeLayer_ .addInterest    (this, "set_activeLayer");

				this .set_activeLayer ();
			}

			this .traverse = this .layerSet .traverse .bind (this .layerSet);
		},
		set_activeLayer: function ()
		{
			this .activeLayer_ = this .layerSet .getActiveLayer ();
		},
		bind: function ()
		{
			// Bind first X3DBindableNodes found in each layer.

			this .layerSet .bind ();

			// Bind viewpoint from URL.

			try
			{
				var fragment = this .getExecutionContext () .getWorldURL () .fragment;

				if (fragment .length)
					this .getExecutionContext () .changeViewpoint (fragment);
			}
			catch (error)
			{ }
		},
	});

	return World;
});


define ('cobweb/Browser/X3DBrowserContext',[
	"jquery",
	"cobweb/Fields/SFTime",
	"cobweb/Basic/X3DBaseNode",
	"cobweb/Browser/Core/X3DCoreContext",
	"cobweb/Browser/Networking/X3DNetworkingContext",
	"cobweb/Browser/Rendering/X3DRenderingContext",
	"cobweb/Browser/Geometry3D/X3DGeometry3DContext",
	"cobweb/Browser/PointingDeviceSensor/X3DPointingDeviceSensorContext",
	"cobweb/Browser/KeyDeviceSensor/X3DKeyDeviceSensorContext",
	"cobweb/Browser/Navigation/X3DNavigationContext",
	"cobweb/Browser/Layering/X3DLayeringContext",
	"cobweb/Browser/EnvironmentalEffects/X3DEnvironmentalEffectsContext",
	"cobweb/Browser/Lighting/X3DLightingContext",
	"cobweb/Browser/Scripting/X3DScriptingContext",
	"cobweb/Browser/Shaders/X3DShadersContext",
	"cobweb/Browser/Shape/X3DShapeContext",
	"cobweb/Browser/Text/X3DTextContext",
	"cobweb/Browser/Texturing/X3DTexturingContext",
	"cobweb/Browser/Time/X3DTimeContext",
	"cobweb/Routing/X3DRoutingContext",
	"cobweb/Execution/World",
	"cobweb/Bits/TraverseType",
],
function ($,
          SFTime,
          X3DBaseNode,
          X3DCoreContext,
          X3DNetworkingContext,
          X3DRenderingContext,
          X3DGeometry3DContext,
          X3DPointingDeviceSensorContext,
          X3DKeyDeviceSensorContext,
          X3DNavigationContext,
          X3DLayeringContext,
          X3DEnvironmentalEffectsContext,
          X3DLightingContext,
          X3DScriptingContext,
          X3DShadersContext,
          X3DShapeContext,
          X3DTextContext,
          X3DTexturingContext,
          X3DTimeContext,
          X3DRoutingContext,
          World,
          TraverseType)
{
	function X3DBrowserContext (xml)
	{
		X3DBaseNode                    .call (this, this, this);
		X3DCoreContext                 .call (this, xml);
		X3DNetworkingContext           .call (this);
		X3DRenderingContext            .call (this);
		X3DGeometry3DContext           .call (this);
		X3DPointingDeviceSensorContext .call (this);
		X3DKeyDeviceSensorContext      .call (this);
		X3DNavigationContext           .call (this);
		X3DLayeringContext             .call (this);
		X3DEnvironmentalEffectsContext .call (this);
		X3DLightingContext             .call (this);
		X3DScriptingContext            .call (this);
		X3DShadersContext              .call (this);
		X3DShapeContext                .call (this);
		X3DTextContext                 .call (this);
		X3DTexturingContext            .call (this);
		X3DTimeContext                 .call (this);
		X3DRoutingContext              .call (this);

		this .changedTime    = 0;
		this .renderCallback = this .traverse .bind (this);
		this .systemTime     = 0
		this .browserTime    = 0;
		this .cameraTime     = 0;
	};

	X3DBrowserContext .prototype = $.extend (Object .create (X3DBaseNode .prototype),
		X3DCoreContext .prototype,
		X3DNetworkingContext .prototype,
		X3DRenderingContext .prototype,
		X3DGeometry3DContext .prototype,
		X3DPointingDeviceSensorContext .prototype,
		X3DKeyDeviceSensorContext .prototype,
		X3DNavigationContext .prototype,
		X3DLayeringContext .prototype,
		X3DEnvironmentalEffectsContext .prototype,
		X3DLightingContext .prototype,
		X3DScriptingContext .prototype,
		X3DShadersContext .prototype,
		X3DShapeContext .prototype,
		X3DTextContext .prototype,
		X3DTexturingContext .prototype,
		X3DTimeContext .prototype,
		X3DRoutingContext .prototype,
	{
		constructor: X3DBrowserContext,
		initialize: function ()
		{
			this .addChildren ("initialized",   new SFTime (),
			                   "shutdown",      new SFTime (),
			                   "prepareEvents", new SFTime (),
			                   "sensors",       new SFTime (),
			                   "finished",      new SFTime ());

			X3DBaseNode                    .prototype .initialize .call (this);
			X3DCoreContext                 .prototype .initialize .call (this);
			X3DNetworkingContext           .prototype .initialize .call (this);
			X3DRenderingContext            .prototype .initialize .call (this);
			X3DGeometry3DContext           .prototype .initialize .call (this);
			X3DPointingDeviceSensorContext .prototype .initialize .call (this);
			X3DKeyDeviceSensorContext      .prototype .initialize .call (this);
			X3DNavigationContext           .prototype .initialize .call (this);
			X3DLayeringContext             .prototype .initialize .call (this);
			X3DEnvironmentalEffectsContext .prototype .initialize .call (this);
			X3DLightingContext             .prototype .initialize .call (this);
			X3DScriptingContext            .prototype .initialize .call (this);
			X3DShadersContext              .prototype .initialize .call (this);
			X3DShapeContext                .prototype .initialize .call (this);
			X3DTextContext                 .prototype .initialize .call (this);
			X3DTexturingContext            .prototype .initialize .call (this);
			X3DTimeContext                 .prototype .initialize .call (this);
			X3DRoutingContext              .prototype .initialize .call (this);
		},
		initialized: function ()
		{
			return this .initialized_;
		},
		shutdown: function ()
		{
			return this .shutdown_;
		},
		prepareEvents: function ()
		{
			return this .prepareEvents_;
		},
		sensors: function ()
		{
			return this .sensors_;
		},
		finished: function ()
		{
			return this .finished_;
		},
		getWorld: function ()
		{
			return this .world;
		},
		setExecutionContext: function (executionContext)
		{
			this .world = new World (executionContext);
			this .world .setup ();
		},
		getExecutionContext: function ()
		{
			return this .world .getExecutionContext ();
		},
		addBrowserEvent: function ()
		{
			if (this .changedTime === this .getCurrentTime ())
				return;

			this .changedTime = this .getCurrentTime ();

			requestAnimationFrame (this .renderCallback);
		},
		traverse: function (time)
		{
			this .systemTime = performance .now () - this .systemTime;
			var t0 = performance .now ();
			this .advanceTime (time);

			this .prepareEvents_ .processInterests ();
			this .processEvents ();

			var t0 = performance .now ();
			this .world .traverse (TraverseType .CAMERA);
			this .cameraTime = performance .now () - t0;

			this .sensors_ .processInterests ();
			this .processEvents ();

			this .context .clearColor (0, 0, 0, 0);
			this .context .clear (this .context .COLOR_BUFFER_BIT);

			this .world .traverse (TraverseType .DISPLAY);
			this .browserTime = performance .now () - t0;
			this .systemTime  = performance .now ();

			this .finished_ .processInterests ();
		},
	});

	return X3DBrowserContext;
});


define ('cobweb/Components/PointingDeviceSensor/X3DPointingDeviceSensorNode',[
	"jquery",
	"cobweb/Components/Core/X3DSensorNode",
	"cobweb/Bits/X3DConstants",
	"standard/Math/Numbers/Vector4",
	"standard/Math/Numbers/Matrix4",
],
function ($,
          X3DSensorNode, 
          X3DConstants,
          Vector4,
          Matrix4)
{
	function X3DPointingDeviceSensorNode (browser, executionContext)
	{
		X3DSensorNode .call (this, browser, executionContext);

		this .addType (X3DConstants .X3DPointingDeviceSensorNode);
	}

	X3DPointingDeviceSensorNode .prototype = $.extend (Object .create (X3DSensorNode .prototype),
	{
		constructor: X3DPointingDeviceSensorNode,
		initialize: function ()
		{
			X3DSensorNode .prototype .initialize .call (this);

			this .enabled_ .addInterest (this, "set_enabled__");

			this .matrices = { };
		},
		getMatrices: function ()
		{
			return this .matrices;
		},
		set_enabled__: function ()
		{
			if (this .enabled_ .getValue ())
				return;

			if (this .isActive_ .getValue ())
				this .isActive_ = false;

			if (this .isOver_ .getValue ())
				this .isOver_ = false;
		},
		set_over__: function (hit, value)
		{
			if (value !== this .isOver_ .getValue ())
			{
				this .isOver_ = value;

				if (this .isOver_ .getValue ())
					this .getBrowser () .getNotification () .string_ = this .description_;
			}
		},
		set_active__: function (hit, value)
		{
			if (value !== this .isActive_ .getValue ())
				this .isActive_ = value;
		},
		push: function ()
		{
			if (this .enabled_ .getValue ())
			{
				var
					currentLayer = this .getCurrentLayer (),
					sensors      = this .getBrowser () .getSensors ();

				sensors [sensors .length - 1] [this .getId ()] = this;

				// Create a matrix set for each layer if needed.

				if (! (currentLayer .getId () in this .matrices))
				{
					this .matrices [currentLayer .getId ()] = {
						modelViewMatrix:  new Matrix4 (),
						projectionMatrix: new Matrix4 (),
						viewport:         new Vector4 (),
					};
				}

				var matrices = this .matrices [currentLayer .getId ()];

				matrices .modelViewMatrix .assign (this .getBrowser () .getModelViewMatrix () .get ());
				matrices .projectionMatrix .assign (this .getBrowser () .getProjectionMatrix ());
				matrices .viewport .assign (currentLayer .getViewport () .getRectangle ());
			}
		},
	});

	return X3DPointingDeviceSensorNode;
});



define ('cobweb/Components/PointingDeviceSensor/X3DTouchSensorNode',[
	"jquery",
	"cobweb/Components/PointingDeviceSensor/X3DPointingDeviceSensorNode",
	"cobweb/Bits/X3DConstants",
],
function ($,
          X3DPointingDeviceSensorNode, 
          X3DConstants)
{
	function X3DTouchSensorNode (browser, executionContext)
	{
		X3DPointingDeviceSensorNode .call (this, browser, executionContext);

		this .addType (X3DConstants .X3DTouchSensorNode);
	}

	X3DTouchSensorNode .prototype = $.extend (Object .create (X3DPointingDeviceSensorNode .prototype),
	{
		constructor: X3DTouchSensorNode,
		set_active__: function (hit, value)
		{
			X3DPointingDeviceSensorNode .prototype .set_active__ .call (this, hit, value);

			if (this .enabled_ .getValue () && this .isOver_ .getValue () && ! value)
				this .touchTime_ = this .getBrowser () .getCurrentTime ();
		},
	});

	return X3DTouchSensorNode;
});



define ('cobweb/Components/PointingDeviceSensor/TouchSensor',[
	"jquery",
	"cobweb/Fields",
	"cobweb/Basic/X3DFieldDefinition",
	"cobweb/Basic/FieldDefinitionArray",
	"cobweb/Components/PointingDeviceSensor/X3DTouchSensorNode",
	"cobweb/Bits/X3DConstants",
	"standard/Math/Numbers/Vector2",
	"standard/Math/Numbers/Matrix4",
],
function ($,
          Fields,
          X3DFieldDefinition,
          FieldDefinitionArray,
          X3DTouchSensorNode, 
          X3DConstants,
          Vector2,
          Matrix4)
{
	with (Fields)
	{
		function TouchSensor (executionContext)
		{
			X3DTouchSensorNode .call (this, executionContext .getBrowser (), executionContext);

			this .addType (X3DConstants .TouchSensor);
		}

		TouchSensor .prototype = $.extend (Object .create (X3DTouchSensorNode .prototype),
		{
			constructor: TouchSensor,
			fieldDefinitions: new FieldDefinitionArray ([
				new X3DFieldDefinition (X3DConstants .inputOutput, "metadata",            new SFNode ()),
				new X3DFieldDefinition (X3DConstants .inputOutput, "enabled",             new SFBool (true)),
				new X3DFieldDefinition (X3DConstants .inputOutput, "description",         new SFString ("")),
				new X3DFieldDefinition (X3DConstants .outputOnly,  "hitTexCoord_changed", new SFVec2f ()),
				new X3DFieldDefinition (X3DConstants .outputOnly,  "hitNormal_changed",   new SFVec3f ()),
				new X3DFieldDefinition (X3DConstants .outputOnly,  "hitPoint_changed",    new SFVec3f ()),
				new X3DFieldDefinition (X3DConstants .outputOnly,  "isOver",              new SFBool ()),
				new X3DFieldDefinition (X3DConstants .outputOnly,  "isActive",            new SFBool ()),
				new X3DFieldDefinition (X3DConstants .outputOnly,  "touchTime",           new SFTime ()),
			]),
			getTypeName: function ()
			{
				return "TouchSensor";
			},
			getComponentName: function ()
			{
				return "PointingDeviceSensor";
			},
			getContainerField: function ()
			{
				return "children";
			},
			set_over__: function (hit, value)
			{
				try
				{
					X3DTouchSensorNode .prototype .set_over__ .call (this, hit, value);

					if (this .isOver_ .getValue ())
					{
						var
							intersection       = hit .intersection,
							modelViewMatrix    = this .getMatrices () [hit .layer .getId ()] .modelViewMatrix,
							invModelViewMatrix = Matrix4 .inverse (modelViewMatrix);

						this .hitTexCoord_changed_ = intersection .texCoord;
						this .hitNormal_changed_   = modelViewMatrix .multMatrixDir (intersection .normal .copy ()) .normalize ();
						this .hitPoint_changed_    = invModelViewMatrix .multVecMatrix (intersection .point .copy ());
					}
				}
				catch (error)
				{
					console .log (error);
				}
			},
		});

		return TouchSensor;
	}
});



define ('cobweb/Components/Networking/Anchor',[
	"jquery",
	"cobweb/Fields",
	"cobweb/Basic/X3DFieldDefinition",
	"cobweb/Basic/FieldDefinitionArray",
	"cobweb/Components/Grouping/X3DGroupingNode",
	"cobweb/Components/Networking/X3DUrlObject",
	"cobweb/Components/PointingDeviceSensor/TouchSensor",
	"cobweb/Bits/TraverseType",
	"cobweb/Bits/X3DConstants",
	"cobweb/InputOutput/Loader",
],
function ($,
          Fields,
          X3DFieldDefinition,
          FieldDefinitionArray,
          X3DGroupingNode,
          X3DUrlObject,
          TouchSensor,
          TraverseType,
          X3DConstants,
          Loader)
{
	with (Fields)
	{
		function Anchor (executionContext)
		{
			X3DGroupingNode .call (this, executionContext .getBrowser (), executionContext);
			X3DUrlObject    .call (this, executionContext .getBrowser (), executionContext);

			this .addType (X3DConstants .Anchor);
		}

		Anchor .prototype = $.extend (Object .create (X3DGroupingNode .prototype),
			X3DUrlObject .prototype,
		{
			constructor: Anchor,
			fieldDefinitions: new FieldDefinitionArray ([
				new X3DFieldDefinition (X3DConstants .inputOutput,    "metadata",       new SFNode ()),
				new X3DFieldDefinition (X3DConstants .inputOutput,    "description",    new SFString ("")),
				new X3DFieldDefinition (X3DConstants .inputOutput,    "url",            new MFString ()),
				new X3DFieldDefinition (X3DConstants .inputOutput,    "parameter",      new MFString ()),
				new X3DFieldDefinition (X3DConstants .initializeOnly, "bboxSize",       new SFVec3f (-1, -1, -1)),
				new X3DFieldDefinition (X3DConstants .initializeOnly, "bboxCenter",     new SFVec3f (0, 0, 0)),
				new X3DFieldDefinition (X3DConstants .inputOnly,      "addChildren",    new MFNode ()),
				new X3DFieldDefinition (X3DConstants .inputOnly,      "removeChildren", new MFNode ()),
				new X3DFieldDefinition (X3DConstants .inputOutput,    "children",       new MFNode ()),
			]),
			getTypeName: function ()
			{
				return "Anchor";
			},
			getComponentName: function ()
			{
				return "Networking";
			},
			getContainerField: function ()
			{
				return "children";
			},
			initialize: function ()
			{
				X3DGroupingNode .prototype .initialize .call (this);
				X3DUrlObject    .prototype .initialize .call (this);

				this .touchSensorNode = new TouchSensor (this .getExecutionContext ());

				this .touchSensorNode .touchTime_ .addInterest (this, "requestAsyncLoad");
				this .description_ .addFieldInterest (this .touchSensorNode .description_);

				this .touchSensorNode .description_ = this .description_;
				this .touchSensorNode .setup ();
			},
			requestAsyncLoad: function ()
			{
				this .setLoadState (X3DConstants .IN_PROGRESS_STATE, false);

				new Loader (this) .createX3DFromURL (this .url_, /*this .parameter_,*/
				function (scene)
				{
					if (scene)
					{
						this .getBrowser () .replaceWorld (scene);
						this .setLoadState (X3DConstants .COMPLETE_STATE, false);
					}
					else
						this .setLoadState (X3DConstants .FAILED_STATE, false);		
				}
				.bind (this),
				function (fragment)
				{
					this .getExecutionContext () .changeViewpoint (fragment);
					this .setLoadState (X3DConstants .COMPLETE_STATE, false);
				}
				.bind (this));
			},
			traverse: function (type)
			{
				if (type === TraverseType .POINTER)
				{
					this .getBrowser () .getSensors () .push ({ });
					this .touchSensorNode .push ();

					X3DGroupingNode .prototype .traverse .call (this, type);

					this .getBrowser () .getSensors () .pop ();
				}
				else
					X3DGroupingNode .prototype .traverse .call (this, type);
			},
		});

		return Anchor;
	}
});



define ('cobweb/Components/Sound/X3DSoundSourceNode',[
	"jquery",
	"cobweb/Components/Core/X3DChildNode",
	"cobweb/Components/Time/X3DTimeDependentNode",
	"cobweb/Bits/X3DConstants",
],
function ($,
          X3DChildNode,
          X3DTimeDependentNode,
          X3DConstants)
{
	function X3DSoundSourceNode (browser, executionContext)
	{
		X3DChildNode         .call (this, browser, executionContext);
		X3DTimeDependentNode .call (this, browser, executionContext);

		this .addType (X3DConstants .X3DSoundSourceNode);

		this .media = null;
	}

	X3DSoundSourceNode .prototype = $.extend (Object .create (X3DChildNode .prototype),
		X3DTimeDependentNode .prototype,
	{
		constructor: X3DSoundSourceNode,
		initialize: function ()
		{
		   X3DChildNode         .prototype .initialize .call (this);
			X3DTimeDependentNode .prototype .initialize .call (this);
		},
		setMedia: function (value)
		{
		   if (this .media)
		   {
		      this .media [0] .volume = 0;
		      this .media [0] .pause ();
		      this .media .unbind ("ended");
		   }

		   this .media = value;

		   if (this .media)
		   {
		      this .media [0] .volume = 0;
		      this .duration_changed_ = this .media [0] .duration;

			   if (this .isActive_ .getValue ())
			   {
					this .media [0] .currentTime = this .getElapsedTime () % this .media [0] .duration;

					if (! this .isPaused_ .getValue ())
					{							
						if (this .speed_ .getValue ())
						{
							this .media .bind ("ended", this .set_ended .bind (this));
							this .media [0] .currentTime = this .getElapsedTime ();
							this .media [0] .play ();
						}
					}
				}
			}
		},
		getMedia: function (value)
		{
		   return this .media;
		},
		setVolume: function (value)
		{
		   if (this .media)
			   this .media [0] .volume = value;
		},
		set_speed: function ()
		{ },
		set_pitch: function ()
		{ },
		set_start: function ()
		{
		   if (this .media)
		   {
				if (this .speed_ .getValue ())
				{
					this .media .bind ("ended", this .set_ended .bind (this));
				   this .media [0] .currentTime = 0;
					this .media [0] .play ();
				}
			}
		},
		set_pause: function ()
		{
		   if (this .media)
		   {
		      this .media .unbind ("ended");
				this .media [0] .pause ();
			}
		},
		set_resume: function ()
		{
		   if (this .media)
		   {
				if (this .speed_ .getValue ())
				{
					this .media .bind ("ended", this .set_ended .bind (this));
					this .media [0] .play ();
				}
			}
		},
		set_stop: function ()
		{
		   if (this .media)
			{
		      this .media .unbind ("ended");
				this .media [0] .pause ();
			}
		},
		set_ended: function ()
		{
		   if (this .media)
		   {
				if (this .loop_ .getValue ())
				{
					if (this .speed_ .getValue ())
						this .media [0] .play ();

					// The event order below is very important.

					this .elapsedTime_ = this .getElapsedTime ();
					this .cycleTime_   = this .getBrowser () .getCurrentTime ();
				}
				else
					this .stop ();
			}
		},
		prepareEvents: function ()
		{
			this .elapsedTime_ = this .getElapsedTime ();
		},
	});

	return X3DSoundSourceNode;
});


define ('cobweb/Components/Sound/AudioClip',[
	"jquery",
	"cobweb/Fields",
	"cobweb/Basic/X3DFieldDefinition",
	"cobweb/Basic/FieldDefinitionArray",
	"cobweb/Components/Sound/X3DSoundSourceNode",
	"cobweb/Components/Networking/X3DUrlObject",
	"cobweb/Bits/X3DConstants",
	"standard/Networking/URI",
],
function ($,
          Fields,
          X3DFieldDefinition,
          FieldDefinitionArray,
          X3DSoundSourceNode, 
          X3DUrlObject, 
          X3DConstants,
          URI)
{
	with (Fields)
	{
		function AudioClip (executionContext)
		{
			X3DSoundSourceNode .call (this, executionContext .getBrowser (), executionContext);
			X3DUrlObject       .call (this, executionContext .getBrowser (), executionContext);

			this .addType (X3DConstants .AudioClip);

			this .urlStack = new MFString ();
		}

		AudioClip .prototype = $.extend (Object .create (X3DSoundSourceNode .prototype),
			X3DUrlObject .prototype,
		{
			constructor: AudioClip,
			fieldDefinitions: new FieldDefinitionArray ([
				new X3DFieldDefinition (X3DConstants .inputOutput, "metadata",         new SFNode ()),
				new X3DFieldDefinition (X3DConstants .inputOutput, "enabled",          new SFBool (true)),
				new X3DFieldDefinition (X3DConstants .inputOutput, "description",      new SFString ("")),
				new X3DFieldDefinition (X3DConstants .inputOutput, "url",              new MFString ()),
				new X3DFieldDefinition (X3DConstants .inputOutput, "speed",            new SFFloat (1)),
				new X3DFieldDefinition (X3DConstants .inputOutput, "pitch",            new SFFloat (1)),
				new X3DFieldDefinition (X3DConstants .inputOutput, "loop",             new SFBool (false)),
				new X3DFieldDefinition (X3DConstants .inputOutput, "startTime",        new SFTime ()),
				new X3DFieldDefinition (X3DConstants .inputOutput, "pauseTime",        new SFTime ()),
				new X3DFieldDefinition (X3DConstants .inputOutput, "resumeTime",       new SFTime ()),
				new X3DFieldDefinition (X3DConstants .inputOutput, "stopTime",         new SFTime ()),
				new X3DFieldDefinition (X3DConstants .outputOnly,  "isPaused",         new SFBool ()),
				new X3DFieldDefinition (X3DConstants .outputOnly,  "isActive",         new SFBool ()),
				new X3DFieldDefinition (X3DConstants .outputOnly,  "cycleTime",        new SFTime ()),
				new X3DFieldDefinition (X3DConstants .outputOnly,  "elapsedTime",      new SFTime ()),
				new X3DFieldDefinition (X3DConstants .outputOnly,  "duration_changed", new SFTime (-1)),
			]),
			getTypeName: function ()
			{
				return "AudioClip";
			},
			getComponentName: function ()
			{
				return "Sound";
			},
			getContainerField: function ()
			{
				return "source";
			},
			initialize: function ()
			{
				X3DSoundSourceNode .prototype .initialize .call (this);
				X3DUrlObject       .prototype .initialize .call (this);

				this .url_ .addInterest (this, "set_url__");

				this .audio = $("<audio>");
				this .audio .error (this .setError .bind (this));
				this .audio .bind ("abort", this .setError .bind (this));
				this .audio .attr ("preload", "auto");
				this .audio .attr ("volume", 0);
				this .audio .attr ("crossOrigin", "anonymous");

				this .requestAsyncLoad ();
			},
			set_url__: function ()
			{
				this .setLoadState (X3DConstants .NOT_STARTED_STATE);

				this .requestAsyncLoad ();
			},
			requestAsyncLoad: function ()
			{
				if (this .checkLoadState () === X3DConstants .COMPLETE_STATE || this .checkLoadState () === X3DConstants .IN_PROGRESS_STATE)
					return;

				this .setLoadState (X3DConstants .IN_PROGRESS_STATE);

				this .setMedia (null);
				this .urlStack .setValue (this .url_);
				this .audio .bind ("canplaythrough", this .setAudio .bind (this));
				this .loadNext ();
			},
			loadNext: function ()
			{
				if (this .urlStack .length === 0)
				{
				   this .duration_changed_ = -1;
					this .setLoadState (X3DConstants .FAILED_STATE);
					return;
				}

				// Get URL.

				this .URL = new URI (this .urlStack .shift ());
				this .URL = this .getExecutionContext () .getWorldURL () .transform (this .URL);
				// In Firefox we don't need getRelativePath if there is a file scheme, do we in Chrome???
	
				this .audio .attr ("src", this .URL);
			},
			setError: function ()
			{
				console .warn ("Error loading audio:", this .URL .toString ());
				this .loadNext ();
			},
			setAudio: function ()
			{
			   // Everything is fine.
				
				this .audio .unbind ("canplaythrough");
				this .setMedia (this .audio);
				this .setLoadState (X3DConstants .COMPLETE_STATE);
			},
		});

		return AudioClip;
	}
});



define ('cobweb/Components/Navigation/Billboard',[
	"jquery",
	"cobweb/Fields",
	"cobweb/Basic/X3DFieldDefinition",
	"cobweb/Basic/FieldDefinitionArray",
	"cobweb/Components/Grouping/X3DGroupingNode",
	"cobweb/Bits/X3DConstants",
	"standard/Math/Numbers/Vector3",
	"standard/Math/Numbers/Rotation4",
	"standard/Math/Numbers/Matrix4",
],
function ($,
          Fields,
          X3DFieldDefinition,
          FieldDefinitionArray,
          X3DGroupingNode, 
          X3DConstants,
          Vector3,
          Rotation4,
          Matrix4)
{
	with (Fields)
	{
		var xAxis = new Vector3 (1, 0, 0);
		var yAxis = new Vector3 (0, 1, 0);
		var zAxis = new Vector3 (0, 0, 1);

		function Billboard (executionContext)
		{
			X3DGroupingNode .call (this, executionContext .getBrowser (), executionContext);

			this .addType (X3DConstants .Billboard);
			
			this .matrix = new Matrix4 ();
		}

		Billboard .prototype = $.extend (Object .create (X3DGroupingNode .prototype),
		{
			constructor: Billboard,
			fieldDefinitions: new FieldDefinitionArray ([
				new X3DFieldDefinition (X3DConstants .inputOutput,    "metadata",       new SFNode ()),
				new X3DFieldDefinition (X3DConstants .inputOutput,    "axisOfRotation", new SFVec3f (0, 1, 0)),
				new X3DFieldDefinition (X3DConstants .initializeOnly, "bboxSize",       new SFVec3f (-1, -1, -1)),
				new X3DFieldDefinition (X3DConstants .initializeOnly, "bboxCenter",     new SFVec3f (0, 0, 0)),
				new X3DFieldDefinition (X3DConstants .inputOnly,      "addChildren",    new MFNode ()),
				new X3DFieldDefinition (X3DConstants .inputOnly,      "removeChildren", new MFNode ()),
				new X3DFieldDefinition (X3DConstants .inputOutput,    "children",       new MFNode ()),
			]),
			getTypeName: function ()
			{
				return "Billboard";
			},
			getComponentName: function ()
			{
				return "Navigation";
			},
			getContainerField: function ()
			{
				return "children";
			},
			rotate: function (type)
			{
				try
				{
					var inverseModelViewMatrix = this .getModelViewMatrix (type) .inverse ();
					var billboardToViewer      = inverseModelViewMatrix .origin .normalize ();       // Normalized to get work with Geo

					if (this .axisOfRotation_ .getValue () .equals (Vector3 .Zero))
					{
						var viewerYAxis = inverseModelViewMatrix .multDirMatrix (yAxis .copy ()) .normalize (); // Normalized to get work with Geo

						var
							x = Vector3 .cross (viewerYAxis, billboardToViewer),
							y = Vector3 .cross (billboardToViewer, x),
							z = billboardToViewer;

						// Compose rotation

						x .normalize ();
						y .normalize ();

						this .matrix = new Matrix4 (x [0], x [1], x [2], 0,
						                            y [0], y [1], y [2], 0,
						                            z [0], z [1], z [2], 0,
						                            0,     0,     0,     1);
					}
					else
					{
						var
							N1 = Vector3 .cross (this .axisOfRotation_ .getValue (), billboardToViewer), // Normal vector of plane as in specification
							N2 = Vector3 .cross (this .axisOfRotation_ .getValue (), zAxis);             // Normal vector of plane between axisOfRotation and zAxis

						this .matrix = new Matrix4 .Rotation (new Rotation4 (N2, N1));                   // Rotate zAxis in plane
					}

					this .getBrowser () .getModelViewMatrix () .multLeft (this .matrix);
				}
				catch (error)
				{ }
			},
			traverse: function (type)
			{
				this .getBrowser () .getModelViewMatrix () .push ();
				this .rotate (type);

				X3DGroupingNode .prototype .traverse .call (this, type);

				this .getBrowser () .getModelViewMatrix () .pop ();
			},
		});

		return Billboard;
	}
});



define ('cobweb/Components/Geometry3D/Box',[
	"jquery",
	"cobweb/Fields",
	"cobweb/Basic/X3DFieldDefinition",
	"cobweb/Basic/FieldDefinitionArray",
	"cobweb/Components/Rendering/X3DGeometryNode",
	"cobweb/Bits/X3DConstants",
	"standard/Math/Numbers/Vector3",
],
function ($,
          Fields,
          X3DFieldDefinition,
          FieldDefinitionArray,
          X3DGeometryNode,
          X3DConstants,
          Vector3)
{
	with (Fields)
	{
		function Box (executionContext)
		{
			X3DGeometryNode .call (this, executionContext .getBrowser (), executionContext);

			this .addType (X3DConstants .Box);
		}

		Box .prototype = $.extend (Object .create (X3DGeometryNode .prototype),
		{
			constructor: Box,
			fieldDefinitions: new FieldDefinitionArray ([
				new X3DFieldDefinition (X3DConstants .inputOutput,    "metadata", new SFNode ()),
				new X3DFieldDefinition (X3DConstants .initializeOnly, "size",     new SFVec3f (2, 2, 2)),
				new X3DFieldDefinition (X3DConstants .initializeOnly, "solid",    new SFBool (true)),
			]),
			getTypeName: function ()
			{
				return "Box";
			},
			getComponentName: function ()
			{
				return "Geometry3D";
			},
			getContainerField: function ()
			{
				return "geometry";
			},
			build: function ()
			{
				var
					options = this .getBrowser () .getBoxOptions (),
					size    = this .size_ .getValue ();

				this .setNormals   (options .getGeometry () .getNormals ());
				this .setTexCoords (options .getGeometry () .getTexCoords ());

				if (size .equals (new Vector3 (2, 2, 2)))
				{
					this .setVertices (options .getGeometry () .getVertices ());
					this .setExtents  (options .getGeometry () .getExtents ());
				}
				else
				{
					var
						scale           = Vector3 .divide (size, 2),
						x               = scale .x,
						y               = scale .y,
						z               = scale .z,
						defaultVertices = options .getGeometry () .getVertices (),
						vertices        = this .getVertices ();

					for (var i = 0; i < defaultVertices .length; i += 4)
					{
						vertices .push (x * defaultVertices [i],
						                y * defaultVertices [i + 1],
						                z * defaultVertices [i + 2],
						                1);
					}

					this .setVertices (vertices);
					this .setExtents  ([Vector3 .negate (scale), scale]);	
				}

				this .setSolid (this .solid_ .getValue ());
				this .setCurrentTexCoord (null);
			},
		});

		return Box;
	}
});


define ('cobweb/Components/Navigation/Collision',[
	"jquery",
	"cobweb/Fields",
	"cobweb/Basic/X3DFieldDefinition",
	"cobweb/Basic/FieldDefinitionArray",
	"cobweb/Components/Grouping/X3DGroupingNode",
	"cobweb/Components/Core/X3DSensorNode",
	"cobweb/Bits/X3DConstants",
],
function ($,
          Fields,
          X3DFieldDefinition,
          FieldDefinitionArray,
          X3DGroupingNode, 
          X3DSensorNode, 
          X3DConstants)
{
	with (Fields)
	{
		function Collision (executionContext)
		{
			X3DGroupingNode .call (this, executionContext .getBrowser (), executionContext);
			X3DSensorNode   .call (this, executionContext .getBrowser (), executionContext);

			this .addType (X3DConstants .Collision);

			this .addAlias ("collide", this .enabled_);
		}

		Collision .prototype = $.extend (Object .create (X3DGroupingNode .prototype),
			X3DSensorNode .prototype,
		{
			constructor: Collision,
			fieldDefinitions: new FieldDefinitionArray ([
				new X3DFieldDefinition (X3DConstants .inputOutput,    "metadata",       new SFNode ()),
				new X3DFieldDefinition (X3DConstants .inputOutput,    "enabled",        new SFBool (true)),
				new X3DFieldDefinition (X3DConstants .outputOnly,     "isActive",       new SFBool ()),
				new X3DFieldDefinition (X3DConstants .outputOnly,     "collideTime",    new SFTime ()),
				new X3DFieldDefinition (X3DConstants .initializeOnly, "bboxSize",       new SFVec3f (-1, -1, -1)),
				new X3DFieldDefinition (X3DConstants .initializeOnly, "bboxCenter",     new SFVec3f (0, 0, 0)),
				new X3DFieldDefinition (X3DConstants .initializeOnly, "proxy",          new SFNode ()),
				new X3DFieldDefinition (X3DConstants .inputOnly,      "addChildren",    new MFNode ()),
				new X3DFieldDefinition (X3DConstants .inputOnly,      "removeChildren", new MFNode ()),
				new X3DFieldDefinition (X3DConstants .inputOutput,    "children",       new MFNode ()),
			]),
			getTypeName: function ()
			{
				return "Collision";
			},
			getComponentName: function ()
			{
				return "Navigation";
			},
			getContainerField: function ()
			{
				return "children";
			},
			initialize: function ()
			{
				X3DGroupingNode .prototype .initialize .call (this);
				X3DSensorNode   .prototype .initialize .call (this);
			},
			traverse: function (type)
			{
				X3DGroupingNode .prototype .traverse .call (this, type);
			},
		});

		return Collision;
	}
});



define ('cobweb/Components/Rendering/X3DColorNode',[
	"jquery",
	"cobweb/Components/Rendering/X3DGeometricPropertyNode",
	"cobweb/Bits/X3DConstants",
],
function ($,
          X3DGeometricPropertyNode, 
          X3DConstants)
{
	function X3DColorNode (browser, executionContext)
	{
		X3DGeometricPropertyNode .call (this, browser, executionContext);

		this .addType (X3DConstants .X3DColorNode);
	}

	X3DColorNode .prototype = $.extend (Object .create (X3DGeometricPropertyNode .prototype),
	{
		constructor: X3DColorNode,
	});

	return X3DColorNode;
});



define ('cobweb/Components/Rendering/Color',[
	"jquery",
	"cobweb/Fields",
	"cobweb/Basic/X3DFieldDefinition",
	"cobweb/Basic/FieldDefinitionArray",
	"cobweb/Components/Rendering/X3DColorNode",
	"cobweb/Bits/X3DConstants",
	"standard/Math/Numbers/Color3",
],
function ($,
          Fields,
          X3DFieldDefinition,
          FieldDefinitionArray,
          X3DColorNode, 
          X3DConstants,
          Color3)
{
	with (Fields)
	{
		function Color (executionContext)
		{
			X3DColorNode .call (this, executionContext .getBrowser (), executionContext);

			this .addType (X3DConstants .Color);
		}

		Color .prototype = $.extend (Object .create (X3DColorNode .prototype),
		{
			constructor: Color,
			fieldDefinitions: new FieldDefinitionArray ([
				new X3DFieldDefinition (X3DConstants .inputOutput, "metadata", new SFNode ()),
				new X3DFieldDefinition (X3DConstants .inputOutput, "color",    new MFColor ()),
			]),
			getTypeName: function ()
			{
				return "Color";
			},
			getComponentName: function ()
			{
				return "Rendering";
			},
			getContainerField: function ()
			{
				return "color";
			},
			isTransparent: function ()
			{
				return false;
			},
			getColor: function (index)
			{
				if (index < this .color_ .length)
					return this .color_ [index] .getValue ();

				return new Color3 (1, 1, 1);
			},
		});

		return Color;
	}
});



define ('cobweb/Components/Interpolation/ColorInterpolator',[
	"jquery",
	"cobweb/Fields",
	"cobweb/Basic/X3DFieldDefinition",
	"cobweb/Basic/FieldDefinitionArray",
	"cobweb/Components/Interpolation/X3DInterpolatorNode",
	"cobweb/Bits/X3DConstants",
	"standard/Math/Numbers/Color3",
],
function ($,
          Fields,
          X3DFieldDefinition,
          FieldDefinitionArray,
          X3DInterpolatorNode, 
          X3DConstants,
          Color3)
{
	with (Fields)
	{
		function ColorInterpolator (executionContext)
		{
			X3DInterpolatorNode .call (this, executionContext .getBrowser (), executionContext);

			this .addType (X3DConstants .ColorInterpolator);

			this .hsv = [ ];
		}

		ColorInterpolator .prototype = $.extend (Object .create (X3DInterpolatorNode .prototype),
		{
			constructor: ColorInterpolator,
			fieldDefinitions: new FieldDefinitionArray ([
				new X3DFieldDefinition (X3DConstants .inputOutput, "metadata",      new SFNode ()),
				new X3DFieldDefinition (X3DConstants .inputOnly,   "set_fraction",  new SFFloat ()),
				new X3DFieldDefinition (X3DConstants .inputOutput, "key",           new MFFloat ()),
				new X3DFieldDefinition (X3DConstants .inputOutput, "keyValue",      new MFColor ()),
				new X3DFieldDefinition (X3DConstants .outputOnly,  "value_changed", new SFColor ()),
			]),
			value: [ ],
			getTypeName: function ()
			{
				return "ColorInterpolator";
			},
			getComponentName: function ()
			{
				return "Interpolation";
			},
			getContainerField: function ()
			{
				return "children";
			},
			initialize: function ()
			{
				X3DInterpolatorNode .prototype .initialize .call (this);

				this .keyValue_ .addInterest (this, "set_keyValue__");
			},
			set_keyValue__: function ()
			{
				var keyValue = this .keyValue_ .getValue ();
			
				if (keyValue .length < this .key_ .length)
					this .keyValue_ .resize (this .key_ .length, keyValue .length ? keyValue [this .keyValue_ .length - 1] : new SFColor ());

				this .hsv .length = 0;

				for (var i = 0, length = keyValue .length; i < length; ++ i)
					this .hsv .push (keyValue [i] .getHSV ());
			},
			interpolate: function (index0, index1, weight)
			{
				var value = Color3 .lerp (this .hsv [index0], this .hsv [index1], weight, this .value);

				this .value_changed_ .setHSV (value [0], value [1], value [2]);
			},
		});

		return ColorInterpolator;
	}
});



define ('cobweb/Components/Rendering/ColorRGBA',[
	"jquery",
	"cobweb/Fields",
	"cobweb/Basic/X3DFieldDefinition",
	"cobweb/Basic/FieldDefinitionArray",
	"cobweb/Components/Rendering/X3DColorNode",
	"cobweb/Bits/X3DConstants",
	"standard/Math/Numbers/Color4",
],
function ($,
          Fields,
          X3DFieldDefinition,
          FieldDefinitionArray,
          X3DColorNode, 
          X3DConstants,
          Color4)
{
	with (Fields)
	{
		function ColorRGBA (executionContext)
		{
			X3DColorNode .call (this, executionContext .getBrowser (), executionContext);

			this .addType (X3DConstants .ColorRGBA);
		}

		ColorRGBA .prototype = $.extend (Object .create (X3DColorNode .prototype),
		{
			constructor: ColorRGBA,
			fieldDefinitions: new FieldDefinitionArray ([
				new X3DFieldDefinition (X3DConstants .inputOutput, "metadata", new SFNode ()),
				new X3DFieldDefinition (X3DConstants .inputOutput, "color",    new MFColorRGBA ()),
			]),
			getTypeName: function ()
			{
				return "ColorRGBA";
			},
			getComponentName: function ()
			{
				return "Rendering";
			},
			getContainerField: function ()
			{
				return "color";
			},
			isTransparent: function ()
			{
				return true;
			},
			getColor: function (index)
			{
				if (index < this .color_ .length)
					return this .color_ [index] .getValue ();
		
				return new Color4 (1, 1, 1, 1);
			},
		});

		return ColorRGBA;
	}
});



define ('cobweb/Components/Geometry3D/Cone',[
	"jquery",
	"cobweb/Fields",
	"cobweb/Basic/X3DFieldDefinition",
	"cobweb/Basic/FieldDefinitionArray",
	"cobweb/Components/Rendering/X3DGeometryNode",
	"cobweb/Bits/X3DConstants",
	"standard/Math/Numbers/Complex",
	"standard/Math/Numbers/Vector2",
	"standard/Math/Numbers/Vector3",
],
function ($,
          Fields,
          X3DFieldDefinition,
          FieldDefinitionArray,
          X3DGeometryNode, 
          X3DConstants,
          Complex,
          Vector2,
          Vector3)
{
	with (Fields)
	{
		function Cone (executionContext)
		{
			X3DGeometryNode .call (this, executionContext .getBrowser (), executionContext);

			this .addType (X3DConstants .Cone);
		}

		Cone .prototype = $.extend (Object .create (X3DGeometryNode .prototype),
		{
			constructor: Cone,
			fieldDefinitions: new FieldDefinitionArray ([
				new X3DFieldDefinition (X3DConstants .inputOutput,    "metadata",     new SFNode ()),
				new X3DFieldDefinition (X3DConstants .initializeOnly, "side",         new SFBool (true)),
				new X3DFieldDefinition (X3DConstants .initializeOnly, "bottom",       new SFBool (true)),
				new X3DFieldDefinition (X3DConstants .initializeOnly, "height",       new SFFloat (2)),
				new X3DFieldDefinition (X3DConstants .initializeOnly, "bottomRadius", new SFFloat (1)),
				new X3DFieldDefinition (X3DConstants .initializeOnly, "solid",        new SFBool (true)),
			]),
			getTypeName: function ()
			{
				return "Cone";
			},
			getComponentName: function ()
			{
				return "Geometry3D";
			},
			getContainerField: function ()
			{
				return "geometry";
			},
			build: function ()
			{
				var
					options      = this .getBrowser () .getConeOptions (),
					vDimension   = options .vDimension_ .getValue (),
					height       = this .height_ .getValue (),
					bottomRadius = this .bottomRadius_ .getValue (),
					texCoords    = [ ],
					normals      = this .getNormals (),
					vertices     = this .getVertices ();

				this .getTexCoords () .push (texCoords);

				var
					y1 = height / 2,
					y2 = -y1,
					nz = Complex .Polar (1, -Math .PI / 2 + Math .atan (bottomRadius / height));

				if (this .side_ .getValue ())
				{
					for (var i = 0; i < vDimension; ++ i)
					{
						var
							u1     = (i + 0.5) / vDimension,
							theta1 = 2 * Math .PI * u1,
							n1     = Complex .Polar (nz .imag, theta1);

						var
							u2     = i / vDimension,
							theta2 = 2 * Math .PI * u2,
							p2     = Complex .Polar (-bottomRadius, theta2),
							n2     = Complex .Polar (nz .imag, theta2);

						var
							u3     = (i + 1) / vDimension,
							theta3 = 2 * Math .PI * u3,
							p3     = Complex .Polar (-bottomRadius, theta3),
							n3     = Complex .Polar (nz .imag, theta3);

						/*    p1
						 *   /  \
						 *  /    \
						 * p2 -- p3
						 */

						// p1
						texCoords .push (u1, 1, 0, 1);
						normals .push (n1 .imag, nz .real, n1 .real);
						vertices .push (0, y1, 0, 1);

						// p2
						texCoords .push (u2, 0, 0, 1);
						normals .push (n2 .imag, nz .real, n2 .real);
						vertices .push (p2 .imag, y2, p2 .real, 1);

						// p3
						texCoords .push (u3, 0, 0, 1);
						normals .push (n3 .imag , nz .real, n3 .real);
						vertices .push (p3 .imag, y2, p3 .real, 1);
					}
				}

				if (this .bottom_ .getValue ())
				{
					var
						texCoord = [ ],
						points   = [ ];

					for (var i = vDimension - 1; i > -1; -- i)
					{
						var
							u     = i / vDimension,
							theta = 2 * Math .PI * u,
							t     = Complex .Polar (-1, theta),
							p     = Complex .multiply (t, bottomRadius);

						texCoord .push (new Vector2 ((t .imag + 1) / 2, (t .real + 1) / 2));
						points .push (new Vector3 (p .imag, y2, p .real));
					}

					var
						t0 = texCoord [0],
						p0 = points [0];

					for (var i = 1, length = points .length - 1; i < length; ++ i)
					{
						var
							t1 = texCoord [i],
							t2 = texCoord [i + 1],
							p1 = points [i],
							p2 = points [i + 1];

						texCoords .push (t0 .x, t0 .y, 0, 1);
						normals .push (0, -1, 0);
						vertices .push (p0 .x, p0 .y, p0 .z, 1);

						texCoords .push (t1 .x, t1 .y, 0, 1);
						normals .push (0, -1, 0);
						vertices .push (p1 .x, p1 .y, p1 .z, 1);

						texCoords .push (t2 .x, t2 .y, 0, 1);
						normals .push (0, -1, 0);
						vertices .push (p2 .x, p2 .y, p2 .z, 1);
					}
				}

				this .setSolid (this .solid_ .getValue ());
				this .setCurrentTexCoord (null);
				this .setNormals (normals);
				this .setVertices (vertices);
				this .setExtents (this .createExtents ());
			},
			createExtents: function ()
			{
				var
					bottomRadius = this .bottomRadius_ .getValue (),
					y1           = this .height_ .getValue () / 2,
					y2           = -y1;

				if (! this .side_ .getValue () && ! this .bottom_ .getValue ())
					return [new Vector3 (0, 0, 0), new Vector3 (0, 0, 0)];

				else if (! this .side_ .getValue ())
					return [new Vector3 (-bottomRadius, y2, -bottomRadius), new Vector3 (bottomRadius, y2, bottomRadius)];

				else
					return [new Vector3 (-bottomRadius, y2, -bottomRadius), new Vector3 (bottomRadius, y1, bottomRadius)];
			},
		});

		return Cone;
	}
});



define ('cobweb/Components/Interpolation/CoordinateInterpolator',[
	"jquery",
	"cobweb/Fields",
	"cobweb/Basic/X3DFieldDefinition",
	"cobweb/Basic/FieldDefinitionArray",
	"cobweb/Components/Interpolation/X3DInterpolatorNode",
	"cobweb/Bits/X3DConstants",
	"standard/Math/Numbers/Vector3",
],
function ($,
          Fields,
          X3DFieldDefinition,
          FieldDefinitionArray,
          X3DInterpolatorNode, 
          X3DConstants,
          Vector3)
{
	with (Fields)
	{
		function CoordinateInterpolator (executionContext)
		{
			X3DInterpolatorNode .call (this, executionContext .getBrowser (), executionContext);

			this .addType (X3DConstants .CoordinateInterpolator);
		}

		CoordinateInterpolator .prototype = $.extend (Object .create (X3DInterpolatorNode .prototype),
		{
			constructor: CoordinateInterpolator,
			fieldDefinitions: new FieldDefinitionArray ([
				new X3DFieldDefinition (X3DConstants .inputOutput, "metadata",      new SFNode ()),
				new X3DFieldDefinition (X3DConstants .inputOnly,   "set_fraction",  new SFFloat ()),
				new X3DFieldDefinition (X3DConstants .inputOutput, "key",           new MFFloat ()),
				new X3DFieldDefinition (X3DConstants .inputOutput, "keyValue",      new MFVec3f ()),
				new X3DFieldDefinition (X3DConstants .outputOnly,  "value_changed", new MFVec3f ()),
			]),
			keyValue: new Vector3 (0, 0, 0),
			getTypeName: function ()
			{
				return "CoordinateInterpolator";
			},
			getComponentName: function ()
			{
				return "Interpolation";
			},
			getContainerField: function ()
			{
				return "children";
			},
			set_keyValue__: function () { },
			interpolate: function (index0, index1, weight)
			{
				var
					keyValue      = this .keyValue_ .getValue (),
					value_changed = this .value_changed_ .getValue (),
					size          = this .key_ .length > 1 ? Math .floor (keyValue .length / this .key_ .length) : 0;

				index0 *= size;
				index1  = index0 + size;

				this .value_changed_ .length = size;

				for (var i = 0; i < size; ++ i)
				{
					value_changed [i] .set (this .keyValue .assign (keyValue [index0 + i] .getValue ())
					                                       .lerp (keyValue [index1 + i] .getValue (),
					                                              weight));
				}

				this .value_changed_ .addEvent ();
			},
		});

		return CoordinateInterpolator;
	}
});



define ('cobweb/Components/Interpolation/CoordinateInterpolator2D',[
	"jquery",
	"cobweb/Fields",
	"cobweb/Basic/X3DFieldDefinition",
	"cobweb/Basic/FieldDefinitionArray",
	"cobweb/Components/Interpolation/X3DInterpolatorNode",
	"cobweb/Bits/X3DConstants",
	"standard/Math/Numbers/Vector2",
],
function ($,
          Fields,
          X3DFieldDefinition,
          FieldDefinitionArray,
          X3DInterpolatorNode, 
          X3DConstants,
          Vector2)
{
	with (Fields)
	{
		function CoordinateInterpolator2D (executionContext)
		{
			X3DInterpolatorNode .call (this, executionContext .getBrowser (), executionContext);

			this .addType (X3DConstants .CoordinateInterpolator2D);
		}

		CoordinateInterpolator2D .prototype = $.extend (Object .create (X3DInterpolatorNode .prototype),
		{
			constructor: CoordinateInterpolator2D,
			fieldDefinitions: new FieldDefinitionArray ([
				new X3DFieldDefinition (X3DConstants .inputOutput, "metadata",      new SFNode ()),
				new X3DFieldDefinition (X3DConstants .inputOnly,   "set_fraction",  new SFFloat ()),
				new X3DFieldDefinition (X3DConstants .inputOutput, "key",           new MFFloat ()),
				new X3DFieldDefinition (X3DConstants .inputOutput, "keyValue",      new MFVec2f ()),
				new X3DFieldDefinition (X3DConstants .outputOnly,  "value_changed", new MFVec2f ()),
			]),
			keyValue: new Vector2 (0, 0),
			getTypeName: function ()
			{
				return "CoordinateInterpolator2D";
			},
			getComponentName: function ()
			{
				return "Interpolation";
			},
			getContainerField: function ()
			{
				return "children";
			},
			set_keyValue__: function () { },
			interpolate: function (index0, index1, weight)
			{
				var
					keyValue      = this .keyValue_ .getValue (),
					value_changed = this .value_changed_ .getValue (),
					size          = this .key_ .length > 1 ? Math .floor (this .keyValue_ .length / this .key_ .length) : 0;

				index0 *= size;
				index1  = index0 + size;

				this .value_changed_ .length = size;

				for (var i = 0; i < size; ++ i)
				{
					value_changed [i] .set (this .keyValue .assign (keyValue [index0 + i] .getValue ())
					                                       .lerp (keyValue [index1 + i] .getValue (),
					                                              weight));
				}

				this .value_changed_ .addEvent ();
			},
		});

		return CoordinateInterpolator2D;
	}
});



define ('cobweb/Components/Geometry3D/Cylinder',[
	"jquery",
	"cobweb/Fields",
	"cobweb/Basic/X3DFieldDefinition",
	"cobweb/Basic/FieldDefinitionArray",
	"cobweb/Components/Rendering/X3DGeometryNode",
	"cobweb/Bits/X3DConstants",
	"standard/Math/Numbers/Complex",
	"standard/Math/Numbers/Vector2",
	"standard/Math/Numbers/Vector3",
],
function ($,
          Fields,
          X3DFieldDefinition,
          FieldDefinitionArray,
          X3DGeometryNode, 
          X3DConstants,
          Complex,
          Vector2,
          Vector3)
{
	with (Fields)
	{
		function Cylinder (executionContext)
		{
			X3DGeometryNode .call (this, executionContext .getBrowser (), executionContext);

			this .addType (X3DConstants .Cylinder);
		}

		Cylinder .prototype = $.extend (Object .create (X3DGeometryNode .prototype),
		{
			constructor: Cylinder,
			fieldDefinitions: new FieldDefinitionArray ([
				new X3DFieldDefinition (X3DConstants .inputOutput,    "metadata", new SFNode ()),
				new X3DFieldDefinition (X3DConstants .initializeOnly, "top",      new SFBool (true)),
				new X3DFieldDefinition (X3DConstants .initializeOnly, "bottom",   new SFBool (true)),
				new X3DFieldDefinition (X3DConstants .initializeOnly, "side",     new SFBool (true)),
				new X3DFieldDefinition (X3DConstants .initializeOnly, "height",   new SFFloat (2)),
				new X3DFieldDefinition (X3DConstants .initializeOnly, "radius",   new SFFloat (1)),
				new X3DFieldDefinition (X3DConstants .initializeOnly, "solid",    new SFBool (true)),
			]),
			getTypeName: function ()
			{
				return "Cylinder";
			},
			getComponentName: function ()
			{
				return "Geometry3D";
			},
			getContainerField: function ()
			{
				return "geometry";
			},
			build: function ()
			{
				var
					options    = this .getBrowser () .getCylinderOptions (),
					vDimension = options .vDimension_ .getValue (),
					texCoords  = [ ],
					normals    = this .getNormals (),
					vertices   = this .getVertices ();

				this .getTexCoords () .push (texCoords);

				var
					radius = this .radius_ .getValue (),
					y1     = this .height_ .getValue () / 2,
					y2     = -y1;

				if (this .side_ .getValue ())
				{
					for (var i = 0; i < vDimension; ++ i)
					{
						var
							u1     = i / vDimension,
							theta1 = 2 * Math .PI * u1,
							n1     = Complex .Polar (-1, theta1),
							p1     = Complex .multiply (n1, radius);

						var
							u2     = (i + 1) / vDimension,
							theta2 = 2 * Math .PI * u2,
							n2     = Complex .Polar (-1, theta2),
							p2     = Complex .multiply (n2, radius);

						// p1 - p4
						//  | \ |
						// p2 - p3

						// Triangle one

						// p1
						texCoords .push (u1, 1, 0, 1);
						normals .push (n1 .imag,  0, n1 .real);
						vertices .push (p1 .imag, y1, p1 .real, 1);

						// p2
						texCoords .push (u1, 0, 0, 1);
						normals .push (n1 .imag,  0, n1 .real);
						vertices .push (p1 .imag, y2, p1 .real, 1);

						// p3
						texCoords .push (u2, 0, 0, 1);
						normals .push (n2 .imag,  0, n2 .real);
						vertices .push (p2 .imag, y2, p2 .real, 1);

						// Triangle two

						// p1
						texCoords .push (u1, 1, 0, 1);
						normals .push (n1 .imag,  0, n1 .real);
						vertices .push (p1 .imag, y1, p1 .real, 1);

						// p3
						texCoords .push (u2, 0, 0, 1);
						normals .push (n2 .imag,  0, n2 .real);
						vertices .push (p2 .imag, y2, p2 .real, 1);

						// p4
						texCoords .push (u2, 1, 0, 1);
						normals .push (n2 .imag,  0, n2 .real);
						vertices .push (p2 .imag, y1, p2 .real, 1);
					}
				}

				if (this .top_ .getValue ())
				{
					var
						texCoord = [ ],
						points   = [ ];

					for (var i = 0; i < vDimension; ++ i)
					{
						var
							u     = i / vDimension,
							theta = 2 * Math .PI * u,
							t     = Complex .Polar (-1, theta);

						texCoord .push (new Vector2 ((t .imag + 1) / 2, -(t .real - 1) / 2));
						points   .push (new Vector3 (t .imag * radius, y1, t .real * radius));
					}

					var
						t0 = texCoord [0],
						p0 = points [0];

					for (var i = 1, length = points .length - 1; i < length; ++ i)
					{
						var
							t1 = texCoord [i],
							t2 = texCoord [i + 1],
							p1 = points [i],
							p2 = points [i + 1];

						texCoords .push (t0 .x, t0 .y, 0, 1);
						normals .push (0, 1, 0);
						vertices .push (p0 .x, p0 .y, p0 .z, 1);

						texCoords .push (t1 .x, t1 .y, 0, 1);
						normals .push (0, 1, 0);
						vertices .push (p1 .x, p1 .y, p1 .z, 1);

						texCoords .push (t2 .x, t2 .y, 0, 1);
						normals .push (0, 1, 0);
						vertices .push (p2 .x, p2 .y, p2 .z, 1);
					}
				}

				if (this .bottom_ .getValue ())
				{
					var
						texCoord = [ ],
						points   = [ ];

					for (var i = vDimension - 1; i > -1; -- i)
					{
						var
							u     = i / vDimension,
							theta = 2 * Math .PI * u,
							t     = Complex .Polar (-1, theta);

						texCoord .push (new Vector2 ((t .imag + 1) / 2, (t .real + 1) / 2));
						points   .push (new Vector3 (t .imag * radius, y2, t .real * radius));
					}
				
					var
						t0 = texCoord [0],
						p0 = points [0];
					
					for (var i = 1, length = points .length - 1; i < length; ++ i)
					{
						var
							t1 = texCoord [i],
							t2 = texCoord [i + 1],
							p1 = points [i],
							p2 = points [i + 1];

						texCoords .push (t0 .x, t0 .y, 0, 1);
						normals .push (0, -1, 0);
						vertices .push (p0 .x, p0 .y, p0 .z, 1);

						texCoords .push (t1 .x, t1 .y, 0, 1);
						normals .push (0, -1, 0);
						vertices .push (p1 .x, p1 .y, p1 .z, 1);

						texCoords .push (t2 .x, t2 .y, 0, 1);
						normals .push (0, -1, 0);
						vertices .push (p2 .x, p2 .y, p2 .z, 1);
					}
				}

				this .setSolid (this .solid_ .getValue ());
				this .setCurrentTexCoord (null);
				this .setNormals (normals);
				this .setVertices (vertices);
				this .setExtents (this .createExtents ());
			},
			createExtents: function ()
			{
				var
					radius = this .radius_ .getValue (),
					y1     = this .height_ .getValue () / 2,
					y2     = -y1;

				if (! this .top_ .getValue () && ! this .side_ .getValue () && ! this .bottom_ .getValue ())
					return [new Vector3 (0, 0, 0), new Vector3 (0, 0, 0)];

				if (! this .top_ .getValue () && ! this .side_ .getValue ())
					return [new Vector3 (-radius, y2, -radius), new Vector3 (radius, y2, radius)];

				if (! this .bottom_ .getValue () && ! this .side_ .getValue ())
					return [new Vector3 (-radius, y1, -radius), new Vector3 (radius, y1, radius)];

				else
					return [new Vector3 (-radius, y2, -radius), new Vector3 (radius, y1, radius)];
			},
		});

		return Cylinder;
	}
});



define ('cobweb/Components/PointingDeviceSensor/X3DDragSensorNode',[
	"jquery",
	"cobweb/Components/PointingDeviceSensor/X3DPointingDeviceSensorNode",
	"cobweb/Bits/X3DConstants",
],
function ($,
          X3DPointingDeviceSensorNode, 
          X3DConstants)
{
	function X3DDragSensorNode (browser, executionContext)
	{
		X3DPointingDeviceSensorNode .call (this, browser, executionContext);

		this .addType (X3DConstants .X3DDragSensorNode);
	}

	X3DDragSensorNode .prototype = $.extend (Object .create (X3DPointingDeviceSensorNode .prototype),
	{
		constructor: X3DDragSensorNode,
		set_motion__: function (hit)
		{ }
	});

	return X3DDragSensorNode;
});



define ('standard/Math/Geometry/Cylinder3',[
	"standard/Math/Numbers/Vector3",
	"standard/Math/Numbers/Rotation4",
	"standard/Math/Numbers/Matrix4",
	"standard/Math/Geometry/Line3",
],
function (Vector3,
          Rotation4,
          Matrix4,
          Line3)
{
	function Cylinder3 (axis, radius)
	{
		this .axis   = axis .copy ();
		this .radius = radius;
	}

	Cylinder3 .prototype =
	{
		constructor: Cylinder3,
		intersectsLine: function (line, enter, exit)
		{
			////////////////////////////////////////////////////////////////////////
			//
			// Description:
			//  Intersect given line with this cylinder, returning the
			//  results in enter and exit. Returns TRUE if there was an
			//  intersection (and results are valid).
			//
			// Taken from Inventor SbCylinder.c++
			
			// The intersection will actually be done on a radius 1 cylinder
			// aligned with the y axis, so we transform the line into that
			// space, then intersect, then transform the results back.

			// rotation to y axis
			var
				rotToYAxis = new Rotation4 (this .axis .direction, new Vector3 (0, 1, 0)),
				mtxToYAxis = Matrix4 .Rotation (rotToYAxis);

			// scale to unit space
			var
				scaleFactor    = 1 / this .radius,
				toUnitCylSpace = new Matrix4 ();
	
			toUnitCylSpace .scale (new Vector3 (scaleFactor, scaleFactor, scaleFactor));
			toUnitCylSpace .multLeft (mtxToYAxis);

			// find the given line un-translated
			var
				point             = Vector3 .subtract (line .point, this .axis .point),
				noTranslationLine = new Line3 (point, line .direction);

			// find the un-translated line in unit cylinder's space
			var cylLine = noTranslationLine .multLineMatrix (toUnitCylSpace);

			// find the intersection on the unit cylinder
			var intersected = this .unitCylinderIntersectsLine (cylLine, enter, exit);

			if (intersected)
			{
				// transform back to original space
				var fromUnitCylSpace = toUnitCylSpace .inverse ();

				fromUnitCylSpace .multVecMatrix (enter);
				enter .add (this .axis .point);

				fromUnitCylSpace .multVecMatrix (exit);
				exit .add (this .axis .point);
			}

			return intersected;
		},
		unitCylinderIntersectsLine: function (line, enter, exit)
		{
			var t0, t1;

			var
				pos = line .point,
				dir = line .direction;

			var
				A = dir [0] * dir [0] + dir [2] * dir [2],
				B = 2 * (pos [0] * dir [0] + pos [2] * dir [2]),
				C = pos [0] * pos [0] + pos [2] * pos [2] - 1;

			// discriminant = B^2 - 4AC
			var discr = B * B - 4 * A * C;

			// if discriminant is negative, no intersection
			if (discr < 0)
				return false;

			var sqroot = Math .sqrt (discr);

			// magic to stabilize the answer
			if (B > 0)
			{
				t0 = -(2 * C) / (sqroot + B);
				t1 = -(sqroot + B) / (2 * A);
			}
			else
			{
				t0 = (2 * C) / (sqroot - B);
				t1 = (sqroot - B) / (2 * A);
			}

			enter .assign (dir) .multiply (t0) .add (pos);
			exit  .assign (dir) .multiply (t1) .add (pos);

			return true;
		},
		toString: function ()
		{
			return this .axis .toString () + " " + this .radius;
		},
	};

	return Cylinder3;
});


define ('cobweb/Components/PointingDeviceSensor/CylinderSensor',[
	"jquery",
	"cobweb/Fields",
	"cobweb/Basic/X3DFieldDefinition",
	"cobweb/Basic/FieldDefinitionArray",
	"cobweb/Components/PointingDeviceSensor/X3DDragSensorNode",
	"cobweb/Bits/X3DConstants",
	"standard/Math/Numbers/Vector3",
	"standard/Math/Numbers/Rotation4",
	"standard/Math/Numbers/Matrix4",
	"standard/Math/Geometry/Line3",
	"standard/Math/Geometry/Plane3",
	"standard/Math/Geometry/Cylinder3",
	"standard/Math/Algorithm",
],
function ($,
          Fields,
          X3DFieldDefinition,
          FieldDefinitionArray,
          X3DDragSensorNode, 
          X3DConstants,
          Vector3,
          Rotation4,
          Matrix4,
          Line3,
          Plane3,
          Cylinder3,
          Algorithm)
{
	with (Fields)
	{
		function CylinderSensor (executionContext)
		{
			X3DDragSensorNode .call (this, executionContext .getBrowser (), executionContext);

			this .addType (X3DConstants .CylinderSensor);
		}

		CylinderSensor .prototype = $.extend (Object .create (X3DDragSensorNode .prototype),
		{
			constructor: CylinderSensor,
			fieldDefinitions: new FieldDefinitionArray ([
				new X3DFieldDefinition (X3DConstants .inputOutput, "metadata",           new SFNode ()),
				new X3DFieldDefinition (X3DConstants .inputOutput, "enabled",            new SFBool (true)),
				new X3DFieldDefinition (X3DConstants .inputOutput, "description",        new SFString ("")),
				new X3DFieldDefinition (X3DConstants .inputOutput, "axisRotation",       new SFRotation (0, 0, 1, 0)),
				new X3DFieldDefinition (X3DConstants .inputOutput, "diskAngle",          new SFFloat (0.261799)),
				new X3DFieldDefinition (X3DConstants .inputOutput, "minAngle",           new SFFloat ()),
				new X3DFieldDefinition (X3DConstants .inputOutput, "maxAngle",           new SFFloat (-1)),
				new X3DFieldDefinition (X3DConstants .inputOutput, "offset",             new SFFloat ()),
				new X3DFieldDefinition (X3DConstants .inputOutput, "autoOffset",         new SFBool (true)),
				new X3DFieldDefinition (X3DConstants .outputOnly,  "trackPoint_changed", new SFVec3f ()),
				new X3DFieldDefinition (X3DConstants .outputOnly,  "rotation_changed",   new SFRotation ()),
				new X3DFieldDefinition (X3DConstants .outputOnly,  "isOver",             new SFBool ()),
				new X3DFieldDefinition (X3DConstants .outputOnly,  "isActive",           new SFBool ()),
			]),
			getTypeName: function ()
			{
				return "CylinderSensor";
			},
			getComponentName: function ()
			{
				return "PointingDeviceSensor";
			},
			getContainerField: function ()
			{
				return "children";
			},
			initialize: function ()
			{
				X3DDragSensorNode .prototype .initialize .call (this);

				this .modelViewMatrix    = new Matrix4 ();
				this .invModelViewMatrix = new Matrix4 ();

				this .cylinder    = new Cylinder3 (new Line3 (new Vector3 (0, 0, 0), new Vector3 (0, 0, 0)), 0);
				this .disk        = false;
				this .yPlane      = null;
				this .zPlane      = null;
				this .sxPlane     = null;
				this .szNormal    = null;
				this .behind      = false;
				this .fromVector  = new Vector3 (0, 0, 0);
				this .startOffset = new Rotation4 (0, 0, 1, 0);
			},
			isBehind: function (hitRay, hitPoint)
			{
				var
					enter = new Vector3 (0, 0 ,0),
					exit  = new Vector3 (0, 0, 0);

				this .cylinder .intersectsLine (hitRay, enter, exit);

				return Vector3 .subtract (hitPoint, enter) .abs () > Vector3 .subtract (hitPoint, exit) .abs ();
			},
			getTrackPoint: function (hitRay, trackPoint)
			{
				var zPoint = new Vector3 (0, 0, 0);

				this .zPlane .intersectsLine (hitRay, zPoint);

				var
					axisPoint = Vector3 .add (zPoint, this .cylinder .axis .getPerpendicularVector (zPoint)),
					distance  = this .sxPlane .getDistanceToPoint (zPoint) / this .cylinder .radius,
					section   = Math .floor ((distance + 1) / 2);

				// Use asin on the cylinder and outside linear angle.
				var
					sinp  = Algorithm .interval (distance, -1, 1),
					phi   = section === 0 ? Math .asin (sinp) : sinp * Math .PI / 2,
					angle = phi + section * Math .PI;

				var rotation = new Rotation4 (this .cylinder .axis .direction, angle);

				rotation .multVecRot (trackPoint .assign (this .szNormal) .multiply (this .cylinder .radius));
				trackPoint .add (axisPoint);
			},
			getAngle: function (rotation)
			{
				if (Vector3 .dot (rotation .getAxis (), this .cylinder .axis .direction) > 0)
					return rotation .angle;

				else
					return -rotation .angle;
			},
			set_active__: function (hit, active)
			{
				X3DDragSensorNode .prototype .set_active__ .call (this, hit, active);

				try
				{
					if (this .isActive_ .getValue ())
					{
						var matrices = this .getMatrices () [hit .layer .getId ()];

						this .modelViewMatrix .assign (matrices .modelViewMatrix);
						this .invModelViewMatrix .assign (this .modelViewMatrix) .inverse ();

						var
							hitRay   = hit .hitRay .copy () .multLineMatrix (this .invModelViewMatrix),
							hitPoint = this .invModelViewMatrix .multVecMatrix (hit .intersection .point .copy ());

						var
							yAxis      = this .axisRotation_ .getValue () .multVecRot (new Vector3 (0, 1, 0)),
							cameraBack = this .invModelViewMatrix .multDirMatrix (new Vector3 (0, 0, 1)) .normalize ();

						var
							axis   = new Line3 (new Vector3 (0, 0, 0), yAxis),
							radius = axis .getPerpendicularVector (hitPoint) .abs ();

						this .cylinder = new Cylinder3 (axis, radius);

						this .disk   = Math .abs (Vector3 .dot (cameraBack, yAxis)) > Math .cos (this .diskAngle_ .getValue ());
						this .behind = this .isBehind (hitRay, hitPoint);

						this .yPlane = new Plane3 (hitPoint, yAxis);             // Sensor aligned y-plane
						this .zPlane = new Plane3 (hitPoint, cameraBack);        // Screen aligned z-plane

						// Compute normal like in Billboard with yAxis as axis of rotation.
						var
							billboardToViewer = this .invModelViewMatrix .origin,
							sxNormal          = Vector3 .cross (yAxis, billboardToViewer) .normalize ();

						this .sxPlane  = new Plane3 (new Vector3 (0, 0, 0), sxNormal);   // Billboarded special x-plane made parallel to sensors axis.
						this .szNormal = Vector3 .cross (sxNormal, yAxis) .normalize (); // Billboarded special z-normal made parallel to sensors axis.

						var trackPoint = new Vector3 (0, 0, 0);

						if (this .disk)
							this .yPlane .intersectsLine (hitRay, trackPoint);
						else
							this .getTrackPoint (hitRay, trackPoint);

						this .fromVector  = this .cylinder .axis .getPerpendicularVector (trackPoint) .negate ();
						this .startOffset = new Rotation4 (yAxis, this .offset_ .getValue ());
					}
					else
					{
						if (this .autoOffset_ .getValue ())
							this .offset_ = this .getAngle (this .rotation_changed_ .getValue ());
					}
				}
				catch (error)
				{
					//console .log (error);
				}
			},
			set_motion__: function (hit)
			{
				try
				{
					var
						hitRay     = hit .hitRay .copy () .multLineMatrix (this .invModelViewMatrix),
						trackPoint = new Vector3 (0, 0, 0);

					if (this .disk)
						this .yPlane .intersectsLine (hitRay, trackPoint);
					else
						this .getTrackPoint (hitRay, trackPoint);

					this .trackPoint_changed_ = trackPoint;

					var
						toVector = this .cylinder .axis .getPerpendicularVector (trackPoint) .negate (),
						rotation = new Rotation4 (this .fromVector, toVector);

					if (this .disk)
					{
						// The trackpoint can swap behind the viewpoint if viewpoint is a Viewpoint node
						// as the viewing volume is not a cube where the picking ray goes straight up.
						// This phenomenon is very clear on the viewport corners.

						var trackPoint_ = this .modelViewMatrix .multVecMatrix (trackPoint .copy ());

						if (trackPoint_ .z > 0)
							rotation .multRight (new Rotation4 (this .yPlane .normal, Math .PI));
					}
					else
					{
						if (this .behind)
							rotation .inverse ();
					}

					rotation .multLeft (this .startOffset);

					if (this .minAngle_ .getValue () > this .maxAngle_ .getValue ())
						this .rotation_changed_ = rotation;

					else
					{
						var
							angle = Algorithm .interval (this .getAngle (rotation),    -Math .PI, Math .PI),
							min   = Algorithm .interval (this .minAngle_ .getValue (), -Math .PI, Math .PI),
							max   = Algorithm .interval (this .maxAngle_ .getValue (), -Math .PI, Math .PI);

						if (angle > min && angle < max)
							this .rotation_change_ = rotation;
					}
				}
				catch (error)
				{
					//console .log (error);

					this .trackPoint_changed_ .addEvent ();
					this .rotation_changed_   .addEvent ();
				}
			},
		});

		return CylinderSensor;
	}
});



define ('cobweb/Components/Geometry3D/ElevationGrid',[
	"jquery",
	"cobweb/Fields",
	"cobweb/Basic/X3DFieldDefinition",
	"cobweb/Basic/FieldDefinitionArray",
	"cobweb/Components/Rendering/X3DGeometryNode",
	"cobweb/Bits/X3DCast",
	"cobweb/Bits/X3DConstants",
	"standard/Math/Geometry/Triangle3",
	"standard/Math/Numbers/Vector2",
	"standard/Math/Numbers/Vector3",
],
function ($,
          Fields,
          X3DFieldDefinition,
          FieldDefinitionArray,
          X3DGeometryNode,
          X3DCast,
          X3DConstants,
          Triangle3,
          Vector2,
          Vector3)
{
	with (Fields)
	{
		function ElevationGrid (executionContext)
		{
			X3DGeometryNode .call (this, executionContext .getBrowser (), executionContext);

			this .addType (X3DConstants .ElevationGrid);

			this .attribNodes  = [ ];
			this .colorNode    = null;
			this .texCoordNode = null;
			this .normalNode   = null;
			this .coordNode    = null;
		}

		ElevationGrid .prototype = $.extend (Object .create (X3DGeometryNode .prototype),
		{
			constructor: ElevationGrid,
			fieldDefinitions: new FieldDefinitionArray ([
				new X3DFieldDefinition (X3DConstants .inputOutput,    "metadata",        new SFNode ()),
				new X3DFieldDefinition (X3DConstants .initializeOnly, "xDimension",      new SFInt32 ()),
				new X3DFieldDefinition (X3DConstants .initializeOnly, "zDimension",      new SFInt32 ()),
				new X3DFieldDefinition (X3DConstants .initializeOnly, "xSpacing",        new SFFloat (1)),
				new X3DFieldDefinition (X3DConstants .initializeOnly, "zSpacing",        new SFFloat (1)),
				new X3DFieldDefinition (X3DConstants .initializeOnly, "solid",           new SFBool (true)),
				new X3DFieldDefinition (X3DConstants .initializeOnly, "ccw",             new SFBool (true)),
				new X3DFieldDefinition (X3DConstants .initializeOnly, "creaseAngle",     new SFFloat ()),
				new X3DFieldDefinition (X3DConstants .initializeOnly, "colorPerVertex",  new SFBool (true)),
				new X3DFieldDefinition (X3DConstants .initializeOnly, "normalPerVertex", new SFBool (true)),
				new X3DFieldDefinition (X3DConstants .inputOutput,    "attrib",          new MFNode ()),
				new X3DFieldDefinition (X3DConstants .inputOutput,    "fogCoord",        new SFNode ()),
				new X3DFieldDefinition (X3DConstants .inputOutput,    "color",           new SFNode ()),
				new X3DFieldDefinition (X3DConstants .inputOutput,    "texCoord",        new SFNode ()),
				new X3DFieldDefinition (X3DConstants .inputOutput,    "normal",          new SFNode ()),
				new X3DFieldDefinition (X3DConstants .inputOutput,    "height",          new MFFloat ()),
			]),
			getTypeName: function ()
			{
				return "ElevationGrid";
			},
			getComponentName: function ()
			{
				return "Geometry3D";
			},
			getContainerField: function ()
			{
				return "geometry";
			},
			initialize: function ()
			{
				X3DGeometryNode .prototype .initialize .call (this);

				this .attrib_   .addInterest (this, "set_attrib__");
				this .color_    .addInterest (this, "set_color__");
				this .texCoord_ .addInterest (this, "set_texCoord__");
				this .normal_   .addInterest (this, "set_normal__");

				this .set_attrib__ ();
				this .set_color__ ();
				this .set_texCoord__ ();
				this .set_normal__ ();
			},
			set_attrib__: function ()
			{
				for (var i = 0; i < this .attribNodes .length; ++ i)
					this .attribNodes [i] .removeInterest (this, "addNodeEvent");

				this .attribNodes .length = 0;

				for (var i = 0, length = this .attrib_ .length; i < length; ++ i)
				{
					var attribNode = X3DCast (X3DConstants .X3DVertexAttributeNode, this .attrib_ [i]);

					if (attribNode)
						this .attribNodes .push (attribNode);
				}

				for (var i = 0; i < this .attribNodes .length; ++ i)
					this .attribNodes [i] .addInterest (this, "addNodeEvent");
			},
			set_color__: function ()
			{
				if (this .colorNode)
				{
					this .colorNode .removeInterest (this, "addNodeEvent");
					this .colorNode .removeInterest (this, "set_transparent__");
				}

				this .colorNode = X3DCast (X3DConstants .X3DColorNode, this .color_);

				if (this .colorNode)
				{
					this .colorNode .addInterest (this, "addNodeEvent");
					this .colorNode .addInterest (this, "set_transparent__");

					this .set_transparent__ ();
				}
				else
					this .transparent_ = false;
			},
			set_transparent__: function ()
			{
				this .transparent_ = this .colorNode .isTransparent ();
			},
			set_texCoord__: function ()
			{
				if (this .texCoordNode)
					this .texCoordNode .removeInterest (this, "addNodeEvent");

				this .texCoordNode = X3DCast (X3DConstants .X3DTextureCoordinateNode, this .texCoord_);

				if (this .texCoordNode)
					this .texCoordNode .addInterest (this, "addNodeEvent");
			},
			set_normal__: function ()
			{
				if (this .normalNode)
					this .normalNode .removeInterest (this, "addNodeEvent");

				this .normalNode = X3DCast (X3DConstants .X3DNormalNode, this .normal_);

				if (this .normalNode)
					this .normalNode .addInterest (this, "addNodeEvent");
			},
			getAttrib: function ()
			{
				return this .attribNodes;
			},
			getColor: function ()
			{
				return this .colorNode;
			},
			getTexCoord: function ()
			{
				return this .texCoordNode;
			},
			getNormal: function ()
			{
				return this .normalNode;
			},
			getHeight: function (index)
			{
				if (index < this .height_ .length)
					return this .height_ [index];

				return 0;
			},
			createTexCoords: function ()
			{
				var
					texCoords  = [ ],
					xDimension = this .xDimension_ .getValue (),
					zDimension = this .zDimension_ .getValue (),
					xSize      = xDimension - 1,
					zSize      = zDimension - 1;

				for (var z = 0; z < zDimension; ++ z)
				{
					for (var x = 0; x < xDimension; ++ x)
						texCoords .push (new Vector2 (x / xSize, z / zSize));
				}

				return texCoords;
			},
			createNormals: function (points, coordIndex, creaseAngle)
			{
				var
					cw          = ! this .ccw_ .getValue (),
					normalIndex = [ ],
					normals     = [ ];

				for (var p = 0; p < points .length; ++ p)
					normalIndex [p] = [ ];

				for (var c = 0; c < coordIndex .length; c += 3)
				{
					var
						c0 = coordIndex [c],
						c1 = coordIndex [c + 1],
						c2 = coordIndex [c + 2];
					
					normalIndex [c0] .push (normals .length);
					normalIndex [c1] .push (normals .length + 1);
					normalIndex [c2] .push (normals .length + 2);

					var normal = Triangle3 .normal (points [c0], points [c1], points [c2]);

					if (cw)
						normal .negate ();

					normals .push (normal);
					normals .push (normal);
					normals .push (normal);
				}

				return this .refineNormals (normalIndex, normals, this .creaseAngle_ .getValue ());
			},
			createCoordIndex: function ()
			{
				// p1 - p4 
				//  | \ |
				// p2 - p3

				var
					coordIndex = [ ],
					xDimension = this .xDimension_ .getValue (),
					zDimension = this .zDimension_ .getValue (),
					xSize      = xDimension - 1,
					zSize      = zDimension - 1;

				for (var z = 0; z < zSize; ++ z)
				{
					for (var x = 0; x < zSize; ++ x)
					{
						var
							i1 =       z * xDimension + x,
							i2 = (z + 1) * xDimension + x,
							i3 = (z + 1) * xDimension + (x + 1),
							i4 =       z * xDimension + (x + 1);

						coordIndex .push (i1); // p1
						coordIndex .push (i2); // p2
						coordIndex .push (i3); // p3

						coordIndex .push (i1); // p1
						coordIndex .push (i3); // p3
						coordIndex .push (i4); // p4
					}
				}

				return coordIndex;
			},
			createPoints: function ()
			{
				var
					points     = [ ],
					xDimension = this .xDimension_ .getValue (),
					zDimension = this .zDimension_ .getValue (),
					xSpacing   = this .xSpacing_ .getValue (),
					zSpacing   = this .zSpacing_ .getValue ();

				for (var z = 0; z < zDimension; ++ z)
				{
					for (var x = 0; x < xDimension; ++ x)
					{
						points .push (new Vector3 (xSpacing * x,
						                           this .getHeight (x + z * xDimension),
						                           zSpacing * z));
					}
				}

				return points;
			},
			build: function ()
			{
				if (this .xDimension_ .getValue () < 2 || this .zDimension_ .getValue () < 2)
					return;

				var
					colorPerVertex  = this .colorPerVertex_ .getValue (),
					normalPerVertex = this .normalPerVertex_ .getValue (),
					coordIndex      = this .createCoordIndex (),
					colorNode       = this .getColor (),
					texCoordNode    = this .getTexCoord (),
					normalNode      = this .getNormal (),
					points          = this .createPoints (),
					face            = 0;

				// Vertex attribute

				//std::vector <std::vector <float>> attribArrays (attribNodes .size ());

				//for (size_t a = 0, size = attribNodes .size (); a < size; ++ a)
				//	attribArrays [a] .reserve (coordIndex .size ());

				if (texCoordNode)
					texCoordNode .init (this .getTexCoords ());
				else
				{
					var texCoords = this .createTexCoords ();
					this .getTexCoords () .push ([ ]);
				}

				// Build geometry

				for (var c = 0; c < coordIndex .length; ++ face)
				{
					for (var p = 0; p < 6; ++ p, ++ c)
					{
						var index = coordIndex [c];

						//for (size_t a = 0, size = attribNodes .size (); a < size; ++ a)
						//	attribNodes [a] -> addValue (attribArrays [a], i);

						if (colorNode)
						{
							if (colorPerVertex)
								this .addColor (colorNode .getColor (index));
							else
								this .addColor (colorNode .getColor (face));
						}
							
						if (texCoordNode)
							texCoordNode .addTexCoord (this .getTexCoords (), index);

						else
						{
							var t = texCoords [index];
							this .getTexCoords () [0] .push (t .x, t .y, 0, 1);
						}

						if (normalNode)
						{
							if (normalPerVertex)
								this .addNormal (normalNode .getVector (index));

							else
								this .addNormal (normalNode .getVector (face));
						}

						this .addVertex (points [index]);
					}
				}

				// Add auto-generated normals if needed.

				if (! normalNode)
				{
					var normals = this .createNormals (points, coordIndex);

					for (var i = 0; i < normals .length; ++ i)
						this .addNormal (normals [i]);
				}

				this .setSolid (this .solid_ .getValue ());
				this .setCCW (this .ccw_ .getValue ());
				this .setCurrentTexCoord (this .getTexCoord ());
			},
		});

		return ElevationGrid;
	}
});



define ('cobweb/Components/Geometry3D/Extrusion',[
	"jquery",
	"cobweb/Fields",
	"cobweb/Basic/X3DFieldDefinition",
	"cobweb/Basic/FieldDefinitionArray",
	"cobweb/Components/Rendering/X3DGeometryNode",
	"cobweb/Bits/X3DConstants",
	"standard/Math/Geometry/Triangle3",
	"standard/Math/Numbers/Vector2",
	"standard/Math/Numbers/Vector3",
	"standard/Math/Numbers/Rotation4",
	"standard/Math/Numbers/Matrix4",
	"poly2tri",
],
function ($,
          Fields,
          X3DFieldDefinition,
          FieldDefinitionArray,
          X3DGeometryNode, 
          X3DConstants,
          Triangle3,
          Vector2,
          Vector3,
          Rotation4,
          Matrix4,
          poly2tri)
{
	with (Fields)
	{
		function Extrusion (executionContext)
		{
			X3DGeometryNode .call (this, executionContext .getBrowser (), executionContext);

			this .addType (X3DConstants .Extrusion);
		}

		Extrusion .prototype = $.extend (Object .create (X3DGeometryNode .prototype),
		{
			constructor: Extrusion,
			fieldDefinitions: new FieldDefinitionArray ([
				new X3DFieldDefinition (X3DConstants .inputOutput,    "metadata",     new SFNode ()),
				new X3DFieldDefinition (X3DConstants .initializeOnly, "beginCap",     new SFBool (true)),
				new X3DFieldDefinition (X3DConstants .initializeOnly, "endCap",       new SFBool (true)),
				new X3DFieldDefinition (X3DConstants .initializeOnly, "solid",        new SFBool (true)),
				new X3DFieldDefinition (X3DConstants .initializeOnly, "ccw",          new SFBool (true)),
				new X3DFieldDefinition (X3DConstants .initializeOnly, "convex",       new SFBool (true)),
				new X3DFieldDefinition (X3DConstants .initializeOnly, "creaseAngle",  new SFFloat ()),
				new X3DFieldDefinition (X3DConstants .inputOutput,    "crossSection", new MFVec2f (new Vector2 (1, 1), new Vector2 (1, -1), new Vector2 (-1, -1), new Vector2 (-1, 1), new Vector2 (1, 1))),
				new X3DFieldDefinition (X3DConstants .inputOutput,    "orientation",  new MFRotation (new Rotation4 ())),
				new X3DFieldDefinition (X3DConstants .inputOutput,    "scale",        new MFVec2f (new Vector2 (1, 1))),
				new X3DFieldDefinition (X3DConstants .inputOutput,    "spine",        new MFVec3f (new Vector3 (0, 0, 0), new Vector3 (0, 1, 0))),
			]),
			getTypeName: function ()
			{
				return "Extrusion";
			},
			getComponentName: function ()
			{
				return "Geometry3D";
			},
			getContainerField: function ()
			{
				return "geometry";
			},
			createPoints: function ()
			{
				var
					crossSection = this .crossSection_. getValue (),
					orientation  = this .orientation_. getValue (),
					scale        = this .scale_. getValue (),
					spine        = this .spine_. getValue (),
					points       = [ ];

				// calculate SCP rotations

				var rotations = this .createRotations ();

				// calculate vertices.
				
				var matrix = new Matrix4 ();

				for (var i = 0, length = spine .length; i < length; ++ i)
				{
					matrix .identity ();
					matrix .translate (spine [i] .getValue ());

					if (orientation .length)
						matrix .rotate (orientation [Math .min (i, orientation .length - 1)] .getValue ());

					matrix .multLeft (rotations [i]);

					if (scale .length)
					{
						var s = scale [Math .min (i, scale .length - 1)] .getValue ();
						matrix .scale (new Vector3 (s .x, 1, s .y));
					}

					for (var cs = 0, csLength = crossSection .length; cs < csLength; ++ cs)
					{
						var vector = crossSection [cs] .getValue ();
						points .push (matrix .multVecMatrix (new Vector3 (vector .x, 0, vector .y)));
					}
				}

				return points;
			},
			createRotations: function ()
			{
				var rotations = [ ];

				// calculate SCP rotations

				var
					spine       = this .spine_ .getValue (),
					firstSpine  = spine [0] .getValue (),
					lastSpine   = spine [spine .length - 1] .getValue (),
					closedSpine = firstSpine .equals (lastSpine);

				var
					SCPxAxis,
					SCPyAxis,
					SCPzAxis = new Vector3 (0, 0, 0);

				// SCP for the first point:
				if (closedSpine)
				{
					SCPyAxis = Vector3 .subtract (spine [1] .getValue (), spine [spine .length - 2] .getValue ()) .normalize ();
					SCPzAxis = Vector3 .subtract (spine [1] .getValue (), spine [0] .getValue ())
					           .cross (Vector3 .subtract (spine [spine .length - 2] .getValue (), spine [0] .getValue ()))
					           .normalize ();
				}
				else
				{
					SCPyAxis = Vector3 .subtract (spine [1] .getValue (), spine [0] .getValue ()) .normalize ();

					// Find first defined Z-axis.
					for (var i = 1, length = spine .length - 1; i < length; ++ i)
					{
						SCPzAxis = Vector3 .subtract (spine [i + 1] .getValue (), spine [i] .getValue ())
						           .cross (Vector3 .subtract (spine [i - 1] .getValue (), spine [i] .getValue ()))
						           .normalize ();

						if (! SCPzAxis .equals (Vector3 .Zero))
							break;
					}
				}

				// The entire spine is collinear:
				if (SCPzAxis .equals (Vector3 .Zero))
					SCPzAxis = new Rotation4 (new Vector3 (0, 1, 0), SCPyAxis) .multVecRot (new Vector3 (0, 0, 1));

				// We do not have to normalize SCPxAxis, as SCPyAxis and SCPzAxis are orthogonal.
				SCPxAxis = Vector3 .cross (SCPyAxis, SCPzAxis);

				rotations .push (new Matrix4 (SCPxAxis .x, SCPxAxis .y, SCPxAxis .z, 0,
				                              SCPyAxis .x, SCPyAxis .y, SCPyAxis .z, 0,
				                              SCPzAxis .x, SCPzAxis .y, SCPzAxis .z, 0,
				                              0,           0,           0,           1));

				// For all points other than the first or last:

				var SCPzAxisPrevious = SCPzAxis;

				for (var i = 1, length = spine .length - 1; i < length; ++ i)
				{
					SCPyAxis = Vector3 .subtract (spine [i + 1] .getValue (), spine [i - 1] .getValue ()) .normalize ();
					SCPzAxis = Vector3 .subtract (spine [i + 1] .getValue (), spine [i] .getValue ())
					           .cross (Vector3 .subtract (spine [i - 1] .getValue (), spine [i] .getValue ()))
					           .normalize ();

					// g.
					if (SCPzAxisPrevious .dot (SCPzAxis) < 0)
						SCPzAxis .negate ();

					// The three points used in computing the Z-axis are collinear.
					if (SCPzAxis .equals (Vector3 .Zero))
						SCPzAxis = SCPzAxisPrevious;
					else
						SCPzAxisPrevious = SCPzAxis;

					// We do not have to normalize SCPxAxis, as SCPyAxis and SCPzAxis are orthogonal.
					SCPxAxis = Vector3 .cross (SCPyAxis, SCPzAxis);

					rotations .push (new Matrix4 (SCPxAxis .x, SCPxAxis .y, SCPxAxis .z, 0,
					                              SCPyAxis .x, SCPyAxis .y, SCPyAxis .z, 0,
					                              SCPzAxis .x, SCPzAxis .y, SCPzAxis .z, 0,
					                              0,           0,           0,           1));
				}

				// SCP for the last point
				if (closedSpine)
				{
					// The SCP for the first and last points is the same.
					rotations .push (rotations [0]);
				}
				else
				{
					SCPyAxis = Vector3 .subtract (spine [spine .length - 1] .getValue (), spine [spine .length - 2] .getValue ()) .normalize ();
					
					if (spine .length > 2)
					{
						SCPzAxis = Vector3 .subtract (spine [spine .length - 1] .getValue (), spine [spine .length - 2] .getValue ())
						           .cross (Vector3 .subtract (spine [spine .length - 3] .getValue (), spine [spine .length - 2] .getValue ()))
						           .normalize ();
					}

					// g.
					if (SCPzAxisPrevious .dot (SCPzAxis) < 0)
						SCPzAxis .negate ();

					// The three points used in computing the Z-axis are collinear.
					if (SCPzAxis .equals (Vector3 .Zero))
						SCPzAxis = SCPzAxisPrevious;

					// We do not have to normalize SCPxAxis, as SCPyAxis and SCPzAxis are orthogonal.
					SCPxAxis = Vector3 .cross (SCPyAxis, SCPzAxis);

					rotations .push (new Matrix4 (SCPxAxis .x, SCPxAxis .y, SCPxAxis .z, 0,
					                              SCPyAxis .x, SCPyAxis .y, SCPyAxis .z, 0,
					                              SCPzAxis .x, SCPzAxis .y, SCPzAxis .z, 0,
					                              0,           0,           0,           1));
				}

				return rotations;
			},
			build: function ()
			{
				var
					cw           = ! this .ccw_ .getValue (),
					crossSection = this .crossSection_. getValue (),
					spine        = this .spine_. getValue (),
					texCoords    = [ ];

				if (spine .length < 2 || crossSection .length < 2)
					return;

				this .getTexCoords () .push (texCoords);

				var crossSectionSize = crossSection .length; // This one is used only in the INDEX macro.

				function INDEX (n, k) { return n * crossSectionSize + k; }

				var
					firstSpine  = spine [0] .getValue (),
					lastSpine   = spine [spine .length - 1] .getValue (),
					closedSpine = firstSpine .equals (lastSpine);

				var
					firstCrossSection  = crossSection [0] .getValue (),
					lastCrossSection   = crossSection [crossSection .length - 1] .getValue (),
					closedCrossSection = firstCrossSection .equals (lastCrossSection);

				// For caps calculation

				var
					min = crossSection [0] .getValue () .copy (),
					max = crossSection [0] .getValue () .copy ();

				for (var k = 1, length = crossSection .length; k < length; ++ k)
				{
					min .min (crossSection [k] .getValue ());
					max .max (crossSection [k] .getValue ());
				}

				var
					capSize      = Vector2 .subtract (max, min),
					capMax       = Math .max (capSize .x, capSize .y),
					numCapPoints = closedCrossSection ? crossSection .length - 1 : crossSection .length;

				// Create

				var
					normalIndex = [ ],
				   normals     = [ ],
					points      = this .createPoints ();

				for (var p = 0; p < points .length; ++ p)
					normalIndex [p] = [ ];

				// Build body.

				var
					numCrossSection_1 = crossSection .length - 1,
					numSpine_1        = spine .length - 1;

				for (var n = 0; n < numSpine_1; ++ n)
				{
					for (var k = 0; k < numCrossSection_1; ++ k)
					{
						var
							n1 = closedSpine && n === spine .length - 2 ? 0 : n + 1,
							k1 = closedCrossSection && k === crossSection .length - 2 ? 0 : k + 1;

						// k      k+1
						//
						// p4 ----- p3   n+1
						//  |     / |
						//  |   /   |
						//  | /     |
						// p1 ----- p2   n

						var
							i1 = INDEX (n,  k),
							i2 = INDEX (n,  k1),
							i3 = INDEX (n1, k1),
							i4 = INDEX (n1, k),
							p1 = points [i1],
							p2 = points [i2],
							p3 = points [i3],
							p4 = points [i4];

						if (cw)
						{
							var
								normal1 = Triangle3 .normal (p3, p2, p1),
								normal2 = Triangle3 .normal (p4, p3, p1);
						}
						else
						{
							var
								normal1 = Triangle3 .normal (p1, p2, p3),
								normal2 = Triangle3 .normal (p1, p3, p4);
						}

						// Triangle one

						// p1
						texCoords .push (k / numCrossSection_1, n / numSpine_1, 0, 1);
						normalIndex [i1] .push (normals .length);
						normals .push (normal1);
						this .addVertex (p1);

						// p2
						texCoords .push ((k + 1) / numCrossSection_1, n / numSpine_1, 0, 1);
						normalIndex [i2] .push (normals .length);
						normals .push (normal1);
						this .addVertex (p2);

						// p3
						texCoords .push ((k + 1) / numCrossSection_1, (n + 1) / numSpine_1, 0, 1);
						normalIndex [i3] .push (normals .length);
						normals .push (normal1);
						this .addVertex (p3);

						// Triangle two

						// p1
						texCoords .push (k / numCrossSection_1, n / numSpine_1, 0, 1);
						normalIndex [i1] .push (normals .length);
						normals .push (normal2);
						this .addVertex (p1);

						// p3
						texCoords .push ((k + 1) / numCrossSection_1, (n + 1) / numSpine_1, 0, 1);
						normalIndex [i3] .push (normals .length);
						normals .push (normal2);
						this .addVertex (p3);

						// p4
						texCoords .push (k / numCrossSection_1, (n + 1) / numSpine_1, 0, 1);
						normalIndex [i4] .push (normals .length);
						normals .push (normal2);
						this .addVertex (p4);
					}
				}

				// Refine body normals and add them.

				normals = this .refineNormals (normalIndex, normals, this .creaseAngle_ .getValue ());

				for (var i = 0; i < normals .length; ++ i)
					this .addNormal (normals [i]);

				// Build caps

				if (capMax && crossSection .length > 2)
				{
					if (this .beginCap_ .getValue ())
					{
						var
							j         = 0, // spine
							vertices  = [ ],
							triangles = [ ];

						for (var k = 0; k < numCapPoints; ++ k)
						{
							var point = points [INDEX (j, numCapPoints - 1 - k)];
							point .texCoord = Vector2 .subtract (crossSection [numCapPoints - 1 - k] .getValue (), min) .divide (capMax);
							vertices .push (point);
						}

						if (this .convex_ .getValue ())
							this .triangulateConvexPolygon (vertices, triangles);

						else
							this .triangulatePolygon (vertices, triangles);

						var normal = Triangle3 .normal (vertices [triangles [0]],
						                                vertices [triangles [1]],
						                                vertices [triangles [2]]);

						if (cw)
							normal .negate ();

						this .addCap (texCoords, normal, vertices, triangles);
					}

					if (this .endCap_ .getValue ())
					{
						var
							j         = spine .length - 1, // spine
							vertices  = [ ],
							triangles = [ ];

						for (var k = 0; k < numCapPoints; ++ k)
						{
							var point = points [INDEX (j, k)];
							point .texCoord = Vector2 .subtract (crossSection [k] .getValue (), min) .divide (capMax);
							vertices .push (point);
						}

						if (this .convex_ .getValue ())
							this .triangulateConvexPolygon (vertices, triangles);

						else
							this .triangulatePolygon (vertices, triangles);

						var normal = Triangle3 .normal (vertices [triangles [0]],
						                                vertices [triangles [1]],
						                                vertices [triangles [2]]);

						if (cw)
							normal .negate ();

						this .addCap (texCoords, normal, vertices, triangles);
					}
				}

				this .setSolid (this .solid_ .getValue ());
				this .setCCW (this .ccw_ .getValue ());
				this .setCurrentTexCoord (null);
			},
			addCap: function (texCoords, normal, vertices, triangles)
			{
				for (var i = 0; i < triangles .length; i += 3)
				{
					var
						p0 = vertices [triangles [i]],
						p1 = vertices [triangles [i + 1]],
						p2 = vertices [triangles [i + 2]],
						t0 = p0 .texCoord,
						t1 = p1 .texCoord,
						t2 = p2 .texCoord;

					texCoords .push (t0 .x, t0 .y, 0, 1);
					texCoords .push (t1 .x, t1 .y, 0, 1);
					texCoords .push (t2 .x, t2 .y, 0, 1);

					this .addNormal (normal);
					this .addNormal (normal);
					this .addNormal (normal);
					
					this .addVertex (p0);
					this .addVertex (p1);
					this .addVertex (p2);
				}
			},
			triangulatePolygon: function (vertices, triangles)
			{
				try
				{
					// Transform vertices to 2D space.

					var
						p0 = vertices [0],
						p1 = vertices [1];

					var
						zAxis = this .getPolygonNormal (vertices),
						xAxis = Vector3 .subtract (p1, p0),
						yAxis = Vector3 .cross (zAxis, xAxis);

					xAxis .normalize ();
					yAxis .normalize ();

					var matrix = new Matrix4 (xAxis .x, xAxis .y, xAxis .z, 0,
					                          yAxis .x, yAxis .y, yAxis .z, 0,
					                          zAxis .x, zAxis .y, zAxis .z, 0,
					                          p0 .x, p0 .y, p0 .z, 1);

					matrix .inverse ();

					var contour = [ ];

					for (var i = 0; i < vertices .length; ++ i)
					{
						var point = matrix .multVecMatrix (vertices [i] .copy ());
						point .index = i;
						contour .push (point);
					}

					// Triangulate polygon.

					var
						context = new poly2tri .SweepContext (contour),
						ts      = context .triangulate () .getTriangles ();

					for (var i = 0; i < ts .length; ++ i)
						triangles .push (ts [i] .getPoint (0) .index, ts [i] .getPoint (1) .index, ts [i] .getPoint (2) .index);
				}
				catch (error)
				{
					//console .log (error);
					this .triangulateConvexPolygon (vertices, triangles);
				}
			},
			triangulateConvexPolygon: function (vertices, triangles)
			{
				// Fallback: Very simple triangulation for convex polygons.
				for (var i = 1, length = vertices .length - 1; i < length; ++ i)
					triangles .push (0, i, i + 1);
			},
			getPolygonNormal: function (vertices)
			{
				// Determine polygon normal.
				// We use Newell's method https://www.opengl.org/wiki/Calculating_a_Surface_Normal here:

				var
					normal = new Vector3 (0, 0, 0),
					next   = vertices [0];

				for (var i = 0, length = vertices .length; i < length; ++ i)
				{
					var
						current = next,
						next    = vertices [(i + 1) % length];

					normal .x += (current .y - next .y) * (current .z + next .z);
					normal .y += (current .z - next .z) * (current .x + next .x);
					normal .z += (current .x - next .x) * (current .y + next .y);
				}

				return normal .normalize ();
			},
		});

		return Extrusion;
	}
});



define ('cobweb/Components/Rendering/IndexedLineSet',[
	"jquery",
	"cobweb/Fields",
	"cobweb/Basic/X3DFieldDefinition",
	"cobweb/Basic/FieldDefinitionArray",
	"cobweb/Components/Rendering/X3DGeometryNode",
	"cobweb/Bits/X3DCast",
	"cobweb/Bits/X3DConstants",
],
function ($,
          Fields,
          X3DFieldDefinition,
          FieldDefinitionArray,
          X3DGeometryNode, 
          X3DCast,
          X3DConstants)
{
	with (Fields)
	{
		function IndexedLineSet (executionContext)
		{
			X3DGeometryNode .call (this, executionContext .getBrowser (), executionContext);

			this .addType (X3DConstants .IndexedLineSet);

			this .attribNodes  = [ ];
			this .colorNode    = null;
			this .coordNode    = null;
		}

		IndexedLineSet .prototype = $.extend (Object .create (X3DGeometryNode .prototype),
		{
			constructor: IndexedLineSet,
			fieldDefinitions: new FieldDefinitionArray ([
				new X3DFieldDefinition (X3DConstants .inputOutput,    "metadata",       new SFNode ()),
				new X3DFieldDefinition (X3DConstants .initializeOnly, "colorPerVertex", new SFBool (true)),
				new X3DFieldDefinition (X3DConstants .inputOutput,    "colorIndex",     new MFInt32 ()),
				new X3DFieldDefinition (X3DConstants .inputOutput,    "coordIndex",     new MFInt32 ()),
				new X3DFieldDefinition (X3DConstants .inputOutput,    "attrib",         new MFNode ()),
				new X3DFieldDefinition (X3DConstants .inputOutput,    "fogCoord",       new SFNode ()),
				new X3DFieldDefinition (X3DConstants .inputOutput,    "color",          new SFNode ()),
				new X3DFieldDefinition (X3DConstants .inputOutput,    "coord",          new SFNode ()),
			]),
			getTypeName: function ()
			{
				return "IndexedLineSet";
			},
			getComponentName: function ()
			{
				return "Rendering";
			},
			getContainerField: function ()
			{
				return "geometry";
			},
			initialize: function ()
			{
				X3DGeometryNode .prototype .initialize .call (this);

				this .attrib_ .addInterest (this, "set_attrib__");
				this .color_  .addInterest (this, "set_color__");
				this .coord_  .addInterest (this, "set_coord__");

				this .set_attrib__ ();
				this .set_color__ ();
				this .set_coord__ ();
			},
			isLineGeometry: function ()
			{
				return true;
			},
			set_attrib__: function ()
			{
				for (var i = 0; i < this .attribNodes .length; ++ i)
					this .attribNodes [i] .removeInterest (this, "addNodeEvent");

				this .attribNodes .length = 0;

				for (var i = 0, length = this .attrib_ .length; i < length; ++ i)
				{
					var attribNode = X3DCast (X3DConstants .X3DVertexAttributeNode, this .attrib_ [i]);

					if (attribNode)
						this .attribNodes .push (attribNode);
				}

				for (var i = 0; i < this .attribNodes .length; ++ i)
					this .attribNodes [i] .addInterest (this, "addNodeEvent");
			},
			set_color__: function ()
			{
				if (this .colorNode)
				{
					this .colorNode .removeInterest (this, "addNodeEvent");
					this .colorNode .removeInterest (this, "set_transparent__");
				}

				this .colorNode = X3DCast (X3DConstants .X3DColorNode, this .color_);

				if (this .colorNode)
				{
					this .colorNode .addInterest (this, "addNodeEvent");
					this .colorNode .addInterest (this, "set_transparent__");

					this .set_transparent__ ();
				}
				else
					this .transparent_ = false;
			},
			set_transparent__: function ()
			{
				this .transparent_ = this .colorNode .isTransparent ();
			},
			set_coord__: function ()
			{
				if (this .coordNode)
					this .coordNode .removeInterest (this, "addNodeEvent");

				this .coordNode = X3DCast (X3DConstants .X3DCoordinateNode, this .coord_);

				if (this .coordNode)
					this .coordNode .addInterest (this, "addNodeEvent");
			},
			getColorPerVertexIndex: function (index)
			{
				if (index < this .colorIndex_ .length)
					return this .colorIndex_ [index];

				return this .coordIndex_ [index];
			},
			getColorIndex: function (index)
			{
				if (index < this .colorIndex_ .length)
					return this .colorIndex_ [index];

				return index;
			},
			getPolylineIndices: function ()
			{
				var
					coordIndex = this .coordIndex_. getValue (),
					polylines  = [ ],
					polyline   = [ ];

				if (this .coordIndex_ .length)
				{
					var i = 0;

					for (var i = 0; i < coordIndex .length; ++ i)
					{
						var index = coordIndex [i] .getValue ();

						if (index >= 0)
							// Add vertex.
							polyline .push (i);

						else
						{
							// Negativ index.

							if (polyline .length > 1)
							{
								// Add polylines.
								polylines .push (polyline);
							}

							polyline = [ ];
						}
					}

					if (coordIndex [coordIndex .length - 1] .getValue () >= 0)
					{
						if (polyline .length > 1)
							polylines .push (polyline);
					}
				}

				return polylines;
			},
			build: function ()
			{
				if (! this .coordNode || this .coordNode .isEmpty ())
					return;

				var
					coordIndex     = this .coordIndex_. getValue (),
					polylines      = this .getPolylineIndices (),
					colorPerVertex = this .colorPerVertex_ .getValue ();
					attribArrays   = [ ];

				// Fill GeometryNode

				var face = 0;

				for (var p = 0; p < polylines .length; ++ p)
				{
					var polyline = polylines [p];
				
					// Create two vertices for each line.

					for (var line = 0, l_end = polyline .length - 1; line < l_end; ++ line)
					{
						for (var index = line, i_end = line + 2; index < i_end; ++ index)
						{
							var i = polyline [index];

							//for (size_t a = 0, size = attribNodes .size (); a < size; ++ a)
							//	attribNodes [a] -> addValue (attribArrays [a], coordIndex () [i]);

							if (this .colorNode)
							{
								if (colorPerVertex)
									this .addColor (this .colorNode .getColor (this .getColorPerVertexIndex (i)));
								else
									this .addColor (this .colorNode .getColor (this .getColorIndex (face)));
							}

							this .addVertex (this .coordNode .getPoint (coordIndex [i] .getValue ()));
						}
					}

					++ face;
				}

				this .setSolid (false);
				//this .setAttribs (this .attribNodes, attribArrays);
			},
			traverse: function (context)
			{
				var browser = this .getBrowser ();

				if (browser .getShader () === browser .getDefaultShader ())
				{
					browser .setTexture (null);
					browser .setShader (browser .getLineShader ());
				}

				X3DGeometryNode .prototype .traverse .call (this, context);
			},
		});

		return IndexedLineSet;
	}
});



define ('cobweb/Components/Networking/Inline',[
	"jquery",
	"cobweb/Fields",
	"cobweb/Basic/X3DFieldDefinition",
	"cobweb/Basic/FieldDefinitionArray",
	"cobweb/Components/Core/X3DChildNode",
	"cobweb/Components/Networking/X3DUrlObject",
	"cobweb/Components/Grouping/X3DBoundedObject",
	"cobweb/Components/Grouping/Group",
	"cobweb/Bits/X3DConstants",
	"cobweb/InputOutput/Loader",
],
function ($,
          Fields,
          X3DFieldDefinition,
          FieldDefinitionArray,
          X3DChildNode,
          X3DUrlObject,
          X3DBoundedObject,
          Group,
          X3DConstants,
          Loader)
{
	with (Fields)
	{
		function Inline (executionContext)
		{
			X3DChildNode     .call (this, executionContext .getBrowser (), executionContext);
			X3DUrlObject     .call (this, executionContext .getBrowser (), executionContext);
			X3DBoundedObject .call (this, executionContext .getBrowser (), executionContext);

			this .addType (X3DConstants .Inline);
			
			this .addChildren ("buffer", new SFTime ());

			this .scene    = this .getBrowser () .getDefaultScene ();
			this .group    = new Group (executionContext);
			this .getBBox  = this .group .getBBox  .bind (this .group);
			this .traverse = this .group .traverse .bind (this .group);
		}

		Inline .prototype = $.extend (Object .create (X3DChildNode .prototype),
			X3DUrlObject .prototype,
			X3DBoundedObject .prototype,
		{
			constructor: Inline,
			fieldDefinitions: new FieldDefinitionArray ([
				new X3DFieldDefinition (X3DConstants .inputOutput,    "metadata",   new SFNode ()),
				new X3DFieldDefinition (X3DConstants .inputOutput,    "load",       new SFBool (true)),
				new X3DFieldDefinition (X3DConstants .inputOutput,    "url",        new MFString ()),
				new X3DFieldDefinition (X3DConstants .initializeOnly, "bboxSize",   new SFVec3f (-1, -1, -1)),
				new X3DFieldDefinition (X3DConstants .initializeOnly, "bboxCenter", new SFVec3f ()),
			]),
			getTypeName: function ()
			{
				return "Inline";
			},
			getComponentName: function ()
			{
				return "Networking";
			},
			getContainerField: function ()
			{
				return "children";
			},
			initialize: function ()
			{
				X3DChildNode     .prototype .initialize .call (this);
				X3DUrlObject     .prototype .initialize .call (this);
				X3DBoundedObject .prototype .initialize .call (this);

				this .getExecutionContext () .isLive () .addInterest (this, "set_live__");
				this .isLive () .addInterest (this, "set_live__");

				this .group .setup ();
				this .group .isCameraObject_ .addFieldInterest (this .isCameraObject_);

				this .load_   .addInterest (this, "set_load__");
				this .url_    .addInterest (this, "set_url__");
				this .buffer_ .addInterest (this, "set_buffer__");

				this .requestAsyncLoad ();
			},
			set_live__: function ()
			{
				if (this .checkLoadState () == X3DConstants .COMPLETE_STATE)
				{
					var live = this .getExecutionContext () .isLive () .getValue () && this .isLive () .getValue ();

					if (live !== this .scene .isLive () .getValue ())
						this .scene .isLive () .setValue (live);
				}
			},
			set_load__: function ()
			{
				if (this .load_ .getValue ())
					this .buffer_ .addEvent ();

				else
					this .requestUnload ();
			},
			set_url__: function ()
			{
				this .buffer_ .addEvent ();
			},
			set_buffer__: function ()
			{
				if (! this .load_ .getValue ())
					return;

				this .setLoadState (X3DConstants .NOT_STARTED_STATE);

				this .requestAsyncLoad ();
			},
			requestImmediateLoad: function ()
			{
				try
				{
					this .setScene (new Loader (this) .createX3DFromURL (this .url_));
				}
				catch (error)
				{
					console .log (error);
					this .setScene (this .getBrowser () .getDefaultScene ());
				}
			},
			requestAsyncLoad: function ()
			{
				if (this .checkLoadState () === X3DConstants .COMPLETE_STATE || this .checkLoadState () === X3DConstants .IN_PROGRESS_STATE)
					return;

				this .setLoadState (X3DConstants .IN_PROGRESS_STATE);

				new Loader (this) .createX3DFromURL (this .url_, this .setSceneAsync .bind (this));
			},
			requestUnload: function ()
			{
				if (this .checkLoadState () === X3DConstants .NOT_STARTED_STATE || this .checkLoadState () === X3DConstants .FAILED_STATE)
					return;

				this .setLoadState (X3DConstants .NOT_STARTED_STATE);
				this .setScene (this .getBrowser () .getDefaultScene ());
			},
			setSceneAsync: function (scene)
			{
				if (scene)
				{
					this .setLoadState (X3DConstants .COMPLETE_STATE);
					this .setScene (scene);
				}
				else
				{
					this .setLoadState (X3DConstants .FAILED_STATE);
					this .setScene (this .getBrowser () .getDefaultScene ());
				}
			},
			setScene: function (scene)
			{
				this .scene .endUpdate ();
				this .scene .rootNodes .removeInterest (this .group .children_, "setValue");

				// Set new scene.

				this .scene = scene;
				this .scene .setup ();

				//this .scene .setExecutionContext (this .getExecutionContext ());
				this .scene .rootNodes .addInterest (this .group .children_, "setValue");
				this .group .children_ = this .scene .rootNodes;

				this .set_live__ ();

				this .getBrowser () .addBrowserEvent ();
			},
			getScene: function ()
			{
				return this .scene;
			},
		});

		return Inline;
	}
});


define ('cobweb/Components/Navigation/LOD',[
	"jquery",
	"cobweb/Fields",
	"cobweb/Basic/X3DFieldDefinition",
	"cobweb/Basic/FieldDefinitionArray",
	"cobweb/Components/Grouping/X3DGroupingNode",
	"cobweb/Bits/X3DConstants",
	"standard/Math/Algorithm",
],
function ($,
          Fields,
          X3DFieldDefinition,
          FieldDefinitionArray,
          X3DGroupingNode, 
          X3DConstants,
          Algorithm)
{
	with (Fields)
	{
		var
			FRAMES         = 180, // Number of frames after wich a level change takes in affect.
			FRAME_RATE_MIN = 20,  // Lowest level of detail.
			FRAME_RATE_MAX = 55;  // Highest level of detail.
	
		function LOD (executionContext)
		{
			X3DGroupingNode .call (this, executionContext .getBrowser (), executionContext);

			this .addType (X3DConstants .LOD);

			this .frameRate        = 60;
			this .keepCurrentLevel = false;
		}

		LOD .prototype = $.extend (Object .create (X3DGroupingNode .prototype),
		{
			constructor: LOD,
			fieldDefinitions: new FieldDefinitionArray ([
				new X3DFieldDefinition (X3DConstants .inputOutput,    "metadata",         new SFNode ()),
				new X3DFieldDefinition (X3DConstants .initializeOnly, "forceTransitions", new SFBool (false)),
				new X3DFieldDefinition (X3DConstants .initializeOnly, "center",           new SFVec3f (0, 0, 0)),
				new X3DFieldDefinition (X3DConstants .initializeOnly, "range",            new MFFloat ()),
				new X3DFieldDefinition (X3DConstants .outputOnly,     "level_changed",    new SFInt32 ()),
				new X3DFieldDefinition (X3DConstants .initializeOnly, "bboxSize",         new SFVec3f (-1, -1, -1)),
				new X3DFieldDefinition (X3DConstants .initializeOnly, "bboxCenter",       new SFVec3f (0, 0, 0)),
				new X3DFieldDefinition (X3DConstants .inputOnly,      "addChildren",      new MFNode ()),
				new X3DFieldDefinition (X3DConstants .inputOnly,      "removeChildren",   new MFNode ()),
				new X3DFieldDefinition (X3DConstants .inputOutput,    "children",         new MFNode ()),
			]),
			getTypeName: function ()
			{
				return "LOD";
			},
			getComponentName: function ()
			{
				return "Navigation";
			},
			getContainerField: function ()
			{
				return "children";
			},
			initialize: function ()
			{
				X3DGroupingNode .prototype .initialize .call (this);

				this .child = this .getChild (this .level_changed_ .getValue ());
				this .set_cameraObjects__ ();
			},
			set_cameraObjects__: function ()
			{
				if (this .child && this .child .getCameraObject)
					this .setCameraObject (this .child .getCameraObject ());
				else
					this .setCameraObject (false);
			},
			getBBox: function () 
			{
				if (this .bboxSize_ .getValue () .equals (this .defaultBBoxSize))
				{
					var boundedObject = X3DCast (X3DConstants .X3DBoundedObject, this .child);

					if (boundedObject)
						return boundedObject .getBBox ();

					return new Box3 ();
				}

				return new Box3 (this .bboxSize_ .getValue (), this .bboxCenter_ .getValue ());
			},
			getLevel: function (type)
			{
				if (this .range_ .length === 0)
				{
					var size = this .children_ .length;

					if (size < 2)
						return 0;

					this .frameRate = ((FRAMES - 1) * this .frameRate + this .getBrowser () .currentFrameRate) / FRAMES;

					if (size === 2)
						return Number (this .frameRate > FRAME_RATE_MAX);

					var
						n        = size - 1,
						fraction = Math .max ((this .frameRate - FRAME_RATE_MIN) / (FRAME_RATE_MAX - FRAME_RATE_MIN), 0);

					return Math .min (Math .ceil (fraction * (n - 1)), n);
				}

				var distance = this .getDistance (type);

				return Algorithm .upperBound (this .range_, 0, this .range_ .length, distance, Algorithm .less);
			},
			getDistance: function (type)
			{
				var modelViewMatrix = this .getModelViewMatrix (type);

				modelViewMatrix .translate (this .center_ .getValue ());

				return modelViewMatrix .origin .abs ();
			},
			traverse: function (type)
			{
				if (! this .keepCurrentLevel)
				{
					var
						level        = this .getLevel (type),
						currentLevel = this .level_changed_ .getValue ();

					if (level !== currentLevel)
					{
						if (this .forceTransitions_ .getValue ())
						{
							if (type === TraverseType .DISPLAY)
							{
								if (level > currentLevel)
									this .level_changed_ = currentLevel + 1;
								else
									this .level_changed_ = currentLevel - 1;
							}
						}
						else
							this .level_changed_ = level;

						this .child = this .getChild (level);
						this .set_cameraObjects__ ();
					}
				}

				if (this .child)
					this .child .traverse (type);
			},
		});

		return LOD;
	}
});



define ('cobweb/Components/Shape/X3DMaterialNode',[
	"jquery",
	"cobweb/Components/Shape/X3DAppearanceChildNode",
	"cobweb/Bits/X3DConstants",
],
function ($,
          X3DAppearanceChildNode, 
          X3DConstants)
{
	function X3DMaterialNode (browser, executionContext)
	{
		X3DAppearanceChildNode .call (this, browser, executionContext);

		this .addType (X3DConstants .X3DMaterialNode);
	}

	X3DMaterialNode .prototype = $.extend (Object .create (X3DAppearanceChildNode .prototype),
	{
		constructor: X3DMaterialNode,
		isTransparent: function ()
		{
			return false;
		},
	});

	return X3DMaterialNode;
});



define ('cobweb/Components/Shape/Material',[
	"jquery",
	"cobweb/Fields",
	"cobweb/Basic/X3DFieldDefinition",
	"cobweb/Basic/FieldDefinitionArray",
	"cobweb/Components/Shape/X3DMaterialNode",
	"cobweb/Bits/X3DConstants",
	"standard/Math/Algorithm",
],
function ($,
          Fields,
          X3DFieldDefinition,
          FieldDefinitionArray,
          X3DMaterialNode, 
          X3DConstants,
          Algorithm)
{
	with (Fields)
	{
		function Material (executionContext)
		{
			X3DMaterialNode .call (this, executionContext .getBrowser (), executionContext);

			this .addType (X3DConstants .Material);
		}

		Material .prototype = $.extend (Object .create (X3DMaterialNode .prototype),
		{
			constructor: Material,
			fieldDefinitions: new FieldDefinitionArray ([
				new X3DFieldDefinition (X3DConstants .inputOutput, "metadata",         new SFNode ()),
				new X3DFieldDefinition (X3DConstants .inputOutput, "ambientIntensity", new SFFloat (0.2)),
				new X3DFieldDefinition (X3DConstants .inputOutput, "diffuseColor",     new SFColor (0.8, 0.8, 0.8)),
				new X3DFieldDefinition (X3DConstants .inputOutput, "specularColor",    new SFColor (0, 0, 0)),
				new X3DFieldDefinition (X3DConstants .inputOutput, "emissiveColor",    new SFColor (0, 0, 0)),
				new X3DFieldDefinition (X3DConstants .inputOutput, "shininess",        new SFFloat (0.2)),
				new X3DFieldDefinition (X3DConstants .inputOutput, "transparency",     new SFFloat ()),
			]),
			getTypeName: function ()
			{
				return "Material";
			},
			getComponentName: function ()
			{
				return "Shape";
			},
			getContainerField: function ()
			{
				return "material";
			},
			initialize: function ()
			{
				X3DMaterialNode .prototype .initialize .call (this);

				this .addChildren ("transparent", new SFBool (false));

				this .transparency_ .addInterest (this, "set_transparent__");
				this .addInterest (this, "update");
		
				this .diffuseColor  = new Float32Array (3);
				this .specularColor = new Float32Array (3);
				this .emissiveColor = new Float32Array (3);

				this .set_transparent__ ();
				this .update ();
			},
			set_transparent__: function ()
			{
				this .transparent_ = this .transparency_ .getValue ();
			},
			update: function ()
			{
				this .diffuseColor  .set (this .diffuseColor_  .getValue ());
				this .specularColor .set (this .specularColor_ .getValue ());
				this .emissiveColor .set (this .emissiveColor_ .getValue ());
				this .ambientIntensity = Math .max (this .ambientIntensity_ .getValue (), 0);
				this .shininess        = Algorithm .clamp (this .shininess_    .getValue (), 0, 1) * 128;
				this .transparency     = Algorithm .clamp (this .transparency_ .getValue (), 0, 1);
			},
		});

		return Material;
	}
});



define ('cobweb/Components/Texturing/MovieTexture',[
	"jquery",
	"cobweb/Fields",
	"cobweb/Basic/X3DFieldDefinition",
	"cobweb/Basic/FieldDefinitionArray",
	"cobweb/Components/Texturing/X3DTexture2DNode",
	"cobweb/Components/Sound/X3DSoundSourceNode",
	"cobweb/Components/Networking/X3DUrlObject",
	"cobweb/Bits/X3DConstants",
	"standard/Networking/URI",
],
function ($,
          Fields,
          X3DFieldDefinition,
          FieldDefinitionArray,
          X3DTexture2DNode, 
          X3DSoundSourceNode, 
          X3DUrlObject, 
          X3DConstants,
          URI)
{
	with (Fields)
	{
		function MovieTexture (executionContext)
		{
			X3DTexture2DNode   .call (this, executionContext .getBrowser (), executionContext);
			X3DSoundSourceNode .call (this, executionContext .getBrowser (), executionContext);
			X3DUrlObject       .call (this, executionContext .getBrowser (), executionContext);

			this .addType (X3DConstants .MovieTexture);

			this .urlStack = new MFString ();
		}

		MovieTexture .prototype = $.extend (Object .create (X3DTexture2DNode .prototype),
			X3DSoundSourceNode .prototype,
			X3DUrlObject .prototype,
		{
			constructor: MovieTexture,
			fieldDefinitions: new FieldDefinitionArray ([
				new X3DFieldDefinition (X3DConstants .inputOutput,    "metadata",          new SFNode ()),
				new X3DFieldDefinition (X3DConstants .inputOutput,    "enabled",           new SFBool (true)),
				new X3DFieldDefinition (X3DConstants .inputOutput,    "description",       new SFString ("")),
				new X3DFieldDefinition (X3DConstants .inputOutput,    "url",               new MFString ()),
				new X3DFieldDefinition (X3DConstants .inputOutput,    "speed",             new SFFloat (1)),
				new X3DFieldDefinition (X3DConstants .inputOutput,    "pitch",             new SFFloat (1)),
				new X3DFieldDefinition (X3DConstants .inputOutput,    "loop",              new SFBool (false)),
				new X3DFieldDefinition (X3DConstants .inputOutput,    "startTime",         new SFTime ()),
				new X3DFieldDefinition (X3DConstants .inputOutput,    "pauseTime",         new SFTime ()),
				new X3DFieldDefinition (X3DConstants .inputOutput,    "resumeTime",        new SFTime ()),
				new X3DFieldDefinition (X3DConstants .inputOutput,    "stopTime",          new SFTime ()),
				new X3DFieldDefinition (X3DConstants .outputOnly,     "isPaused",          new SFBool ()),
				new X3DFieldDefinition (X3DConstants .outputOnly,     "isActive",          new SFBool ()),
				new X3DFieldDefinition (X3DConstants .outputOnly,     "cycleTime",         new SFTime ()),
				new X3DFieldDefinition (X3DConstants .outputOnly,     "elapsedTime",       new SFTime ()),
				new X3DFieldDefinition (X3DConstants .outputOnly,     "duration_changed",  new SFTime (-1)),
				new X3DFieldDefinition (X3DConstants .initializeOnly, "repeatS",           new SFBool (true)),
				new X3DFieldDefinition (X3DConstants .initializeOnly, "repeatT",           new SFBool (true)),
				new X3DFieldDefinition (X3DConstants .initializeOnly, "textureProperties", new SFNode ()),
			]),
			getTypeName: function ()
			{
				return "MovieTexture";
			},
			getComponentName: function ()
			{
				return "Texturing";
			},
			getContainerField: function ()
			{
				return "texture";
			},
			initialize: function ()
			{
				X3DTexture2DNode   .prototype .initialize .call (this);
				X3DSoundSourceNode .prototype .initialize .call (this);
				X3DUrlObject       .prototype .initialize .call (this);

				this .url_ .addInterest (this, "set_url__");

				this .canvas = $("<canvas>");

				this .video = $("<video>");
				this .video .error (this .setError .bind (this));
				this .video .bind ("abort", this .setError .bind (this));
				this .video .attr ("preload", "auto");
				this .video .attr ("volume", 0);
				this .video .attr ("crossOrigin", "anonymous");

				this .requestAsyncLoad ();
			},
			set_url__: function ()
			{
				this .setLoadState (X3DConstants .NOT_STARTED_STATE);

				this .requestAsyncLoad ();
			},
			requestAsyncLoad: function ()
			{
				if (this .checkLoadState () === X3DConstants .COMPLETE_STATE || this .checkLoadState () === X3DConstants .IN_PROGRESS_STATE)
					return;

				this .setLoadState (X3DConstants .IN_PROGRESS_STATE);

				this .setMedia (null);
				this .urlStack .setValue (this .url_);
				this .video .bind ("canplaythrough", this .setVideo .bind (this));
				this .loadNext ();
			},
			loadNext: function ()
			{
				if (this .urlStack .length === 0)
				{
				   this .duration_changed_ = -1;
					this .clear (); // clearTexture
					this .setLoadState (X3DConstants .FAILED_STATE);
					return;
				}

				// Get URL.

				this .URL = new URI (this .urlStack .shift ());
				this .URL = this .getExecutionContext () .getWorldURL () .transform (this .URL);
				// In Firefox we don't need getRelativePath if there is a file scheme, do we in Chrome???
	
				this .video .attr ("src", this .URL);
			},
			setError: function ()
			{
				console .warn ("Error loading movie:", this .URL .toString ());
				this .loadNext ();
			},
			setVideo: function ()
			{
			   var video = this .video [0];
	
				try
				{
					var
						width  = video .videoWidth,
						height = video .videoHeight;

					var
						canvas = this .canvas [0],
						cx     = canvas .getContext ("2d");

					canvas .width  = width;
					canvas .height = height;

					cx .drawImage (video, 0, 0);

					var data = cx .getImageData (0, 0, width, height) .data;

					setTimeout (function ()
					{
					   this .video .unbind ("canplaythrough");
					   this .setMedia (this .video);
						this .setTexture (width, height, false, new Uint8Array (data), true);
						this .setLoadState (X3DConstants .COMPLETE_STATE);
					}
					.bind (this), 16);
				}
				catch (error)
				{
					// Catch security error from cross origin requests.
					console .log (error .message);
					this .setError ();
				}
			},
			prepareEvents: function ()
			{
			   X3DSoundSourceNode .prototype .prepareEvents .call (this);

			   var video = this .getMedia ();

				if (video)
					this .updateTexture (video [0]);
			},
			traverse: X3DTexture2DNode .prototype .traverse,
		});

		return MovieTexture;
	}
});



define ('cobweb/Components/Rendering/X3DNormalNode',[
	"jquery",
	"cobweb/Components/Rendering/X3DGeometricPropertyNode",
	"cobweb/Bits/X3DConstants",
],
function ($,
          X3DGeometricPropertyNode, 
          X3DConstants)
{
	function X3DNormalNode (browser, executionContext)
	{
		X3DGeometricPropertyNode .call (this, browser, executionContext);

		this .addType (X3DConstants .X3DNormalNode);
	}

	X3DNormalNode .prototype = $.extend (Object .create (X3DGeometricPropertyNode .prototype),
	{
		constructor: X3DNormalNode,
	});

	return X3DNormalNode;
});



define ('cobweb/Components/Rendering/Normal',[
	"jquery",
	"cobweb/Fields",
	"cobweb/Basic/X3DFieldDefinition",
	"cobweb/Basic/FieldDefinitionArray",
	"cobweb/Components/Rendering/X3DNormalNode",
	"cobweb/Bits/X3DConstants",
	"standard/Math/Numbers/Vector3",
],
function ($,
          Fields,
          X3DFieldDefinition,
          FieldDefinitionArray,
          X3DNormalNode, 
          X3DConstants,
          Vector3)
{
	with (Fields)
	{
		function Normal (executionContext)
		{
			X3DNormalNode .call (this, executionContext .getBrowser (), executionContext);

			this .addType (X3DConstants .Normal);
		}

		Normal .prototype = $.extend (Object .create (X3DNormalNode .prototype),
		{
			constructor: Normal,
			fieldDefinitions: new FieldDefinitionArray ([
				new X3DFieldDefinition (X3DConstants .inputOutput, "metadata", new SFNode ()),
				new X3DFieldDefinition (X3DConstants .inputOutput, "vector",   new MFVec3f ()),
			]),
			getTypeName: function ()
			{
				return "Normal";
			},
			getComponentName: function ()
			{
				return "Rendering";
			},
			getContainerField: function ()
			{
				return "normal";
			},
			getVector: function (index)
			{
				if (index < this .vector_ .length)
					return this .vector_ [index] .getValue ();

				return new Vector3 (0, 0, 0);
			},
		});

		return Normal;
	}
});



define ('cobweb/Components/Interpolation/NormalInterpolator',[
	"jquery",
	"cobweb/Fields",
	"cobweb/Basic/X3DFieldDefinition",
	"cobweb/Basic/FieldDefinitionArray",
	"cobweb/Components/Interpolation/X3DInterpolatorNode",
	"cobweb/Bits/X3DConstants",
	"standard/Math/Numbers/Vector3",
	"standard/Math/Algorithm",
],
function ($,
          Fields,
          X3DFieldDefinition,
          FieldDefinitionArray,
          X3DInterpolatorNode, 
          X3DConstants,
          Vector3,
          Algorithm)
{
	with (Fields)
	{
		function NormalInterpolator (executionContext)
		{
			X3DInterpolatorNode .call (this, executionContext .getBrowser (), executionContext);

			this .addType (X3DConstants .NormalInterpolator);
		}

		NormalInterpolator .prototype = $.extend (Object .create (X3DInterpolatorNode .prototype),
		{
			constructor: NormalInterpolator,
			fieldDefinitions: new FieldDefinitionArray ([
				new X3DFieldDefinition (X3DConstants .inputOutput, "metadata",      new SFNode ()),
				new X3DFieldDefinition (X3DConstants .inputOnly,   "set_fraction",  new SFFloat ()),
				new X3DFieldDefinition (X3DConstants .inputOutput, "key",           new MFFloat ()),
				new X3DFieldDefinition (X3DConstants .inputOutput, "keyValue",      new MFVec3f ()),
				new X3DFieldDefinition (X3DConstants .outputOnly,  "value_changed", new MFVec3f ()),
			]),
			keyValue: new Vector3 (0, 0, 0),
			getTypeName: function ()
			{
				return "NormalInterpolator";
			},
			getComponentName: function ()
			{
				return "Interpolation";
			},
			getContainerField: function ()
			{
				return "children";
			},
			initialize: function ()
			{
				X3DInterpolatorNode .prototype .initialize .call (this);

				this .keyValue_ .addInterest (this, "set_keyValue__");
			},
			set_keyValue__: function () { },
			interpolate: function (index0, index1, weight)
			{
				var
					keyValue      = this .keyValue_ .getValue (),
					value_changed = this .value_changed_ .getValue (),
					size          = this .key_ .length > 1 ? Math .floor (keyValue .length / this .key_ .length) : 0;

				index0 *= size;
				index1  = index0 + size;

				this .value_changed_ .length = size;

				for (var i = 0; i < size; ++ i)
				{
					value_changed [i] .set (this .keyValue .assign (keyValue [index0 + i] .getValue ())
					                                       .slerp (keyValue [index1 + i] .getValue (),
					                                               weight));
				}

				this .value_changed_ .addEvent ();
			},
		});

		return NormalInterpolator;
	}
});



define ('cobweb/Components/Texturing/PixelTexture',[
	"jquery",
	"cobweb/Fields",
	"cobweb/Basic/X3DFieldDefinition",
	"cobweb/Basic/FieldDefinitionArray",
	"cobweb/Components/Texturing/X3DTexture2DNode",
	"cobweb/Bits/X3DConstants",
	"standard/Math/Algorithm",
],
function ($,
          Fields,
          X3DFieldDefinition,
          FieldDefinitionArray,
          X3DTexture2DNode, 
          X3DConstants,
          Algorithm)
{
	with (Fields)
	{
		function PixelTexture (executionContext)
		{
			X3DTexture2DNode .call (this, executionContext .getBrowser (), executionContext);

			this .addType (X3DConstants .PixelTexture);
		}

		PixelTexture .prototype = $.extend (Object .create (X3DTexture2DNode .prototype),
		{
			constructor: PixelTexture,
			fieldDefinitions: new FieldDefinitionArray ([
				new X3DFieldDefinition (X3DConstants .inputOutput,    "metadata",          new SFNode ()),
				new X3DFieldDefinition (X3DConstants .inputOutput,    "image",             new SFImage (0, 0, 0, [ ])),
				new X3DFieldDefinition (X3DConstants .initializeOnly, "repeatS",           new SFBool (true)),
				new X3DFieldDefinition (X3DConstants .initializeOnly, "repeatT",           new SFBool (true)),
				new X3DFieldDefinition (X3DConstants .initializeOnly, "textureProperties", new SFNode ()),
			]),
			getTypeName: function ()
			{
				return "PixelTexture";
			},
			getComponentName: function ()
			{
				return "Texturing";
			},
			getContainerField: function ()
			{
				return "texture";
			},
			initialize: function ()
			{
				X3DTexture2DNode .prototype .initialize .call (this);

				this .addChildren ("loadState", new SFInt32 (X3DConstants .NOT_STARTED_STATE));

				this .image_ .addInterest (this, "set_image__");

				this .set_image__ ();
			},
			checkLoadState: function ()
			{
				return this .loadState_ .getValue ();
			},
			getData: function (data, comp, array)
			{
				switch (comp)
				{
					case 1:
					{
						for (var i = 0, index = 0, length = array .length; i < length; ++ i, index += 4)
						{
							var pixel = array [i] .getValue ();

							data [index] =
							data [index + 1] =
							data [index + 2] = pixel & 255;
							data [index + 3] = 255;
						}

						break;
					}
					case 2:
					{
						for (var i = 0, index = 0, length = array .length; i < length; ++ i, index += 4)
						{
							var pixel = array [i] .getValue ();

							data [index] =
							data [index + 1] =
							data [index + 2] = (pixel >>> 8) & 255;
							data [index + 3] = pixel & 255;
						}

						break;
					}
					case 3:
					{
						for (var i = 0, index = 0, length = array .length; i < length; ++ i, index += 4)
						{
							var pixel = array [i] .getValue ();

							data [index]     = (pixel >>> 16) & 255;
							data [index + 1] = (pixel >>>  8) & 255;
							data [index + 2] = pixel & 255;
							data [index + 3] = 255;
						}

						break;
					}
					case 4:
					{
						for (var i = 0, index = 0, length = array .length; i < length; ++ i, index += 4)
						{
							var pixel = array [i] .getValue ();

							data [index]     = (pixel >>> 24);
							data [index + 1] = (pixel >>> 16) & 255;
							data [index + 2] = (pixel >>>  8) & 255;
							data [index + 3] = pixel & 255;
						}

						break;
					}
				}
			},
			set_image__: function ()
			{
				var
					width       = this .image_ .width,
					height      = this .image_ .height,
					comp        = this .image_ .comp,
					array       = this .image_ .array .getValue (),
					transparent = ! (comp % 2),
					data        = null;
			
				if (width > 0 && height > 0 && comp > 0 && comp < 5)
				{
					if (Algorithm .isPowerOfTwo (width) && Algorithm .isPowerOfTwo (height))
					{
						data = new Uint8Array (width * height * 4);

						this .getData (data, comp, array);
					}
					else
					{
						var
							canvas1   = $("<canvas/>") [0],
							canvas2   = $("<canvas/>") [0],
							cx1       = canvas1 .getContext("2d"),
							cx2       = canvas2 .getContext("2d"),
							imageData = cx1 .createImageData (width, height);

						canvas1 .width  = width;
						canvas1 .height = height;

						this .getData (imageData .data, comp, array);
						cx1 .putImageData (imageData, 0, 0);

						width  = Algorithm .nextPowerOfTwo (width);
						height = Algorithm .nextPowerOfTwo (height);

						canvas2 .width  = width;
						canvas2 .height = height;
						
						cx2 .drawImage (canvas1, 0, 0, canvas1 .width, canvas1 .height, 0, 0, width, height);
		
						data = cx2 .getImageData (0, 0, width, height) .data;
					}

					this .setTexture (width, height, transparent, new Uint8Array (data), false);
					this .loadState_ = X3DConstants .COMPLETE_STATE;
				}
				else
				{
					this .clear ();
					this .loadState_ = X3DConstants .FAILED_STATE;
				}
			},
		});

		return PixelTexture;
	}
});



define ('cobweb/Components/PointingDeviceSensor/PlaneSensor',[
	"jquery",
	"cobweb/Fields",
	"cobweb/Basic/X3DFieldDefinition",
	"cobweb/Basic/FieldDefinitionArray",
	"cobweb/Components/PointingDeviceSensor/X3DDragSensorNode",
	"cobweb/Bits/X3DConstants",
	"standard/Math/Numbers/Rotation4",
	"standard/Math/Numbers/Vector3",
	"standard/Math/Numbers/Vector4",
	"standard/Math/Numbers/Matrix4",
	"standard/Math/Geometry/Line3",
	"standard/Math/Geometry/Plane3",
	"standard/Math/Geometry/ViewVolume",
	"standard/Math/Algorithm",
],
function ($,
          Fields,
          X3DFieldDefinition,
          FieldDefinitionArray,
          X3DDragSensorNode, 
          X3DConstants,
          Rotation4,
          Vector3,
          Vector4,
          Matrix4,
          Line3,
          Plane3,
          ViewVolume,
          Algorithm)
{
	with (Fields)
	{
		function PlaneSensor (executionContext)
		{
			X3DDragSensorNode .call (this, executionContext .getBrowser (), executionContext);

			this .addType (X3DConstants .PlaneSensor);
		}

		PlaneSensor .prototype = $.extend (Object .create (X3DDragSensorNode .prototype),
		{
			constructor: PlaneSensor,
			fieldDefinitions: new FieldDefinitionArray ([
				new X3DFieldDefinition (X3DConstants .inputOutput, "metadata",            new SFNode ()),
				new X3DFieldDefinition (X3DConstants .inputOutput, "enabled",             new SFBool (true)),
				new X3DFieldDefinition (X3DConstants .inputOutput, "description",         new SFString ("")),
				new X3DFieldDefinition (X3DConstants .inputOutput, "axisRotation",        new SFRotation (0, 0, 1, 0)),
				new X3DFieldDefinition (X3DConstants .inputOutput, "autoOffset",          new SFBool (true)),
				new X3DFieldDefinition (X3DConstants .inputOutput, "offset",              new SFVec3f (0, 0, 0)),
				new X3DFieldDefinition (X3DConstants .inputOutput, "minPosition",         new SFVec2f (0, 0)),
				new X3DFieldDefinition (X3DConstants .inputOutput, "maxPosition",         new SFVec2f (-1, -1)),
				new X3DFieldDefinition (X3DConstants .outputOnly,  "trackPoint_changed",  new SFVec3f ()),
				new X3DFieldDefinition (X3DConstants .outputOnly,  "translation_changed", new SFVec3f ()),
				new X3DFieldDefinition (X3DConstants .outputOnly,  "isOver",              new SFBool ()),
				new X3DFieldDefinition (X3DConstants .outputOnly,  "isActive",            new SFBool ()),
			]),
			getTypeName: function ()
			{
				return "PlaneSensor";
			},
			getComponentName: function ()
			{
				return "PointingDeviceSensor";
			},
			getContainerField: function ()
			{
				return "children";
			},
			initialize: function ()
			{
				X3DDragSensorNode .prototype .initialize .call (this);

				this .modelViewMatrix    = new Matrix4 ();
				this .invModelViewMatrix = new Matrix4 ();
				this .projectionMatrix   = new Matrix4 ();
				this .viewport           = new Vector4 ();

				this .planeSensor = true;
				this .plane       = null;
				this .line        = null;
				this .startOffset = new Vector3 (0, 0, 0);
				this .startPoint  = new Vector3 (0, 0, 0);
			},
			getLineTrackPoint: function (hit, line, trackPoint)
			{
				var
					screenLine     = ViewVolume .projectLine (line, this .modelViewMatrix, this .projectionMatrix, this .viewport),
					trackPoint1    = screenLine .getClosestPointToPoint (new Vector3 (hit .pointer .x, hit .pointer .y, 0)),
					trackPointLine = ViewVolume .unProjectLine (trackPoint1 .x, trackPoint1 .y, this .modelViewMatrix, this .projectionMatrix, this .viewport);

				return line .getClosestPointToLine (trackPointLine, trackPoint);
			},
			set_active__: function (hit, active)
			{
				X3DDragSensorNode .prototype .set_active__ .call (this, hit, active);

				try
				{
					if (this .isActive_ .getValue ())
					{
						var matrices = this .getMatrices () [hit .layer .getId ()];

						this .modelViewMatrix .assign (matrices .modelViewMatrix);
						this .projectionMatrix .assign (matrices .projectionMatrix);
						this .viewport .assign (matrices .viewport);
						this .invModelViewMatrix .assign (this .modelViewMatrix) .inverse ();

						var
							hitRay   = hit .hitRay .copy () .multLineMatrix (this .invModelViewMatrix),
							hitPoint = this .invModelViewMatrix .multVecMatrix (hit .intersection .point .copy ());

						var axisRotation = this .axisRotation_ .getValue ();

						if (this .minPosition_ .x === this .maxPosition_ .x)
						{
							this .planeSensor = false;

							var direction = axisRotation .multVecRot (new Vector3 (0, Math .abs (this .maxPosition_ .y - this .minPosition_ .y), 0));

							this .line = new Line3 (hitPoint, direction .normalize ());
						}
						else if (this .minPosition_ .y === this .maxPosition_ .y)
						{
							this .planeSensor = false;

							var direction = axisRotation .multVecRot (new Vector3 (Math .abs (this .maxPosition_ .x - this .minPosition_ .x), 0, 0));

							this .line = new Line3 (hitPoint, direction .normalize ());
						}
						else
						{
							this .planeSensor = true;
							this .plane       = new Plane3 (hitPoint, axisRotation .multVecRot (new Vector3 (0, 0, 1)));
						}

						if (this .planeSensor)
							this .plane .intersectsLine (hitRay, this .startPoint);

						else
							this .getLineTrackPoint (hit, this .line, this .startPoint);

						this .startOffset .assign (this .offset_ .getValue ());
					}
					else
					{
						if (this .autoOffset_ .getValue ())
							this .offset_ = this .translation_changed_;
					}
				}
				catch (error)
				{
					//console .log (error);
				}
			},
			set_motion__: function (hit)
			{
				try
				{
					if (this .planeSensor)
					{
						var hitRay = hit .hitRay .copy () .multLineMatrix (this .invModelViewMatrix);

						var
							endPoint   = new Vector3 (0, 0, 0),
							trackPoint = new Vector3 (0, 0, 0);

						if (this .plane .intersectsLine (hitRay, endPoint))
						{
							new Plane3 (new Vector3 (0, 0, 0), this .plane .normal) .intersectsLine (hitRay, trackPoint);

							this .track (endPoint, trackPoint);
						}
						else
							throw new Error ("Plane and line are parallel.");
					}
					else
					{
						var
							endPoint   = new Vector3 (0, 0, 0),
							trackPoint = new Vector3 (0, 0, 0);

						if (this .getLineTrackPoint (hit, this .line, endPoint))
						{
							try
							{
								this .getLineTrackPoint (hit, new Line3 (this .line .direction, this .line .direction), trackPoint);
							}
							catch (error)
							{
								//console .log (error);

								trackPoint = endPoint;
							}
						
							this .track (endPoint, trackPoint);
						}
						else
							throw new Error ("Lines are parallel.");
					}
				}
				catch (error)
				{
					//console .log (error);

					this .trackPoint_changed_  .addEvent ();
					this .translation_changed_ .addEvent ();
				}
			},
			track: function (endPoint, trackPoint)
			{
				var
					axisRotation = this .axisRotation_ .getValue (),
					translation  = Rotation4 .inverse (axisRotation) .multVecRot (endPoint .add (this .startOffset) .subtract (this .startPoint));

				// X component

				if (! (this .minPosition_ .x > this .maxPosition_ .x))
					translation .x = Algorithm .clamp (translation .x, this .minPosition_ .x, this .maxPosition_ .x);

				// Y component

				if (! (this .minPosition_ .y > this .maxPosition_ .y))
					translation .y = Algorithm .clamp (translation .y, this .minPosition_ .y, this .maxPosition_ .y);

				this .trackPoint_changed_  = trackPoint;
				this .translation_changed_ = axisRotation .multVecRot (translation);
			},
		});

		return PlaneSensor;
	}
});



define ('cobweb/Components/Lighting/PointLight',[
	"jquery",
	"cobweb/Fields",
	"cobweb/Basic/X3DFieldDefinition",
	"cobweb/Basic/FieldDefinitionArray",
	"cobweb/Components/Lighting/X3DLightNode",
	"cobweb/Bits/X3DConstants",
],
function ($,
          Fields,
          X3DFieldDefinition,
          FieldDefinitionArray,
          X3DLightNode, 
          X3DConstants)
{
	function PointLightContainer (light)
	{
		this .light    = light;
		this .location = light .getBrowser () .getModelViewMatrix () .get () .multVecMatrix (light .location_ .getValue () .copy ());
	}

	PointLightContainer .prototype =
	{
		use: function (gl, shader, i)
		{
			var light = this .light;
		
			gl .uniform1i (shader .lightType [i],             1);
			gl .uniform1i (shader .lightOn [i],               true);
			gl .uniform3f (shader .lightColor [i],            light .color_ .r, light .color_ .g, light .color_ .b);
			gl .uniform1f (shader .lightIntensity [i],        light .intensity_ .getValue ()); // clamp
			gl .uniform1f (shader .lightAmbientIntensity [i], light .ambientIntensity_ .getValue ()); // clamp
			gl .uniform3f (shader .lightAttenuation [i],      light .attenuation_ .x, light .attenuation_ .y, light .attenuation_ .z); // max
			gl .uniform3f (shader .lightLocation [i],         this .location .x, this .location .y, this .location .z);
			gl .uniform1f (shader .lightRadius [i],           light .radius_ .getValue ());

			// For correct results the radius must be transform by the modelViewMatrix. This can only be done in the shader.
			// distanceOfLightToFragmentInLightSpace = |(FragmentPosition - LightPosition) * inverseModelViewMatrixOfLight|
			// distanceOfLightToFragmentInLightSpace can then be compared with radius.
		},
	};

	with (Fields)
	{
		function PointLight (executionContext)
		{
			X3DLightNode .call (this, executionContext .getBrowser (), executionContext);

			this .addType (X3DConstants .PointLight);
		}

		PointLight .prototype = $.extend (Object .create (X3DLightNode .prototype),
		{
			constructor: PointLight,
			fieldDefinitions: new FieldDefinitionArray ([
				new X3DFieldDefinition (X3DConstants .inputOutput, "metadata",         new SFNode ()),
				new X3DFieldDefinition (X3DConstants .inputOutput, "global",           new SFBool (true)),
				new X3DFieldDefinition (X3DConstants .inputOutput, "on",               new SFBool (true)),
				new X3DFieldDefinition (X3DConstants .inputOutput, "color",            new SFColor (1, 1, 1)),
				new X3DFieldDefinition (X3DConstants .inputOutput, "intensity",        new SFFloat (1)),
				new X3DFieldDefinition (X3DConstants .inputOutput, "ambientIntensity", new SFFloat ()),
				new X3DFieldDefinition (X3DConstants .inputOutput, "attenuation",      new SFVec3f (1, 0, 0)),
				new X3DFieldDefinition (X3DConstants .inputOutput, "location",         new SFVec3f (0, 0, 0)),
				new X3DFieldDefinition (X3DConstants .inputOutput, "radius",           new SFFloat (100)),
			]),
			getTypeName: function ()
			{
				return "PointLight";
			},
			getComponentName: function ()
			{
				return "Lighting";
			},
			getContainerField: function ()
			{
				return "children";
			},
			getContainer: function ()
			{
				return new PointLightContainer (this);
			},
		});

		return PointLight;
	}
});



define ('cobweb/Components/Rendering/PointSet',[
	"jquery",
	"cobweb/Fields",
	"cobweb/Basic/X3DFieldDefinition",
	"cobweb/Basic/FieldDefinitionArray",
	"cobweb/Components/Rendering/X3DGeometryNode",
	"cobweb/Bits/X3DCast",
	"cobweb/Bits/X3DConstants",
	"standard/Math/Numbers/Color4",
],
function ($,
          Fields,
          X3DFieldDefinition,
          FieldDefinitionArray,
          X3DGeometryNode,
          X3DCast,
          X3DConstants,
          Color4)
{
	with (Fields)
	{
		function PointSet (executionContext)
		{
			X3DGeometryNode .call (this, executionContext .getBrowser (), executionContext);

			this .addType (X3DConstants .PointSet);

			this .attribNodes  = [ ];
			this .colorNode    = null;
			this .coordNode    = null;
		}

		PointSet .prototype = $.extend (Object .create (X3DGeometryNode .prototype),
		{
			constructor: PointSet,
			fieldDefinitions: new FieldDefinitionArray ([
				new X3DFieldDefinition (X3DConstants .inputOutput, "metadata", new SFNode ()),
				new X3DFieldDefinition (X3DConstants .inputOutput, "attrib",   new MFNode ()),
				new X3DFieldDefinition (X3DConstants .inputOutput, "fogCoord", new SFNode ()),
				new X3DFieldDefinition (X3DConstants .inputOutput, "color",    new SFNode ()),
				new X3DFieldDefinition (X3DConstants .inputOutput, "coord",    new SFNode ()),
			]),
			getTypeName: function ()
			{
				return "PointSet";
			},
			getComponentName: function ()
			{
				return "Rendering";
			},
			getContainerField: function ()
			{
				return "geometry";
			},
			initialize: function ()
			{
				X3DGeometryNode .prototype .initialize .call (this);

				this .attrib_ .addInterest (this, "set_attrib__");
				this .color_  .addInterest (this, "set_color__");
				this .coord_  .addInterest (this, "set_coord__");

				this .set_attrib__ ();
				this .set_color__ ();
				this .set_coord__ ();
			},
			isLineGeometry: function ()
			{
				return true;
			},
			set_attrib__: function ()
			{
				for (var i = 0; i < this .attribNodes .length; ++ i)
					this .attribNodes [i] .removeInterest (this, "addNodeEvent");

				this .attribNodes .length = 0;

				for (var i = 0, length = this .attrib_ .length; i < length; ++ i)
				{
					var attribNode = X3DCast (X3DConstants .X3DVertexAttributeNode, this .attrib_ [i]);

					if (attribNode)
						this .attribNodes .push (attribNode);
				}

				for (var i = 0; i < this .attribNodes .length; ++ i)
					this .attribNodes [i] .addInterest (this, "addNodeEvent");
			},
			set_color__: function ()
			{
				if (this .colorNode)
				{
					this .colorNode .removeInterest (this, "addNodeEvent");
					this .colorNode .removeInterest (this, "set_transparent__");
				}

				this .colorNode = X3DCast (X3DConstants .X3DColorNode, this .color_);

				if (this .colorNode)
				{
					this .colorNode .addInterest (this, "addNodeEvent");
					this .colorNode .addInterest (this, "set_transparent__");

					this .set_transparent__ ();
				}
				else
					this .transparent_ = false;
			},
			set_transparent__: function ()
			{
				this .transparent_ = this .colorNode .isTransparent ();
			},
			set_coord__: function ()
			{
				if (this .coordNode)
					this .coordNode .removeInterest (this, "addNodeEvent");

				this .coordNode = X3DCast (X3DConstants .X3DCoordinateNode, this .coord_);

				if (this .coordNode)
					this .coordNode .addInterest (this, "addNodeEvent");
			},
			build: function ()
			{
				if (! this .coordNode || this .coordNode .isEmpty ())
					return;

				var attribArrays   = [ ];
				
				//for (size_t a = 0, size = attribNodes .size (); a < size; ++ a)
				//{
				//	attribArrays [a] .reserve (coordNode -> getSize ());

				//	for (size_t i = 0, size = coordNode -> getSize (); i < size; ++ i)
				//		attribNodes [a] -> addValue (attribArrays [a], i);
				//}
				
				if (this .colorNode)
				{
					for (var i = 0, length = this .colorNode .color_ .length; i < length; ++ i)
						this .addColor (this .colorNode .getColor (i));

					for (var length = this .coordNode .point_ .length; i < length; ++ i)
						this .addColor (new Color4 (1, 1, 1, 1));
				}

				for (var i = 0, length = this .coordNode .point_ .length; i < length; ++ i)
					this .addVertex (this .coordNode .getPoint (i));

				this .setSolid (false);
				//this .setAttribs (this .attribNodes, attribArrays);
			},
			traverse: function (context)
			{
				var browser = this .getBrowser ();

				if (browser .getShader () === browser .getDefaultShader ())
				{
					browser .setTexture (null);
					browser .setShader (browser .getPointShader ());
				}

				X3DGeometryNode .prototype .traverse .call (this, context);
			},
		});

		return PointSet;
	}
});



define ('cobweb/Components/Interpolation/PositionInterpolator2D',[
	"jquery",
	"cobweb/Fields",
	"cobweb/Basic/X3DFieldDefinition",
	"cobweb/Basic/FieldDefinitionArray",
	"cobweb/Components/Interpolation/X3DInterpolatorNode",
	"cobweb/Bits/X3DConstants",
	"standard/Math/Numbers/Vector2",
],
function ($,
          Fields,
          X3DFieldDefinition,
          FieldDefinitionArray,
          X3DInterpolatorNode, 
          X3DConstants,
          Vector2)
{
	with (Fields)
	{
		function PositionInterpolator2D (executionContext)
		{
			X3DInterpolatorNode .call (this, executionContext .getBrowser (), executionContext);

			this .addType (X3DConstants .PositionInterpolator2D);
		}

		PositionInterpolator2D .prototype = $.extend (Object .create (X3DInterpolatorNode .prototype),
		{
			constructor: PositionInterpolator2D,
			fieldDefinitions: new FieldDefinitionArray ([
				new X3DFieldDefinition (X3DConstants .inputOutput, "metadata",      new SFNode ()),
				new X3DFieldDefinition (X3DConstants .inputOnly,   "set_fraction",  new SFFloat ()),
				new X3DFieldDefinition (X3DConstants .inputOutput, "key",           new MFFloat ()),
				new X3DFieldDefinition (X3DConstants .inputOutput, "keyValue",      new MFVec2f ()),
				new X3DFieldDefinition (X3DConstants .outputOnly,  "value_changed", new SFVec2f ()),
			]),
			keyValue: new Vector2 (0, 0),
			getTypeName: function ()
			{
				return "PositionInterpolator2D";
			},
			getComponentName: function ()
			{
				return "Interpolation";
			},
			getContainerField: function ()
			{
				return "children";
			},
			initialize: function ()
			{
				X3DInterpolatorNode .prototype .initialize .call (this);

				this .keyValue_ .addInterest (this, "set_keyValue__");
			},
			set_keyValue__: function ()
			{
				var
					key      = this .key_,
					keyValue = this .keyValue_;

				if (keyValue .length < key .length)
					keyValue .resize (key .length, keyValue .length ? keyValue [keyValue .length - 1] : new SFVec2f ());
			},
			interpolate: function (index0, index1, weight)
			{
				this .value_changed_ = this .keyValue .assign (this .keyValue_ [index0] .getValue ()) .lerp (this .keyValue_ [index1] .getValue (), weight);
			},
		});

		return PositionInterpolator2D;
	}
});



define ('cobweb/Components/EnvironmentalSensor/X3DEnvironmentalSensorNode',[
	"jquery",
	"cobweb/Components/Core/X3DSensorNode",
	"cobweb/Bits/X3DConstants",
	"standard/Math/Numbers/Vector3",
],
function ($,
          X3DSensorNode, 
          X3DConstants,
          Vector3)
{
	function X3DEnvironmentalSensorNode (browser, executionContext)
	{
		X3DSensorNode .call (this, browser, executionContext);

		this .addType (X3DConstants .X3DEnvironmentalSensorNode);

		this .traversed = true;
	}

	X3DEnvironmentalSensorNode .prototype = $.extend (Object .create (X3DSensorNode .prototype),
	{
		constructor: X3DEnvironmentalSensorNode,
		initialize: function ()
		{
			X3DSensorNode .prototype .initialize .call (this);

			this .setCameraObject (true);

			this .getExecutionContext () .isLive () .addInterest (this, "set_enabled__");
			this .isLive () .addInterest (this, "set_enabled__");

			this .enabled_        .addInterest (this, "set_enabled__");
			this .size_           .addInterest (this, "set_enabled__");
			this .isCameraObject_ .addInterest (this, "set_enabled__");

			this .set_enabled__ ();
		},
		setTraversed: function (value)
		{
		   if (value)
				this .setCameraObject (true);
			else
				this .setCameraObject (this .traversed);

		   this .traversed = value;
		},
		set_enabled__: function ()
		{
			if (this .getCameraObject () && this .enabled_ .getValue () && this .isLive () .getValue () && this .getExecutionContext () .isLive () .getValue () && ! this .size_. getValue () .equals (Vector3 .Zero))
				this .getBrowser () .sensors () .addInterest (this, "update");

			else
				this .getBrowser () .sensors () .removeInterest (this, "update");
		},
		update: function () { },
	});

	return X3DEnvironmentalSensorNode;
});



define ('cobweb/Components/EnvironmentalSensor/ProximitySensor',[
	"jquery",
	"cobweb/Fields",
	"cobweb/Basic/X3DFieldDefinition",
	"cobweb/Basic/FieldDefinitionArray",
	"cobweb/Components/EnvironmentalSensor/X3DEnvironmentalSensorNode",
	"cobweb/Bits/TraverseType",
	"cobweb/Bits/X3DConstants",
	"standard/Math/Numbers/Vector3",
	"standard/Math/Numbers/Rotation4",
	"standard/Math/Numbers/Matrix4",
	"standard/Math/Geometry/Box3",
],
function ($,
          Fields,
          X3DFieldDefinition,
          FieldDefinitionArray,
          X3DEnvironmentalSensorNode, 
          TraverseType,
          X3DConstants,
          Vector3,
          Rotation4,
          Matrix4,
          Box3)
{
	with (Fields)
	{
		var unlimited = new Vector3 (-1, -1, -1);
	
		function ProximitySensor (executionContext)
		{
			X3DEnvironmentalSensorNode .call (this, executionContext .getBrowser (), executionContext);

			this .addType (X3DConstants .ProximitySensor);

			this .viewpoint              = null;
			this .modelViewMatrix        = new Matrix4 ();
			this .invModelViewMatrix     = new Matrix4 ();
			this .centerOfRotationMatrix = new Matrix4 ();
			this .position               = new Vector3 ();
			this .orientation            = new Rotation4 ();
			this .centerOfRotation       = new Vector3 ();
			this .viewer                 = new Vector3 ();
			this .inside                 = false;
		}

		ProximitySensor .prototype = $.extend (Object .create (X3DEnvironmentalSensorNode .prototype),
		{
			constructor: ProximitySensor,
			fieldDefinitions: new FieldDefinitionArray ([
				new X3DFieldDefinition (X3DConstants .inputOutput, "metadata",                 new SFNode ()),
				new X3DFieldDefinition (X3DConstants .inputOutput, "enabled",                  new SFBool (true)),
				new X3DFieldDefinition (X3DConstants .inputOutput, "size",                     new SFVec3f (0, 0, 0)),
				new X3DFieldDefinition (X3DConstants .inputOutput, "center",                   new SFVec3f (0, 0, 0)),
				new X3DFieldDefinition (X3DConstants .outputOnly,  "enterTime",                new SFTime ()),
				new X3DFieldDefinition (X3DConstants .outputOnly,  "exitTime",                 new SFTime ()),
				new X3DFieldDefinition (X3DConstants .outputOnly,  "isActive",                 new SFBool ()),
				new X3DFieldDefinition (X3DConstants .outputOnly,  "position_changed",         new SFVec3f ()),
				new X3DFieldDefinition (X3DConstants .outputOnly,  "orientation_changed",      new SFRotation ()),
				new X3DFieldDefinition (X3DConstants .outputOnly,  "centerOfRotation_changed", new SFVec3f ()),
			]),
			getTypeName: function ()
			{
				return "ProximitySensor";
			},
			getComponentName: function ()
			{
				return "EnvironmentalSensor";
			},
			getContainerField: function ()
			{
				return "children";
			},
			initialize: function ()
			{
				X3DEnvironmentalSensorNode .prototype .initialize .call (this);
				
				this .size_   .addInterest (this, "set_extents__");
				this .center_ .addInterest (this, "set_extents__");
	
				this .min = new Vector3 (0, 0, 0);
				this .max = new Vector3 (0, 0, 0);
				
				this .set_extents__ ();
			},
			set_extents__: function ()
			{
				var
					s  = this .size_ .getValue (),
					c  = this .center_ .getValue (),
					sx = s .x / 2,
					sy = s .y / 2,
					sz = s .z / 2,
					cx = c .x,
					cy = c .y,
					cz = c .z;

				this .min .set (cx - sx, cy - sy, cz - sz);
				this .max .set (cx + sx, cy + sy, cz + sz);
			},
			update: function ()
			{
				try
				{
					this .setTraversed (false);

					if (this .inside)
					{
					   var
					      modelViewMatrix        = this .modelViewMatrix,
					      centerOfRotationMatrix = this .centerOfRotationMatrix;

						centerOfRotationMatrix .assign (this .viewpoint .getParentMatrix ());
						centerOfRotationMatrix .translate (this .viewpoint .getUserCenterOfRotation ());
						centerOfRotationMatrix .multRight (this .invModelViewMatrix .assign (modelViewMatrix) .inverse ());

						modelViewMatrix .multRight (this .viewpoint .getInverseCameraSpaceMatrix ());
						modelViewMatrix .get (null, this .orientation);
						modelViewMatrix .inverse ();

						this .position .set (modelViewMatrix [12],
						                     modelViewMatrix [13],
						                     modelViewMatrix [14]);

						this .orientation .inverse ();

						this .centerOfRotation .set (centerOfRotationMatrix [12],
						                             centerOfRotationMatrix [13],
						                             centerOfRotationMatrix [14]);

						if (this .isActive_ .getValue ())
						{
							if (! this .position_changed_ .getValue () .equals (this .position))
								this .position_changed_ = this .position;

							if (! this .orientation_changed_ .getValue () .equals (this .orientation))
								this .orientation_changed_ = this .orientation;

							if (! this .centerOfRotation_changed_ .getValue () .equals (this .centerOfRotation))
								this .centerOfRotation_changed_ = this .centerOfRotation;
						}
						else
						{
							this .isActive_  = true;
							this .enterTime_ = this .getBrowser () .getCurrentTime ();

							this .position_changed_         = this .position;
							this .orientation_changed_      = this .orientation;
							this .centerOfRotation_changed_ = this .centerOfRotation;
						}

						this .inside = false;
					}
					else
					{
						if (this .isActive_ .getValue ())
						{
							this .isActive_ = false;
							this .exitTime_ = this .getBrowser () .getCurrentTime ();
						}
					}
				}
				catch (error)
				{
					//console .log (error .message);
				}
			},
			traverse: function (type)
			{
				try
				{
					switch (type)
					{
						case TraverseType .CAMERA:
						{
							this .viewpoint = this .getCurrentViewpoint ();
							this .modelViewMatrix .assign (this .getBrowser () .getModelViewMatrix () .get ());
							return;
						}
						case TraverseType .DISPLAY:
						{
						   this .setTraversed (true);

							if (this .inside)
								return;

							if (this .size_ .getValue () .equals (unlimited))
								this .inside = true;

							else
							{
							   var invModelViewMatrix = this .invModelViewMatrix;

								invModelViewMatrix .assign (this .getBrowser () .getModelViewMatrix () .get ()) .inverse ();

								this .viewer .set (invModelViewMatrix [12],
						                         invModelViewMatrix [13],
						                         invModelViewMatrix [14]);

								this .inside = this .intersectsPoint (this .viewer);
							}

							return;
						}
					}
				}
				catch (error)
				{
					//console .log (error);
				}
			},
			intersectsPoint: function (point)
			{
				var
					min = this .min,
					max = this .max;

				return min .x <= point .x &&
				       max .x >= point .x &&
				       min .y <= point .y &&
				       max .y >= point .y &&
				       min .z <= point .z &&
				       max .z >= point .z;
			},
		});

		return ProximitySensor;
	}
});



define ('cobweb/Components/Interpolation/ScalarInterpolator',[
	"jquery",
	"cobweb/Fields",
	"cobweb/Basic/X3DFieldDefinition",
	"cobweb/Basic/FieldDefinitionArray",
	"cobweb/Components/Interpolation/X3DInterpolatorNode",
	"cobweb/Bits/X3DConstants",
	"standard/Math/Algorithm",
],
function ($,
          Fields,
          X3DFieldDefinition,
          FieldDefinitionArray,
          X3DInterpolatorNode, 
          X3DConstants,
          Algorithm)
{
	with (Fields)
	{
		function ScalarInterpolator (executionContext)
		{
			X3DInterpolatorNode .call (this, executionContext .getBrowser (), executionContext);

			this .addType (X3DConstants .ScalarInterpolator);
		}

		ScalarInterpolator .prototype = $.extend (Object .create (X3DInterpolatorNode .prototype),
		{
			constructor: ScalarInterpolator,
			fieldDefinitions: new FieldDefinitionArray ([
				new X3DFieldDefinition (X3DConstants .inputOutput, "metadata",      new SFNode ()),
				new X3DFieldDefinition (X3DConstants .inputOnly,   "set_fraction",  new SFFloat ()),
				new X3DFieldDefinition (X3DConstants .inputOutput, "key",           new MFFloat ()),
				new X3DFieldDefinition (X3DConstants .inputOutput, "keyValue",      new MFFloat ()),
				new X3DFieldDefinition (X3DConstants .outputOnly,  "value_changed", new SFFloat ()),
			]),
			getTypeName: function ()
			{
				return "ScalarInterpolator";
			},
			getComponentName: function ()
			{
				return "Interpolation";
			},
			getContainerField: function ()
			{
				return "children";
			},
			initialize: function ()
			{
				X3DInterpolatorNode .prototype .initialize .call (this);

				this .keyValue_ .addInterest (this, "set_keyValue__");
			},
			set_keyValue__: function ()
			{
				var
					key      = this .key_,
					keyValue = this .keyValue_;

				if (keyValue .length < key .length)
					keyValue .resize (key .length, keyValue .length ? keyValue [keyValue .length - 1] : 0);
			},
			interpolate: function (index0, index1, weight)
			{
				this .value_changed_ = Algorithm .lerp (this .keyValue_ [index0], this .keyValue_ [index1], weight);
			},
		});

		return ScalarInterpolator;
	}
});



define ('cobweb/Execution/X3DScene',[
	"jquery",
	"cobweb/Fields",
	"cobweb/Execution/X3DExecutionContext",
	"cobweb/Bits/X3DConstants",
],
function ($,
          Fields,
          X3DExecutionContext,
          X3DConstants)
{
	with (Fields)
	{
		function X3DScene (browser, executionContext)
		{
			X3DExecutionContext .call (this, browser, executionContext);
			
			this .addChildren ("loadCount", new SFInt32 ());

			this .getRootNodes () .setAccessType (X3DConstants .inputOutput);
		}

		X3DScene .prototype = $.extend (Object .create (X3DExecutionContext .prototype),
		{
			constructor: X3DScene,
			isRootContext: function ()
			{
				return true;
			},
			setRootNodes: function (value)
			{
				this .getRootNodes () .setValue (value);
			},
			addLoadCount: function ()
			{
				this .loadCount_ = this .loadCount_ .getValue () + 1;
			},
			removeLoadCount: function ()
			{
				this .loadCount_ = this .loadCount_ .getValue () - 1;
			},
		});

		return X3DScene;
	}
});


define ('cobweb/Browser/Scripting/evaluate',[],function ()
{
	return function (/* __global__, __text__ */)
	{
		with (arguments [0])
		{
			return eval (arguments [1]);
		}		
	};
});


define ('cobweb/Components/Scripting/X3DScriptNode',[
	"jquery",
	"cobweb/Components/Core/X3DChildNode",
	"cobweb/Components/Networking/X3DUrlObject",
	"cobweb/Bits/X3DConstants",
],
function ($,
          X3DChildNode, 
          X3DUrlObject, 
          X3DConstants)
{
	function X3DScriptNode (browser, executionContext)
	{
		X3DChildNode .call (this, browser, executionContext);
		X3DUrlObject .call (this, browser, executionContext);

		this .addType (X3DConstants .X3DScriptNode);
	}

	X3DScriptNode .prototype = $.extend (Object .create (X3DChildNode .prototype),
		X3DUrlObject .prototype,
	{
		constructor: X3DScriptNode,
	});

	return X3DScriptNode;
});



define ('cobweb/Components/Scripting/Script',[
	"jquery",
	"cobweb/Basic/X3DFieldDefinition",
	"cobweb/Basic/FieldDefinitionArray",
	"cobweb/Basic/X3DField",
	"cobweb/Basic/X3DArrayField",
	"cobweb/Fields",
	"cobweb/Browser/X3DBrowser",
	"cobweb/Execution/X3DExecutionContext",
	"cobweb/Execution/X3DScene",
	"cobweb/Prototype/ExternProtoDeclarationArray",
	"cobweb/Prototype/ProtoDeclarationArray",
	"cobweb/Prototype/X3DExternProtoDeclaration",
	"cobweb/Prototype/X3DProtoDeclaration",
	"cobweb/Routing/RouteArray",
	"cobweb/Routing/X3DRoute",
	"cobweb/Browser/Scripting/evaluate",
	"cobweb/Components/Scripting/X3DScriptNode",
	"cobweb/InputOutput/Loader",
	"cobweb/Bits/X3DConstants",
],
function ($,
          X3DFieldDefinition,
          FieldDefinitionArray,
          X3DField,
          X3DArrayField,
          Fields,
          X3DBrowser,
          X3DExecutionContext,
          X3DScene,
          ExternProtoDeclarationArray,
          ProtoDeclarationArray,
          X3DExternProtoDeclaration,
          X3DProtoDeclaration,
          RouteArray,
          X3DRoute,
          evaluate,
          X3DScriptNode, 
          Loader,
          X3DConstants)
{
	with (Fields)
	{
		var
			ECMAScript = /^\s*(?:vrmlscript|javascript|ecmascript)\:((?:.|[\r\n])*)$/,
			fieldDefinitions = [
				new X3DFieldDefinition (X3DConstants .inputOutput,    "metadata",     new SFNode ()),
				new X3DFieldDefinition (X3DConstants .inputOutput,    "url",          new MFString ()),
				new X3DFieldDefinition (X3DConstants .initializeOnly, "directOutput", new SFBool (false)),
				new X3DFieldDefinition (X3DConstants .initializeOnly, "mustEvaluate", new SFBool (false)),
			];
	
		function Script (executionContext)
		{
			this .fieldDefinitions = new FieldDefinitionArray (fieldDefinitions .slice (0));

			X3DScriptNode .call (this, executionContext .getBrowser (), executionContext);

			this .addType (X3DConstants .Script);
		}

		Script .prototype = $.extend (Object .create (X3DScriptNode .prototype),
		{
			constructor: Script,
			getTypeName: function ()
			{
				return "Script";
			},
			getComponentName: function ()
			{
				return "Scripting";
			},
			getContainerField: function ()
			{
				return "children";
			},
			initialize: function ()
			{
				X3DScriptNode .prototype .initialize .call (this);

				this .url_ .addInterest (this, "set_url__");

				this .requestAsyncLoad ();
			},
			getExtendedEventHandling: function ()
			{
				return false;
			},
			hasUserDefinedFields: function ()
			{
				return true;
			},
			getCDATA: function ()
			{
				return this .url_;
			},
			requestAsyncLoad: function ()
			{
				if (this .checkLoadState () === X3DConstants .COMPLETE_STATE || this .checkLoadState () === X3DConstants .IN_PROGRESS_STATE)
					return;

				//this .getExecutionContext () .getScene () .addLoadCount ();

				for (var i = 0, length = this .url_ .length; i < length; ++ i)
				{
					var
						URL    = this .url_ [i],
						result = ECMAScript .exec (URL);

					try
					{
						if (result)
						{
							this .initialize__ (result [1]);
							break;
						}
					}
					catch (error)
					{
						console .error (error .message);
					}
				}

				//this .getExecutionContext () .getScene () .removeLoadCount ();
			},
			set_url__: function ()
			{
				this .setLoadState (X3DConstants .NOT_STATED_STATE);

				this .requestAsyncLoad ();
			},
			getContext: function (text)
			{
				var
					callbacks         = ["initialize", "prepareEvents", "eventsProcessed", "shutdown"],
					userDefinedFields = this .getUserDefinedFields ();

				for (var name in userDefinedFields)
				{
					var field = userDefinedFields [name];

					switch (field .getAccessType ())
					{
						case X3DConstants .inputOnly:
							callbacks .push (field .getName ());
							break;
						case X3DConstants .inputOutput:
							callbacks .push ("set_" + field .getName ());
							break;
					}
				}

				text += "\n;var " + callbacks .join (",") + ";";
				text += "\n[" + callbacks .join (",") + "];"

				var
					global  = Object .create ({ }, this .getGlobal ()),
					result  = evaluate (global, text),
					context = { };

				for (var i = 0; i < callbacks .length; ++ i)
				{
					if (typeof result [i] === "function")
						context [callbacks [i]] = result [i];
					else
						context [callbacks [i]] = null;
				}

				return context;
			},
			getGlobal: function ()
			{
				var browser = this .getBrowser ();

				function SFNode (vrmlSyntax)
				{
					if (typeof vrmlSyntax === "string")
					{
						var scene = browser .createX3DFromString (vrmlSyntax);

						if (scene .getRootNodes () .length && scene .getRootNodes () [0])
							return Fields .SFNode .call (this, scene .getRootNodes () [0] .getValue ());
					}

					return Fields .SFNode .call (this);
				}

				SFNode .prototype = Fields .SFNode .prototype;

				var global =
				{
					NULL:  { value: null },
					FALSE: { value: false },
					TRUE:  { value: true },
					print: { value: function () { this .print .apply (this, arguments); } .bind (this .getBrowser ()) },
					trace: { value: function () { this .print .apply (this, arguments); } .bind (this .getBrowser ()) },

					Browser: { value: this .getBrowser () },

					X3DConstants:                { value: X3DConstants },
					X3DBrowser:                  { value: X3DBrowser },
					X3DExecutionContext:         { value: X3DExecutionContext },
					X3DScene:                    { value: X3DScene },
					ExternProtoDeclarationArray: { value: ExternProtoDeclarationArray },
					ProtoDeclarationArray:       { value: ProtoDeclarationArray },
					X3DExternProtoDeclaration:   { value: X3DExternProtoDeclaration },
					X3DProtoDeclaration:         { value: X3DProtoDeclaration },
					RouteArray:                  { value: RouteArray },
					X3DRoute:                    { value: X3DRoute },

					X3DFieldDefinition:   { value: X3DFieldDefinition },
					FieldDefinitionArray: { value: FieldDefinitionArray },

					X3DField:      { value: X3DField },
					X3DArrayField: { value: X3DArrayField },

					SFColor:       { value: SFColor },
					SFColorRGBA:   { value: SFColorRGBA },
					SFImage:       { value: SFImage },
					SFMatrix3d:    { value: SFMatrix3d },
					SFMatrix3f:    { value: SFMatrix3f },
					SFMatrix4d:    { value: SFMatrix4d },
					SFMatrix4f:    { value: SFMatrix4f },
					SFNode:        { value: SFNode },
					SFRotation:    { value: SFRotation },
					SFVec3d:       { value: SFVec2d },
					SFVec2f:       { value: SFVec2f },
					SFVec2d:       { value: SFVec3d },
					SFVec3f:       { value: SFVec3f },
					SFVec4d:       { value: SFVec4d },
					SFVec4f:       { value: SFVec4f },
					VrmlMatrix:    { value: VrmlMatrix },

					MFBool:        { value: MFBool },
					MFColor:       { value: MFColor },
					MFColorRGBA:   { value: MFColorRGBA },
					MFDouble:      { value: MFDouble },
					MFFloat:       { value: MFFloat },
					MFImage:       { value: MFImage },
					MFInt32:       { value: MFInt32 },
					MFMatrix3d:    { value: MFMatrix3d },
					MFMatrix3f:    { value: MFMatrix3f },
					MFMatrix4d:    { value: MFMatrix4d },
					MFMatrix4f:    { value: MFMatrix4f },
					MFNode:        { value: MFNode },
					MFRotation:    { value: MFRotation },
					MFString:      { value: MFString },
					MFTime:        { value: MFTime },
					MFVec2d:       { value: MFVec2d },
					MFVec2f:       { value: MFVec2f },
					MFVec3d:       { value: MFVec3d },
					MFVec3f:       { value: MFVec3f },
					MFVec4d:       { value: MFVec4d },
					MFVec4f:       { value: MFVec4f },
				};

				var userDefinedFields = this .getUserDefinedFields ();

				for (var name in userDefinedFields)
				{
					var field = userDefinedFields [name];

					if (field .getAccessType () === X3DConstants .inputOnly)
						continue;

					if (! (name in global))
					{
						global [name] =
						{
							get: field .valueOf .bind (field),
							set: field .setValue .bind (field),
						};
					}

					if (field .getAccessType () === X3DConstants .inputOutput)
					{
						global [name + "_changed"] =
						{
							get: field .valueOf .bind (field),
							set: field .setValue .bind (field),
						};
					}
				}

				return global;
			},
			set_live__: function ()
			{
				var userDefinedFields = this .getUserDefinedFields ();

				if (this .getExecutionContext () .isLive ().getValue () && this .isLive () .getValue ())
				{
					if ($.isFunction (this .context .prepareEvents))
						this .getBrowser () .prepareEvents () .addInterest (this, "prepareEvents__");

					if ($.isFunction (this .context .eventsProcessed))
						this .addInterest (this, "eventsProcessed__");

					for (var name in userDefinedFields)
					{
						var field = userDefinedFields [name];
						
						switch (field .getAccessType ())
						{
							case X3DConstants .inputOnly:
							{
								var callback = this .context [field .getName ()];
	
								if ($.isFunction (callback))
									field .addInterest (this, "set_field__", callback);

								break;
							}
							case X3DConstants .inputOutput:
							{
								var callback = this .context ["set_" + field .getName ()];
	
								if ($.isFunction (callback))
									field .addInterest (this, "set_field__", callback);

								break;
							}
						}
					}
				}
				else
				{
					if (this .context .prepareEvents)
						this .getBrowser () .prepareEvents () .removeInterest (this, "prepareEvents__");

					if (this .context .eventsProcessed)
						this .removeInterest (this, "eventsProcessed__");

					for (var name in userDefinedFields)
					{
						var field = userDefinedFields [name];

						switch (field .getAccessType ())
						{
							case X3DConstants .inputOnly:
							case X3DConstants .inputOutput:
								field .removeInterest (this, "set_field__");
								break;
						}
					}
				}
			},
			initialize__: function (text)
			{
				this .context = this .getContext (text);

				this .getExecutionContext () .isLive () .addInterest (this, "set_live__");
				this .isLive () .addInterest (this, "set_live__");

				this .set_live__ ();

				try
				{
					if (this .context .initialize)
					{
						this .getBrowser () .getScriptStack () .push (this);
						this .context .initialize ();
						this .getBrowser () .getScriptStack () .pop ();
					}
				}
				catch (error)
				{
					this .setError ("initialize", error);
				}
			},
			prepareEvents__: function ()
			{
				try
				{
					this .getBrowser () .getScriptStack () .push (this);
					this .context .prepareEvents ();
					this .getBrowser () .getScriptStack () .pop ();
				}
				catch (error)
				{
					this .setError ("prepareEvents", error);
				}
			},
			set_field__: function (field, callback)
			{
				field .setTainted (true);

				try
				{
					this .getBrowser () .getScriptStack () .push (this);
					callback (field .valueOf (), this .getBrowser () .getCurrentTime ());
					this .getBrowser () .getScriptStack () .pop ();
				}
				catch (error)
				{
					this .setError (field .getName (), error);
				}

				field .setTainted (false);
			},
			eventsProcessed__: function ()
			{
				try
				{
					this .getBrowser () .getScriptStack () .push (this);
					this .context .eventsProcessed ();
					this .getBrowser () .getScriptStack () .pop ();
				}
				catch (error)
				{
					this .setError ("eventsProcessed", error);
				}
			},
			shutdown__: function ()
			{
				try
				{
					this .getBrowser () .getScriptStack () .push (this);
					this .context .shutdown ();
					this .getBrowser () .getScriptStack () .pop ();
				}
				catch (error)
				{
					this .setError ("shutdown", error);
				}
			},
			setError: function (callback, error)
			{
				console .error ("JavaScript Error in '" + callback + "': ", error);
			},
		});

		return Script;
	}
});



define ('cobweb/Components/Shape/X3DShapeNode',[
	"jquery",
	"cobweb/Components/Core/X3DChildNode",
	"cobweb/Components/Grouping/X3DBoundedObject",
	"cobweb/Bits/X3DCast",
	"cobweb/Bits/X3DConstants",
	"standard/Math/Geometry/Box3",
],
function ($,
          X3DChildNode, 
          X3DBoundedObject,
          X3DCast,
          X3DConstants,
          Box3)
{
	function X3DShapeNode (browser, executionContext)
	{
		X3DChildNode     .call (this, browser, executionContext);
		X3DBoundedObject .call (this, browser, executionContext);

		this .addType (X3DConstants .X3DShapeNode);
	}

	X3DShapeNode .prototype = $.extend (Object .create (X3DChildNode .prototype),
		X3DBoundedObject .prototype,
	{
		constructor: X3DShapeNode,
		initialize: function ()
		{
			X3DChildNode     .prototype .initialize .call (this);
			X3DBoundedObject .prototype .initialize .call (this);

			this .bboxSize_   .addInterest (this, "set_bbox__");
			this .bboxCenter_ .addInterest (this, "set_bbox__");
			this .appearance_ .addInterest (this, "set_apparance__");
			this .geometry_   .addInterest (this, "set_geometry__");

			this .set_apparance__ ();
			this .set_geometry__ ();
			this .set_bbox__ ();

			this .static_ = true;
		},
		isTransparent: function ()
		{
			return this .transparent;
		},
		getBBox: function ()
		{
			return this .bbox;
		},
		getBBoxSize: function ()
		{
			return this .bboxSize;
		},
		getBBoxCenter: function ()
		{
			return this .bboxCenter;
		},
		getAppearance: function ()
		{
			return this .apparanceNode;
		},
		getGeometry: function ()
		{
			return this .geometryNode;
		},
		set_transparent__: function ()
		{
			this .transparent = (this .apparanceNode && this .apparanceNode .transparent_ .getValue ()) ||
			                    (this .geometryNode && this .geometryNode .transparent_ .getValue ());
		},
		set_bbox__: function ()
		{
			if (this .bboxSize_ .getValue () .equals (this .defaultBBoxSize))
			{
				if (this .getGeometry ())
					this .bbox = this .getGeometry () .getBBox ();

				else
					this .bbox = new Box3 ();
			}
			else
				this .bbox = new Box3 (this .bboxSize_ .getValue (), this .bboxCenter_ .getValue ());
			
			this .bboxSize   = this .bbox .size;
			this .bboxCenter = this .bbox .center;
		},
		set_apparance__: function ()
		{
			if (this .apparanceNode)
				this .apparanceNode .removeInterest (this, "set_transparent__");

			this .apparanceNode = X3DCast (X3DConstants .X3DAppearanceNode, this .appearance_);

			if (this .apparanceNode)
				this .apparanceNode .addInterest (this, "set_transparent__");

			else
				this .apparanceNode = this .getBrowser () .getDefaultAppearance ();

			this .set_transparent__ ();
		},
		set_geometry__: function ()
		{
			if (this .geometryNode)
			{
				this .geometryNode .removeInterest (this, "set_transparent__");
				this .geometryNode .removeInterest (this, "set_bbox__");
			}

			this .geometryNode = X3DCast (X3DConstants .X3DGeometryNode, this .geometry_);

			if (this .geometryNode)
			{
				this .geometryNode .addInterest (this, "set_transparent__");
				this .geometryNode .addInterest (this, "set_bbox__");
			}

			this .set_transparent__ ();
			this .set_bbox__ ();
		},
	});

	return X3DShapeNode;
});



define ('cobweb/Components/Shape/Shape',[
	"jquery",
	"cobweb/Fields",
	"cobweb/Basic/X3DFieldDefinition",
	"cobweb/Basic/FieldDefinitionArray",
	"cobweb/Components/Shape/X3DShapeNode",
	"cobweb/Bits/TraverseType",
	"cobweb/Bits/X3DConstants",
	"standard/Math/Algorithm",
	"standard/Math/Geometry/Line3",
	"standard/Math/Numbers/Vector3",
	"standard/Math/Numbers/Matrix4",
	"standard/Math/Algorithms/QuickSort",
],
function ($,
          Fields,
          X3DFieldDefinition,
          FieldDefinitionArray,
          X3DShapeNode, 
          TraverseType,
          X3DConstants,
          Algorithm,
          Line3,
          Vector3,
          Matrix4,
          QuickSort)
{
	with (Fields)
	{
		var intersections = [ ];

		function Shape (executionContext)
		{
			X3DShapeNode .call (this, executionContext .getBrowser (), executionContext);

			this .addType (X3DConstants .Shape);
		}

		Shape .prototype = $.extend (Object .create (X3DShapeNode .prototype),
		{
			constructor: Shape,
			fieldDefinitions: new FieldDefinitionArray ([
				new X3DFieldDefinition (X3DConstants .inputOutput,    "metadata",   new SFNode ()),
				new X3DFieldDefinition (X3DConstants .initializeOnly, "bboxSize",   new SFVec3f (-1, -1, -1)),
				new X3DFieldDefinition (X3DConstants .initializeOnly, "bboxCenter", new SFVec3f (0, 0, 0)),
				new X3DFieldDefinition (X3DConstants .inputOutput,    "appearance", new SFNode ()),
				new X3DFieldDefinition (X3DConstants .inputOutput,    "geometry",   new SFNode ()),
			]),
			invModelViewMatrix: new Matrix4 (),
			hitRay: new Line3 (new Vector3 (0, 0, 0), new Vector3 (0, 0, 0)),
			intersections: intersections,
			intersectionSorter: new QuickSort (intersections, function (lhs, rhs)
         {
            return lhs .point .z > rhs .point .z;
			}),
			getTypeName: function ()
			{
				return "Shape";
			},
			getComponentName: function ()
			{
				return "Shape";
			},
			getContainerField: function ()
			{
				return "children";
			},
			traverse: function (type)
			{
				switch (type)
				{
					case TraverseType .POINTER:
					{
						this .pointer ();
						break;
					}
					case TraverseType .NAVIGATION:
					case TraverseType .COLLISION:
					{
						//if (this .getGeometry ())
						//	this .getCurrentLayer () .addCollision (this);

						break;
					}
					case TraverseType .DISPLAY:
					{
						if (this .getGeometry ())
							this .getCurrentLayer () .addShape (this);

						break;
					}
				}
			},
			pointer: function ()
			{
				if (this .getGeometry ())
				{
					try
					{
						if (this .getGeometry () .isLineGeometry ())
							return;

						var
							browser            = this .getBrowser (),
							modelViewMatrix    = browser .getModelViewMatrix () .get (),
							invModelViewMatrix = this .invModelViewMatrix .assign (modelViewMatrix) .inverse (),
							intersections      = this .intersections;

						this .hitRay .assign (browser .getHitRay ()) .multLineMatrix (invModelViewMatrix);

						if (this .getGeometry () .intersectsLine (this .hitRay, intersections))
						{
							// Finally we have intersections and must now find the closest hit in front of the camera.

							// Transform hitPoints to absolute space.
							for (var i = 0; i < intersections .length; ++ i)
								modelViewMatrix .multVecMatrix (intersections [i] .point);

							this .intersectionSorter .sort (0, intersections .length);

							// Find first point that is not greater than near plane;
							var index = Algorithm .lowerBound (intersections, 0, intersections .length, -this .getCurrentNavigationInfo () .getNearPlane (),
							                                   function (lhs, rhs)
							                                   {
							                                      return lhs .point .z > rhs;
							                                   });

							// Are there intersections before the camera.?
							if (index !== intersections .length)
							{
								// Transform hitNormal to absolute space.
								invModelViewMatrix .multMatrixDir (intersections [index] .normal) .normalize ();

								browser .addHit (intersections [index], this .getCurrentLayer ());
							}

							intersections .length = 0;
						}
					}
					catch (error)
					{
						//console .log (error);
					}
				}
			},
			draw: function (context)
			{
				this .getAppearance () .traverse ();
				this .getGeometry ()   .traverse (context);
			},
		});

		return Shape;
	}
});



define ('cobweb/Components/Sound/X3DSoundNode',[
	"jquery",
	"cobweb/Components/Core/X3DChildNode",
	"cobweb/Bits/X3DConstants",
],
function ($,
          X3DChildNode, 
          X3DConstants)
{
	function X3DSoundNode (browser, executionContext)
	{
		X3DChildNode .call (this, browser, executionContext);

		this .addType (X3DConstants .X3DSoundNode);
	}

	X3DSoundNode .prototype = $.extend (Object .create (X3DChildNode .prototype),
	{
		constructor: X3DSoundNode,
	});

	return X3DSoundNode;
});



define ('cobweb/Components/Sound/Sound',[
	"jquery",
	"cobweb/Fields",
	"cobweb/Basic/X3DFieldDefinition",
	"cobweb/Basic/FieldDefinitionArray",
	"cobweb/Components/Sound/X3DSoundNode",
	"cobweb/Bits/X3DCast",
	"cobweb/Bits/TraverseType",
	"cobweb/Bits/X3DConstants",
	"standard/Math/Numbers/Vector2",
	"standard/Math/Numbers/Vector3",
	"standard/Math/Numbers/Rotation4",
	"standard/Math/Numbers/Matrix4",
],
function ($,
          Fields,
          X3DFieldDefinition,
          FieldDefinitionArray,
          X3DSoundNode, 
          X3DCast,
          TraverseType,
          X3DConstants,
          Vector2,
          Vector3,
          Rotation4,
          Matrix4)
{
	with (Fields)
	{
		function Sound (executionContext)
		{
			X3DSoundNode .call (this, executionContext .getBrowser (), executionContext);

			this .addType (X3DConstants .Sound);

			this .min = { radius: 0, distance: 0 };
			this .max = { radius: 0, distance: 0 };
		}

		Sound .prototype = $.extend (Object .create (X3DSoundNode .prototype),
		{
			constructor: Sound,
			fieldDefinitions: new FieldDefinitionArray ([
				new X3DFieldDefinition (X3DConstants .inputOutput,    "metadata",   new SFNode ()),
				new X3DFieldDefinition (X3DConstants .inputOutput,    "intensity",  new SFFloat (1)),
				new X3DFieldDefinition (X3DConstants .initializeOnly, "spatialize", new SFBool (true)),
				new X3DFieldDefinition (X3DConstants .inputOutput,    "location",   new SFVec3f (0, 0, 0)),
				new X3DFieldDefinition (X3DConstants .inputOutput,    "direction",  new SFVec3f (0, 0, 1)),
				new X3DFieldDefinition (X3DConstants .inputOutput,    "minBack",    new SFFloat (1)),
				new X3DFieldDefinition (X3DConstants .inputOutput,    "minFront",   new SFFloat (1)),
				new X3DFieldDefinition (X3DConstants .inputOutput,    "maxBack",    new SFFloat (10)),
				new X3DFieldDefinition (X3DConstants .inputOutput,    "maxFront",   new SFFloat (10)),
				new X3DFieldDefinition (X3DConstants .inputOutput,    "priority",   new SFFloat ()),
				new X3DFieldDefinition (X3DConstants .inputOutput,    "source",     new SFNode ()),
			]),
			transformationMatrix: new Matrix4 (),
			translation: new Vector3 (0, 0, 0),
			rotation: new Rotation4 (),
			scale: new Vector3 (1, 1, 1),
			viewer: new Vector3 (0, 0, 0),
			zAxis: new Vector3 (0, 0, 1),
			getTypeName: function ()
			{
				return "Sound";
			},
			getComponentName: function ()
			{
				return "Sound";
			},
			getContainerField: function ()
			{
				return "children";
			},
			initialize: function ()
			{
				X3DSoundNode .prototype .initialize .call (this);

				this .source_ .addInterest (this, "set_source__");

				this .set_source__ ();
			},
			set_source__: function ()
			{
				this .sourceNode = X3DCast (X3DConstants .X3DSoundSourceNode, this .source_);
			},
			traverse: function (type)
			{
				if (type !== TraverseType .DISPLAY)
					return;

				if (! this .sourceNode)
					return;

				if (! this .sourceNode .isActive_ .getValue () || this .sourceNode .isPaused_ .getValue ())
					return;

				try
				{
					this .getEllipsoidParameter (this .maxBack_ .getValue (), this .maxFront_ .getValue (), this .max);
					this .getEllipsoidParameter (this .minBack_ .getValue (), this .minFront_ .getValue (), this .min);

					if (this .max .distance < this .max .radius)
					{
						if (this .min .distance < this .min .radius)
							this .sourceNode .setVolume (this .intensity_ .getValue ());

						else
						{
							var
								d1 = this .max .radius - this .max .distance,
								d2 = this .max .radius - this .min .radius;

							this .sourceNode .setVolume (this .intensity_ .getValue () * (d1 / d2));
						}
					}
					else
						this .sourceNode .setVolume (0);
				}
				catch (error)
				{
				   console .log (error);
				}
			},
			getEllipsoidParameter: function (back, front, value)
			{
				/*
				 * http://de.wikipedia.org/wiki/Ellipse
				 *
				 * The ellipsoid is transformed to a sphere for easier calculation and then the viewer position is
				 * transformed into this coordinate system. The radius and distance can then be obtained.
				 */

				var
					a = (back + front) / 2,
					e = a - back,
					b = Math .sqrt (a * a - e * e);
				
				this .translation .z = e;
				this .rotation .setFromTo (this .zAxis, this .direction_ .getValue ());
				this .scale .z = b / a;

				var transformationMatrix = this .transformationMatrix;

				transformationMatrix .assign (this .getBrowser () .getModelViewMatrix () .get ());
				transformationMatrix .translate (this .location_ .getValue ());
				transformationMatrix .rotate (this .rotation);

				transformationMatrix .translate (this .translation);
				transformationMatrix .scale (this .scale);

				transformationMatrix .inverse ();

				this .viewer .set (transformationMatrix [12],
				                   transformationMatrix [13],
				                   transformationMatrix [14]);

				value .radius   = b;
				value .distance = this .viewer .abs ();
			},
		});

		return Sound;
	}
});



define ('cobweb/Components/Geometry3D/Sphere',[
	"jquery",
	"cobweb/Fields",
	"cobweb/Basic/X3DFieldDefinition",
	"cobweb/Basic/FieldDefinitionArray",
	"cobweb/Components/Rendering/X3DGeometryNode",
	"cobweb/Bits/X3DConstants",
	"standard/Math/Numbers/Vector3",
],
function ($,
          Fields,
          X3DFieldDefinition,
          FieldDefinitionArray,
          X3DGeometryNode, 
          X3DConstants,
          Vector3)
{
	with (Fields)
	{
		function Sphere (executionContext)
		{
			X3DGeometryNode .call (this, executionContext .getBrowser (), executionContext);

			this .addType (X3DConstants .Sphere);
		}

		Sphere .prototype = $.extend (Object .create (X3DGeometryNode .prototype),
		{
			constructor: Sphere,
			fieldDefinitions: new FieldDefinitionArray ([
				new X3DFieldDefinition (X3DConstants .inputOutput,    "metadata", new SFNode ()),
				new X3DFieldDefinition (X3DConstants .initializeOnly, "radius",   new SFFloat (1)),
				new X3DFieldDefinition (X3DConstants .initializeOnly, "solid",    new SFBool (true)),
			]),
			getTypeName: function ()
			{
				return "Sphere";
			},
			getComponentName: function ()
			{
				return "Geometry3D";
			},
			getContainerField: function ()
			{
				return "geometry";
			},
			build: function ()
			{
				var
					options = this .getBrowser () .getSphereOptions (),
					radius  = this .radius_ .getValue ();

				this .setNormals   (options .getGeometry () .getNormals ());
				this .setTexCoords (options .getGeometry () .getTexCoords ());

				if (radius === 1)
				{
					this .setVertices (options .getGeometry () .getVertices ());
					this .setExtents  (options .getGeometry () .getExtents ());
				}
				else
				{
					var
						defaultVertices = options .getGeometry () .getVertices (),
						vertices        = this .getVertices ();

					for (var i = 0; i < defaultVertices .length; i += 4)
					{
						vertices .push (radius * defaultVertices [i],
						                radius * defaultVertices [i + 1],
						                radius * defaultVertices [i + 2],
						                1);
					}

					this .setVertices (vertices);
					this .setExtents  ([new Vector3 (-radius, -radius, -radius), new Vector3 (radius, radius, radius)]);
				}

				this .setSolid (this .solid_ .getValue ());
				this .setCurrentTexCoord (null);
			},
		});

		return Sphere;
	}
});



define ('standard/Math/Geometry/Sphere3',[
	"standard/Math/Numbers/Vector3",
],
function (Vector3)
{
	function Sphere3 (radius, center)
	{
		this .radius = radius;
		this .center = center .copy ();
	}

	Sphere3 .prototype =
	{
		constructor: Sphere3,
		intersectsLine: function (line, intersection1, intersection2)
		{
			var
				L   = Vector3 .subtract (this .center, line .point),
				tca = Vector3 .dot (L, line .direction);

			if (tca < 0)
				// there is no intersection
				return false;

			var
				d2 = Vector3 .dot (L, L) -Math .pow (tca, 2),
				r2 = Math .pow (this .radius, 2);

			if (d2 > r2)
				return false;

			var thc = Math .sqrt (r2 - d2);

			var
				t1 = tca - thc,
				t2 = tca + thc;

			intersection1 .assign (line .direction) .multiply (t1) .add (line .point);
			intersection2 .assign (line .direction) .multiply (t2) .add (line .point);

			return true;
		},
		toString: function ()
		{
			return this .radius + " " + this .center .toString ();
		},
	};

	return Sphere3;
});


define ('cobweb/Components/PointingDeviceSensor/SphereSensor',[
	"jquery",
	"cobweb/Fields",
	"cobweb/Basic/X3DFieldDefinition",
	"cobweb/Basic/FieldDefinitionArray",
	"cobweb/Components/PointingDeviceSensor/X3DDragSensorNode",
	"cobweb/Bits/X3DConstants",
	"standard/Math/Numbers/Vector3",
	"standard/Math/Numbers/Rotation4",
	"standard/Math/Numbers/Matrix4",
	"standard/Math/Geometry/Triangle3",
	"standard/Math/Geometry/Line3",
	"standard/Math/Geometry/Plane3",
	"standard/Math/Geometry/Sphere3",
],
function ($,
          Fields,
          X3DFieldDefinition,
          FieldDefinitionArray,
          X3DDragSensorNode, 
          X3DConstants,
          Vector3,
          Rotation4,
          Matrix4,
          Triangle3,
          Line3,
          Plane3,
          Sphere3)
{
	with (Fields)
	{
		function SphereSensor (executionContext)
		{
			X3DDragSensorNode .call (this, executionContext .getBrowser (), executionContext);

			this .addType (X3DConstants .SphereSensor);
		}

		SphereSensor .prototype = $.extend (Object .create (X3DDragSensorNode .prototype),
		{
			constructor: SphereSensor,
			fieldDefinitions: new FieldDefinitionArray ([
				new X3DFieldDefinition (X3DConstants .inputOutput, "metadata",           new SFNode ()),
				new X3DFieldDefinition (X3DConstants .inputOutput, "enabled",            new SFBool (true)),
				new X3DFieldDefinition (X3DConstants .inputOutput, "description",        new SFString ("")),
				new X3DFieldDefinition (X3DConstants .inputOutput, "autoOffset",         new SFBool (true)),
				new X3DFieldDefinition (X3DConstants .inputOutput, "offset",             new SFRotation (0, 0, 1, 0)),
				new X3DFieldDefinition (X3DConstants .outputOnly,  "trackPoint_changed", new SFVec3f ()),
				new X3DFieldDefinition (X3DConstants .outputOnly,  "rotation_changed",   new SFRotation ()),
				new X3DFieldDefinition (X3DConstants .outputOnly,  "isOver",             new SFBool ()),
				new X3DFieldDefinition (X3DConstants .outputOnly,  "isActive",           new SFBool ()),
			]),
			getTypeName: function ()
			{
				return "SphereSensor";
			},
			getComponentName: function ()
			{
				return "PointingDeviceSensor";
			},
			getContainerField: function ()
			{
				return "children";
			},
			initialize: function ()
			{
				X3DDragSensorNode .prototype .initialize .call (this);

				this .modelViewMatrix    = new Matrix4 ();
				this .invModelViewMatrix = new Matrix4 ();

				this .sphere      = null;
				this .zPlane      = null;
				this .behind      = false;
				this .fromVector  = new Vector3 (0, 0, 0);
				this .startPoint  = new Vector3 (0, 0, 0);
				this .startOffset = new Rotation4 (0, 0, 1, 0);
			},
			getTrackPoint: function (hitRay, trackPoint, behind)
			{
				var exit = new Vector3 (0, 0, 0);

				if (this .sphere .intersectsLine (hitRay, trackPoint, exit))
				{
					if ((Vector3 .subtract (hitRay .point, exit) .abs () < Vector3 .subtract (hitRay .point, trackPoint) .abs ()) - behind)
						trackPoint .assign (exit);

					return true;
				}

				return false;
			},
			set_active__: function (hit, active)
			{
				X3DDragSensorNode .prototype .set_active__ .call (this, hit, active);

				try
				{
					if (this .isActive_ .getValue ())
					{
						var matrices = this .getMatrices () [hit .layer .getId ()];

						this .modelViewMatrix .assign (matrices .modelViewMatrix);
						this .invModelViewMatrix .assign (this .modelViewMatrix) .inverse ();

						var
							hitPoint = this .invModelViewMatrix .multVecMatrix (hit .intersection .point .copy ()),
							center   = new Vector3 (0, 0, 0);

						this .zPlane = new Plane3 (center, this .invModelViewMatrix .multDirMatrix (new Vector3 (0, 0, 1)) .normalize ()); // Screen aligned Z-plane
						this .sphere = new Sphere3 (hitPoint .abs (), center);
						this .behind = this .zPlane .getDistanceToPoint (hitPoint) < 0;

						this .fromVector  .assign (hitPoint);
						this .startPoint  .assign (hitPoint);
						this .startOffset .assign (this .offset_ .getValue ());
					}
					else
					{
						if (this .autoOffset_ .getValue ())
							this .offset_ = this .rotation_changed_;
					}
				}
				catch (error)
				{
					//console .log (error);
				}
			},
			set_motion__: function (hit)
			{
				try
				{
					var
						hitRay     = hit .hitRay .copy () .multLineMatrix (this .invModelViewMatrix),
						trackPoint = new Vector3 (0, 0, 0);

					if (this .getTrackPoint (hitRay, trackPoint, this .behind))
					{
						var zAxis = this .invModelViewMatrix .multDirMatrix (new Vector3 (0, 0, 1)) .normalize (); // Camera direction
						this .zPlane = new Plane3 (trackPoint, zAxis);                                             // Screen aligned Z-plane
					}
					else
					{
						// Find trackPoint on the plane with sphere

						var tangentPoint = new Vector3 (0, 0, 0);
						this .zPlane .intersectsLine (hitRay, tangentPoint);

						hitRay = new Line3 (tangentPoint, Vector3 .subtract (this .sphere .center, tangentPoint) .normalize ());
						
						//console .log (hitRay .toString ());

						this .getTrackPoint (hitRay, trackPoint, false);

						// Find trackPoint behind sphere

						var
							triNormal     = Triangle3 .normal (this .sphere .center, trackPoint, this .startPoint),
							dirFromCenter = Vector3 .subtract (trackPoint, this .sphere .center) .normalize (),
							normal        = Vector3 .cross (triNormal, dirFromCenter) .normalize ();

						var point1 = Vector3 .subtract (trackPoint, normal .multiply (Vector3 .subtract (tangentPoint, trackPoint) .abs ()));

						hitRay = new Line3 (point1, Vector3 .subtract (this .sphere .center, point1) .normalize ());

						this .getTrackPoint (hitRay, trackPoint, false);
					}

					this .trackPoint_changed_ = trackPoint;

					var
						toVector = Vector3 .subtract (trackPoint, this .sphere .center),
						rotation = new Rotation4 (this .fromVector, toVector);

					if (this .behind)
						rotation .inverse ();

					this .rotation_changed_ = Rotation4 .multRight (this .startOffset, rotation);
				}
				catch (error)
				{
					//console .log (error);

					this .trackPoint_changed_ .addEvent ();
					this .rotation_changed_   .addEvent ();
				}
			},
		});

		return SphereSensor;
	}
});



define ('cobweb/Components/Lighting/SpotLight',[
	"jquery",
	"cobweb/Fields",
	"cobweb/Basic/X3DFieldDefinition",
	"cobweb/Basic/FieldDefinitionArray",
	"cobweb/Components/Lighting/X3DLightNode",
	"cobweb/Bits/X3DConstants",
],
function ($,
          Fields,
          X3DFieldDefinition,
          FieldDefinitionArray,
          X3DLightNode, 
          X3DConstants)
{
	function SpotLightContainer (light)
	{
		this .light     = light;
		this .location  = light .getBrowser () .getModelViewMatrix () .get () .multVecMatrix (light .location_ .getValue () .copy ());
		this .direction = light .getBrowser () .getModelViewMatrix () .get () .multDirMatrix (light .direction_ .getValue () .copy ()) .normalize ();
	}

	SpotLightContainer .prototype =
	{
		use: function (gl, shader, i)
		{
			var light = this .light;
		
			gl .uniform1i (shader .lightType [i],             2);
			gl .uniform1i (shader .lightOn [i],               true);
			gl .uniform3f (shader .lightColor [i],            light .color_ .r, light .color_ .g, light .color_ .b);
			gl .uniform1f (shader .lightIntensity [i],        light .intensity_ .getValue ()); // clamp
			gl .uniform1f (shader .lightAmbientIntensity [i], light .ambientIntensity_ .getValue ()); // clamp
			gl .uniform3f (shader .lightAttenuation [i],      light .attenuation_ .x, light .attenuation_ .y, light .attenuation_ .z); // max
			gl .uniform3f (shader .lightLocation [i],         this .location .x, this .location .y, this .location .z);
			gl .uniform3f (shader .lightDirection [i],        this .direction .x, this .direction .y, this .direction .z);
			gl .uniform1f (shader .lightBeamWidth [i],        light .beamWidth_ .getValue ()); // clamp
			gl .uniform1f (shader .lightCutOffAngle [i],      light .cutOffAngle_ .getValue ()); // clamp
			gl .uniform1f (shader .lightRadius [i],           light .radius_ .getValue ()); // max
		},
	};

	with (Fields)
	{
		function SpotLight (executionContext)
		{
			X3DLightNode .call (this, executionContext .getBrowser (), executionContext);

			this .addType (X3DConstants .SpotLight);
		}

		SpotLight .prototype = $.extend (Object .create (X3DLightNode .prototype),
		{
			constructor: SpotLight,
			fieldDefinitions: new FieldDefinitionArray ([
				new X3DFieldDefinition (X3DConstants .inputOutput, "metadata",         new SFNode ()),
				new X3DFieldDefinition (X3DConstants .inputOutput, "global",           new SFBool (true)),
				new X3DFieldDefinition (X3DConstants .inputOutput, "on",               new SFBool (true)),
				new X3DFieldDefinition (X3DConstants .inputOutput, "color",            new SFColor (1, 1, 1)),
				new X3DFieldDefinition (X3DConstants .inputOutput, "intensity",        new SFFloat (1)),
				new X3DFieldDefinition (X3DConstants .inputOutput, "ambientIntensity", new SFFloat ()),
				new X3DFieldDefinition (X3DConstants .inputOutput, "attenuation",      new SFVec3f (1, 0, 0)),
				new X3DFieldDefinition (X3DConstants .inputOutput, "location",         new SFVec3f (0, 0, 0)),
				new X3DFieldDefinition (X3DConstants .inputOutput, "direction",        new SFVec3f (0, 0, -1)),
				new X3DFieldDefinition (X3DConstants .inputOutput, "radius",           new SFFloat (100)),
				new X3DFieldDefinition (X3DConstants .inputOutput, "beamWidth",        new SFFloat (0.785398)),
				new X3DFieldDefinition (X3DConstants .inputOutput, "cutOffAngle",      new SFFloat (1.5708)),
			]),
			getTypeName: function ()
			{
				return "SpotLight";
			},
			getComponentName: function ()
			{
				return "Lighting";
			},
			getContainerField: function ()
			{
				return "children";
			},
			getContainer: function ()
			{
				return new SpotLightContainer (this);
			},
		});

		return SpotLight;
	}
});



define ('cobweb/Components/Grouping/Switch',[
	"jquery",
	"cobweb/Fields",
	"cobweb/Basic/X3DFieldDefinition",
	"cobweb/Basic/FieldDefinitionArray",
	"cobweb/Components/Grouping/X3DGroupingNode",
	"cobweb/Bits/X3DCast",
	"cobweb/Bits/X3DConstants",
	"standard/Math/Geometry/Box3",
],
function ($,
          Fields,
          X3DFieldDefinition,
          FieldDefinitionArray,
          X3DGroupingNode, 
          X3DCast,
          X3DConstants,
          Box3)
{
	with (Fields)
	{
		function Switch (executionContext)
		{
			X3DGroupingNode .call (this, executionContext .getBrowser (), executionContext);

			this .addType (X3DConstants .Switch);

			this .addAlias ("choice", this .children_);
		}

		Switch .prototype = $.extend (Object .create (X3DGroupingNode .prototype),
		{
			constructor: Switch,
			fieldDefinitions: new FieldDefinitionArray ([
				new X3DFieldDefinition (X3DConstants .inputOutput,    "metadata",       new SFNode ()),
				new X3DFieldDefinition (X3DConstants .inputOutput,    "whichChoice",    new SFInt32 (-1)),
				new X3DFieldDefinition (X3DConstants .initializeOnly, "bboxSize",       new SFVec3f (-1, -1, -1)),
				new X3DFieldDefinition (X3DConstants .initializeOnly, "bboxCenter",     new SFVec3f (0, 0, 0)),
				new X3DFieldDefinition (X3DConstants .inputOnly,      "addChildren",    new MFNode ()),
				new X3DFieldDefinition (X3DConstants .inputOnly,      "removeChildren", new MFNode ()),
				new X3DFieldDefinition (X3DConstants .inputOutput,    "children",       new MFNode ()),
			]),
			getTypeName: function ()
			{
				return "Switch";
			},
			getComponentName: function ()
			{
				return "Grouping";
			},
			getContainerField: function ()
			{
				return "children";
			},
			initialize: function ()
			{
				X3DGroupingNode .prototype .initialize .call (this);
				
				this .whichChoice_ .addInterest (this, "set_whichChoice__");
				
				this .set_whichChoice__ ();
			},
			getBBox: function () 
			{
				if (this .bboxSize_ .getValue () .equals (this .defaultBBoxSize))
				{
					var boundedObject = X3DCast (X3DConstants .X3DBoundedObject, this .child);

					if (boundedObject)
						return boundedObject .getBBox ();

					return new Box3 ();
				}

				return new Box3 (this .bboxSize_ .getValue (), this .bboxCenter_ .getValue ());
			},
			set_whichChoice__: function ()
			{
				this .child = this .getChild (this .whichChoice_ .getValue ());

				this .set_cameraObjects__ ();
			},
			set_cameraObjects__: function ()
			{
				if (this .child && this .child .getCameraObject)
					this .setCameraObject (this .child .getCameraObject ());
				else
					this .setCameraObject (false);
			},
			traverse: function (type)
			{
				if (this .child)
					this .child .traverse (type);
			},
		});

		return Switch;
	}
});



define ('cobweb/Components/Text/Text',[
	"jquery",
	"cobweb/Fields",
	"cobweb/Basic/X3DFieldDefinition",
	"cobweb/Basic/FieldDefinitionArray",
	"cobweb/Components/Rendering/X3DGeometryNode",
	"cobweb/Bits/X3DCast",
	"cobweb/Bits/X3DConstants",
],
function ($,
          Fields,
          X3DFieldDefinition,
          FieldDefinitionArray,
          X3DGeometryNode, 
          X3DCast,
          X3DConstants)
{
	with (Fields)
	{
		function Text (executionContext)
		{
			X3DGeometryNode .call (this, executionContext .getBrowser (), executionContext);

			this .addType (X3DConstants .Text);
		}

		Text .prototype = $.extend (Object .create (X3DGeometryNode .prototype),
		{
			constructor: Text,
			fieldDefinitions: new FieldDefinitionArray ([
				new X3DFieldDefinition (X3DConstants .inputOutput,    "metadata",   new SFNode ()),
				new X3DFieldDefinition (X3DConstants .inputOutput,    "string",     new MFString ()),
				new X3DFieldDefinition (X3DConstants .inputOutput,    "length",     new MFFloat ()),
				new X3DFieldDefinition (X3DConstants .inputOutput,    "maxExtent",  new SFFloat ()),
				new X3DFieldDefinition (X3DConstants .initializeOnly, "solid",      new SFBool (false)),
				new X3DFieldDefinition (X3DConstants .outputOnly,     "origin",     new SFVec3f ()),
				new X3DFieldDefinition (X3DConstants .outputOnly,     "textBounds", new SFVec2f ()),
				new X3DFieldDefinition (X3DConstants .outputOnly,     "lineBounds", new MFVec2f ()),
				new X3DFieldDefinition (X3DConstants .inputOutput,    "fontStyle",  new SFNode ()),
			]),
			getTypeName: function ()
			{
				return "Text";
			},
			getComponentName: function ()
			{
				return "Text";
			},
			getContainerField: function ()
			{
				return "geometry";
			},
			initialize: function ()
			{
			   X3DGeometryNode .prototype .initialize .call (this);

			   this .addInterest (this, "set_textGeometry__");
			   this .fontStyle_ .addInterest (this, "set_fontStyle__");

				this .set_fontStyle__ ();
			},
			getLength: function (index)
			{
				if (index < this .length_ .length)
					return this .length_ [index];

				return 0;
			},
			set_fontStyle__: function ()
			{
			   if (this .fontStyleNode)
			   {
			      this .fontStyleNode .removeInterest (this, "set_textGeometry__");
			      this .fontStyleNode .removeInterest (this, "addNodeEvent");
			   }

				this .fontStyleNode = X3DCast (X3DConstants .X3DFontStyleNode, this .fontStyle_);

				if (! this .fontStyleNode)
					this .fontStyleNode = this .getBrowser () .getDefaultFontStyle ();

			   this .fontStyleNode .addInterest (this, "set_textGeometry__");
			   this .fontStyleNode .addInterest (this, "addNodeEvent");

			   this .textGeometry = this .fontStyleNode .getTextGeometry (this);
			},
			set_textGeometry__: function ()
			{
			   this .textGeometry .update ();
			},
			debug: function ()
			{
			   console .log ("debug");
			},
			build: function ()
			{
			   this .textGeometry .build ();

			   //'Hello W√∂rld! O√ñ &% ABCDEFGHIJKLMNOPQRSTUVW abcdefghijklmnopqrstuvw √Ñ√ñ√ú√§√∂√º√ü 0123456789 ^¬∞!"¬ß$%&/()=?+*~\'#-_.:,; √Å√ì√ö√°√≥√∫ ‚Ä≤¬π¬≤¬≥¬º¬Ω¬¨{[]}\\@≈Ç‚Ç¨¬∂≈ß‚Üê‚Üì‚Üí√∏√æ≈ø√∞ƒë≈ãƒß≈Ç|¬ª¬´¬¢‚Äû‚Äú‚Äù¬µ¬∑‚Ä¶‚Äì flfiff'

				this .setSolid (this .solid_ .getValue ());
			},
		});

		return Text;
	}
});



define ('cobweb/Components/Grouping/X3DTransformMatrix4DNode',[
	"jquery",
	"cobweb/Components/Grouping/X3DGroupingNode",
	"cobweb/Bits/X3DConstants",
	"standard/Math/Numbers/Vector3",
	"standard/Math/Numbers/Rotation4",
	"standard/Math/Numbers/Matrix4",
],
function ($,
          X3DGroupingNode,
          X3DConstants,
          Vector3,
          Rotation4,
          Matrix4)
{
	function X3DTransformMatrix4DNode (browser, executionContext)
	{
		X3DGroupingNode .call (this, browser, executionContext);

		this .addType (X3DConstants .X3DTransformMatrix4DNode);

		this .matrix = new Matrix4 ();
	}

	X3DTransformMatrix4DNode .prototype = $.extend (Object .create (X3DGroupingNode .prototype),
	{
		constructor: X3DTransformMatrix4DNode,
		getBBox: function ()
		{
			var bbox = X3DGroupingNode .prototype .getBBox .call (this);

			if (this .traverse === traverse)
				return bbox .multRight (this .matrix);

			return bbox;
		},
		setTransform: function (t, r, s, so, c)
		{
			if (t .equals (Vector3 .Zero) && r .equals (Rotation4 .Identity) && s .equals (Vector3 .One))
			{
				this .matrix .identity ();
				this .traverse = X3DGroupingNode .prototype .traverse;
			}
			else
			{
			   this .matrix .set (t, r, s, so, c);
				this .traverse = traverse;
			}
		},
	});

	function traverse (type)
	{
		var modelViewMatrix = this .getBrowser () .getModelViewMatrix ();

		modelViewMatrix .push ();
		modelViewMatrix .multLeft (this .matrix);
		
		X3DGroupingNode .prototype .traverse .call (this, type);

		modelViewMatrix .pop ();
	}

	return X3DTransformMatrix4DNode;
});



define ('cobweb/Components/Grouping/X3DTransformNode',[
	"jquery",
	"cobweb/Components/Grouping/X3DTransformMatrix4DNode",
	"cobweb/Bits/X3DConstants",
],
function ($,
          X3DTransformMatrix4DNode, 
          X3DConstants)
{
	function X3DTransformNode (browser, executionContext)
	{
		X3DTransformMatrix4DNode .call (this, browser, executionContext);

		this .addType (X3DConstants .X3DTransformNode);
	}

	X3DTransformNode .prototype = $.extend (Object .create (X3DTransformMatrix4DNode .prototype),
	{
		constructor: X3DTransformNode,
		initialize: function ()
		{
			X3DTransformMatrix4DNode .prototype .initialize .call (this);
			
			this .addInterest (this, "update");

			this .update ();
		},
		update: function ()
		{
			this .setHidden (this .scale_ .x === 0 ||
			                 this .scale_ .y === 0 ||
			                 this .scale_ .z === 0);

			this .setTransform (this .translation_ .getValue (),
			                    this .rotation_ .getValue (),
			                    this .scale_ .getValue (),
			                    this .scaleOrientation_ .getValue (),
			                    this .center_ .getValue ());
		},
	});

	return X3DTransformNode;
});



define ('cobweb/Components/Grouping/Transform',[
	"jquery",
	"cobweb/Fields",
	"cobweb/Basic/X3DFieldDefinition",
	"cobweb/Basic/FieldDefinitionArray",
	"cobweb/Components/Grouping/X3DTransformNode",
	"cobweb/Bits/X3DConstants",
],
function ($,
          Fields,
          X3DFieldDefinition,
          FieldDefinitionArray,
          X3DTransformNode, 
          X3DConstants)
{
	with (Fields)
	{
		function Transform (executionContext)
		{
			X3DTransformNode .call (this, executionContext .getBrowser (), executionContext);

			this .addType (X3DConstants .Transform);
		}

		Transform .prototype = $.extend (Object .create (X3DTransformNode .prototype),
		{
			constructor: Transform,
			fieldDefinitions: new FieldDefinitionArray ([
				new X3DFieldDefinition (X3DConstants .inputOutput,    "metadata",         new SFNode ()),
				new X3DFieldDefinition (X3DConstants .inputOutput,    "translation",      new SFVec3f (0, 0, 0)),
				new X3DFieldDefinition (X3DConstants .inputOutput,    "rotation",         new SFRotation (0, 0, 1, 0)),
				new X3DFieldDefinition (X3DConstants .inputOutput,    "scale",            new SFVec3f (1, 1, 1)),
				new X3DFieldDefinition (X3DConstants .inputOutput,    "scaleOrientation", new SFRotation (0, 0, 1, 0)),
				new X3DFieldDefinition (X3DConstants .inputOutput,    "center",           new SFVec3f (0, 0, 0)),
				new X3DFieldDefinition (X3DConstants .initializeOnly, "bboxSize",         new SFVec3f (-1, -1, -1)),
				new X3DFieldDefinition (X3DConstants .initializeOnly, "bboxCenter",       new SFVec3f (0, 0, 0)),
				new X3DFieldDefinition (X3DConstants .inputOnly,      "addChildren",      new MFNode ()),
				new X3DFieldDefinition (X3DConstants .inputOnly,      "removeChildren",   new MFNode ()),
				new X3DFieldDefinition (X3DConstants .inputOutput,    "children",         new MFNode ()),
			]),
			getTypeName: function ()
			{
				return "Transform";
			},
			getComponentName: function ()
			{
				return "Grouping";
			},
			getContainerField: function ()
			{
				return "children";
			},
		});

		return Transform;
	}
});



define ('cobweb/Components/EnvironmentalSensor/VisibilitySensor',[
	"jquery",
	"cobweb/Fields",
	"cobweb/Basic/X3DFieldDefinition",
	"cobweb/Basic/FieldDefinitionArray",
	"cobweb/Components/EnvironmentalSensor/X3DEnvironmentalSensorNode",
	"cobweb/Bits/TraverseType",
	"cobweb/Bits/X3DConstants",
	"standard/Math/Numbers/Vector3",
	"standard/Math/Geometry/Box3",
],
function ($,
          Fields,
          X3DFieldDefinition,
          FieldDefinitionArray,
          X3DEnvironmentalSensorNode,
          TraverseType,
          X3DConstants,
          Vector3,
          Box3)
{
	with (Fields)
	{
		var unlimited = new Vector3 (-1, -1, -1);
	
		function VisibilitySensor (executionContext)
		{
			X3DEnvironmentalSensorNode .call (this, executionContext .getBrowser (), executionContext);

			this .addType (X3DConstants .VisibilitySensor);

			this .visible = false;
		}

		VisibilitySensor .prototype = $.extend (Object .create (X3DEnvironmentalSensorNode .prototype),
		{
			constructor: VisibilitySensor,
			fieldDefinitions: new FieldDefinitionArray ([
				new X3DFieldDefinition (X3DConstants .inputOutput, "metadata",  new SFNode ()),
				new X3DFieldDefinition (X3DConstants .inputOutput, "enabled",   new SFBool (true)),
				new X3DFieldDefinition (X3DConstants .inputOutput, "size",      new SFVec3f (0, 0, 0)),
				new X3DFieldDefinition (X3DConstants .inputOutput, "center",    new SFVec3f (0, 0, 0)),
				new X3DFieldDefinition (X3DConstants .outputOnly,  "enterTime", new SFTime ()),
				new X3DFieldDefinition (X3DConstants .outputOnly,  "exitTime",  new SFTime ()),
				new X3DFieldDefinition (X3DConstants .outputOnly,  "isActive",  new SFBool ()),
			]),
			size: new Vector3 (0, 0, 0),
			center: new Vector3 (0, 0, 0),
			getTypeName: function ()
			{
				return "VisibilitySensor";
			},
			getComponentName: function ()
			{
				return "EnvironmentalSensor";
			},
			getContainerField: function ()
			{
				return "children";
			},
			initialize: function ()
			{
				X3DEnvironmentalSensorNode .prototype .initialize .call (this);
			},
			update: function ()
			{
				this .setTraversed (false);

				if (this .visible)
				{
					if (! this .isActive_ .getValue ())
					{
						this .isActive_  = true;
						this .enterTime_ = this .getBrowser () .getCurrentTime ();
					}

					this .visible = false;
				}
				else
				{
					if (this .isActive_ .getValue ())
					{
						this .isActive_ = false;
						this .exitTime_ = this .getBrowser () .getCurrentTime ();
					}
				}
			},
			traverse: function (type)
			{
			   switch (type)
			   {
					case TraverseType .CAMERA:
					{
						if (! this .enabled_ .getValue () || this .visible)
							return;

						if (this .size_ .getValue () .equals (unlimited))
							this .visible = true;

						else
						{
							var
								viewVolumes     = this .getCurrentLayer () .getViewVolumeStack (),
								modelViewMatrix = this .getModelViewMatrix (type),
								size            = modelViewMatrix .multDirMatrix (this .size .assign (this .size_ .getValue ())),
								center          = modelViewMatrix .multVecMatrix (this .center .assign (this .center_ .getValue ()));

							this .visible = viewVolumes [viewVolumes .length - 1] .intersectsSphere (size .abs () / 2, center);
						}

						break;
					}
					case TraverseType .DISPLAY:
						this .setTraversed (true);
						break;
				}
			},
		});

		return VisibilitySensor;
	}
});



define ('cobweb/Components/Core/X3DInfoNode',[
	"jquery",
	"cobweb/Components/Core/X3DChildNode",
	"cobweb/Bits/X3DConstants",
],
function ($,
          X3DChildNode, 
          X3DConstants)
{
	function X3DInfoNode (browser, executionContext)
	{
		X3DChildNode .call (this, browser, executionContext);

		this .addType (X3DConstants .X3DInfoNode);
	}

	X3DInfoNode .prototype = $.extend (Object .create (X3DChildNode .prototype),
	{
		constructor: X3DInfoNode,
	});

	return X3DInfoNode;
});



define ('cobweb/Components/Core/WorldInfo',[
	"jquery",
	"cobweb/Fields",
	"cobweb/Basic/X3DFieldDefinition",
	"cobweb/Basic/FieldDefinitionArray",
	"cobweb/Components/Core/X3DInfoNode",
	"cobweb/Bits/X3DConstants",
],
function ($,
          Fields,
          X3DFieldDefinition,
          FieldDefinitionArray,
          X3DInfoNode, 
          X3DConstants)
{
	with (Fields)
	{
		function WorldInfo (executionContext)
		{
			X3DInfoNode .call (this, executionContext .getBrowser (), executionContext);

			this .addType (X3DConstants .WorldInfo);
		}

		WorldInfo .prototype = $.extend (Object .create (X3DInfoNode .prototype),
		{
			constructor: WorldInfo,
			fieldDefinitions: new FieldDefinitionArray ([
				new X3DFieldDefinition (X3DConstants .inputOutput,    "metadata", new SFNode ()),
				new X3DFieldDefinition (X3DConstants .initializeOnly, "title",    new SFString ("")),
				new X3DFieldDefinition (X3DConstants .initializeOnly, "info",     new MFString ()),
			]),
			getTypeName: function ()
			{
				return "WorldInfo";
			},
			getComponentName: function ()
			{
				return "Core";
			},
			getContainerField: function ()
			{
				return "children";
			},
		});

		return WorldInfo;
	}
});



define ('cobweb/Configuration/SupportedNodes',[
	"cobweb/Components/Networking/Anchor",
	"cobweb/Components/Shape/Appearance",
	//"cobweb/Components/Geometry2D/Arc2D",
	//"cobweb/Components/Geometry2D/ArcClose2D",
	"cobweb/Components/Sound/AudioClip",
	"cobweb/Components/EnvironmentalEffects/Background",
	//"cobweb/Components/RigidBodyPhysics/BallJoint",
	"cobweb/Components/Navigation/Billboard",
	//"cobweb/Components/EventUtilities/BooleanFilter",
	//"cobweb/Components/EventUtilities/BooleanSequencer",
	//"cobweb/Components/EventUtilities/BooleanToggle",
	//"cobweb/Components/EventUtilities/BooleanTrigger",
	//"cobweb/Components/ParticleSystems/BoundedPhysicsModel",
	"cobweb/Components/Geometry3D/Box",
	//"cobweb/Components/CADGeometry/CADAssembly",
	//"cobweb/Components/CADGeometry/CADFace",
	//"cobweb/Components/CADGeometry/CADLayer",
	//"cobweb/Components/CADGeometry/CADPart",
	//"cobweb/Components/Geometry2D/Circle2D",
	//"cobweb/Components/Rendering/ClipPlane",
	//"cobweb/Components/RigidBodyPhysics/CollidableOffset",
	//"cobweb/Components/RigidBodyPhysics/CollidableShape",
	"cobweb/Components/Navigation/Collision",
	//"cobweb/Components/RigidBodyPhysics/CollisionCollection",
	//"cobweb/Components/RigidBodyPhysics/CollisionSensor",
	//"cobweb/Components/RigidBodyPhysics/CollisionSpace",
	"cobweb/Components/Rendering/Color",
	//"cobweb/Components/Followers/ColorChaser",
	//"cobweb/Components/Followers/ColorDamper",
	"cobweb/Components/Interpolation/ColorInterpolator",
	"cobweb/Components/Rendering/ColorRGBA",
	//"cobweb/Components/CubeMapTexturing/ComposedCubeMapTexture",
	"cobweb/Components/Shaders/ComposedShader",
	//"cobweb/Components/Texturing3D/ComposedTexture3D",
	"cobweb/Components/Geometry3D/Cone",
	//"cobweb/Components/ParticleSystems/ConeEmitter",
	//"cobweb/Components/RigidBodyPhysics/Contact",
	//"cobweb/Components/NURBS/Contour2D",
	//"cobweb/Components/NURBS/ContourPolyline2D",
	"cobweb/Components/Rendering/Coordinate",
	//"cobweb/Components/Followers/CoordinateChaser",
	//"cobweb/Components/Followers/CoordinateDamper",
	//"cobweb/Components/NURBS/CoordinateDouble",
	"cobweb/Components/Interpolation/CoordinateInterpolator",
	"cobweb/Components/Interpolation/CoordinateInterpolator2D",
	"cobweb/Components/Geometry3D/Cylinder",
	"cobweb/Components/PointingDeviceSensor/CylinderSensor",
	//"cobweb/Components/DIS/DISEntityManager",
	//"cobweb/Components/DIS/DISEntityTypeMapping",
	"cobweb/Components/Lighting/DirectionalLight",
	//"cobweb/Components/Geometry2D/Disk2D",
	//"cobweb/Components/RigidBodyPhysics/DoubleAxisHingeJoint",
	"cobweb/Components/Interpolation/EaseInEaseOut",
	"cobweb/Components/Geometry3D/ElevationGrid",
	//"cobweb/Components/DIS/EspduTransform",
	//"cobweb/Components/ParticleSystems/ExplosionEmitter",
	"cobweb/Components/Geometry3D/Extrusion",
	//"cobweb/Components/Shape/FillProperties",
	//"cobweb/Components/Shaders/FloatVertexAttribute",
	"cobweb/Components/EnvironmentalEffects/Fog",
	//"cobweb/Components/EnvironmentalEffects/FogCoordinate",
	"cobweb/Components/Text/FontStyle",
	//"cobweb/Components/ParticleSystems/ForcePhysicsModel",
	//"cobweb/Components/CubeMapTexturing/GeneratedCubeMapTexture",
	//"cobweb/Components/Geospatial/GeoCoordinate",
	//"cobweb/Components/Geospatial/GeoElevationGrid",
	//"cobweb/Components/Geospatial/GeoLOD",
	//"cobweb/Components/Geospatial/GeoLocation",
	//"cobweb/Components/Geospatial/GeoMetadata",
	//"cobweb/Components/Geospatial/GeoOrigin",
	//"cobweb/Components/Geospatial/GeoPositionInterpolator",
	//"cobweb/Components/Geospatial/GeoProximitySensor",
	//"cobweb/Components/Geospatial/GeoTouchSensor",
	//"cobweb/Components/Geospatial/GeoTransform",
	//"cobweb/Components/Geospatial/GeoViewpoint",
	"cobweb/Components/Grouping/Group",
	//"cobweb/Components/H-Anim/HAnimDisplacer",
	//"cobweb/Components/H-Anim/HAnimHumanoid",
	//"cobweb/Components/H-Anim/HAnimJoint",
	//"cobweb/Components/H-Anim/HAnimSegment",
	//"cobweb/Components/H-Anim/HAnimSite",
	//"cobweb/Components/CubeMapTexturing/ImageCubeMapTexture",
	"cobweb/Components/Texturing/ImageTexture",
	//"cobweb/Components/Texturing3D/ImageTexture3D",
	"cobweb/Components/Geometry3D/IndexedFaceSet",
	"cobweb/Components/Rendering/IndexedLineSet",
	//"cobweb/Components/CADGeometry/IndexedQuadSet",
	//"cobweb/Components/Rendering/IndexedTriangleFanSet",
	//"cobweb/Components/Rendering/IndexedTriangleSet",
	//"cobweb/Components/Rendering/IndexedTriangleStripSet",
	"cobweb/Components/Networking/Inline",
	//"cobweb/Components/EventUtilities/IntegerSequencer",
	//"cobweb/Components/EventUtilities/IntegerTrigger",
	//"cobweb/Components/KeyDeviceSensor/KeySensor",
	"cobweb/Components/Navigation/LOD",
	"cobweb/Components/Layering/Layer",
	"cobweb/Components/Layering/LayerSet",
	//"cobweb/Components/Layout/Layout",
	//"cobweb/Components/Layout/LayoutGroup",
	//"cobweb/Components/Layout/LayoutLayer",
	//"cobweb/Components/Picking/LinePickSensor",
	//"cobweb/Components/Shape/LineProperties",
	//"cobweb/Components/Rendering/LineSet",
	//"cobweb/Components/Networking/LoadSensor",
	//"cobweb/Components/EnvironmentalEffects/LocalFog",
	"cobweb/Components/Shape/Material",
	//"cobweb/Components/Shaders/Matrix3VertexAttribute",
	//"cobweb/Components/Shaders/Matrix4VertexAttribute",
	//"cobweb/Components/Core/MetadataBoolean",
	//"cobweb/Components/Core/MetadataDouble",
	//"cobweb/Components/Core/MetadataFloat",
	//"cobweb/Components/Core/MetadataInteger",
	//"cobweb/Components/Core/MetadataSet",
	//"cobweb/Components/Core/MetadataString",
	//"cobweb/Components/RigidBodyPhysics/MotorJoint",
	"cobweb/Components/Texturing/MovieTexture",
	//"cobweb/Components/Texturing/MultiTexture",
	//"cobweb/Components/Texturing/MultiTextureCoordinate",
	//"cobweb/Components/Texturing/MultiTextureTransform",
	"cobweb/Components/Navigation/NavigationInfo",
	"cobweb/Components/Rendering/Normal",
	"cobweb/Components/Interpolation/NormalInterpolator",
	//"cobweb/Components/NURBS/NurbsCurve",
	//"cobweb/Components/NURBS/NurbsCurve2D",
	//"cobweb/Components/NURBS/NurbsOrientationInterpolator",
	//"cobweb/Components/NURBS/NurbsPatchSurface",
	//"cobweb/Components/NURBS/NurbsPositionInterpolator",
	//"cobweb/Components/NURBS/NurbsSet",
	//"cobweb/Components/NURBS/NurbsSurfaceInterpolator",
	//"cobweb/Components/NURBS/NurbsSweptSurface",
	//"cobweb/Components/NURBS/NurbsSwungSurface",
	//"cobweb/Components/NURBS/NurbsTextureCoordinate",
	//"cobweb/Components/NURBS/NurbsTrimmedSurface",
	//"cobweb/Components/Followers/OrientationChaser",
	//"cobweb/Components/Followers/OrientationDamper",
	"cobweb/Components/Interpolation/OrientationInterpolator",
	//"cobweb/Components/Navigation/OrthoViewpoint",
	//"cobweb/Components/Shaders/PackagedShader",
	//"cobweb/Components/ParticleSystems/ParticleSystem",
	//"cobweb/Components/Picking/PickableGroup",
	"cobweb/Components/Texturing/PixelTexture",
	//"cobweb/Components/Texturing3D/PixelTexture3D",
	"cobweb/Components/PointingDeviceSensor/PlaneSensor",
	//"cobweb/Components/ParticleSystems/PointEmitter",
	"cobweb/Components/Lighting/PointLight",
	//"cobweb/Components/Picking/PointPickSensor",
	"cobweb/Components/Rendering/PointSet",
	//"cobweb/Components/Geometry2D/Polyline2D",
	//"cobweb/Components/ParticleSystems/PolylineEmitter",
	//"cobweb/Components/Geometry2D/Polypoint2D",
	//"cobweb/Components/Followers/PositionChaser",
	//"cobweb/Components/Followers/PositionChaser2D",
	//"cobweb/Components/Followers/PositionDamper",
	//"cobweb/Components/Followers/PositionDamper2D",
	"cobweb/Components/Interpolation/PositionInterpolator",
	"cobweb/Components/Interpolation/PositionInterpolator2D",
	//"cobweb/Components/Picking/PrimitivePickSensor",
	//"cobweb/Components/Shaders/ProgramShader",
	"cobweb/Components/EnvironmentalSensor/ProximitySensor",
	//"cobweb/Components/CADGeometry/QuadSet",
	//"cobweb/Components/DIS/ReceiverPdu",
	//"cobweb/Components/Geometry2D/Rectangle2D",
	//"cobweb/Components/RigidBodyPhysics/RigidBody",
	//"cobweb/Components/RigidBodyPhysics/RigidBodyCollection",
	//"cobweb/Components/Followers/ScalarChaser",
	//"cobweb/Components/Followers/ScalarDamper",
	"cobweb/Components/Interpolation/ScalarInterpolator",
	//"cobweb/Components/Layout/ScreenFontStyle",
	//"cobweb/Components/Layout/ScreenGroup",
	"cobweb/Components/Scripting/Script",
	"cobweb/Components/Shaders/ShaderPart",
	//"cobweb/Components/Shaders/ShaderProgram",
	"cobweb/Components/Shape/Shape",
	//"cobweb/Components/DIS/SignalPdu",
	//"cobweb/Components/RigidBodyPhysics/SingleAxisHingeJoint",
	//"cobweb/Components/RigidBodyPhysics/SliderJoint",
	"cobweb/Components/Sound/Sound",
	"cobweb/Components/Geometry3D/Sphere",
	"cobweb/Components/PointingDeviceSensor/SphereSensor",
	//"cobweb/Components/Interpolation/SplinePositionInterpolator",
	//"cobweb/Components/Interpolation/SplinePositionInterpolator2D",
	//"cobweb/Components/Interpolation/SplineScalarInterpolator",
	"cobweb/Components/Lighting/SpotLight",
	//"cobweb/Components/Interpolation/SquadOrientationInterpolator",
	//"cobweb/Components/Grouping/StaticGroup",
	//"cobweb/Components/KeyDeviceSensor/StringSensor",
	//"cobweb/Components/ParticleSystems/SurfaceEmitter",
	"cobweb/Components/Grouping/Switch",
	//"cobweb/Components/Followers/TexCoordChaser2D",
	//"cobweb/Components/Followers/TexCoordDamper2D",
	"cobweb/Components/Text/Text",
	//"cobweb/Components/EnvironmentalEffects/TextureBackground",
	"cobweb/Components/Texturing/TextureCoordinate",
	//"cobweb/Components/Texturing3D/TextureCoordinate3D",
	//"cobweb/Components/Texturing3D/TextureCoordinate4D",
	//"cobweb/Components/Texturing/TextureCoordinateGenerator",
	//"cobweb/Components/Texturing/TextureProperties",
	"cobweb/Components/Texturing/TextureTransform",
	//"cobweb/Components/Texturing3D/TextureTransform3D",
	//"cobweb/Components/Texturing3D/TextureTransformMatrix3D",
	"cobweb/Components/Time/TimeSensor",
	//"cobweb/Components/EventUtilities/TimeTrigger",
	//"cobweb/Components/Titania/TouchGroup",
	"cobweb/Components/PointingDeviceSensor/TouchSensor",
	"cobweb/Components/Grouping/Transform",
	//"cobweb/Components/EnvironmentalSensor/TransformSensor",
	//"cobweb/Components/DIS/TransmitterPdu",
	//"cobweb/Components/Rendering/TriangleFanSet",
	//"cobweb/Components/Rendering/TriangleSet",
	//"cobweb/Components/Geometry2D/TriangleSet2D",
	//"cobweb/Components/Rendering/TriangleStripSet",
	//"cobweb/Components/Shape/TwoSidedMaterial",
	//"cobweb/Components/RigidBodyPhysics/UniversalJoint",
	"cobweb/Components/Navigation/Viewpoint",
	//"cobweb/Components/Navigation/ViewpointGroup",
	//"cobweb/Components/Layering/Viewport",
	"cobweb/Components/EnvironmentalSensor/VisibilitySensor",
	//"cobweb/Components/ParticleSystems/VolumeEmitter",
	//"cobweb/Components/Picking/VolumePickSensor",
	//"cobweb/Components/ParticleSystems/WindPhysicsModel",
	"cobweb/Components/Core/WorldInfo",
	"cobweb/Components/Core/X3DPrototypeInstance",
],
function (Anchor,
          Appearance,
          //Arc2D,
          //ArcClose2D,
          AudioClip,
          Background,
          //BallJoint,
          Billboard,
          //BooleanFilter,
          //BooleanSequencer,
          //BooleanToggle,
          //BooleanTrigger,
          //BoundedPhysicsModel,
          Box,
          //CADAssembly,
          //CADFace,
          //CADLayer,
          //CADPart,
          //Circle2D,
          //ClipPlane,
          //CollidableOffset,
          //CollidableShape,
          Collision,
          //CollisionCollection,
          //CollisionSensor,
          //CollisionSpace,
          Color,
          //ColorChaser,
          //ColorDamper,
          ColorInterpolator,
          ColorRGBA,
          //ComposedCubeMapTexture,
          ComposedShader,
          //ComposedTexture3D,
          Cone,
          //ConeEmitter,
          //Contact,
          //Contour2D,
          //ContourPolyline2D,
          Coordinate,
          //CoordinateChaser,
          //CoordinateDamper,
          //CoordinateDouble,
          CoordinateInterpolator,
          CoordinateInterpolator2D,
          Cylinder,
          CylinderSensor,
          //DISEntityManager,
          //DISEntityTypeMapping,
          DirectionalLight,
          //Disk2D,
          //DoubleAxisHingeJoint,
          EaseInEaseOut,
          ElevationGrid,
          //EspduTransform,
          //ExplosionEmitter,
          Extrusion,
          //FillProperties,
          //FloatVertexAttribute,
          Fog,
          //FogCoordinate,
          FontStyle,
          //ForcePhysicsModel,
          //GeneratedCubeMapTexture,
          //GeoCoordinate,
          //GeoElevationGrid,
          //GeoLOD,
          //GeoLocation,
          //GeoMetadata,
          //GeoOrigin,
          //GeoPositionInterpolator,
          //GeoProximitySensor,
          //GeoTouchSensor,
          //GeoTransform,
          //GeoViewpoint,
          Group,
          //HAnimDisplacer,
          //HAnimHumanoid,
          //HAnimJoint,
          //HAnimSegment,
          //HAnimSite,
          //ImageCubeMapTexture,
          ImageTexture,
          //ImageTexture3D,
          IndexedFaceSet,
          IndexedLineSet,
          //IndexedQuadSet,
          //IndexedTriangleFanSet,
          //IndexedTriangleSet,
          //IndexedTriangleStripSet,
          Inline,
          //IntegerSequencer,
          //IntegerTrigger,
          //KeySensor,
          LOD,
          Layer,
          LayerSet,
          //Layout,
          //LayoutGroup,
          //LayoutLayer,
          //LinePickSensor,
          //LineProperties,
          //LineSet,
          //LoadSensor,
          //LocalFog,
          Material,
          //Matrix3VertexAttribute,
          //Matrix4VertexAttribute,
          //MetadataBoolean,
          //MetadataDouble,
          //MetadataFloat,
          //MetadataInteger,
          //MetadataSet,
          //MetadataString,
          //MotorJoint,
          MovieTexture,
          //MultiTexture,
          //MultiTextureCoordinate,
          //MultiTextureTransform,
          NavigationInfo,
          Normal,
          NormalInterpolator,
          //NurbsCurve,
          //NurbsCurve2D,
          //NurbsOrientationInterpolator,
          //NurbsPatchSurface,
          //NurbsPositionInterpolator,
          //NurbsSet,
          //NurbsSurfaceInterpolator,
          //NurbsSweptSurface,
          //NurbsSwungSurface,
          //NurbsTextureCoordinate,
          //NurbsTrimmedSurface,
          //OrientationChaser,
          //OrientationDamper,
          OrientationInterpolator,
          //OrthoViewpoint,
          //PackagedShader,
          //ParticleSystem,
          //PickableGroup,
          PixelTexture,
          //PixelTexture3D,
          PlaneSensor,
          //PointEmitter,
          PointLight,
          //PointPickSensor,
          PointSet,
          //Polyline2D,
          //PolylineEmitter,
          //Polypoint2D,
          //PositionChaser,
          //PositionChaser2D,
          //PositionDamper,
          //PositionDamper2D,
          PositionInterpolator,
          PositionInterpolator2D,
          //PrimitivePickSensor,
          //ProgramShader,
          ProximitySensor,
          //QuadSet,
          //ReceiverPdu,
          //Rectangle2D,
          //RigidBody,
          //RigidBodyCollection,
          //ScalarChaser,
          //ScalarDamper,
          ScalarInterpolator,
          //ScreenFontStyle,
          //ScreenGroup,
          Script,
          ShaderPart,
          //ShaderProgram,
          Shape,
          //SignalPdu,
          //SingleAxisHingeJoint,
          //SliderJoint,
          Sound,
          Sphere,
          SphereSensor,
          //SplinePositionInterpolator,
          //SplinePositionInterpolator2D,
          //SplineScalarInterpolator,
          SpotLight,
          //SquadOrientationInterpolator,
          //StaticGroup,
          //StringSensor,
          //SurfaceEmitter,
          Switch,
          //TexCoordChaser2D,
          //TexCoordDamper2D,
          Text,
          //TextureBackground,
          TextureCoordinate,
          //TextureCoordinate3D,
          //TextureCoordinate4D,
          //TextureCoordinateGenerator,
          //TextureProperties,
          TextureTransform,
          //TextureTransform3D,
          //TextureTransformMatrix3D,
          TimeSensor,
          //TimeTrigger,
          //TouchGroup,
          TouchSensor,
          Transform,
          //TransformSensor,
          //TransmitterPdu,
          //TriangleFanSet,
          //TriangleSet,
          //TriangleSet2D,
          //TriangleStripSet,
          //TwoSidedMaterial,
          //UniversalJoint,
          Viewpoint,
          //ViewpointGroup,
          //Viewport,
          VisibilitySensor,
          //VolumeEmitter,
          //VolumePickSensor,
          //WindPhysicsModel,
          WorldInfo,
          X3DPrototypeInstance)
{
	var xml =
	{
		Anchor:                       Anchor,
		Appearance:                   Appearance,
		//Arc2D:                        Arc2D,
		//ArcClose2D:                   ArcClose2D,
		AudioClip:                    AudioClip,
		Background:                   Background,
		//BallJoint:                    BallJoint,
		Billboard:                    Billboard,
		//BooleanFilter:                BooleanFilter,
		//BooleanSequencer:             BooleanSequencer,
		//BooleanToggle:                BooleanToggle,
		//BooleanTrigger:               BooleanTrigger,
		//BoundedPhysicsModel:          BoundedPhysicsModel,
		Box:                          Box,
		//CADAssembly:                  CADAssembly,
		//CADFace:                      CADFace,
		//CADLayer:                     CADLayer,
		//CADPart:                      CADPart,
		//Circle2D:                     Circle2D,
		//ClipPlane:                    ClipPlane,
		//CollidableOffset:             CollidableOffset,
		//CollidableShape:              CollidableShape,
		Collision:                    Collision,
		//CollisionCollection:          CollisionCollection,
		//CollisionSensor:              CollisionSensor,
		//CollisionSpace:               CollisionSpace,
		Color:                        Color,
		//ColorChaser:                  ColorChaser,
		//ColorDamper:                  ColorDamper,
		ColorInterpolator:            ColorInterpolator,
		ColorRGBA:                    ColorRGBA,
		//ComposedCubeMapTexture:       ComposedCubeMapTexture,
		ComposedShader:               ComposedShader,
		//ComposedTexture3D:            ComposedTexture3D,
		Cone:                         Cone,
		//ConeEmitter:                  ConeEmitter,
		//Contact:                      Contact,
		//Contour2D:                    Contour2D,
		//ContourPolyline2D:            ContourPolyline2D,
		Coordinate:                   Coordinate,
		//CoordinateChaser:             CoordinateChaser,
		//CoordinateDamper:             CoordinateDamper,
		//CoordinateDouble:             CoordinateDouble,
		CoordinateInterpolator:       CoordinateInterpolator,
		CoordinateInterpolator2D:     CoordinateInterpolator2D,
		Cylinder:                     Cylinder,
		CylinderSensor:               CylinderSensor,
		//DISEntityManager:             DISEntityManager,
		//DISEntityTypeMapping:         DISEntityTypeMapping,
		DirectionalLight:             DirectionalLight,
		//Disk2D:                       Disk2D,
		//DoubleAxisHingeJoint:         DoubleAxisHingeJoint,
		EaseInEaseOut:                EaseInEaseOut,
		ElevationGrid:                ElevationGrid,
		//EspduTransform:               EspduTransform,
		//ExplosionEmitter:             ExplosionEmitter,
		Extrusion:                    Extrusion,
		//FillProperties:               FillProperties,
		//FloatVertexAttribute:         FloatVertexAttribute,
		Fog:                          Fog,
		//FogCoordinate:                FogCoordinate,
		FontStyle:                    FontStyle,
		//ForcePhysicsModel:            ForcePhysicsModel,
		//GeneratedCubeMapTexture:      GeneratedCubeMapTexture,
		//GeoCoordinate:                GeoCoordinate,
		//GeoElevationGrid:             GeoElevationGrid,
		//GeoLOD:                       GeoLOD,
		//GeoLocation:                  GeoLocation,
		//GeoMetadata:                  GeoMetadata,
		//GeoOrigin:                    GeoOrigin,
		//GeoPositionInterpolator:      GeoPositionInterpolator,
		//GeoProximitySensor:           GeoProximitySensor,
		//GeoTouchSensor:               GeoTouchSensor,
		//GeoTransform:                 GeoTransform,
		//GeoViewpoint:                 GeoViewpoint,
		Group:                        Group,
		//HAnimDisplacer:               HAnimDisplacer,
		//HAnimHumanoid:                HAnimHumanoid,
		//HAnimJoint:                   HAnimJoint,
		//HAnimSegment:                 HAnimSegment,
		//HAnimSite:                    HAnimSite,
		//ImageCubeMapTexture:          ImageCubeMapTexture,
		ImageTexture:                 ImageTexture,
		//ImageTexture3D:               ImageTexture3D,
		IndexedFaceSet:               IndexedFaceSet,
		IndexedLineSet:               IndexedLineSet,
		//IndexedQuadSet:               IndexedQuadSet,
		//IndexedTriangleFanSet:        IndexedTriangleFanSet,
		//IndexedTriangleSet:           IndexedTriangleSet,
		//IndexedTriangleStripSet:      IndexedTriangleStripSet,
		Inline:                       Inline,
		//IntegerSequencer:             IntegerSequencer,
		//IntegerTrigger:               IntegerTrigger,
		//KeySensor:                    KeySensor,
		LOD:                          LOD,
		Layer:                        Layer,
		LayerSet:                     LayerSet,
		//Layout:                       Layout,
		//LayoutGroup:                  LayoutGroup,
		//LayoutLayer:                  LayoutLayer,
		//LinePickSensor:               LinePickSensor,
		//LineProperties:               LineProperties,
		//LineSet:                      LineSet,
		//LoadSensor:                   LoadSensor,
		//LocalFog:                     LocalFog,
		Material:                     Material,
		//Matrix3VertexAttribute:       Matrix3VertexAttribute,
		//Matrix4VertexAttribute:       Matrix4VertexAttribute,
		//MetadataBoolean:              MetadataBoolean,
		//MetadataDouble:               MetadataDouble,
		//MetadataFloat:                MetadataFloat,
		//MetadataInteger:              MetadataInteger,
		//MetadataSet:                  MetadataSet,
		//MetadataString:               MetadataString,
		//MotorJoint:                   MotorJoint,
		MovieTexture:                 MovieTexture,
		//MultiTexture:                 MultiTexture,
		//MultiTextureCoordinate:       MultiTextureCoordinate,
		//MultiTextureTransform:        MultiTextureTransform,
		NavigationInfo:               NavigationInfo,
		Normal:                       Normal,
		NormalInterpolator:           NormalInterpolator,
		//NurbsCurve:                   NurbsCurve,
		//NurbsCurve2D:                 NurbsCurve2D,
		//NurbsOrientationInterpolator: NurbsOrientationInterpolator,
		//NurbsPatchSurface:            NurbsPatchSurface,
		//NurbsPositionInterpolator:    NurbsPositionInterpolator,
		//NurbsSet:                     NurbsSet,
		//NurbsSurfaceInterpolator:     NurbsSurfaceInterpolator,
		//NurbsSweptSurface:            NurbsSweptSurface,
		//NurbsSwungSurface:            NurbsSwungSurface,
		//NurbsTextureCoordinate:       NurbsTextureCoordinate,
		//NurbsTrimmedSurface:          NurbsTrimmedSurface,
		//OrientationChaser:            OrientationChaser,
		//OrientationDamper:            OrientationDamper,
		OrientationInterpolator:      OrientationInterpolator,
		//OrthoViewpoint:               OrthoViewpoint,
		//PackagedShader:               PackagedShader,
		//ParticleSystem:               ParticleSystem,
		//PickableGroup:                PickableGroup,
		PixelTexture:                 PixelTexture,
		//PixelTexture3D:               PixelTexture3D,
		PlaneSensor:                  PlaneSensor,
		//PointEmitter:                 PointEmitter,
		PointLight:                   PointLight,
		//PointPickSensor:              PointPickSensor,
		PointSet:                     PointSet,
		//Polyline2D:                   Polyline2D,
		//PolylineEmitter:              PolylineEmitter,
		//Polypoint2D:                  Polypoint2D,
		//PositionChaser:               PositionChaser,
		//PositionChaser2D:             PositionChaser2D,
		//PositionDamper:               PositionDamper,
		//PositionDamper2D:             PositionDamper2D,
		PositionInterpolator:         PositionInterpolator,
		PositionInterpolator2D:       PositionInterpolator2D,
		//PrimitivePickSensor:          PrimitivePickSensor,
		//ProgramShader:                ProgramShader,
		ProximitySensor:              ProximitySensor,
		//QuadSet:                      QuadSet,
		//ReceiverPdu:                  ReceiverPdu,
		//Rectangle2D:                  Rectangle2D,
		//RigidBody:                    RigidBody,
		//RigidBodyCollection:          RigidBodyCollection,
		//ScalarChaser:                 ScalarChaser,
		//ScalarDamper:                 ScalarDamper,
		ScalarInterpolator:           ScalarInterpolator,
		//ScreenFontStyle:              ScreenFontStyle,
		//ScreenGroup:                  ScreenGroup,
		Script:                       Script,
		ShaderPart:                   ShaderPart,
		//ShaderProgram:                ShaderProgram,
		Shape:                        Shape,
		//SignalPdu:                    SignalPdu,
		//SingleAxisHingeJoint:         SingleAxisHingeJoint,
		//SliderJoint:                  SliderJoint,
		Sound:                        Sound,
		Sphere:                       Sphere,
		SphereSensor:                 SphereSensor,
		//SplinePositionInterpolator:   SplinePositionInterpolator,
		//SplinePositionInterpolator2D: SplinePositionInterpolator2D,
		//SplineScalarInterpolator:     SplineScalarInterpolator,
		SpotLight:                    SpotLight,
		//SquadOrientationInterpolator: SquadOrientationInterpolator,
		//StaticGroup:                  StaticGroup,
		//StringSensor:                 StringSensor,
		//SurfaceEmitter:               SurfaceEmitter,
		Switch:                       Switch,
		//TexCoordChaser2D:             TexCoordChaser2D,
		//TexCoordDamper2D:             TexCoordDamper2D,
		Text:                         Text,
		//TextureBackground:            TextureBackground,
		TextureCoordinate:            TextureCoordinate,
		//TextureCoordinate3D:          TextureCoordinate3D,
		//TextureCoordinate4D:          TextureCoordinate4D,
		//TextureCoordinateGenerator:   TextureCoordinateGenerator,
		//TextureProperties:            TextureProperties,
		TextureTransform:             TextureTransform,
		//TextureTransform3D:           TextureTransform3D,
		//TextureTransformMatrix3D:     TextureTransformMatrix3D,
		TimeSensor:                   TimeSensor,
		//TimeTrigger:                  TimeTrigger,
		//TouchGroup:                   TouchGroup,
		TouchSensor:                  TouchSensor,
		Transform:                    Transform,
		//TransformSensor:              TransformSensor,
		//TransmitterPdu:               TransmitterPdu,
		//TriangleFanSet:               TriangleFanSet,
		//TriangleSet:                  TriangleSet,
		//TriangleSet2D:                TriangleSet2D,
		//TriangleStripSet:             TriangleStripSet,
		//TwoSidedMaterial:             TwoSidedMaterial,
		//UniversalJoint:               UniversalJoint,
		Viewpoint:                    Viewpoint,
		//ViewpointGroup:               ViewpointGroup,
		//Viewport:                     Viewport,
		VisibilitySensor:             VisibilitySensor,
		//VolumeEmitter:                VolumeEmitter,
		//VolumePickSensor:             VolumePickSensor,
		//WindPhysicsModel:             WindPhysicsModel,
		WorldInfo:                    WorldInfo,
		X3DPrototypeInstance:         X3DPrototypeInstance,
	};

	var dom = { };
	
	for (var typeName in xml)
		dom [typeName .toUpperCase ()] = xml [typeName];

	return {
		xml: xml,
		dom: dom,
	};
});


define ('cobweb/Execution/Scene',[
	"cobweb/Execution/X3DScene",
],
function (X3DScene)
{
	function Scene (browser)
	{
		X3DScene .call (this, browser, this);
	}

	Scene .prototype = $.extend (Object .create (X3DScene .prototype),
	{
		constructor: Scene,
		getTypeName: function ()
		{
			return "Scene";
		},
	});

	return Scene;
});


define ('cobweb/Browser/X3DBrowser',[
	"jquery",
	"cobweb/Fields",
	"cobweb/Browser/X3DBrowserContext",
	"cobweb/Configuration/SupportedNodes",
	"cobweb/Execution/Scene",
	"cobweb/InputOutput/Loader",
	"cobweb/Parser/XMLParser",
	"cobweb/Parser/Parser",
	"cobweb/Bits/X3DConstants",
],
function ($,
          Fields,
          X3DBrowserContext,
          SupportedNodes,
          Scene,
          Loader,
          XMLParser,
          Parser,
          X3DConstants)
{
	with (Fields)
	{
		function X3DBrowser (xml)
		{
			X3DBrowserContext .call (this, xml);

			this .currentSpeed        = 0;
			this .currentFrameRate    = 0;
			this .description_        = "";
			this .supportedNodes      = SupportedNodes;
			this .supportedComponents = undefined;
			this .supportedProfiles   = undefined;
		};

		X3DBrowser .prototype = $.extend (Object .create (X3DBrowserContext .prototype),
		{
			constructor: X3DBrowser,
			initialize: function ()
			{
				X3DBrowserContext .prototype .initialize .call (this);

				// Create an empty scene if any thing goes wrong in loadURL.
				var scene = this .createScene ();

				this .replaceWorld (scene);

				var urlCharacters = this .getXML () [0] .getAttribute ("url");

				if (urlCharacters)
				{
				   var
				      parser = new Parser (scene, "", true),
				      url = new MFString ();

					parser .setInput (urlCharacters);
					parser .mfstringValues (url);

					if (url .length)
						this .loadURL (url);
				}

				this .traverse ();
			},
			getName: function ()
			{
				return this .name;
			},
			getVersion: function ()
			{
				return this .version;
			},
			getCurrentSpeed: function ()
			{
				return this .currentSpeed;
			},
			getCurrentFrameRate: function ()
			{
				return this .currentFrameRate;
			},
			setDescription: function (value)
			{
				this .description = value;
			},
			getWorldURL: function ()
			{
				return this .currentScene .worldURL;
			},
			createScene: function ()
			{
				return new Scene (this);
			},
			replaceWorld: function (scene)
			{
				// Remove world.

				if (this .getWorld ())
				{
					this .isLive () .removeFieldInterest (this .getExecutionContext () .isLive ());
					this .getExecutionContext () .endUpdate ();
					this .shutdown () .processInterests ();
				}
					
				// Replace world.

				this .getCanvas () .stop (true, true) .fadeOut (0);
				this .description = "";

				if (! scene)
					scene = this .createScene ();

				scene .setup ();
				this .setExecutionContext (scene);

				this .isLive () .addFieldInterest (scene .isLive ());
				scene .isLive () .setValue (this .isLive ());

				this .loadCount_ .addFieldCallback ("loading", this .bindWorld .bind (this));
				this .loadCount_ .addEvent ();

				this .initialized () .setValue (this .getCurrentTime ());
			},
			bindWorld: function (value)
			{
				if (value)
					return;

				this .loadCount_ .removeFieldCallback ("loading");

				setTimeout (function ()
				{
					this .getWorld () .bind ();
					this .getCanvas () .fadeIn (2000);
				}
				.bind (this), 0);
			},
			createVrmlFromString: function (vrmlSyntax)
			{
				return this .createX3DFromString (vrmlSyntax);
			},
			createX3DFromString: function (x3dSyntax)
			{
				var
					currentScene = this .currentScene,
					external     = this .isExternal (),
					scene        = new Loader (this .getWorld ()) .createX3DFromString (this .currentScene .getWorldURL (), x3dSyntax);

				if (! external)
					currentScene .isLive () .addFieldInterest (scene .isLive ());

				scene .setup ();

				return scene;
			},
			createVrmlFromURL: function (url, node, event)
			{
				if (! (node instanceof SFNode))
					throw Error ("Browser.createVrmlFromURL: node must be of type SFNode.");

				if (! node .getValue ())
					throw Error ("Browser.createVrmlFromURL: node IS NULL.");

				var field = node .getValue () .getField (event);

				if (field .getType () !== X3DConstants .MFNode)
					throw Error ("Browser.createVrmlFromURL: event named '" + event + "' must be of type MFNode.");

				var
					currentScene = this .currentScene,
					external     = this .isExternal ();

				new Loader (this .getWorld ()) .createX3DFromURL (url,
				function (scene)
				{
					if (scene)
					{
					   if (! external)
					      currentScene .isLive () .addFieldInterest (scene .isLive ());

						scene .setup ();
						scene .beginUpdate ();

						// Handle isLive for script scenes here ...

						// Wait until scene is completely loaded, scene .loadCount_ must be 0.
						field .setValue (scene .rootNodes);
					}
				});
			},
			createX3DFromURL: function (url, event, node)
			{
				if (arguments .length === 3)
				{
					//createX3DFromURL(MFString, String, Object)
					//??? what is String and what is Object ???
					return null;
				}

				var
					currentScene = this .currentScene,
					external     = this .isExternal (),
					scene        = new Loader (this .getWorld ()) .createX3DFromURL (url);

				if (! external)
					currentScene .isLive () .addFieldInterest (scene .isLive ());

				scene .setup ();

				return scene;
			},
			loadURL: function (url, parameter)
			{
				this .addLoadCount (this);

				new Loader (this .getWorld ()) .createX3DFromURL (url,
				function (scene)
				{
					if (scene)
						this .replaceWorld (scene);

					this .removeLoadCount (this);
				}
				.bind (this),
				function (fragment)
				{
					this .currentScene .changeViewpoint (fragment);
					this .removeLoadCount (this);
				}
				.bind (this));
			},
			getRenderingProperty: function (name)
			{
			},
			addBrowserListener: function (callback, object)
			{
			},
			removeBrowserListener: function (callback)
			{	
			},
			importDocument: function (dom)
			{
				if (! dom) return;
				
				new XMLParser (this .currentScene, dom) .parseIntoScene ();

				this .currentScene .setup ();
			},
			setBrowserOption: function (name, value)
			{
				try
				{
					this .getBrowserOptions () .getField (name) .setValue (value);
				}
				catch (error)
				{ }
			},
			getBrowserOption: function (name)
			{
				try
				{
					return this .getBrowserOptions () .getField (name) .getValue ();
				}
				catch (error)
				{ }
			},
			firstViewpoint: function ()
			{
				var activeLayer = this .getActiveLayer ();
			
				if (activeLayer)
				{
					var viewpoints = activeLayer .getUserViewpoints ();

					if (viewpoints .length)
						this .bindViewpoint (viewpoints [0]);
				}
			},
			previousViewpoint: function ()
			{
				var activeLayer = this .getActiveLayer ();

				if (activeLayer)
				{
					var viewpoints = activeLayer .getUserViewpoints ();

					if (viewpoints .length === 0)
						return;

					var index = 0;

					for (var i = 0; i < viewpoints .length; ++ i)
					{
						if (viewpoints [i] .isBound_ .getValue ())
							break;

						++ index;
					}

					if (index < viewpoints .length)
					{
						if (index === 0)
							this .bindViewpoint (viewpoints [viewpoints .length - 1]);

						else
							this .bindViewpoint (viewpoints [index - 1]);
					}
					else
						this .bindViewpoint (viewpoints [viewpoints .length - 1]);
				}
			},
			nextViewpoint: function ()
			{
				var activeLayer = this .getActiveLayer ();

				if (activeLayer)
				{
					var viewpoints = activeLayer .getUserViewpoints ();

					if (viewpoints .length === 0)
						return;

					var index = 0;

					for (var i = 0; i < viewpoints .length; ++ i)
					{
						if (viewpoints [i] .isBound_ .getValue ())
							break;

						++ index;
					}

					if (index < viewpoints .length)
					{
						if (index === viewpoints .length - 1)
							this .bindViewpoint (viewpoints [0]);

						else
							this .bindViewpoint (viewpoints [index + 1]);
					}
					else
						this .bindViewpoint (viewpoints [0]);
				}
			},
			lastViewpoint: function ()
			{
				var activeLayer = this .getActiveLayer ();

				if (activeLayer)
				{
					var viewpoints = activeLayer .getUserViewpoints ();

					if (viewpoints .length)
						this .bindViewpoint (viewpoints [viewpoints .length - 1]);
				}
			},
			changeViewpoint: function (name)
			{
				try
				{
					this .currentScene .changeViewpoint (name);
				}
				catch (error)
				{
					console .log (error .message);
				}
			},
			bindViewpoint: function (viewpoint)
			{
				if (viewpoint .isBound_ .getValue ())
					viewpoint .transitionStart (null, viewpoint);

				else
					viewpoint .set_bind_ = true;

				this .getNotification () .string_ = viewpoint .description_;
			},
			addRoute: function (fromNode, fromEventOut, toNode, toEventIn)
			{
				this .currentScene .addRoute (fromNode, fromEventOut, toNode, toEventIn);
			},
			deleteRoute: function (fromNode, fromEventOut, toNode, toEventIn)
			{
				try
				{
					this .currentScene .deleteRoute (this .currentScene .getRoute (fromNode, fromEventOut, toNode, toEventIn));
				}
				catch (error)
				{
					console .log (error);
				}
			},
			print: function ()
			{
				var string = "";

				for (var i = 0; i < arguments .length; ++ i)
					string += arguments [i];

				console .log (string);
			},
			println: function ()
			{
				var string = "";

				for (var i = 0; i < arguments .length; ++ i)
					string += arguments [i];

				//string += "\n";

				console .log (string);
			},
		});

		Object .defineProperty (X3DBrowser .prototype, "name",
		{
			get: function () { return "Cobweb X3D Browser"; },
			enumerable: true,
			configurable: false
		});

		Object .defineProperty (X3DBrowser .prototype, "version",
		{
			get: function () { return "1.2"; },
			enumerable: true,
			configurable: false
		});

		Object .defineProperty (X3DBrowser .prototype, "description",
		{
			get: function () { return this .description_; },
			set: function (value)
			{
				this .description_                = value;
				this .getNotification () .string_ = value;
			},
			enumerable: true,
			configurable: false
		});

		Object .defineProperty (X3DBrowser .prototype, "currentScene",
		{
			get: function ()
			{
				return this .getScriptStack () [this .getScriptStack () .length - 1] .getExecutionContext ();
			},
			enumerable: true,
			configurable: false
		});

		return X3DBrowser;
	}
});


define ('cobweb/X3D',[
	"jquery",
	"cobweb/Basic/X3DFieldDefinition",
	"cobweb/Basic/FieldDefinitionArray",
	"cobweb/Basic/X3DField",
	"cobweb/Basic/X3DArrayField",
	"cobweb/Fields",
	"cobweb/Browser/X3DBrowser",
	"cobweb/Execution/X3DExecutionContext",
	"cobweb/Execution/X3DScene",
	"cobweb/Prototype/ExternProtoDeclarationArray",
	"cobweb/Prototype/ProtoDeclarationArray",
	"cobweb/Prototype/X3DExternProtoDeclaration",
	"cobweb/Prototype/X3DProtoDeclaration",
	"cobweb/Routing/RouteArray",
	"cobweb/Routing/X3DRoute",
	"cobweb/Bits/X3DConstants",
],
function ($,
          X3DFieldDefinition,
          FieldDefinitionArray,
          X3DField,
          X3DArrayField,
          Fields,
          X3DBrowser,
          X3DExecutionContext,
          X3DScene,
          ExternProtoDeclarationArray,
          ProtoDeclarationArray,
          X3DExternProtoDeclaration,
          X3DProtoDeclaration,
          RouteArray,
          X3DRoute,
          X3DConstants)
{
	// Console fallback

	if (! console)        console        = { };
	if (! console .log)   console .log   = function () { };
	if (! console .info)  console .info  = console .log;
	if (! console .warn)  console .warn  = console .log;
	if (! console .error) console .error = console .log;

	function getBrowser (xml)
	{
		return $(xml) [0] .browser;
	}

	function createBrowser (xml)
	{
		xml = $(xml);

		var browser = new X3DBrowser (xml);

		browser .setup ();
		browser .loadCount_ .addFieldCallback ("loading", browser .bindWorld .bind (browser));
		browser .loadCount_ .addEvent ();

		if (xml .attr ("splashScreen") !== "false")
			browser .getCanvas () .fadeOut (0);

		return browser;
	}

	// X3D

	var deferred = $.Deferred ();

	function X3D (callback)
	{
		if (callback)
			deferred .done (callback);

		if (X3D .initialized)
			return;

		X3D .initialized = true;

		$(document) .ready (function ()
		{
			var elements = $("X3D");
		
			elements .each (function ()
			{
				try
				{
					this .browser = createBrowser (this);
				}
				catch (error)
				{
					fallback ($(this), error);
				}
			});

			if (elements .length)
				deferred .resolve (elements);
		});
	}

	function error (what)
	{
		$(document) .ready (function ()
		{
			$("X3D") .each (function ()
			{
				fallback ($(this), what);
			});
		});
	}

	function fallback (node, error)
	{
		node .children ("canvas") .remove ();
		$("<div/>") .appendTo (node) .addClass ("fallback");
		this .console .log ("Unable to initialize Cobweb. Your browser may not support it.");
		this .console .log (error);
	}

	return $.extend (X3D,
		Fields,
	{
		initialized:                 false,
		getBrowser:                  getBrowser,
		createBrowser:               createBrowser,
		error:                       error,
		X3DConstants:                X3DConstants,
		X3DFieldDefinition:          X3DFieldDefinition,
		FieldDefinitionArray:        FieldDefinitionArray,
		X3DField:                    X3DField,
		X3DArrayField:               X3DArrayField,
		X3DExecutionContext:         X3DExecutionContext,
		X3DScene:                    X3DScene,
		ExternProtoDeclarationArray: ExternProtoDeclarationArray,
		ProtoDeclarationArray:       ProtoDeclarationArray,
		X3DExterProtonDeclaration:   X3DExternProtoDeclaration,
		X3DProtoDeclaration:         X3DProtoDeclaration,
		RouteArray:                  RouteArray,
		X3DRoute:                    X3DRoute,
	});
});


require (["cobweb/X3D"],
function (X3D)
{
	/*
	X3D (function (dom)
	{
		var Browser = X3D .getBrowser (dom);
		Browser .print ("Welcome to " + Browser .name + " X3D Browser " + Browser .version + ":\n" +
		                "        Current Graphics Renderer\n" +
		                "                Name: " + Browser .getVendor () + " " + Browser .getWebGLVersion () + "\n" +
		                "                Shading language: " + Browser .getShadingLanguageVersion () + "\n" +
		                "        Rendering Properties\n" +
		                "                Texture units: " + Browser .getMaxTextureUnits () + " / " + Browser .getMaxCombinedTextureUnits () + "\n" +
		                "                Max texture size: " + Browser .getMaxTextureSize () + " √ó " + Browser .getMaxTextureSize () + " pixel\n" +
		                "                Max lights: 0\n" +
		                "                Max vertex uniform vectors: " + Browser .getMaxVertexUniformVectors () + "\n" +
		                "                Max fragment uniform vectors: " + Browser .getMaxFragmentUniformVectors () + "\n" +
		                "                Max vertex attribs: " + Browser .getMaxVertexAttribs () + "\n" +
		                "                Antialiased: " + Browser .getAntialiased () + "\n" +
		                "                Color depth: " + Browser .getColorDepth () + " bits\n");
	});
	*/
});

define("cobweb.js", function(){});
